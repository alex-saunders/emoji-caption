/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 45);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(31);\n\n__webpack_require__(59);\n\n__webpack_require__(61);\n\n__webpack_require__(62);\n\n__webpack_require__(63);\n\n__webpack_require__(64);\n\n__webpack_require__(65);\n\n__webpack_require__(66);\n\n__webpack_require__(69);\n\n// bc\nPolymer.Base = Polymer.LegacyElementMixin(HTMLElement).prototype;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9wb2x5bWVyLmh0bWw/ZmU3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vbGliL2xlZ2FjeS9sZWdhY3ktZWxlbWVudC1taXhpbi5odG1sJyk7XG5cbnJlcXVpcmUoJy4vbGliL2xlZ2FjeS9wb2x5bWVyLWZuLmh0bWwnKTtcblxucmVxdWlyZSgnLi9saWIvbGVnYWN5L3RlbXBsYXRpemVyLWJlaGF2aW9yLmh0bWwnKTtcblxucmVxdWlyZSgnLi9saWIvZWxlbWVudHMvZG9tLWJpbmQuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2xpYi9lbGVtZW50cy9kb20tcmVwZWF0Lmh0bWwnKTtcblxucmVxdWlyZSgnLi9saWIvZWxlbWVudHMvZG9tLWlmLmh0bWwnKTtcblxucmVxdWlyZSgnLi9saWIvZWxlbWVudHMvYXJyYXktc2VsZWN0b3IuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2xpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmh0bWwnKTtcblxuLy8gYmNcblBvbHltZXIuQmFzZSA9IFBvbHltZXIuTGVnYWN5RWxlbWVudE1peGluKEhUTUxFbGVtZW50KS5wcm90b3R5cGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvcG9seW1lci5odG1sXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("/* eslint-env browser */\n\nclass RegisterHtmlTemplate {\n  /**\n   * Create a `<template>` element to hold `<dom-module>` content.\n   * This bit of code will execute in the context of the main document,\n   * calling `importNode` on the `<template>`, which in turn triggers\n   * the lifecycle of the `<dom-module>` and allows it to insert its\n   * content into Polymer's global module map. When a Polymer element\n   * boots up it will fetch its template from this module map.\n   * https://github.com/Polymer/polymer/blob/master/lib/mixins/element-mixin.html#L501-L538\n   * @param {string} val A `<dom-module>` as an HTML string\n   */\n  static register(val) {\n    let content;\n    const template = document.createElement('template');\n    template.innerHTML = val;\n    if (template.content) {\n      content = template.content; // eslint-disable-line prefer-destructuring\n    } else {\n      content = document.createDocumentFragment();\n      while (template.firstChild) {\n        content.appendChild(template.firstChild);\n      }\n    }\n    document.importNode(content, true);\n  }\n  /**\n   * Content that will be injected into the main document. This is primarily\n   * for things like `<iron-iconset>` and `<custom-style>` which do not have\n   * templates but rely on HTML Imports ability to apply content to the main\n   * document.\n   * @param {string} val An HTML string\n   */\n  static toBody(val) {\n    const trimmedVal = val.trim();\n    if (trimmedVal) {\n      const div = document.createElement('div');\n      div.innerHTML = trimmedVal;\n      if (div.firstChild) {\n        if (document.body) {\n          document.body.insertBefore(div.firstChild, document.body.firstChild);\n        } else {\n          document.addEventListener('DOMContentLoaded', () => {\n            document.body.insertBefore(div.firstChild, document.body.firstChild);\n          });\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = RegisterHtmlTemplate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUuanM/NzY0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuY2xhc3MgUmVnaXN0ZXJIdG1sVGVtcGxhdGUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQgdG8gaG9sZCBgPGRvbS1tb2R1bGU+YCBjb250ZW50LlxuICAgKiBUaGlzIGJpdCBvZiBjb2RlIHdpbGwgZXhlY3V0ZSBpbiB0aGUgY29udGV4dCBvZiB0aGUgbWFpbiBkb2N1bWVudCxcbiAgICogY2FsbGluZyBgaW1wb3J0Tm9kZWAgb24gdGhlIGA8dGVtcGxhdGU+YCwgd2hpY2ggaW4gdHVybiB0cmlnZ2Vyc1xuICAgKiB0aGUgbGlmZWN5Y2xlIG9mIHRoZSBgPGRvbS1tb2R1bGU+YCBhbmQgYWxsb3dzIGl0IHRvIGluc2VydCBpdHNcbiAgICogY29udGVudCBpbnRvIFBvbHltZXIncyBnbG9iYWwgbW9kdWxlIG1hcC4gV2hlbiBhIFBvbHltZXIgZWxlbWVudFxuICAgKiBib290cyB1cCBpdCB3aWxsIGZldGNoIGl0cyB0ZW1wbGF0ZSBmcm9tIHRoaXMgbW9kdWxlIG1hcC5cbiAgICogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci9ibG9iL21hc3Rlci9saWIvbWl4aW5zL2VsZW1lbnQtbWl4aW4uaHRtbCNMNTAxLUw1MzhcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbCBBIGA8ZG9tLW1vZHVsZT5gIGFzIGFuIEhUTUwgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgcmVnaXN0ZXIodmFsKSB7XG4gICAgbGV0IGNvbnRlbnQ7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbDtcbiAgICBpZiAodGVtcGxhdGUuY29udGVudCkge1xuICAgICAgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIHdoaWxlICh0ZW1wbGF0ZS5maXJzdENoaWxkKSB7XG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQodGVtcGxhdGUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50LmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnRlbnQgdGhhdCB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIG1haW4gZG9jdW1lbnQuIFRoaXMgaXMgcHJpbWFyaWx5XG4gICAqIGZvciB0aGluZ3MgbGlrZSBgPGlyb24taWNvbnNldD5gIGFuZCBgPGN1c3RvbS1zdHlsZT5gIHdoaWNoIGRvIG5vdCBoYXZlXG4gICAqIHRlbXBsYXRlcyBidXQgcmVseSBvbiBIVE1MIEltcG9ydHMgYWJpbGl0eSB0byBhcHBseSBjb250ZW50IHRvIHRoZSBtYWluXG4gICAqIGRvY3VtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsIEFuIEhUTUwgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgdG9Cb2R5KHZhbCkge1xuICAgIGNvbnN0IHRyaW1tZWRWYWwgPSB2YWwudHJpbSgpO1xuICAgIGlmICh0cmltbWVkVmFsKSB7XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSB0cmltbWVkVmFsO1xuICAgICAgaWYgKGRpdi5maXJzdENoaWxkKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoZGl2LmZpcnN0Q2hpbGQsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGRpdi5maXJzdENoaWxkLCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnaXN0ZXJIdG1sVGVtcGxhdGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("\n\n(function () {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   *   standards-based Web Components API's, and makes it easy to build your\n   *   own custom HTML elements.\n   * @param {!PolymerInit} info Prototype for the custom element. It must contain\n   *   an `is` property to specify the element name. Other properties populate\n   *   the element prototype. The `properties`, `observers`, `hostAttributes`,\n   *   and `listeners` properties are processed to create element features.\n   * @return {!Object} Returns a custom element class for the given provided\n   *   prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer = function (info) {\n    return window.Polymer._polymerFn(info);\n  };\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  /* eslint-disable valid-jsdoc */\n  /**\n   * @param {!PolymerInit} info Prototype for the custom element. It must contain\n   *   an `is` property to specify the element name. Other properties populate\n   *   the element prototype. The `properties`, `observers`, `hostAttributes`,\n   *   and `listeners` properties are processed to create element features.\n   * @return {!Object} Returns a custom element class for the given provided\n   *   prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer._polymerFn = function (info) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  };\n  /* eslint-enable */\n\n  window.Polymer.version = '2.1.1';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.JSCompiler_renameProperty = function (prop, obj) {\n    return prop;\n  };\n  /* eslint-enable */\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvYm9vdC5odG1sPzNhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBjb25zdCB1c2VyUG9seW1lciA9IHdpbmRvdy5Qb2x5bWVyO1xuXG4gIC8qKlxuICAgKiBAbmFtZXNwYWNlIFBvbHltZXJcbiAgICogQHN1bW1hcnkgUG9seW1lciBpcyBhIGxpZ2h0d2VpZ2h0IGxpYnJhcnkgYnVpbHQgb24gdG9wIG9mIHRoZSB3ZWJcbiAgICogICBzdGFuZGFyZHMtYmFzZWQgV2ViIENvbXBvbmVudHMgQVBJJ3MsIGFuZCBtYWtlcyBpdCBlYXN5IHRvIGJ1aWxkIHlvdXJcbiAgICogICBvd24gY3VzdG9tIEhUTUwgZWxlbWVudHMuXG4gICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIFByb3RvdHlwZSBmb3IgdGhlIGN1c3RvbSBlbGVtZW50LiBJdCBtdXN0IGNvbnRhaW5cbiAgICogICBhbiBgaXNgIHByb3BlcnR5IHRvIHNwZWNpZnkgdGhlIGVsZW1lbnQgbmFtZS4gT3RoZXIgcHJvcGVydGllcyBwb3B1bGF0ZVxuICAgKiAgIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhlIGBwcm9wZXJ0aWVzYCwgYG9ic2VydmVyc2AsIGBob3N0QXR0cmlidXRlc2AsXG4gICAqICAgYW5kIGBsaXN0ZW5lcnNgIHByb3BlcnRpZXMgYXJlIHByb2Nlc3NlZCB0byBjcmVhdGUgZWxlbWVudCBmZWF0dXJlcy5cbiAgICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBhIGN1c3RvbSBlbGVtZW50IGNsYXNzIGZvciB0aGUgZ2l2ZW4gcHJvdmlkZWRcbiAgICogICBwcm90b3R5cGUgYGluZm9gIG9iamVjdC4gVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgaWYgZ2l2ZW4gYnkgYGluZm8uaXNgLlxuICAgKi9cbiAgd2luZG93LlBvbHltZXIgPSBmdW5jdGlvbiAoaW5mbykge1xuICAgIHJldHVybiB3aW5kb3cuUG9seW1lci5fcG9seW1lckZuKGluZm8pO1xuICB9O1xuXG4gIC8vIHN1cHBvcnQgdXNlciBzZXR0aW5ncyBvbiB0aGUgUG9seW1lciBvYmplY3RcbiAgaWYgKHVzZXJQb2x5bWVyKSB7XG4gICAgT2JqZWN0LmFzc2lnbihQb2x5bWVyLCB1c2VyUG9seW1lcik7XG4gIH1cblxuICAvLyBUbyBiZSBwbHVnZ2VkIGJ5IGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBpZiBsb2FkZWRcbiAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIFByb3RvdHlwZSBmb3IgdGhlIGN1c3RvbSBlbGVtZW50LiBJdCBtdXN0IGNvbnRhaW5cbiAgICogICBhbiBgaXNgIHByb3BlcnR5IHRvIHNwZWNpZnkgdGhlIGVsZW1lbnQgbmFtZS4gT3RoZXIgcHJvcGVydGllcyBwb3B1bGF0ZVxuICAgKiAgIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhlIGBwcm9wZXJ0aWVzYCwgYG9ic2VydmVyc2AsIGBob3N0QXR0cmlidXRlc2AsXG4gICAqICAgYW5kIGBsaXN0ZW5lcnNgIHByb3BlcnRpZXMgYXJlIHByb2Nlc3NlZCB0byBjcmVhdGUgZWxlbWVudCBmZWF0dXJlcy5cbiAgICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBhIGN1c3RvbSBlbGVtZW50IGNsYXNzIGZvciB0aGUgZ2l2ZW4gcHJvdmlkZWRcbiAgICogICBwcm90b3R5cGUgYGluZm9gIG9iamVjdC4gVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgaWYgZ2l2ZW4gYnkgYGluZm8uaXNgLlxuICAgKi9cbiAgd2luZG93LlBvbHltZXIuX3BvbHltZXJGbiA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZCBwb2x5bWVyLmh0bWwgdG8gdXNlIHRoZSBQb2x5bWVyKCkgZnVuY3Rpb24uJyk7XG4gIH07XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICB3aW5kb3cuUG9seW1lci52ZXJzaW9uID0gJzIuMS4xJztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAvKlxuICBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXMgcmVwbGFjZWQgYnkgdGhlIG11bmdlZCBuYW1lIGZvciBvYmplY3RbcHJvcGVydHldXG4gIFdlIGNhbm5vdCBhbGlhcyB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvIHVzZSBhIHNtYWxsIHNoaW0gdGhhdCBoYXMgdGhlIHNhbWUgYmVoYXZpb3Igd2hlbiBub3QgY29tcGlsaW5nLlxuICAqL1xuICB3aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wLCBvYmopIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfTtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvYm9vdC5odG1sXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n\n  let dedupeId = 0;\n\n  /**\n   * @constructor\n   * @extends {Function}\n   */\n  function MixinFunction() {}\n  /** @type {(WeakMap | undefined)} */\n  MixinFunction.prototype.__mixinApplications;\n  /** @type {(Object | undefined)} */\n  MixinFunction.prototype.__mixinSet;\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument. Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @template T\n   * @param {T} mixin ES6 class expression mixin to wrap\n   * @suppress {invalidCasts}\n   */\n  Polymer.dedupingMixin = function (mixin) {\n    let mixinApplications = /** @type {!MixinFunction} */mixin.__mixinApplications;\n    if (!mixinApplications) {\n      mixinApplications = new WeakMap();\n      /** @type {!MixinFunction} */mixin.__mixinApplications = mixinApplications;\n    }\n    // maintain a unique id for each mixin\n    let mixinDedupeId = dedupeId++;\n    function dedupingMixin(base) {\n      let baseSet = /** @type {!MixinFunction} */base.__mixinSet;\n      if (baseSet && baseSet[mixinDedupeId]) {\n        return base;\n      }\n      let map = mixinApplications;\n      let extended = map.get(base);\n      if (!extended) {\n        extended = /** @type {!Function} */mixin(base);\n        map.set(base, extended);\n      }\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      let mixinSet = Object.create( /** @type {!MixinFunction} */extended.__mixinSet || baseSet || null);\n      mixinSet[mixinDedupeId] = true;\n      /** @type {!MixinFunction} */extended.__mixinSet = mixinSet;\n      return extended;\n    }\n\n    return dedupingMixin;\n  };\n  /* eslint-enable valid-jsdoc */\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvbWl4aW4uaHRtbD9iZjY5Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9ib290Lmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gdW5pcXVlIGdsb2JhbCBpZCBmb3IgZGVkdXBpbmcgbWl4aW5zLlxuXG4gIGxldCBkZWR1cGVJZCA9IDA7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7RnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiBNaXhpbkZ1bmN0aW9uKCkge31cbiAgLyoqIEB0eXBlIHsoV2Vha01hcCB8IHVuZGVmaW5lZCl9ICovXG4gIE1peGluRnVuY3Rpb24ucHJvdG90eXBlLl9fbWl4aW5BcHBsaWNhdGlvbnM7XG4gIC8qKiBAdHlwZSB7KE9iamVjdCB8IHVuZGVmaW5lZCl9ICovXG4gIE1peGluRnVuY3Rpb24ucHJvdG90eXBlLl9fbWl4aW5TZXQ7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgLyoqXG4gICAqIFdyYXBzIGFuIEVTNiBjbGFzcyBleHByZXNzaW9uIG1peGluIHN1Y2ggdGhhdCB0aGUgbWl4aW4gaXMgb25seSBhcHBsaWVkXG4gICAqIGlmIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuIGFwcGxpZWQgaXRzIGJhc2UgYXJndW1lbnQuIEFsc28gbWVtb2l6ZXMgbWl4aW5cbiAgICogYXBwbGljYXRpb25zLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcGFyYW0ge1R9IG1peGluIEVTNiBjbGFzcyBleHByZXNzaW9uIG1peGluIHRvIHdyYXBcbiAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAqL1xuICBQb2x5bWVyLmRlZHVwaW5nTWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICBsZXQgbWl4aW5BcHBsaWNhdGlvbnMgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqL21peGluLl9fbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgaWYgKCFtaXhpbkFwcGxpY2F0aW9ucykge1xuICAgICAgbWl4aW5BcHBsaWNhdGlvbnMgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi9taXhpbi5fX21peGluQXBwbGljYXRpb25zID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgfVxuICAgIC8vIG1haW50YWluIGEgdW5pcXVlIGlkIGZvciBlYWNoIG1peGluXG4gICAgbGV0IG1peGluRGVkdXBlSWQgPSBkZWR1cGVJZCsrO1xuICAgIGZ1bmN0aW9uIGRlZHVwaW5nTWl4aW4oYmFzZSkge1xuICAgICAgbGV0IGJhc2VTZXQgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqL2Jhc2UuX19taXhpblNldDtcbiAgICAgIGlmIChiYXNlU2V0ICYmIGJhc2VTZXRbbWl4aW5EZWR1cGVJZF0pIHtcbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgICB9XG4gICAgICBsZXQgbWFwID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgICBsZXQgZXh0ZW5kZWQgPSBtYXAuZ2V0KGJhc2UpO1xuICAgICAgaWYgKCFleHRlbmRlZCkge1xuICAgICAgICBleHRlbmRlZCA9IC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqL21peGluKGJhc2UpO1xuICAgICAgICBtYXAuc2V0KGJhc2UsIGV4dGVuZGVkKTtcbiAgICAgIH1cbiAgICAgIC8vIGNvcHkgaW5oZXJpdGVkIG1peGluIHNldCBmcm9tIHRoZSBleHRlbmRlZCBjbGFzcywgb3IgdGhlIGJhc2UgY2xhc3NcbiAgICAgIC8vIE5PVEU6IHdlIGF2b2lkIHVzZSBvZiBTZXQgaGVyZSBiZWNhdXNlIHNvbWUgYnJvd3NlciAoSUUxMSlcbiAgICAgIC8vIGNhbm5vdCBleHRlbmQgYSBiYXNlIFNldCB2aWEgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgbGV0IG1peGluU2V0ID0gT2JqZWN0LmNyZWF0ZSggLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi9leHRlbmRlZC5fX21peGluU2V0IHx8IGJhc2VTZXQgfHwgbnVsbCk7XG4gICAgICBtaXhpblNldFttaXhpbkRlZHVwZUlkXSA9IHRydWU7XG4gICAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqL2V4dGVuZGVkLl9fbWl4aW5TZXQgPSBtaXhpblNldDtcbiAgICAgIHJldHVybiBleHRlbmRlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVkdXBpbmdNaXhpbjtcbiAgfTtcbiAgLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvbWl4aW4uaHRtbFxuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(27);\n\n(function () {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @customElement\n   * @polymer\n   * @memberof Polymer\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends HTMLElement\n   * @appliesMixin Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n\n  const Element = Polymer.ElementMixin(HTMLElement);\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends {HTMLElement}\n   */\n  Polymer.Element = Element;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9wb2x5bWVyLWVsZW1lbnQuaHRtbD9iYzc0Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9saWIvbWl4aW5zL2VsZW1lbnQtbWl4aW4uaHRtbCcpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXIncyBtZXRhLXByb2dyYW1taW5nXG4gICAqIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLCBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLFxuICAgKiBhbmQgcHJvcGVydHkgY2hhbmdlIG9ic2VydmF0aW9uLlxuICAgKlxuICAgKiBAY3VzdG9tRWxlbWVudFxuICAgKiBAcG9seW1lclxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfRWxlbWVudE1peGlufVxuICAgKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuRWxlbWVudE1peGluXG4gICAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IGJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXInc1xuICAgKiAgIGtleSBtZXRhLXByb2dyYW1taW5nIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLFxuICAgKiAgIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24sIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb25cbiAgICovXG5cbiAgY29uc3QgRWxlbWVudCA9IFBvbHltZXIuRWxlbWVudE1peGluKEhUTUxFbGVtZW50KTtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIFBvbHltZXIuRWxlbWVudCA9IEVsZW1lbnQ7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5odG1sXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(70);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>html{--paper-font-common-base:{font-family:Roboto,Noto,sans-serif;-webkit-font-smoothing:antialiased};--paper-font-common-code:{font-family:'Roboto Mono',Consolas,Menlo,monospace;-webkit-font-smoothing:antialiased};--paper-font-common-expensive-kerning:{text-rendering:optimizeLegibility};--paper-font-common-nowrap:{white-space:nowrap;overflow:hidden;text-overflow:ellipsis};--paper-font-display4:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:112px;font-weight:300;letter-spacing:-.044em;line-height:120px};--paper-font-display3:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:56px;font-weight:400;letter-spacing:-.026em;line-height:60px};--paper-font-display2:{@apply --paper-font-common-base;font-size:45px;font-weight:400;letter-spacing:-.018em;line-height:48px};--paper-font-display1:{@apply --paper-font-common-base;font-size:34px;font-weight:400;letter-spacing:-.01em;line-height:40px};--paper-font-headline:{@apply --paper-font-common-base;font-size:24px;font-weight:400;letter-spacing:-.012em;line-height:32px};--paper-font-title:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:20px;font-weight:500;line-height:28px};--paper-font-subhead:{@apply --paper-font-common-base;font-size:16px;font-weight:400;line-height:24px};--paper-font-body2:{@apply --paper-font-common-base;font-size:14px;font-weight:500;line-height:24px};--paper-font-body1:{@apply --paper-font-common-base;font-size:14px;font-weight:400;line-height:20px};--paper-font-caption:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:12px;font-weight:400;letter-spacing:.011em;line-height:20px};--paper-font-menu:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:13px;font-weight:500;line-height:24px};--paper-font-button:{@apply --paper-font-common-base;@apply --paper-font-common-nowrap;font-size:14px;font-weight:500;letter-spacing:.018em;line-height:24px;text-transform:uppercase};--paper-font-code2:{@apply --paper-font-common-code;font-size:14px;font-weight:700;line-height:20px};--paper-font-code1:{@apply --paper-font-common-code;font-size:14px;font-weight:500;line-height:20px};}</style> </custom-style>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL3R5cG9ncmFwaHkuaHRtbD8wMTFlIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vZm9udC1yb2JvdG8vcm9ib3RvLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUudG9Cb2R5KFwiPGN1c3RvbS1zdHlsZT4gPHN0eWxlIGlzPWN1c3RvbS1zdHlsZT5odG1sey0tcGFwZXItZm9udC1jb21tb24tYmFzZTp7Zm9udC1mYW1pbHk6Um9ib3RvLE5vdG8sc2Fucy1zZXJpZjstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkfTstLXBhcGVyLWZvbnQtY29tbW9uLWNvZGU6e2ZvbnQtZmFtaWx5OidSb2JvdG8gTW9ubycsQ29uc29sYXMsTWVubG8sbW9ub3NwYWNlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWR9Oy0tcGFwZXItZm9udC1jb21tb24tZXhwZW5zaXZlLWtlcm5pbmc6e3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eX07LS1wYXBlci1mb250LWNvbW1vbi1ub3dyYXA6e3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc307LS1wYXBlci1mb250LWRpc3BsYXk0OntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLW5vd3JhcDtmb250LXNpemU6MTEycHg7Zm9udC13ZWlnaHQ6MzAwO2xldHRlci1zcGFjaW5nOi0uMDQ0ZW07bGluZS1oZWlnaHQ6MTIwcHh9Oy0tcGFwZXItZm9udC1kaXNwbGF5Mzp7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1ub3dyYXA7Zm9udC1zaXplOjU2cHg7Zm9udC13ZWlnaHQ6NDAwO2xldHRlci1zcGFjaW5nOi0uMDI2ZW07bGluZS1oZWlnaHQ6NjBweH07LS1wYXBlci1mb250LWRpc3BsYXkyOntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO2ZvbnQtc2l6ZTo0NXB4O2ZvbnQtd2VpZ2h0OjQwMDtsZXR0ZXItc3BhY2luZzotLjAxOGVtO2xpbmUtaGVpZ2h0OjQ4cHh9Oy0tcGFwZXItZm9udC1kaXNwbGF5MTp7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtmb250LXNpemU6MzRweDtmb250LXdlaWdodDo0MDA7bGV0dGVyLXNwYWNpbmc6LS4wMWVtO2xpbmUtaGVpZ2h0OjQwcHh9Oy0tcGFwZXItZm9udC1oZWFkbGluZTp7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtmb250LXNpemU6MjRweDtmb250LXdlaWdodDo0MDA7bGV0dGVyLXNwYWNpbmc6LS4wMTJlbTtsaW5lLWhlaWdodDozMnB4fTstLXBhcGVyLWZvbnQtdGl0bGU6e0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLWJhc2U7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tbm93cmFwO2ZvbnQtc2l6ZToyMHB4O2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoyOHB4fTstLXBhcGVyLWZvbnQtc3ViaGVhZDp7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtmb250LXNpemU6MTZweDtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MjRweH07LS1wYXBlci1mb250LWJvZHkyOntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoyNHB4fTstLXBhcGVyLWZvbnQtYm9keTE6e0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLWJhc2U7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NDAwO2xpbmUtaGVpZ2h0OjIwcHh9Oy0tcGFwZXItZm9udC1jYXB0aW9uOntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLW5vd3JhcDtmb250LXNpemU6MTJweDtmb250LXdlaWdodDo0MDA7bGV0dGVyLXNwYWNpbmc6LjAxMWVtO2xpbmUtaGVpZ2h0OjIwcHh9Oy0tcGFwZXItZm9udC1tZW51OntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLW5vd3JhcDtmb250LXNpemU6MTNweDtmb250LXdlaWdodDo1MDA7bGluZS1oZWlnaHQ6MjRweH07LS1wYXBlci1mb250LWJ1dHRvbjp7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1ub3dyYXA7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOi4wMThlbTtsaW5lLWhlaWdodDoyNHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX07LS1wYXBlci1mb250LWNvZGUyOntAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1jb2RlO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoyMHB4fTstLXBhcGVyLWZvbnQtY29kZTE6e0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLWNvZGU7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjIwcHh9O308L3N0eWxlPiA8L2N1c3RvbS1zdHlsZT5cIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXN0eWxlcy90eXBvZ3JhcGh5Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<style>[hidden]{display:none!important}</style>\");\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>html{--layout:{display:-ms-flexbox;display:-webkit-flex;display:flex};--layout-inline:{display:-ms-inline-flexbox;display:-webkit-inline-flex;display:inline-flex};--layout-horizontal:{@apply --layout;-ms-flex-direction:row;-webkit-flex-direction:row;flex-direction:row};--layout-horizontal-reverse:{@apply --layout;-ms-flex-direction:row-reverse;-webkit-flex-direction:row-reverse;flex-direction:row-reverse};--layout-vertical:{@apply --layout;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column};--layout-vertical-reverse:{@apply --layout;-ms-flex-direction:column-reverse;-webkit-flex-direction:column-reverse;flex-direction:column-reverse};--layout-wrap:{-ms-flex-wrap:wrap;-webkit-flex-wrap:wrap;flex-wrap:wrap};--layout-wrap-reverse:{-ms-flex-wrap:wrap-reverse;-webkit-flex-wrap:wrap-reverse;flex-wrap:wrap-reverse};--layout-flex-auto:{-ms-flex:1 1 auto;-webkit-flex:1 1 auto;flex:1 1 auto};--layout-flex-none:{-ms-flex:none;-webkit-flex:none;flex:none};--layout-flex:{-ms-flex:1 1 .000000001px;-webkit-flex:1;flex:1;-webkit-flex-basis:.000000001px;flex-basis:.000000001px};--layout-flex-2:{-ms-flex:2;-webkit-flex:2;flex:2};--layout-flex-3:{-ms-flex:3;-webkit-flex:3;flex:3};--layout-flex-4:{-ms-flex:4;-webkit-flex:4;flex:4};--layout-flex-5:{-ms-flex:5;-webkit-flex:5;flex:5};--layout-flex-6:{-ms-flex:6;-webkit-flex:6;flex:6};--layout-flex-7:{-ms-flex:7;-webkit-flex:7;flex:7};--layout-flex-8:{-ms-flex:8;-webkit-flex:8;flex:8};--layout-flex-9:{-ms-flex:9;-webkit-flex:9;flex:9};--layout-flex-10:{-ms-flex:10;-webkit-flex:10;flex:10};--layout-flex-11:{-ms-flex:11;-webkit-flex:11;flex:11};--layout-flex-12:{-ms-flex:12;-webkit-flex:12;flex:12};--layout-start:{-ms-flex-align:start;-webkit-align-items:flex-start;align-items:flex-start};--layout-center:{-ms-flex-align:center;-webkit-align-items:center;align-items:center};--layout-end:{-ms-flex-align:end;-webkit-align-items:flex-end;align-items:flex-end};--layout-baseline:{-ms-flex-align:baseline;-webkit-align-items:baseline;align-items:baseline};--layout-start-justified:{-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start};--layout-center-justified:{-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center};--layout-end-justified:{-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end};--layout-around-justified:{-ms-flex-pack:distribute;-webkit-justify-content:space-around;justify-content:space-around};--layout-justified:{-ms-flex-pack:justify;-webkit-justify-content:space-between;justify-content:space-between};--layout-center-center:{@apply --layout-center;@apply --layout-center-justified;};--layout-self-start:{-ms-align-self:flex-start;-webkit-align-self:flex-start;align-self:flex-start};--layout-self-center:{-ms-align-self:center;-webkit-align-self:center;align-self:center};--layout-self-end:{-ms-align-self:flex-end;-webkit-align-self:flex-end;align-self:flex-end};--layout-self-stretch:{-ms-align-self:stretch;-webkit-align-self:stretch;align-self:stretch};--layout-self-baseline:{-ms-align-self:baseline;-webkit-align-self:baseline;align-self:baseline};--layout-start-aligned:{-ms-flex-line-pack:start;-ms-align-content:flex-start;-webkit-align-content:flex-start;align-content:flex-start};--layout-end-aligned:{-ms-flex-line-pack:end;-ms-align-content:flex-end;-webkit-align-content:flex-end;align-content:flex-end};--layout-center-aligned:{-ms-flex-line-pack:center;-ms-align-content:center;-webkit-align-content:center;align-content:center};--layout-between-aligned:{-ms-flex-line-pack:justify;-ms-align-content:space-between;-webkit-align-content:space-between;align-content:space-between};--layout-around-aligned:{-ms-flex-line-pack:distribute;-ms-align-content:space-around;-webkit-align-content:space-around;align-content:space-around};--layout-block:{display:block};--layout-invisible:{visibility:hidden!important};--layout-relative:{position:relative};--layout-fit:{position:absolute;top:0;right:0;bottom:0;left:0};--layout-scroll:{-webkit-overflow-scrolling:touch;overflow:auto};--layout-fullbleed:{margin:0;height:100vh};--layout-fixed-top:{position:fixed;top:0;left:0;right:0};--layout-fixed-right:{position:fixed;top:0;right:0;bottom:0};--layout-fixed-bottom:{position:fixed;right:0;bottom:0;left:0};--layout-fixed-left:{position:fixed;top:0;bottom:0;left:0};}</style> </custom-style>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWw/NTc2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnRvQm9keShcIjxzdHlsZT5baGlkZGVuXXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fTwvc3R5bGU+XCIpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS50b0JvZHkoXCI8Y3VzdG9tLXN0eWxlPiA8c3R5bGUgaXM9Y3VzdG9tLXN0eWxlPmh0bWx7LS1sYXlvdXQ6e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTpmbGV4fTstLWxheW91dC1pbmxpbmU6e2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtZmxleDtkaXNwbGF5OmlubGluZS1mbGV4fTstLWxheW91dC1ob3Jpem9udGFsOntAYXBwbHkgLS1sYXlvdXQ7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Oy0tbGF5b3V0LWhvcml6b250YWwtcmV2ZXJzZTp7QGFwcGx5IC0tbGF5b3V0Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTstd2Via2l0LWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTstLWxheW91dC12ZXJ0aWNhbDp7QGFwcGx5IC0tbGF5b3V0Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufTstLWxheW91dC12ZXJ0aWNhbC1yZXZlcnNlOntAYXBwbHkgLS1sYXlvdXQ7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlOy13ZWJraXQtZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2U7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2V9Oy0tbGF5b3V0LXdyYXA6ey1tcy1mbGV4LXdyYXA6d3JhcDstd2Via2l0LWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwfTstLWxheW91dC13cmFwLXJldmVyc2U6ey1tcy1mbGV4LXdyYXA6d3JhcC1yZXZlcnNlOy13ZWJraXQtZmxleC13cmFwOndyYXAtcmV2ZXJzZTtmbGV4LXdyYXA6d3JhcC1yZXZlcnNlfTstLWxheW91dC1mbGV4LWF1dG86ey1tcy1mbGV4OjEgMSBhdXRvOy13ZWJraXQtZmxleDoxIDEgYXV0bztmbGV4OjEgMSBhdXRvfTstLWxheW91dC1mbGV4LW5vbmU6ey1tcy1mbGV4Om5vbmU7LXdlYmtpdC1mbGV4Om5vbmU7ZmxleDpub25lfTstLWxheW91dC1mbGV4OnstbXMtZmxleDoxIDEgLjAwMDAwMDAwMXB4Oy13ZWJraXQtZmxleDoxO2ZsZXg6MTstd2Via2l0LWZsZXgtYmFzaXM6LjAwMDAwMDAwMXB4O2ZsZXgtYmFzaXM6LjAwMDAwMDAwMXB4fTstLWxheW91dC1mbGV4LTI6ey1tcy1mbGV4OjI7LXdlYmtpdC1mbGV4OjI7ZmxleDoyfTstLWxheW91dC1mbGV4LTM6ey1tcy1mbGV4OjM7LXdlYmtpdC1mbGV4OjM7ZmxleDozfTstLWxheW91dC1mbGV4LTQ6ey1tcy1mbGV4OjQ7LXdlYmtpdC1mbGV4OjQ7ZmxleDo0fTstLWxheW91dC1mbGV4LTU6ey1tcy1mbGV4OjU7LXdlYmtpdC1mbGV4OjU7ZmxleDo1fTstLWxheW91dC1mbGV4LTY6ey1tcy1mbGV4OjY7LXdlYmtpdC1mbGV4OjY7ZmxleDo2fTstLWxheW91dC1mbGV4LTc6ey1tcy1mbGV4Ojc7LXdlYmtpdC1mbGV4Ojc7ZmxleDo3fTstLWxheW91dC1mbGV4LTg6ey1tcy1mbGV4Ojg7LXdlYmtpdC1mbGV4Ojg7ZmxleDo4fTstLWxheW91dC1mbGV4LTk6ey1tcy1mbGV4Ojk7LXdlYmtpdC1mbGV4Ojk7ZmxleDo5fTstLWxheW91dC1mbGV4LTEwOnstbXMtZmxleDoxMDstd2Via2l0LWZsZXg6MTA7ZmxleDoxMH07LS1sYXlvdXQtZmxleC0xMTp7LW1zLWZsZXg6MTE7LXdlYmtpdC1mbGV4OjExO2ZsZXg6MTF9Oy0tbGF5b3V0LWZsZXgtMTI6ey1tcy1mbGV4OjEyOy13ZWJraXQtZmxleDoxMjtmbGV4OjEyfTstLWxheW91dC1zdGFydDp7LW1zLWZsZXgtYWxpZ246c3RhcnQ7LXdlYmtpdC1hbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9Oy0tbGF5b3V0LWNlbnRlcjp7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn07LS1sYXlvdXQtZW5kOnstbXMtZmxleC1hbGlnbjplbmQ7LXdlYmtpdC1hbGlnbi1pdGVtczpmbGV4LWVuZDthbGlnbi1pdGVtczpmbGV4LWVuZH07LS1sYXlvdXQtYmFzZWxpbmU6ey1tcy1mbGV4LWFsaWduOmJhc2VsaW5lOy13ZWJraXQtYWxpZ24taXRlbXM6YmFzZWxpbmU7YWxpZ24taXRlbXM6YmFzZWxpbmV9Oy0tbGF5b3V0LXN0YXJ0LWp1c3RpZmllZDp7LW1zLWZsZXgtcGFjazpzdGFydDstd2Via2l0LWp1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fTstLWxheW91dC1jZW50ZXItanVzdGlmaWVkOnstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWp1c3RpZnktY29udGVudDpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn07LS1sYXlvdXQtZW5kLWp1c3RpZmllZDp7LW1zLWZsZXgtcGFjazplbmQ7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfTstLWxheW91dC1hcm91bmQtanVzdGlmaWVkOnstbXMtZmxleC1wYWNrOmRpc3RyaWJ1dGU7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmR9Oy0tbGF5b3V0LWp1c3RpZmllZDp7LW1zLWZsZXgtcGFjazpqdXN0aWZ5Oy13ZWJraXQtanVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Oy0tbGF5b3V0LWNlbnRlci1jZW50ZXI6e0BhcHBseSAtLWxheW91dC1jZW50ZXI7QGFwcGx5IC0tbGF5b3V0LWNlbnRlci1qdXN0aWZpZWQ7fTstLWxheW91dC1zZWxmLXN0YXJ0OnstbXMtYWxpZ24tc2VsZjpmbGV4LXN0YXJ0Oy13ZWJraXQtYWxpZ24tc2VsZjpmbGV4LXN0YXJ0O2FsaWduLXNlbGY6ZmxleC1zdGFydH07LS1sYXlvdXQtc2VsZi1jZW50ZXI6ey1tcy1hbGlnbi1zZWxmOmNlbnRlcjstd2Via2l0LWFsaWduLXNlbGY6Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyfTstLWxheW91dC1zZWxmLWVuZDp7LW1zLWFsaWduLXNlbGY6ZmxleC1lbmQ7LXdlYmtpdC1hbGlnbi1zZWxmOmZsZXgtZW5kO2FsaWduLXNlbGY6ZmxleC1lbmR9Oy0tbGF5b3V0LXNlbGYtc3RyZXRjaDp7LW1zLWFsaWduLXNlbGY6c3RyZXRjaDstd2Via2l0LWFsaWduLXNlbGY6c3RyZXRjaDthbGlnbi1zZWxmOnN0cmV0Y2h9Oy0tbGF5b3V0LXNlbGYtYmFzZWxpbmU6ey1tcy1hbGlnbi1zZWxmOmJhc2VsaW5lOy13ZWJraXQtYWxpZ24tc2VsZjpiYXNlbGluZTthbGlnbi1zZWxmOmJhc2VsaW5lfTstLWxheW91dC1zdGFydC1hbGlnbmVkOnstbXMtZmxleC1saW5lLXBhY2s6c3RhcnQ7LW1zLWFsaWduLWNvbnRlbnQ6ZmxleC1zdGFydDstd2Via2l0LWFsaWduLWNvbnRlbnQ6ZmxleC1zdGFydDthbGlnbi1jb250ZW50OmZsZXgtc3RhcnR9Oy0tbGF5b3V0LWVuZC1hbGlnbmVkOnstbXMtZmxleC1saW5lLXBhY2s6ZW5kOy1tcy1hbGlnbi1jb250ZW50OmZsZXgtZW5kOy13ZWJraXQtYWxpZ24tY29udGVudDpmbGV4LWVuZDthbGlnbi1jb250ZW50OmZsZXgtZW5kfTstLWxheW91dC1jZW50ZXItYWxpZ25lZDp7LW1zLWZsZXgtbGluZS1wYWNrOmNlbnRlcjstbXMtYWxpZ24tY29udGVudDpjZW50ZXI7LXdlYmtpdC1hbGlnbi1jb250ZW50OmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcn07LS1sYXlvdXQtYmV0d2Vlbi1hbGlnbmVkOnstbXMtZmxleC1saW5lLXBhY2s6anVzdGlmeTstbXMtYWxpZ24tY29udGVudDpzcGFjZS1iZXR3ZWVuOy13ZWJraXQtYWxpZ24tY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn07LS1sYXlvdXQtYXJvdW5kLWFsaWduZWQ6ey1tcy1mbGV4LWxpbmUtcGFjazpkaXN0cmlidXRlOy1tcy1hbGlnbi1jb250ZW50OnNwYWNlLWFyb3VuZDstd2Via2l0LWFsaWduLWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWNvbnRlbnQ6c3BhY2UtYXJvdW5kfTstLWxheW91dC1ibG9jazp7ZGlzcGxheTpibG9ja307LS1sYXlvdXQtaW52aXNpYmxlOnt2aXNpYmlsaXR5OmhpZGRlbiFpbXBvcnRhbnR9Oy0tbGF5b3V0LXJlbGF0aXZlOntwb3NpdGlvbjpyZWxhdGl2ZX07LS1sYXlvdXQtZml0Ontwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MH07LS1sYXlvdXQtc2Nyb2xsOnstd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzp0b3VjaDtvdmVyZmxvdzphdXRvfTstLWxheW91dC1mdWxsYmxlZWQ6e21hcmdpbjowO2hlaWdodDoxMDB2aH07LS1sYXlvdXQtZml4ZWQtdG9wOntwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MH07LS1sYXlvdXQtZml4ZWQtcmlnaHQ6e3Bvc2l0aW9uOmZpeGVkO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjB9Oy0tbGF5b3V0LWZpeGVkLWJvdHRvbTp7cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjB9Oy0tbGF5b3V0LWZpeGVkLWxlZnQ6e3Bvc2l0aW9uOmZpeGVkO3RvcDowO2JvdHRvbTowO2xlZnQ6MH07fTwvc3R5bGU+IDwvY3VzdG9tLXN0eWxlPlwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(8);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>html{--primary-text-color:var(--light-theme-text-color);--primary-background-color:var(--light-theme-background-color);--secondary-text-color:var(--light-theme-secondary-color);--disabled-text-color:var(--light-theme-disabled-color);--divider-color:var(--light-theme-divider-color);--error-color:var(--paper-deep-orange-a700);--primary-color:var(--paper-indigo-500);--light-primary-color:var(--paper-indigo-100);--dark-primary-color:var(--paper-indigo-700);--accent-color:var(--paper-pink-a200);--light-accent-color:var(--paper-pink-a100);--dark-accent-color:var(--paper-pink-a400);--light-theme-background-color:#ffffff;--light-theme-base-color:#000000;--light-theme-text-color:var(--paper-grey-900);--light-theme-secondary-color:#737373;--light-theme-disabled-color:#9b9b9b;--light-theme-divider-color:#dbdbdb;--dark-theme-background-color:var(--paper-grey-900);--dark-theme-base-color:#ffffff;--dark-theme-text-color:#ffffff;--dark-theme-secondary-color:#bcbcbc;--dark-theme-disabled-color:#646464;--dark-theme-divider-color:#3c3c3c;--text-primary-color:var(--dark-theme-text-color);--default-primary-color:var(--primary-color)}</style> </custom-style>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL2RlZmF1bHQtdGhlbWUuaHRtbD8zNTQwIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi9jb2xvci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnRvQm9keShcIjxjdXN0b20tc3R5bGU+IDxzdHlsZSBpcz1jdXN0b20tc3R5bGU+aHRtbHstLXByaW1hcnktdGV4dC1jb2xvcjp2YXIoLS1saWdodC10aGVtZS10ZXh0LWNvbG9yKTstLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjp2YXIoLS1saWdodC10aGVtZS1iYWNrZ3JvdW5kLWNvbG9yKTstLXNlY29uZGFyeS10ZXh0LWNvbG9yOnZhcigtLWxpZ2h0LXRoZW1lLXNlY29uZGFyeS1jb2xvcik7LS1kaXNhYmxlZC10ZXh0LWNvbG9yOnZhcigtLWxpZ2h0LXRoZW1lLWRpc2FibGVkLWNvbG9yKTstLWRpdmlkZXItY29sb3I6dmFyKC0tbGlnaHQtdGhlbWUtZGl2aWRlci1jb2xvcik7LS1lcnJvci1jb2xvcjp2YXIoLS1wYXBlci1kZWVwLW9yYW5nZS1hNzAwKTstLXByaW1hcnktY29sb3I6dmFyKC0tcGFwZXItaW5kaWdvLTUwMCk7LS1saWdodC1wcmltYXJ5LWNvbG9yOnZhcigtLXBhcGVyLWluZGlnby0xMDApOy0tZGFyay1wcmltYXJ5LWNvbG9yOnZhcigtLXBhcGVyLWluZGlnby03MDApOy0tYWNjZW50LWNvbG9yOnZhcigtLXBhcGVyLXBpbmstYTIwMCk7LS1saWdodC1hY2NlbnQtY29sb3I6dmFyKC0tcGFwZXItcGluay1hMTAwKTstLWRhcmstYWNjZW50LWNvbG9yOnZhcigtLXBhcGVyLXBpbmstYTQwMCk7LS1saWdodC10aGVtZS1iYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7LS1saWdodC10aGVtZS1iYXNlLWNvbG9yOiMwMDAwMDA7LS1saWdodC10aGVtZS10ZXh0LWNvbG9yOnZhcigtLXBhcGVyLWdyZXktOTAwKTstLWxpZ2h0LXRoZW1lLXNlY29uZGFyeS1jb2xvcjojNzM3MzczOy0tbGlnaHQtdGhlbWUtZGlzYWJsZWQtY29sb3I6IzliOWI5YjstLWxpZ2h0LXRoZW1lLWRpdmlkZXItY29sb3I6I2RiZGJkYjstLWRhcmstdGhlbWUtYmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wYXBlci1ncmV5LTkwMCk7LS1kYXJrLXRoZW1lLWJhc2UtY29sb3I6I2ZmZmZmZjstLWRhcmstdGhlbWUtdGV4dC1jb2xvcjojZmZmZmZmOy0tZGFyay10aGVtZS1zZWNvbmRhcnktY29sb3I6I2JjYmNiYzstLWRhcmstdGhlbWUtZGlzYWJsZWQtY29sb3I6IzY0NjQ2NDstLWRhcmstdGhlbWUtZGl2aWRlci1jb2xvcjojM2MzYzNjOy0tdGV4dC1wcmltYXJ5LWNvbG9yOnZhcigtLWRhcmstdGhlbWUtdGV4dC1jb2xvcik7LS1kZWZhdWx0LXByaW1hcnktY29sb3I6dmFyKC0tcHJpbWFyeS1jb2xvcil9PC9zdHlsZT4gPC9jdXN0b20tc3R5bGU+XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1zdHlsZXMvZGVmYXVsdC10aGVtZS5odG1sXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>html{--google-red-100:#f4c7c3;--google-red-300:#e67c73;--google-red-500:#db4437;--google-red-700:#c53929;--google-blue-100:#c6dafc;--google-blue-300:#7baaf7;--google-blue-500:#4285f4;--google-blue-700:#3367d6;--google-green-100:#b7e1cd;--google-green-300:#57bb8a;--google-green-500:#0f9d58;--google-green-700:#0b8043;--google-yellow-100:#fce8b2;--google-yellow-300:#f7cb4d;--google-yellow-500:#f4b400;--google-yellow-700:#f09300;--google-grey-100:#f5f5f5;--google-grey-300:#e0e0e0;--google-grey-500:#9e9e9e;--google-grey-700:#616161;--paper-red-50:#ffebee;--paper-red-100:#ffcdd2;--paper-red-200:#ef9a9a;--paper-red-300:#e57373;--paper-red-400:#ef5350;--paper-red-500:#f44336;--paper-red-600:#e53935;--paper-red-700:#d32f2f;--paper-red-800:#c62828;--paper-red-900:#b71c1c;--paper-red-a100:#ff8a80;--paper-red-a200:#ff5252;--paper-red-a400:#ff1744;--paper-red-a700:#d50000;--paper-pink-50:#fce4ec;--paper-pink-100:#f8bbd0;--paper-pink-200:#f48fb1;--paper-pink-300:#f06292;--paper-pink-400:#ec407a;--paper-pink-500:#e91e63;--paper-pink-600:#d81b60;--paper-pink-700:#c2185b;--paper-pink-800:#ad1457;--paper-pink-900:#880e4f;--paper-pink-a100:#ff80ab;--paper-pink-a200:#ff4081;--paper-pink-a400:#f50057;--paper-pink-a700:#c51162;--paper-purple-50:#f3e5f5;--paper-purple-100:#e1bee7;--paper-purple-200:#ce93d8;--paper-purple-300:#ba68c8;--paper-purple-400:#ab47bc;--paper-purple-500:#9c27b0;--paper-purple-600:#8e24aa;--paper-purple-700:#7b1fa2;--paper-purple-800:#6a1b9a;--paper-purple-900:#4a148c;--paper-purple-a100:#ea80fc;--paper-purple-a200:#e040fb;--paper-purple-a400:#d500f9;--paper-purple-a700:#aa00ff;--paper-deep-purple-50:#ede7f6;--paper-deep-purple-100:#d1c4e9;--paper-deep-purple-200:#b39ddb;--paper-deep-purple-300:#9575cd;--paper-deep-purple-400:#7e57c2;--paper-deep-purple-500:#673ab7;--paper-deep-purple-600:#5e35b1;--paper-deep-purple-700:#512da8;--paper-deep-purple-800:#4527a0;--paper-deep-purple-900:#311b92;--paper-deep-purple-a100:#b388ff;--paper-deep-purple-a200:#7c4dff;--paper-deep-purple-a400:#651fff;--paper-deep-purple-a700:#6200ea;--paper-indigo-50:#e8eaf6;--paper-indigo-100:#c5cae9;--paper-indigo-200:#9fa8da;--paper-indigo-300:#7986cb;--paper-indigo-400:#5c6bc0;--paper-indigo-500:#3f51b5;--paper-indigo-600:#3949ab;--paper-indigo-700:#303f9f;--paper-indigo-800:#283593;--paper-indigo-900:#1a237e;--paper-indigo-a100:#8c9eff;--paper-indigo-a200:#536dfe;--paper-indigo-a400:#3d5afe;--paper-indigo-a700:#304ffe;--paper-blue-50:#e3f2fd;--paper-blue-100:#bbdefb;--paper-blue-200:#90caf9;--paper-blue-300:#64b5f6;--paper-blue-400:#42a5f5;--paper-blue-500:#2196f3;--paper-blue-600:#1e88e5;--paper-blue-700:#1976d2;--paper-blue-800:#1565c0;--paper-blue-900:#0d47a1;--paper-blue-a100:#82b1ff;--paper-blue-a200:#448aff;--paper-blue-a400:#2979ff;--paper-blue-a700:#2962ff;--paper-light-blue-50:#e1f5fe;--paper-light-blue-100:#b3e5fc;--paper-light-blue-200:#81d4fa;--paper-light-blue-300:#4fc3f7;--paper-light-blue-400:#29b6f6;--paper-light-blue-500:#03a9f4;--paper-light-blue-600:#039be5;--paper-light-blue-700:#0288d1;--paper-light-blue-800:#0277bd;--paper-light-blue-900:#01579b;--paper-light-blue-a100:#80d8ff;--paper-light-blue-a200:#40c4ff;--paper-light-blue-a400:#00b0ff;--paper-light-blue-a700:#0091ea;--paper-cyan-50:#e0f7fa;--paper-cyan-100:#b2ebf2;--paper-cyan-200:#80deea;--paper-cyan-300:#4dd0e1;--paper-cyan-400:#26c6da;--paper-cyan-500:#00bcd4;--paper-cyan-600:#00acc1;--paper-cyan-700:#0097a7;--paper-cyan-800:#00838f;--paper-cyan-900:#006064;--paper-cyan-a100:#84ffff;--paper-cyan-a200:#18ffff;--paper-cyan-a400:#00e5ff;--paper-cyan-a700:#00b8d4;--paper-teal-50:#e0f2f1;--paper-teal-100:#b2dfdb;--paper-teal-200:#80cbc4;--paper-teal-300:#4db6ac;--paper-teal-400:#26a69a;--paper-teal-500:#009688;--paper-teal-600:#00897b;--paper-teal-700:#00796b;--paper-teal-800:#00695c;--paper-teal-900:#004d40;--paper-teal-a100:#a7ffeb;--paper-teal-a200:#64ffda;--paper-teal-a400:#1de9b6;--paper-teal-a700:#00bfa5;--paper-green-50:#e8f5e9;--paper-green-100:#c8e6c9;--paper-green-200:#a5d6a7;--paper-green-300:#81c784;--paper-green-400:#66bb6a;--paper-green-500:#4caf50;--paper-green-600:#43a047;--paper-green-700:#388e3c;--paper-green-800:#2e7d32;--paper-green-900:#1b5e20;--paper-green-a100:#b9f6ca;--paper-green-a200:#69f0ae;--paper-green-a400:#00e676;--paper-green-a700:#00c853;--paper-light-green-50:#f1f8e9;--paper-light-green-100:#dcedc8;--paper-light-green-200:#c5e1a5;--paper-light-green-300:#aed581;--paper-light-green-400:#9ccc65;--paper-light-green-500:#8bc34a;--paper-light-green-600:#7cb342;--paper-light-green-700:#689f38;--paper-light-green-800:#558b2f;--paper-light-green-900:#33691e;--paper-light-green-a100:#ccff90;--paper-light-green-a200:#b2ff59;--paper-light-green-a400:#76ff03;--paper-light-green-a700:#64dd17;--paper-lime-50:#f9fbe7;--paper-lime-100:#f0f4c3;--paper-lime-200:#e6ee9c;--paper-lime-300:#dce775;--paper-lime-400:#d4e157;--paper-lime-500:#cddc39;--paper-lime-600:#c0ca33;--paper-lime-700:#afb42b;--paper-lime-800:#9e9d24;--paper-lime-900:#827717;--paper-lime-a100:#f4ff81;--paper-lime-a200:#eeff41;--paper-lime-a400:#c6ff00;--paper-lime-a700:#aeea00;--paper-yellow-50:#fffde7;--paper-yellow-100:#fff9c4;--paper-yellow-200:#fff59d;--paper-yellow-300:#fff176;--paper-yellow-400:#ffee58;--paper-yellow-500:#ffeb3b;--paper-yellow-600:#fdd835;--paper-yellow-700:#fbc02d;--paper-yellow-800:#f9a825;--paper-yellow-900:#f57f17;--paper-yellow-a100:#ffff8d;--paper-yellow-a200:#ffff00;--paper-yellow-a400:#ffea00;--paper-yellow-a700:#ffd600;--paper-amber-50:#fff8e1;--paper-amber-100:#ffecb3;--paper-amber-200:#ffe082;--paper-amber-300:#ffd54f;--paper-amber-400:#ffca28;--paper-amber-500:#ffc107;--paper-amber-600:#ffb300;--paper-amber-700:#ffa000;--paper-amber-800:#ff8f00;--paper-amber-900:#ff6f00;--paper-amber-a100:#ffe57f;--paper-amber-a200:#ffd740;--paper-amber-a400:#ffc400;--paper-amber-a700:#ffab00;--paper-orange-50:#fff3e0;--paper-orange-100:#ffe0b2;--paper-orange-200:#ffcc80;--paper-orange-300:#ffb74d;--paper-orange-400:#ffa726;--paper-orange-500:#ff9800;--paper-orange-600:#fb8c00;--paper-orange-700:#f57c00;--paper-orange-800:#ef6c00;--paper-orange-900:#e65100;--paper-orange-a100:#ffd180;--paper-orange-a200:#ffab40;--paper-orange-a400:#ff9100;--paper-orange-a700:#ff6500;--paper-deep-orange-50:#fbe9e7;--paper-deep-orange-100:#ffccbc;--paper-deep-orange-200:#ffab91;--paper-deep-orange-300:#ff8a65;--paper-deep-orange-400:#ff7043;--paper-deep-orange-500:#ff5722;--paper-deep-orange-600:#f4511e;--paper-deep-orange-700:#e64a19;--paper-deep-orange-800:#d84315;--paper-deep-orange-900:#bf360c;--paper-deep-orange-a100:#ff9e80;--paper-deep-orange-a200:#ff6e40;--paper-deep-orange-a400:#ff3d00;--paper-deep-orange-a700:#dd2c00;--paper-brown-50:#efebe9;--paper-brown-100:#d7ccc8;--paper-brown-200:#bcaaa4;--paper-brown-300:#a1887f;--paper-brown-400:#8d6e63;--paper-brown-500:#795548;--paper-brown-600:#6d4c41;--paper-brown-700:#5d4037;--paper-brown-800:#4e342e;--paper-brown-900:#3e2723;--paper-grey-50:#fafafa;--paper-grey-100:#f5f5f5;--paper-grey-200:#eeeeee;--paper-grey-300:#e0e0e0;--paper-grey-400:#bdbdbd;--paper-grey-500:#9e9e9e;--paper-grey-600:#757575;--paper-grey-700:#616161;--paper-grey-800:#424242;--paper-grey-900:#212121;--paper-blue-grey-50:#eceff1;--paper-blue-grey-100:#cfd8dc;--paper-blue-grey-200:#b0bec5;--paper-blue-grey-300:#90a4ae;--paper-blue-grey-400:#78909c;--paper-blue-grey-500:#607d8b;--paper-blue-grey-600:#546e7a;--paper-blue-grey-700:#455a64;--paper-blue-grey-800:#37474f;--paper-blue-grey-900:#263238;--dark-divider-opacity:0.12;--dark-disabled-opacity:0.38;--dark-secondary-opacity:0.54;--dark-primary-opacity:0.87;--light-divider-opacity:0.12;--light-disabled-opacity:0.3;--light-secondary-opacity:0.7;--light-primary-opacity:1.0}</style> </custom-style>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL2NvbG9yLmh0bWw/MDFiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnRvQm9keShcIjxjdXN0b20tc3R5bGU+IDxzdHlsZSBpcz1jdXN0b20tc3R5bGU+aHRtbHstLWdvb2dsZS1yZWQtMTAwOiNmNGM3YzM7LS1nb29nbGUtcmVkLTMwMDojZTY3YzczOy0tZ29vZ2xlLXJlZC01MDA6I2RiNDQzNzstLWdvb2dsZS1yZWQtNzAwOiNjNTM5Mjk7LS1nb29nbGUtYmx1ZS0xMDA6I2M2ZGFmYzstLWdvb2dsZS1ibHVlLTMwMDojN2JhYWY3Oy0tZ29vZ2xlLWJsdWUtNTAwOiM0Mjg1ZjQ7LS1nb29nbGUtYmx1ZS03MDA6IzMzNjdkNjstLWdvb2dsZS1ncmVlbi0xMDA6I2I3ZTFjZDstLWdvb2dsZS1ncmVlbi0zMDA6IzU3YmI4YTstLWdvb2dsZS1ncmVlbi01MDA6IzBmOWQ1ODstLWdvb2dsZS1ncmVlbi03MDA6IzBiODA0MzstLWdvb2dsZS15ZWxsb3ctMTAwOiNmY2U4YjI7LS1nb29nbGUteWVsbG93LTMwMDojZjdjYjRkOy0tZ29vZ2xlLXllbGxvdy01MDA6I2Y0YjQwMDstLWdvb2dsZS15ZWxsb3ctNzAwOiNmMDkzMDA7LS1nb29nbGUtZ3JleS0xMDA6I2Y1ZjVmNTstLWdvb2dsZS1ncmV5LTMwMDojZTBlMGUwOy0tZ29vZ2xlLWdyZXktNTAwOiM5ZTllOWU7LS1nb29nbGUtZ3JleS03MDA6IzYxNjE2MTstLXBhcGVyLXJlZC01MDojZmZlYmVlOy0tcGFwZXItcmVkLTEwMDojZmZjZGQyOy0tcGFwZXItcmVkLTIwMDojZWY5YTlhOy0tcGFwZXItcmVkLTMwMDojZTU3MzczOy0tcGFwZXItcmVkLTQwMDojZWY1MzUwOy0tcGFwZXItcmVkLTUwMDojZjQ0MzM2Oy0tcGFwZXItcmVkLTYwMDojZTUzOTM1Oy0tcGFwZXItcmVkLTcwMDojZDMyZjJmOy0tcGFwZXItcmVkLTgwMDojYzYyODI4Oy0tcGFwZXItcmVkLTkwMDojYjcxYzFjOy0tcGFwZXItcmVkLWExMDA6I2ZmOGE4MDstLXBhcGVyLXJlZC1hMjAwOiNmZjUyNTI7LS1wYXBlci1yZWQtYTQwMDojZmYxNzQ0Oy0tcGFwZXItcmVkLWE3MDA6I2Q1MDAwMDstLXBhcGVyLXBpbmstNTA6I2ZjZTRlYzstLXBhcGVyLXBpbmstMTAwOiNmOGJiZDA7LS1wYXBlci1waW5rLTIwMDojZjQ4ZmIxOy0tcGFwZXItcGluay0zMDA6I2YwNjI5MjstLXBhcGVyLXBpbmstNDAwOiNlYzQwN2E7LS1wYXBlci1waW5rLTUwMDojZTkxZTYzOy0tcGFwZXItcGluay02MDA6I2Q4MWI2MDstLXBhcGVyLXBpbmstNzAwOiNjMjE4NWI7LS1wYXBlci1waW5rLTgwMDojYWQxNDU3Oy0tcGFwZXItcGluay05MDA6Izg4MGU0ZjstLXBhcGVyLXBpbmstYTEwMDojZmY4MGFiOy0tcGFwZXItcGluay1hMjAwOiNmZjQwODE7LS1wYXBlci1waW5rLWE0MDA6I2Y1MDA1NzstLXBhcGVyLXBpbmstYTcwMDojYzUxMTYyOy0tcGFwZXItcHVycGxlLTUwOiNmM2U1ZjU7LS1wYXBlci1wdXJwbGUtMTAwOiNlMWJlZTc7LS1wYXBlci1wdXJwbGUtMjAwOiNjZTkzZDg7LS1wYXBlci1wdXJwbGUtMzAwOiNiYTY4Yzg7LS1wYXBlci1wdXJwbGUtNDAwOiNhYjQ3YmM7LS1wYXBlci1wdXJwbGUtNTAwOiM5YzI3YjA7LS1wYXBlci1wdXJwbGUtNjAwOiM4ZTI0YWE7LS1wYXBlci1wdXJwbGUtNzAwOiM3YjFmYTI7LS1wYXBlci1wdXJwbGUtODAwOiM2YTFiOWE7LS1wYXBlci1wdXJwbGUtOTAwOiM0YTE0OGM7LS1wYXBlci1wdXJwbGUtYTEwMDojZWE4MGZjOy0tcGFwZXItcHVycGxlLWEyMDA6I2UwNDBmYjstLXBhcGVyLXB1cnBsZS1hNDAwOiNkNTAwZjk7LS1wYXBlci1wdXJwbGUtYTcwMDojYWEwMGZmOy0tcGFwZXItZGVlcC1wdXJwbGUtNTA6I2VkZTdmNjstLXBhcGVyLWRlZXAtcHVycGxlLTEwMDojZDFjNGU5Oy0tcGFwZXItZGVlcC1wdXJwbGUtMjAwOiNiMzlkZGI7LS1wYXBlci1kZWVwLXB1cnBsZS0zMDA6Izk1NzVjZDstLXBhcGVyLWRlZXAtcHVycGxlLTQwMDojN2U1N2MyOy0tcGFwZXItZGVlcC1wdXJwbGUtNTAwOiM2NzNhYjc7LS1wYXBlci1kZWVwLXB1cnBsZS02MDA6IzVlMzViMTstLXBhcGVyLWRlZXAtcHVycGxlLTcwMDojNTEyZGE4Oy0tcGFwZXItZGVlcC1wdXJwbGUtODAwOiM0NTI3YTA7LS1wYXBlci1kZWVwLXB1cnBsZS05MDA6IzMxMWI5MjstLXBhcGVyLWRlZXAtcHVycGxlLWExMDA6I2IzODhmZjstLXBhcGVyLWRlZXAtcHVycGxlLWEyMDA6IzdjNGRmZjstLXBhcGVyLWRlZXAtcHVycGxlLWE0MDA6IzY1MWZmZjstLXBhcGVyLWRlZXAtcHVycGxlLWE3MDA6IzYyMDBlYTstLXBhcGVyLWluZGlnby01MDojZThlYWY2Oy0tcGFwZXItaW5kaWdvLTEwMDojYzVjYWU5Oy0tcGFwZXItaW5kaWdvLTIwMDojOWZhOGRhOy0tcGFwZXItaW5kaWdvLTMwMDojNzk4NmNiOy0tcGFwZXItaW5kaWdvLTQwMDojNWM2YmMwOy0tcGFwZXItaW5kaWdvLTUwMDojM2Y1MWI1Oy0tcGFwZXItaW5kaWdvLTYwMDojMzk0OWFiOy0tcGFwZXItaW5kaWdvLTcwMDojMzAzZjlmOy0tcGFwZXItaW5kaWdvLTgwMDojMjgzNTkzOy0tcGFwZXItaW5kaWdvLTkwMDojMWEyMzdlOy0tcGFwZXItaW5kaWdvLWExMDA6IzhjOWVmZjstLXBhcGVyLWluZGlnby1hMjAwOiM1MzZkZmU7LS1wYXBlci1pbmRpZ28tYTQwMDojM2Q1YWZlOy0tcGFwZXItaW5kaWdvLWE3MDA6IzMwNGZmZTstLXBhcGVyLWJsdWUtNTA6I2UzZjJmZDstLXBhcGVyLWJsdWUtMTAwOiNiYmRlZmI7LS1wYXBlci1ibHVlLTIwMDojOTBjYWY5Oy0tcGFwZXItYmx1ZS0zMDA6IzY0YjVmNjstLXBhcGVyLWJsdWUtNDAwOiM0MmE1ZjU7LS1wYXBlci1ibHVlLTUwMDojMjE5NmYzOy0tcGFwZXItYmx1ZS02MDA6IzFlODhlNTstLXBhcGVyLWJsdWUtNzAwOiMxOTc2ZDI7LS1wYXBlci1ibHVlLTgwMDojMTU2NWMwOy0tcGFwZXItYmx1ZS05MDA6IzBkNDdhMTstLXBhcGVyLWJsdWUtYTEwMDojODJiMWZmOy0tcGFwZXItYmx1ZS1hMjAwOiM0NDhhZmY7LS1wYXBlci1ibHVlLWE0MDA6IzI5NzlmZjstLXBhcGVyLWJsdWUtYTcwMDojMjk2MmZmOy0tcGFwZXItbGlnaHQtYmx1ZS01MDojZTFmNWZlOy0tcGFwZXItbGlnaHQtYmx1ZS0xMDA6I2IzZTVmYzstLXBhcGVyLWxpZ2h0LWJsdWUtMjAwOiM4MWQ0ZmE7LS1wYXBlci1saWdodC1ibHVlLTMwMDojNGZjM2Y3Oy0tcGFwZXItbGlnaHQtYmx1ZS00MDA6IzI5YjZmNjstLXBhcGVyLWxpZ2h0LWJsdWUtNTAwOiMwM2E5ZjQ7LS1wYXBlci1saWdodC1ibHVlLTYwMDojMDM5YmU1Oy0tcGFwZXItbGlnaHQtYmx1ZS03MDA6IzAyODhkMTstLXBhcGVyLWxpZ2h0LWJsdWUtODAwOiMwMjc3YmQ7LS1wYXBlci1saWdodC1ibHVlLTkwMDojMDE1NzliOy0tcGFwZXItbGlnaHQtYmx1ZS1hMTAwOiM4MGQ4ZmY7LS1wYXBlci1saWdodC1ibHVlLWEyMDA6IzQwYzRmZjstLXBhcGVyLWxpZ2h0LWJsdWUtYTQwMDojMDBiMGZmOy0tcGFwZXItbGlnaHQtYmx1ZS1hNzAwOiMwMDkxZWE7LS1wYXBlci1jeWFuLTUwOiNlMGY3ZmE7LS1wYXBlci1jeWFuLTEwMDojYjJlYmYyOy0tcGFwZXItY3lhbi0yMDA6IzgwZGVlYTstLXBhcGVyLWN5YW4tMzAwOiM0ZGQwZTE7LS1wYXBlci1jeWFuLTQwMDojMjZjNmRhOy0tcGFwZXItY3lhbi01MDA6IzAwYmNkNDstLXBhcGVyLWN5YW4tNjAwOiMwMGFjYzE7LS1wYXBlci1jeWFuLTcwMDojMDA5N2E3Oy0tcGFwZXItY3lhbi04MDA6IzAwODM4ZjstLXBhcGVyLWN5YW4tOTAwOiMwMDYwNjQ7LS1wYXBlci1jeWFuLWExMDA6Izg0ZmZmZjstLXBhcGVyLWN5YW4tYTIwMDojMThmZmZmOy0tcGFwZXItY3lhbi1hNDAwOiMwMGU1ZmY7LS1wYXBlci1jeWFuLWE3MDA6IzAwYjhkNDstLXBhcGVyLXRlYWwtNTA6I2UwZjJmMTstLXBhcGVyLXRlYWwtMTAwOiNiMmRmZGI7LS1wYXBlci10ZWFsLTIwMDojODBjYmM0Oy0tcGFwZXItdGVhbC0zMDA6IzRkYjZhYzstLXBhcGVyLXRlYWwtNDAwOiMyNmE2OWE7LS1wYXBlci10ZWFsLTUwMDojMDA5Njg4Oy0tcGFwZXItdGVhbC02MDA6IzAwODk3YjstLXBhcGVyLXRlYWwtNzAwOiMwMDc5NmI7LS1wYXBlci10ZWFsLTgwMDojMDA2OTVjOy0tcGFwZXItdGVhbC05MDA6IzAwNGQ0MDstLXBhcGVyLXRlYWwtYTEwMDojYTdmZmViOy0tcGFwZXItdGVhbC1hMjAwOiM2NGZmZGE7LS1wYXBlci10ZWFsLWE0MDA6IzFkZTliNjstLXBhcGVyLXRlYWwtYTcwMDojMDBiZmE1Oy0tcGFwZXItZ3JlZW4tNTA6I2U4ZjVlOTstLXBhcGVyLWdyZWVuLTEwMDojYzhlNmM5Oy0tcGFwZXItZ3JlZW4tMjAwOiNhNWQ2YTc7LS1wYXBlci1ncmVlbi0zMDA6IzgxYzc4NDstLXBhcGVyLWdyZWVuLTQwMDojNjZiYjZhOy0tcGFwZXItZ3JlZW4tNTAwOiM0Y2FmNTA7LS1wYXBlci1ncmVlbi02MDA6IzQzYTA0NzstLXBhcGVyLWdyZWVuLTcwMDojMzg4ZTNjOy0tcGFwZXItZ3JlZW4tODAwOiMyZTdkMzI7LS1wYXBlci1ncmVlbi05MDA6IzFiNWUyMDstLXBhcGVyLWdyZWVuLWExMDA6I2I5ZjZjYTstLXBhcGVyLWdyZWVuLWEyMDA6IzY5ZjBhZTstLXBhcGVyLWdyZWVuLWE0MDA6IzAwZTY3NjstLXBhcGVyLWdyZWVuLWE3MDA6IzAwYzg1MzstLXBhcGVyLWxpZ2h0LWdyZWVuLTUwOiNmMWY4ZTk7LS1wYXBlci1saWdodC1ncmVlbi0xMDA6I2RjZWRjODstLXBhcGVyLWxpZ2h0LWdyZWVuLTIwMDojYzVlMWE1Oy0tcGFwZXItbGlnaHQtZ3JlZW4tMzAwOiNhZWQ1ODE7LS1wYXBlci1saWdodC1ncmVlbi00MDA6IzljY2M2NTstLXBhcGVyLWxpZ2h0LWdyZWVuLTUwMDojOGJjMzRhOy0tcGFwZXItbGlnaHQtZ3JlZW4tNjAwOiM3Y2IzNDI7LS1wYXBlci1saWdodC1ncmVlbi03MDA6IzY4OWYzODstLXBhcGVyLWxpZ2h0LWdyZWVuLTgwMDojNTU4YjJmOy0tcGFwZXItbGlnaHQtZ3JlZW4tOTAwOiMzMzY5MWU7LS1wYXBlci1saWdodC1ncmVlbi1hMTAwOiNjY2ZmOTA7LS1wYXBlci1saWdodC1ncmVlbi1hMjAwOiNiMmZmNTk7LS1wYXBlci1saWdodC1ncmVlbi1hNDAwOiM3NmZmMDM7LS1wYXBlci1saWdodC1ncmVlbi1hNzAwOiM2NGRkMTc7LS1wYXBlci1saW1lLTUwOiNmOWZiZTc7LS1wYXBlci1saW1lLTEwMDojZjBmNGMzOy0tcGFwZXItbGltZS0yMDA6I2U2ZWU5YzstLXBhcGVyLWxpbWUtMzAwOiNkY2U3NzU7LS1wYXBlci1saW1lLTQwMDojZDRlMTU3Oy0tcGFwZXItbGltZS01MDA6I2NkZGMzOTstLXBhcGVyLWxpbWUtNjAwOiNjMGNhMzM7LS1wYXBlci1saW1lLTcwMDojYWZiNDJiOy0tcGFwZXItbGltZS04MDA6IzllOWQyNDstLXBhcGVyLWxpbWUtOTAwOiM4Mjc3MTc7LS1wYXBlci1saW1lLWExMDA6I2Y0ZmY4MTstLXBhcGVyLWxpbWUtYTIwMDojZWVmZjQxOy0tcGFwZXItbGltZS1hNDAwOiNjNmZmMDA7LS1wYXBlci1saW1lLWE3MDA6I2FlZWEwMDstLXBhcGVyLXllbGxvdy01MDojZmZmZGU3Oy0tcGFwZXIteWVsbG93LTEwMDojZmZmOWM0Oy0tcGFwZXIteWVsbG93LTIwMDojZmZmNTlkOy0tcGFwZXIteWVsbG93LTMwMDojZmZmMTc2Oy0tcGFwZXIteWVsbG93LTQwMDojZmZlZTU4Oy0tcGFwZXIteWVsbG93LTUwMDojZmZlYjNiOy0tcGFwZXIteWVsbG93LTYwMDojZmRkODM1Oy0tcGFwZXIteWVsbG93LTcwMDojZmJjMDJkOy0tcGFwZXIteWVsbG93LTgwMDojZjlhODI1Oy0tcGFwZXIteWVsbG93LTkwMDojZjU3ZjE3Oy0tcGFwZXIteWVsbG93LWExMDA6I2ZmZmY4ZDstLXBhcGVyLXllbGxvdy1hMjAwOiNmZmZmMDA7LS1wYXBlci15ZWxsb3ctYTQwMDojZmZlYTAwOy0tcGFwZXIteWVsbG93LWE3MDA6I2ZmZDYwMDstLXBhcGVyLWFtYmVyLTUwOiNmZmY4ZTE7LS1wYXBlci1hbWJlci0xMDA6I2ZmZWNiMzstLXBhcGVyLWFtYmVyLTIwMDojZmZlMDgyOy0tcGFwZXItYW1iZXItMzAwOiNmZmQ1NGY7LS1wYXBlci1hbWJlci00MDA6I2ZmY2EyODstLXBhcGVyLWFtYmVyLTUwMDojZmZjMTA3Oy0tcGFwZXItYW1iZXItNjAwOiNmZmIzMDA7LS1wYXBlci1hbWJlci03MDA6I2ZmYTAwMDstLXBhcGVyLWFtYmVyLTgwMDojZmY4ZjAwOy0tcGFwZXItYW1iZXItOTAwOiNmZjZmMDA7LS1wYXBlci1hbWJlci1hMTAwOiNmZmU1N2Y7LS1wYXBlci1hbWJlci1hMjAwOiNmZmQ3NDA7LS1wYXBlci1hbWJlci1hNDAwOiNmZmM0MDA7LS1wYXBlci1hbWJlci1hNzAwOiNmZmFiMDA7LS1wYXBlci1vcmFuZ2UtNTA6I2ZmZjNlMDstLXBhcGVyLW9yYW5nZS0xMDA6I2ZmZTBiMjstLXBhcGVyLW9yYW5nZS0yMDA6I2ZmY2M4MDstLXBhcGVyLW9yYW5nZS0zMDA6I2ZmYjc0ZDstLXBhcGVyLW9yYW5nZS00MDA6I2ZmYTcyNjstLXBhcGVyLW9yYW5nZS01MDA6I2ZmOTgwMDstLXBhcGVyLW9yYW5nZS02MDA6I2ZiOGMwMDstLXBhcGVyLW9yYW5nZS03MDA6I2Y1N2MwMDstLXBhcGVyLW9yYW5nZS04MDA6I2VmNmMwMDstLXBhcGVyLW9yYW5nZS05MDA6I2U2NTEwMDstLXBhcGVyLW9yYW5nZS1hMTAwOiNmZmQxODA7LS1wYXBlci1vcmFuZ2UtYTIwMDojZmZhYjQwOy0tcGFwZXItb3JhbmdlLWE0MDA6I2ZmOTEwMDstLXBhcGVyLW9yYW5nZS1hNzAwOiNmZjY1MDA7LS1wYXBlci1kZWVwLW9yYW5nZS01MDojZmJlOWU3Oy0tcGFwZXItZGVlcC1vcmFuZ2UtMTAwOiNmZmNjYmM7LS1wYXBlci1kZWVwLW9yYW5nZS0yMDA6I2ZmYWI5MTstLXBhcGVyLWRlZXAtb3JhbmdlLTMwMDojZmY4YTY1Oy0tcGFwZXItZGVlcC1vcmFuZ2UtNDAwOiNmZjcwNDM7LS1wYXBlci1kZWVwLW9yYW5nZS01MDA6I2ZmNTcyMjstLXBhcGVyLWRlZXAtb3JhbmdlLTYwMDojZjQ1MTFlOy0tcGFwZXItZGVlcC1vcmFuZ2UtNzAwOiNlNjRhMTk7LS1wYXBlci1kZWVwLW9yYW5nZS04MDA6I2Q4NDMxNTstLXBhcGVyLWRlZXAtb3JhbmdlLTkwMDojYmYzNjBjOy0tcGFwZXItZGVlcC1vcmFuZ2UtYTEwMDojZmY5ZTgwOy0tcGFwZXItZGVlcC1vcmFuZ2UtYTIwMDojZmY2ZTQwOy0tcGFwZXItZGVlcC1vcmFuZ2UtYTQwMDojZmYzZDAwOy0tcGFwZXItZGVlcC1vcmFuZ2UtYTcwMDojZGQyYzAwOy0tcGFwZXItYnJvd24tNTA6I2VmZWJlOTstLXBhcGVyLWJyb3duLTEwMDojZDdjY2M4Oy0tcGFwZXItYnJvd24tMjAwOiNiY2FhYTQ7LS1wYXBlci1icm93bi0zMDA6I2ExODg3ZjstLXBhcGVyLWJyb3duLTQwMDojOGQ2ZTYzOy0tcGFwZXItYnJvd24tNTAwOiM3OTU1NDg7LS1wYXBlci1icm93bi02MDA6IzZkNGM0MTstLXBhcGVyLWJyb3duLTcwMDojNWQ0MDM3Oy0tcGFwZXItYnJvd24tODAwOiM0ZTM0MmU7LS1wYXBlci1icm93bi05MDA6IzNlMjcyMzstLXBhcGVyLWdyZXktNTA6I2ZhZmFmYTstLXBhcGVyLWdyZXktMTAwOiNmNWY1ZjU7LS1wYXBlci1ncmV5LTIwMDojZWVlZWVlOy0tcGFwZXItZ3JleS0zMDA6I2UwZTBlMDstLXBhcGVyLWdyZXktNDAwOiNiZGJkYmQ7LS1wYXBlci1ncmV5LTUwMDojOWU5ZTllOy0tcGFwZXItZ3JleS02MDA6Izc1NzU3NTstLXBhcGVyLWdyZXktNzAwOiM2MTYxNjE7LS1wYXBlci1ncmV5LTgwMDojNDI0MjQyOy0tcGFwZXItZ3JleS05MDA6IzIxMjEyMTstLXBhcGVyLWJsdWUtZ3JleS01MDojZWNlZmYxOy0tcGFwZXItYmx1ZS1ncmV5LTEwMDojY2ZkOGRjOy0tcGFwZXItYmx1ZS1ncmV5LTIwMDojYjBiZWM1Oy0tcGFwZXItYmx1ZS1ncmV5LTMwMDojOTBhNGFlOy0tcGFwZXItYmx1ZS1ncmV5LTQwMDojNzg5MDljOy0tcGFwZXItYmx1ZS1ncmV5LTUwMDojNjA3ZDhiOy0tcGFwZXItYmx1ZS1ncmV5LTYwMDojNTQ2ZTdhOy0tcGFwZXItYmx1ZS1ncmV5LTcwMDojNDU1YTY0Oy0tcGFwZXItYmx1ZS1ncmV5LTgwMDojMzc0NzRmOy0tcGFwZXItYmx1ZS1ncmV5LTkwMDojMjYzMjM4Oy0tZGFyay1kaXZpZGVyLW9wYWNpdHk6MC4xMjstLWRhcmstZGlzYWJsZWQtb3BhY2l0eTowLjM4Oy0tZGFyay1zZWNvbmRhcnktb3BhY2l0eTowLjU0Oy0tZGFyay1wcmltYXJ5LW9wYWNpdHk6MC44NzstLWxpZ2h0LWRpdmlkZXItb3BhY2l0eTowLjEyOy0tbGlnaHQtZGlzYWJsZWQtb3BhY2l0eTowLjM7LS1saWdodC1zZWNvbmRhcnktb3BhY2l0eTowLjc7LS1saWdodC1wcmltYXJ5LW9wYWNpdHk6MS4wfTwvc3R5bGU+IDwvY3VzdG9tLXN0eWxlPlwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL2NvbG9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  /**\n   * Chrome uses an older version of DOM Level 3 Keyboard Events\n   *\n   * Most keys are labeled as text, but some are Unicode codepoints.\n   * Values taken from: http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\n   */\n\n  var KEY_IDENTIFIER = {\n    'U+0008': 'backspace',\n    'U+0009': 'tab',\n    'U+001B': 'esc',\n    'U+0020': 'space',\n    'U+007F': 'del'\n  };\n\n  /**\n   * Special table for KeyboardEvent.keyCode.\n   * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better\n   * than that.\n   *\n   * Values from: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode\n   */\n  var KEY_CODE = {\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    27: 'esc',\n    33: 'pageup',\n    34: 'pagedown',\n    35: 'end',\n    36: 'home',\n    32: 'space',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down',\n    46: 'del',\n    106: '*'\n  };\n\n  /**\n   * MODIFIER_KEYS maps the short name for modifier keys used in a key\n   * combo string to the property name that references those same keys\n   * in a KeyboardEvent instance.\n   */\n  var MODIFIER_KEYS = {\n    'shift': 'shiftKey',\n    'ctrl': 'ctrlKey',\n    'alt': 'altKey',\n    'meta': 'metaKey'\n  };\n\n  /**\n   * KeyboardEvent.key is mostly represented by printable character made by\n   * the keyboard, with unprintable keys labeled nicely.\n   *\n   * However, on OS X, Alt+char can make a Unicode character that follows an\n   * Apple-specific mapping. In this case, we fall back to .keyCode.\n   */\n  var KEY_CHAR = /[a-z0-9*]/;\n\n  /**\n   * Matches a keyIdentifier string.\n   */\n  var IDENT_CHAR = /U\\+/;\n\n  /**\n   * Matches arrow keys in Gecko 27.0+\n   */\n  var ARROW_KEY = /^arrow/;\n\n  /**\n   * Matches space keys everywhere (notably including IE10's exceptional name\n   * `spacebar`).\n   */\n  var SPACE_KEY = /^space(bar)?/;\n\n  /**\n   * Matches ESC key.\n   *\n   * Value from: http://w3c.github.io/uievents-key/#key-Escape\n   */\n  var ESC_KEY = /^escape$/;\n\n  /**\n   * Transforms the key.\n   * @param {string} key The KeyBoardEvent.key\n   * @param {Boolean} [noSpecialChars] Limits the transformation to\n   * alpha-numeric characters.\n   */\n  function transformKey(key, noSpecialChars) {\n    var validKey = '';\n    if (key) {\n      var lKey = key.toLowerCase();\n      if (lKey === ' ' || SPACE_KEY.test(lKey)) {\n        validKey = 'space';\n      } else if (ESC_KEY.test(lKey)) {\n        validKey = 'esc';\n      } else if (lKey.length == 1) {\n        if (!noSpecialChars || KEY_CHAR.test(lKey)) {\n          validKey = lKey;\n        }\n      } else if (ARROW_KEY.test(lKey)) {\n        validKey = lKey.replace('arrow', '');\n      } else if (lKey == 'multiply') {\n        // numpad '*' can map to Multiply on IE/Windows\n        validKey = '*';\n      } else {\n        validKey = lKey;\n      }\n    }\n    return validKey;\n  }\n\n  function transformKeyIdentifier(keyIdent) {\n    var validKey = '';\n    if (keyIdent) {\n      if (keyIdent in KEY_IDENTIFIER) {\n        validKey = KEY_IDENTIFIER[keyIdent];\n      } else if (IDENT_CHAR.test(keyIdent)) {\n        keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);\n        validKey = String.fromCharCode(keyIdent).toLowerCase();\n      } else {\n        validKey = keyIdent.toLowerCase();\n      }\n    }\n    return validKey;\n  }\n\n  function transformKeyCode(keyCode) {\n    var validKey = '';\n    if (Number(keyCode)) {\n      if (keyCode >= 65 && keyCode <= 90) {\n        // ascii a-z\n        // lowercase is 32 offset from uppercase\n        validKey = String.fromCharCode(32 + keyCode);\n      } else if (keyCode >= 112 && keyCode <= 123) {\n        // function keys f1-f12\n        validKey = 'f' + (keyCode - 112 + 1);\n      } else if (keyCode >= 48 && keyCode <= 57) {\n        // top 0-9 keys\n        validKey = String(keyCode - 48);\n      } else if (keyCode >= 96 && keyCode <= 105) {\n        // num pad 0-9\n        validKey = String(keyCode - 96);\n      } else {\n        validKey = KEY_CODE[keyCode];\n      }\n    }\n    return validKey;\n  }\n\n  /**\n    * Calculates the normalized key for a KeyboardEvent.\n    * @param {KeyboardEvent} keyEvent\n    * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key\n    * transformation to alpha-numeric chars. This is useful with key\n    * combinations like shift + 2, which on FF for MacOS produces\n    * keyEvent.key = @\n    * To get 2 returned, set noSpecialChars = true\n    * To get @ returned, set noSpecialChars = false\n   */\n  function normalizedKeyForEvent(keyEvent, noSpecialChars) {\n    // Fall back from .key, to .detail.key for artifical keyboard events,\n    // and then to deprecated .keyIdentifier and .keyCode.\n    if (keyEvent.key) {\n      return transformKey(keyEvent.key, noSpecialChars);\n    }\n    if (keyEvent.detail && keyEvent.detail.key) {\n      return transformKey(keyEvent.detail.key, noSpecialChars);\n    }\n    return transformKeyIdentifier(keyEvent.keyIdentifier) || transformKeyCode(keyEvent.keyCode) || '';\n  }\n\n  function keyComboMatchesEvent(keyCombo, event) {\n    // For combos with modifiers we support only alpha-numeric keys\n    var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);\n    return keyEvent === keyCombo.key && (!keyCombo.hasModifiers || !!event.shiftKey === !!keyCombo.shiftKey && !!event.ctrlKey === !!keyCombo.ctrlKey && !!event.altKey === !!keyCombo.altKey && !!event.metaKey === !!keyCombo.metaKey);\n  }\n\n  function parseKeyComboString(keyComboString) {\n    if (keyComboString.length === 1) {\n      return {\n        combo: keyComboString,\n        key: keyComboString,\n        event: 'keydown'\n      };\n    }\n    return keyComboString.split('+').reduce(function (parsedKeyCombo, keyComboPart) {\n      var eventParts = keyComboPart.split(':');\n      var keyName = eventParts[0];\n      var event = eventParts[1];\n\n      if (keyName in MODIFIER_KEYS) {\n        parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;\n        parsedKeyCombo.hasModifiers = true;\n      } else {\n        parsedKeyCombo.key = keyName;\n        parsedKeyCombo.event = event || 'keydown';\n      }\n\n      return parsedKeyCombo;\n    }, {\n      combo: keyComboString.split(':').shift()\n    });\n  }\n\n  function parseEventString(eventString) {\n    return eventString.trim().split(' ').map(function (keyComboString) {\n      return parseKeyComboString(keyComboString);\n    });\n  }\n\n  /**\n   * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n   * keyboard commands that pertain to [WAI-ARIA best practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding).\n   * The element takes care of browser differences with respect to Keyboard events\n   * and uses an expressive syntax to filter key presses.\n   *\n   * Use the `keyBindings` prototype property to express what combination of keys\n   * will trigger the callback. A key binding has the format\n   * `\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n   * `\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n   *\n   *      keyBindings: {\n   *        'space': '_onKeydown', // same as 'space:keydown'\n   *        'shift+tab': '_onKeydown',\n   *        'enter:keypress': '_onKeypress',\n   *        'esc:keyup': '_onKeyup'\n   *      }\n   *\n   * The callback will receive with an event containing the following information in `event.detail`:\n   *\n   *      _onKeydown: function(event) {\n   *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n   *        console.log(event.detail.key); // KEY only, e.g. \"tab\"\n   *        console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n   *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n   *      }\n   *\n   * Use the `keyEventTarget` attribute to set up event handlers on a specific\n   * node.\n   *\n   * See the [demo source code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\n   * for an example.\n   *\n   * @demo demo/index.html\n   * @polymerBehavior\n   */\n  Polymer.IronA11yKeysBehavior = {\n    properties: {\n      /**\n       * The EventTarget that will be firing relevant KeyboardEvents. Set it to\n       * `null` to disable the listeners.\n       * @type {?EventTarget}\n       */\n      keyEventTarget: {\n        type: Object,\n        value: function () {\n          return this;\n        }\n      },\n\n      /**\n       * If true, this property will cause the implementing element to\n       * automatically stop propagation on any handled KeyboardEvents.\n       */\n      stopKeyboardEventPropagation: {\n        type: Boolean,\n        value: false\n      },\n\n      _boundKeyHandlers: {\n        type: Array,\n        value: function () {\n          return [];\n        }\n      },\n\n      // We use this due to a limitation in IE10 where instances will have\n      // own properties of everything on the \"prototype\".\n      _imperativeKeyBindings: {\n        type: Object,\n        value: function () {\n          return {};\n        }\n      }\n    },\n\n    observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],\n\n    /**\n     * To be used to express what combination of keys  will trigger the relative\n     * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`\n     * @type {!Object}\n     */\n    keyBindings: {},\n\n    registered: function () {\n      this._prepKeyBindings();\n    },\n\n    attached: function () {\n      this._listenKeyEventListeners();\n    },\n\n    detached: function () {\n      this._unlistenKeyEventListeners();\n    },\n\n    /**\n     * Can be used to imperatively add a key binding to the implementing\n     * element. This is the imperative equivalent of declaring a keybinding\n     * in the `keyBindings` prototype property.\n     *\n     * @param {string} eventString\n     * @param {string} handlerName\n     */\n    addOwnKeyBinding: function (eventString, handlerName) {\n      this._imperativeKeyBindings[eventString] = handlerName;\n      this._prepKeyBindings();\n      this._resetKeyEventListeners();\n    },\n\n    /**\n     * When called, will remove all imperatively-added key bindings.\n     */\n    removeOwnKeyBindings: function () {\n      this._imperativeKeyBindings = {};\n      this._prepKeyBindings();\n      this._resetKeyEventListeners();\n    },\n\n    /**\n     * Returns true if a keyboard event matches `eventString`.\n     *\n     * @param {KeyboardEvent} event\n     * @param {string} eventString\n     * @return {boolean}\n     */\n    keyboardEventMatchesKeys: function (event, eventString) {\n      var keyCombos = parseEventString(eventString);\n      for (var i = 0; i < keyCombos.length; ++i) {\n        if (keyComboMatchesEvent(keyCombos[i], event)) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    _collectKeyBindings: function () {\n      var keyBindings = this.behaviors.map(function (behavior) {\n        return behavior.keyBindings;\n      });\n\n      if (keyBindings.indexOf(this.keyBindings) === -1) {\n        keyBindings.push(this.keyBindings);\n      }\n\n      return keyBindings;\n    },\n\n    _prepKeyBindings: function () {\n      this._keyBindings = {};\n\n      this._collectKeyBindings().forEach(function (keyBindings) {\n        for (var eventString in keyBindings) {\n          this._addKeyBinding(eventString, keyBindings[eventString]);\n        }\n      }, this);\n\n      for (var eventString in this._imperativeKeyBindings) {\n        this._addKeyBinding(eventString, this._imperativeKeyBindings[eventString]);\n      }\n\n      // Give precedence to combos with modifiers to be checked first.\n      for (var eventName in this._keyBindings) {\n        this._keyBindings[eventName].sort(function (kb1, kb2) {\n          var b1 = kb1[0].hasModifiers;\n          var b2 = kb2[0].hasModifiers;\n          return b1 === b2 ? 0 : b1 ? -1 : 1;\n        });\n      }\n    },\n\n    _addKeyBinding: function (eventString, handlerName) {\n      parseEventString(eventString).forEach(function (keyCombo) {\n        this._keyBindings[keyCombo.event] = this._keyBindings[keyCombo.event] || [];\n\n        this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);\n      }, this);\n    },\n\n    _resetKeyEventListeners: function () {\n      this._unlistenKeyEventListeners();\n\n      if (this.isAttached) {\n        this._listenKeyEventListeners();\n      }\n    },\n\n    _listenKeyEventListeners: function () {\n      if (!this.keyEventTarget) {\n        return;\n      }\n      Object.keys(this._keyBindings).forEach(function (eventName) {\n        var keyBindings = this._keyBindings[eventName];\n        var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);\n\n        this._boundKeyHandlers.push([this.keyEventTarget, eventName, boundKeyHandler]);\n\n        this.keyEventTarget.addEventListener(eventName, boundKeyHandler);\n      }, this);\n    },\n\n    _unlistenKeyEventListeners: function () {\n      var keyHandlerTuple;\n      var keyEventTarget;\n      var eventName;\n      var boundKeyHandler;\n\n      while (this._boundKeyHandlers.length) {\n        // My kingdom for block-scope binding and destructuring assignment..\n        keyHandlerTuple = this._boundKeyHandlers.pop();\n        keyEventTarget = keyHandlerTuple[0];\n        eventName = keyHandlerTuple[1];\n        boundKeyHandler = keyHandlerTuple[2];\n\n        keyEventTarget.removeEventListener(eventName, boundKeyHandler);\n      }\n    },\n\n    _onKeyBindingEvent: function (keyBindings, event) {\n      if (this.stopKeyboardEventPropagation) {\n        event.stopPropagation();\n      }\n\n      // if event has been already prevented, don't do anything\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      for (var i = 0; i < keyBindings.length; i++) {\n        var keyCombo = keyBindings[i][0];\n        var handlerName = keyBindings[i][1];\n        if (keyComboMatchesEvent(keyCombo, event)) {\n          this._triggerKeyHandler(keyCombo, handlerName, event);\n          // exit the loop if eventDefault was prevented\n          if (event.defaultPrevented) {\n            return;\n          }\n        }\n      }\n    },\n\n    _triggerKeyHandler: function (keyCombo, handlerName, keyboardEvent) {\n      var detail = Object.create(keyCombo);\n      detail.keyboardEvent = keyboardEvent;\n      var event = new CustomEvent(keyCombo.event, {\n        detail: detail,\n        cancelable: true\n      });\n      this[handlerName].call(this, event);\n      if (event.defaultPrevented) {\n        keyboardEvent.preventDefault();\n      }\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n  'use strict';\n\n  let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n  let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  let workingURL;\n  let resolveDoc;\n  /**\n   * Resolves the given URL against the provided `baseUri'.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} url Input URL to resolve\n   * @param {?string=} baseURI Base URI to resolve the URL against\n   * @return {string} resolved URL\n   */\n  function resolveUrl(url, baseURI) {\n    if (url && ABS_URL.test(url)) {\n      return url;\n    }\n    // Lazy feature detection.\n    if (workingURL === undefined) {\n      workingURL = false;\n      try {\n        const u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        workingURL = u.href === 'http://a/c%20d';\n      } catch (e) {\n        // silently fail\n      }\n    }\n    if (!baseURI) {\n      baseURI = document.baseURI || window.location.href;\n    }\n    if (workingURL) {\n      return new URL(url, baseURI).href;\n    }\n    // Fallback to creating an anchor into a disconnected document.\n    if (!resolveDoc) {\n      resolveDoc = document.implementation.createHTMLDocument('temp');\n      resolveDoc.base = resolveDoc.createElement('base');\n      resolveDoc.head.appendChild(resolveDoc.base);\n      resolveDoc.anchor = resolveDoc.createElement('a');\n      resolveDoc.body.appendChild(resolveDoc.anchor);\n    }\n    resolveDoc.base.href = baseURI;\n    resolveDoc.anchor.href = url;\n    return resolveDoc.anchor.href || url;\n  }\n\n  /**\n   * Resolves any relative URL's in the given CSS text against the provided\n   * `ownerDocument`'s `baseURI`.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} cssText CSS text to process\n   * @param {string} baseURI Base URI to resolve the URL against\n   * @return {string} Processed CSS text with resolved URL's\n   */\n  function resolveCss(cssText, baseURI) {\n    return cssText.replace(CSS_URL_RX, function (m, pre, url, post) {\n      return pre + '\\'' + resolveUrl(url.replace(/[\"']/g, ''), baseURI) + '\\'' + post;\n    });\n  }\n\n  /**\n   * Returns a path from a given `url`. The path includes the trailing\n   * `/` from the url.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} url Input URL to transform\n   * @return {string} resolved path\n   */\n  function pathFromUrl(url) {\n    return url.substring(0, url.lastIndexOf('/') + 1);\n  }\n\n  /**\n   * Module with utilities for resolving relative URL's.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for resolving relative URL's.\n   */\n  Polymer.ResolveUrl = {\n    resolveCss: resolveCss,\n    resolveUrl: resolveUrl,\n    pathFromUrl: pathFromUrl\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3Jlc29sdmUtdXJsLmh0bWw/ZTExOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vYm9vdC5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBsZXQgQ1NTX1VSTF9SWCA9IC8odXJsXFwoKShbXildKikoXFwpKS9nO1xuICBsZXQgQUJTX1VSTCA9IC8oXlxcLyl8KF4jKXwoXltcXHctXFxkXSo6KS87XG4gIGxldCB3b3JraW5nVVJMO1xuICBsZXQgcmVzb2x2ZURvYztcbiAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBnaXZlbiBVUkwgYWdhaW5zdCB0aGUgcHJvdmlkZWQgYGJhc2VVcmknLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lci5SZXNvbHZlVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHJlc29sdmVcbiAgICogQHBhcmFtIHs/c3RyaW5nPX0gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHJlc29sdmVkIFVSTFxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb2x2ZVVybCh1cmwsIGJhc2VVUkkpIHtcbiAgICBpZiAodXJsICYmIEFCU19VUkwudGVzdCh1cmwpKSB7XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgICAvLyBMYXp5IGZlYXR1cmUgZGV0ZWN0aW9uLlxuICAgIGlmICh3b3JraW5nVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHdvcmtpbmdVUkwgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKCdiJywgJ2h0dHA6Ly9hJyk7XG4gICAgICAgIHUucGF0aG5hbWUgPSAnYyUyMGQnO1xuICAgICAgICB3b3JraW5nVVJMID0gdS5ocmVmID09PSAnaHR0cDovL2EvYyUyMGQnO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBzaWxlbnRseSBmYWlsXG4gICAgICB9XG4gICAgfVxuICAgIGlmICghYmFzZVVSSSkge1xuICAgICAgYmFzZVVSSSA9IGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxuICAgIGlmICh3b3JraW5nVVJMKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTCh1cmwsIGJhc2VVUkkpLmhyZWY7XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIGNyZWF0aW5nIGFuIGFuY2hvciBpbnRvIGEgZGlzY29ubmVjdGVkIGRvY3VtZW50LlxuICAgIGlmICghcmVzb2x2ZURvYykge1xuICAgICAgcmVzb2x2ZURvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgndGVtcCcpO1xuICAgICAgcmVzb2x2ZURvYy5iYXNlID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgICByZXNvbHZlRG9jLmhlYWQuYXBwZW5kQ2hpbGQocmVzb2x2ZURvYy5iYXNlKTtcbiAgICAgIHJlc29sdmVEb2MuYW5jaG9yID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICByZXNvbHZlRG9jLmJvZHkuYXBwZW5kQ2hpbGQocmVzb2x2ZURvYy5hbmNob3IpO1xuICAgIH1cbiAgICByZXNvbHZlRG9jLmJhc2UuaHJlZiA9IGJhc2VVUkk7XG4gICAgcmVzb2x2ZURvYy5hbmNob3IuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gcmVzb2x2ZURvYy5hbmNob3IuaHJlZiB8fCB1cmw7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYW55IHJlbGF0aXZlIFVSTCdzIGluIHRoZSBnaXZlbiBDU1MgdGV4dCBhZ2FpbnN0IHRoZSBwcm92aWRlZFxuICAgKiBgb3duZXJEb2N1bWVudGAncyBgYmFzZVVSSWAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyLlJlc29sdmVVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHQgQ1NTIHRleHQgdG8gcHJvY2Vzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFByb2Nlc3NlZCBDU1MgdGV4dCB3aXRoIHJlc29sdmVkIFVSTCdzXG4gICAqL1xuICBmdW5jdGlvbiByZXNvbHZlQ3NzKGNzc1RleHQsIGJhc2VVUkkpIHtcbiAgICByZXR1cm4gY3NzVGV4dC5yZXBsYWNlKENTU19VUkxfUlgsIGZ1bmN0aW9uIChtLCBwcmUsIHVybCwgcG9zdCkge1xuICAgICAgcmV0dXJuIHByZSArICdcXCcnICsgcmVzb2x2ZVVybCh1cmwucmVwbGFjZSgvW1wiJ10vZywgJycpLCBiYXNlVVJJKSArICdcXCcnICsgcG9zdDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcGF0aCBmcm9tIGEgZ2l2ZW4gYHVybGAuIFRoZSBwYXRoIGluY2x1ZGVzIHRoZSB0cmFpbGluZ1xuICAgKiBgL2AgZnJvbSB0aGUgdXJsLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lci5SZXNvbHZlVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHRyYW5zZm9ybVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHJlc29sdmVkIHBhdGhcbiAgICovXG4gIGZ1bmN0aW9uIHBhdGhGcm9tVXJsKHVybCkge1xuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciByZXNvbHZpbmcgcmVsYXRpdmUgVVJMJ3MuXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciByZXNvbHZpbmcgcmVsYXRpdmUgVVJMJ3MuXG4gICAqL1xuICBQb2x5bWVyLlJlc29sdmVVcmwgPSB7XG4gICAgcmVzb2x2ZUNzczogcmVzb2x2ZUNzcyxcbiAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLFxuICAgIHBhdGhGcm9tVXJsOiBwYXRoRnJvbVVybFxuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvcmVzb2x2ZS11cmwuaHRtbFxuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, { characterData: true });\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return {\n          run(fn) {\n            return setTimeout(fn, delay);\n          },\n          cancel: window.clearTimeout.bind(window)\n        };\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.animationFrame\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {function(IdleDeadline)} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ? window.requestIdleCallback(fn) : window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        window.cancelIdleCallback ? window.cancelIdleCallback(handle) : window.clearTimeout(handle);\n      }\n    },\n\n    /**\n     * Async interface for enqueuing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueuing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {Function} callback Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(3);\n\n(function () {\n  'use strict';\n\n  // Common implementation for mixin & behavior\n\n  function mutablePropertyChange(inst, property, value, old, mutableData) {\n    let isObject;\n    if (mutableData) {\n      isObject = typeof value === 'object' && value !== null;\n      // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n      if (isObject) {\n        old = inst.__dataTemp[property];\n      }\n    }\n    // Strict equality check, but return false for NaN===NaN\n    let shouldChange = old !== value && (old === old || value === value);\n    // Objects are stored in temporary cache (cleared at end of\n    // turn), which is used for dirty-checking\n    if (isObject && shouldChange) {\n      inst.__dataTemp[property] = value;\n    }\n    return shouldChange;\n  }\n\n  /**\n   * Element class mixin to skip strict dirty-checking for objects and arrays\n   * (always consider them to be \"dirty\"), for use on elements utilizing\n   * `Polymer.PropertyEffects`\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will cause Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * In order to make the dirty check strategy configurable, see\n   * `Polymer.OptionalMutableData`.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse as opposed to using strict dirty checking with immutable\n   * patterns or Polymer's path notification API.\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin to skip strict dirty-checking for objects\n   *   and arrays\n   */\n  Polymer.MutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_MutableData}\n     */\n    class MutableData extends superClass {\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * This method pulls the value to dirty check against from the `__dataTemp`\n       * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, true);\n      }\n\n    }\n    /** @type {boolean} */\n    MutableData.prototype.mutableData = false;\n\n    return MutableData;\n  });\n\n  /**\n   * Element class mixin to add the optional ability to skip strict\n   * dirty-checking for objects and arrays (always consider them to be\n   * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will allow Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * While this mixin adds the ability to forgo Object/Array dirty checking,\n   * the `mutableData` flag defaults to false and must be set on the instance.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse by relying on `mutableData: true` as opposed to using\n   * strict dirty checking with immutable patterns or Polymer's path notification\n   * API.\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin to optionally skip strict dirty-checking\n   *   for objects and arrays\n   */\n  Polymer.OptionalMutableData = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @mixinClass\n     * @polymer\n     * @implements {Polymer_OptionalMutableData}\n     */\n    class OptionalMutableData extends superClass {\n\n      static get properties() {\n        return {\n          /**\n           * Instance-level flag for configuring the dirty-checking strategy\n           * for this element.  When true, Objects and Arrays will skip dirty\n           * checking, otherwise strict equality checking will be used.\n           */\n          mutableData: Boolean\n        };\n      }\n\n      /**\n       * Overrides `Polymer.PropertyEffects` to provide option for skipping\n       * strict equality checking for Objects and Arrays.\n       *\n       * When `this.mutableData` is true on this instance, this method\n       * pulls the value to dirty check against from the `__dataTemp` cache\n       * (rather than the normal `__data` cache) for Objects.  Since the temp\n       * cache is cleared at the end of a turn, this implementation allows\n       * side-effects of deep object changes to be processed by re-setting the\n       * same object (using the temp cache as an in-turn backstop to prevent\n       * cycles due to 2-way notification).\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return mutablePropertyChange(this, property, value, old, this.mutableData);\n      }\n    }\n\n    return OptionalMutableData;\n  });\n\n  // Export for use by legacy behavior\n  Polymer.MutableData._mutablePropertyChange = mutablePropertyChange;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(21);\n\n__webpack_require__(6);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-icon> <template> <style>:host{@apply --layout-inline;@apply --layout-center-center;position:relative;vertical-align:middle;fill:var(--iron-icon-fill-color,currentcolor);stroke:var(--iron-icon-stroke-color,none);width:var(--iron-icon-width,24px);height:var(--iron-icon-height,24px);@apply --iron-icon;}:host([hidden]){display:none}</style> </template> </dom-module>\");\n\nPolymer({\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {\n      type: String\n    },\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {\n      type: String\n    },\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {\n      type: String\n    },\n\n    /**\n     * @type {!Polymer.IronMeta}\n     */\n    _meta: {\n      value: Polymer.Base.create('iron-meta', { type: 'iconset' })\n    }\n\n  },\n\n  observers: ['_updateIcon(_meta, isAttached)', '_updateIcon(theme, isAttached)', '_srcChanged(src, isAttached)', '_iconChanged(icon, isAttached)'],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function (icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function (src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function () {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function () {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        Polymer.dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === \"\") {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */this._meta.byKey(this._iconsetName);\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      Polymer.dom(this.root).appendChild(this._img);\n    }\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24taWNvbi9pcm9uLWljb24uaHRtbD82MmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1tZXRhL2lyb24tbWV0YS5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tZmxleC1sYXlvdXQvaXJvbi1mbGV4LWxheW91dC5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9aXJvbi1pY29uPiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtAYXBwbHkgLS1sYXlvdXQtaW5saW5lO0BhcHBseSAtLWxheW91dC1jZW50ZXItY2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtmaWxsOnZhcigtLWlyb24taWNvbi1maWxsLWNvbG9yLGN1cnJlbnRjb2xvcik7c3Ryb2tlOnZhcigtLWlyb24taWNvbi1zdHJva2UtY29sb3Isbm9uZSk7d2lkdGg6dmFyKC0taXJvbi1pY29uLXdpZHRoLDI0cHgpO2hlaWdodDp2YXIoLS1pcm9uLWljb24taGVpZ2h0LDI0cHgpO0BhcHBseSAtLWlyb24taWNvbjt9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX08L3N0eWxlPiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG5Qb2x5bWVyKHtcblxuICBpczogJ2lyb24taWNvbicsXG5cbiAgcHJvcGVydGllczoge1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGljb24gdG8gdXNlLiBUaGUgbmFtZSBzaG91bGQgYmUgb2YgdGhlIGZvcm06XG4gICAgICogYGljb25zZXRfbmFtZTppY29uX25hbWVgLlxuICAgICAqL1xuICAgIGljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdGhlbWUgdG8gdXNlZCwgaWYgb25lIGlzIHNwZWNpZmllZCBieSB0aGVcbiAgICAgKiBpY29uc2V0LlxuICAgICAqL1xuICAgIHRoZW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgaXJvbi1pY29uIHdpdGhvdXQgYW4gaWNvbnNldCwgeW91IGNhbiBzZXQgdGhlIHNyYyB0byBiZVxuICAgICAqIHRoZSBVUkwgb2YgYW4gaW5kaXZpZHVhbCBpY29uIGltYWdlIGZpbGUuIE5vdGUgdGhhdCB0aGlzIHdpbGwgdGFrZVxuICAgICAqIHByZWNlZGVuY2Ugb3ZlciBhIGdpdmVuIGljb24gYXR0cmlidXRlLlxuICAgICAqL1xuICAgIHNyYzoge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshUG9seW1lci5Jcm9uTWV0YX1cbiAgICAgKi9cbiAgICBfbWV0YToge1xuICAgICAgdmFsdWU6IFBvbHltZXIuQmFzZS5jcmVhdGUoJ2lyb24tbWV0YScsIHsgdHlwZTogJ2ljb25zZXQnIH0pXG4gICAgfVxuXG4gIH0sXG5cbiAgb2JzZXJ2ZXJzOiBbJ191cGRhdGVJY29uKF9tZXRhLCBpc0F0dGFjaGVkKScsICdfdXBkYXRlSWNvbih0aGVtZSwgaXNBdHRhY2hlZCknLCAnX3NyY0NoYW5nZWQoc3JjLCBpc0F0dGFjaGVkKScsICdfaWNvbkNoYW5nZWQoaWNvbiwgaXNBdHRhY2hlZCknXSxcblxuICBfREVGQVVMVF9JQ09OU0VUOiAnaWNvbnMnLFxuXG4gIF9pY29uQ2hhbmdlZDogZnVuY3Rpb24gKGljb24pIHtcbiAgICB2YXIgcGFydHMgPSAoaWNvbiB8fCAnJykuc3BsaXQoJzonKTtcbiAgICB0aGlzLl9pY29uTmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgIHRoaXMuX2ljb25zZXROYW1lID0gcGFydHMucG9wKCkgfHwgdGhpcy5fREVGQVVMVF9JQ09OU0VUO1xuICAgIHRoaXMuX3VwZGF0ZUljb24oKTtcbiAgfSxcblxuICBfc3JjQ2hhbmdlZDogZnVuY3Rpb24gKHNyYykge1xuICAgIHRoaXMuX3VwZGF0ZUljb24oKTtcbiAgfSxcblxuICBfdXNlc0ljb25zZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pY29uIHx8ICF0aGlzLnNyYztcbiAgfSxcblxuICAvKiogQHN1cHByZXNzIHt2aXNpYmlsaXR5fSAqL1xuICBfdXBkYXRlSWNvbjogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl91c2VzSWNvbnNldCgpKSB7XG4gICAgICBpZiAodGhpcy5faW1nICYmIHRoaXMuX2ltZy5wYXJlbnROb2RlKSB7XG4gICAgICAgIFBvbHltZXIuZG9tKHRoaXMucm9vdCkucmVtb3ZlQ2hpbGQodGhpcy5faW1nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9pY29uTmFtZSA9PT0gXCJcIikge1xuICAgICAgICBpZiAodGhpcy5faWNvbnNldCkge1xuICAgICAgICAgIHRoaXMuX2ljb25zZXQucmVtb3ZlSWNvbih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9pY29uc2V0TmFtZSAmJiB0aGlzLl9tZXRhKSB7XG4gICAgICAgIHRoaXMuX2ljb25zZXQgPSAvKiogQHR5cGUgez9Qb2x5bWVyLkljb25zZXR9ICovdGhpcy5fbWV0YS5ieUtleSh0aGlzLl9pY29uc2V0TmFtZSk7XG4gICAgICAgIGlmICh0aGlzLl9pY29uc2V0KSB7XG4gICAgICAgICAgdGhpcy5faWNvbnNldC5hcHBseUljb24odGhpcywgdGhpcy5faWNvbk5hbWUsIHRoaXMudGhlbWUpO1xuICAgICAgICAgIHRoaXMudW5saXN0ZW4od2luZG93LCAnaXJvbi1pY29uc2V0LWFkZGVkJywgJ191cGRhdGVJY29uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW4od2luZG93LCAnaXJvbi1pY29uc2V0LWFkZGVkJywgJ191cGRhdGVJY29uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX2ljb25zZXQpIHtcbiAgICAgICAgdGhpcy5faWNvbnNldC5yZW1vdmVJY29uKHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9pbWcpIHtcbiAgICAgICAgdGhpcy5faW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIHRoaXMuX2ltZy5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5faW1nLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5faW1nLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5faW1nLnNyYyA9IHRoaXMuc3JjO1xuICAgICAgUG9seW1lci5kb20odGhpcy5yb290KS5hcHBlbmRDaGlsZCh0aGlzLl9pbWcpO1xuICAgIH1cbiAgfVxuXG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1pY29uL2lyb24taWNvbi5odG1sXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(9);\n\n__webpack_require__(23);\n\n/**\n * @demo demo/index.html\n * @polymerBehavior Polymer.IronButtonState\n */\nPolymer.IronButtonStateImpl = {\n\n  properties: {\n\n    /**\n     * If true, the user is currently holding down the button.\n     */\n    pressed: {\n      type: Boolean,\n      readOnly: true,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_pressedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n\n    /**\n     * If true, the button is a toggle and is currently in the active state.\n     */\n    active: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * True if the element is currently being pressed by a \"pointer,\" which\n     * is loosely defined as mouse or touch input (but specifically excluding\n     * keyboard input).\n     */\n    pointerDown: {\n      type: Boolean,\n      readOnly: true,\n      value: false\n    },\n\n    /**\n     * True if the input device that caused the element to receive focus\n     * was a keyboard.\n     */\n    receivedFocusFromKeyboard: {\n      type: Boolean,\n      readOnly: true\n    },\n\n    /**\n     * The aria attribute to be set if the button is a toggle and in the\n     * active state.\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-pressed',\n      observer: '_ariaActiveAttributeChanged'\n    }\n  },\n\n  listeners: {\n    down: '_downHandler',\n    up: '_upHandler',\n    tap: '_tapHandler'\n  },\n\n  observers: ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],\n\n  keyBindings: {\n    'enter:keydown': '_asyncClick',\n    'space:keydown': '_spaceKeyDownHandler',\n    'space:keyup': '_spaceKeyUpHandler'\n  },\n\n  _mouseEventRe: /^mouse/,\n\n  _tapHandler: function () {\n    if (this.toggles) {\n      // a tap is needed to toggle the active state\n      this._userActivate(!this.active);\n    } else {\n      this.active = false;\n    }\n  },\n\n  _focusChanged: function (focused) {\n    this._detectKeyboardFocus(focused);\n\n    if (!focused) {\n      this._setPressed(false);\n    }\n  },\n\n  _detectKeyboardFocus: function (focused) {\n    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);\n  },\n\n  // to emulate native checkbox, (de-)activations from a user interaction fire\n  // 'change' events\n  _userActivate: function (active) {\n    if (this.active !== active) {\n      this.active = active;\n      this.fire('change');\n    }\n  },\n\n  _downHandler: function (event) {\n    this._setPointerDown(true);\n    this._setPressed(true);\n    this._setReceivedFocusFromKeyboard(false);\n  },\n\n  _upHandler: function () {\n    this._setPointerDown(false);\n    this._setPressed(false);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function (event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = Polymer.dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant( /** @type {Node} */target)) return;\n\n    keyboardEvent.preventDefault();\n    keyboardEvent.stopImmediatePropagation();\n    this._setPressed(true);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function (event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = Polymer.dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant( /** @type {Node} */target)) return;\n\n    if (this.pressed) {\n      this._asyncClick();\n    }\n    this._setPressed(false);\n  },\n\n  // trigger click asynchronously, the asynchrony is useful to allow one\n  // event handler to unwind before triggering another event\n  _asyncClick: function () {\n    this.async(function () {\n      this.click();\n    }, 1);\n  },\n\n  // any of these changes are considered a change to button state\n\n  _pressedChanged: function (pressed) {\n    this._changedButtonState();\n  },\n\n  _ariaActiveAttributeChanged: function (value, oldValue) {\n    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {\n      this.removeAttribute(oldValue);\n    }\n  },\n\n  _activeChanged: function (active, ariaActiveAttribute) {\n    if (this.toggles) {\n      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');\n    } else {\n      this.removeAttribute(this.ariaActiveAttribute);\n    }\n    this._changedButtonState();\n  },\n\n  _controlStateChanged: function () {\n    if (this.disabled) {\n      this._setPressed(false);\n    } else {\n      this._changedButtonState();\n    }\n  },\n\n  // provide hook for follow-on behaviors to react to button-state\n\n  _changedButtonState: function () {\n    if (this._buttonStateChanged) {\n      this._buttonStateChanged(); // abstract\n    }\n  }\n\n};\n\n/** @polymerBehavior */\nPolymer.IronButtonState = [Polymer.IronA11yKeysBehavior, Polymer.IronButtonStateImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL, m => m[1].toUpperCase()));\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase());\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2Nhc2UtbWFwLmh0bWw/OTcxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vYm9vdC5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBjb25zdCBjYXNlTWFwID0ge307XG4gIGNvbnN0IERBU0hfVE9fQ0FNRUwgPSAvLVthLXpdL2c7XG4gIGNvbnN0IENBTUVMX1RPX0RBU0ggPSAvKFtBLVpdKS9nO1xuXG4gIC8qKlxuICAgKiBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbnZlcnRpbmcgYmV0d2VlbiBcImRhc2gtY2FzZVwiIGFuZCBcImNhbWVsQ2FzZVwiXG4gICAqIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IE1vZHVsZSB0aGF0IHByb3ZpZGVzIHV0aWxpdGllcyBmb3IgY29udmVydGluZyBiZXR3ZWVuIFwiZGFzaC1jYXNlXCJcbiAgICogICBhbmQgXCJjYW1lbENhc2VcIi5cbiAgICovXG4gIGNvbnN0IENhc2VNYXAgPSB7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBcImRhc2gtY2FzZVwiIGlkZW50aWZpZXIgKGUuZy4gYGZvby1iYXItYmF6YCkgdG8gXCJjYW1lbENhc2VcIlxuICAgICAqIChlLmcuIGBmb29CYXJCYXpgKS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkNhc2VNYXBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGFzaCBEYXNoLWNhc2UgaWRlbnRpZmllclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWwtY2FzZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaWRlbnRpZmllclxuICAgICAqL1xuICAgIGRhc2hUb0NhbWVsQ2FzZShkYXNoKSB7XG4gICAgICByZXR1cm4gY2FzZU1hcFtkYXNoXSB8fCAoY2FzZU1hcFtkYXNoXSA9IGRhc2guaW5kZXhPZignLScpIDwgMCA/IGRhc2ggOiBkYXNoLnJlcGxhY2UoREFTSF9UT19DQU1FTCwgbSA9PiBtWzFdLnRvVXBwZXJDYXNlKCkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgXCJjYW1lbENhc2VcIiBpZGVudGlmaWVyIChlLmcuIGBmb29CYXJCYXpgKSB0byBcImRhc2gtY2FzZVwiXG4gICAgICogKGUuZy4gYGZvby1iYXItYmF6YCkuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5DYXNlTWFwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbWVsIENhbWVsLWNhc2UgaWRlbnRpZmllclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gRGFzaC1jYXNlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgY2FtZWxUb0Rhc2hDYXNlKGNhbWVsKSB7XG4gICAgICByZXR1cm4gY2FzZU1hcFtjYW1lbF0gfHwgKGNhc2VNYXBbY2FtZWxdID0gY2FtZWwucmVwbGFjZShDQU1FTF9UT19EQVNILCAnLSQxJykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gIH07XG5cbiAgUG9seW1lci5DYXNlTWFwID0gQ2FzZU1hcDtcbn0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2Nhc2UtbWFwLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(48);\n\n__webpack_require__(15);\n\n__webpack_require__(30);\n\n__webpack_require__(49);\n\n(function () {\n\n  'use strict';\n\n  /** @const {Object} */\n\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  /**\n   * Property effect types; effects are stored on the prototype using these keys\n   * @enum {string}\n   */\n  const TYPES = {\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  };\n\n  /**\n   * @typedef {{\n   * name: (string | undefined),\n   * structured: (boolean | undefined),\n   * wildcard: (boolean | undefined)\n   * }}\n   */\n  let DataTrigger; //eslint-disable-line no-unused-vars\n\n  /**\n   * @typedef {{\n   * info: ?,\n   * trigger: (!DataTrigger | undefined),\n   * fn: (!Function | undefined)\n   * }}\n   */\n  let DataEffect; //eslint-disable-line no-unused-vars\n\n  let PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i = 0; i < protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n    if (effects) {\n      let ran = false;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n    return false;\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {number} dedupeId Counter used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} props Changed properties\n   * @param {*} oldProps Old properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n    let ran = false;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i = 0, l = fxs.length, fx; i < l && (fx = fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {DataTrigger} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return triggerPath == path || trigger.structured && Polymer.Path.isAncestor(triggerPath, path) || trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else if (!info.dynamicFn) {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} notifyProps Bag of properties to notify\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst[TYPES.NOTIFY];\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    // And the host has already initialized clients; this prevents\n    // an issue with a host observing data changes before clients are ready.\n    let host;\n    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n      host._invalidateProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {!PropertyEffectsType} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {Object} props Bag of current property changes\n   * @return {boolean} Returns true if the path was notified\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {!PropertyEffectsType} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   * @suppress {invalidCasts}\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    /** @type {!HTMLElement} */inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property]; // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n   * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n   * @param {string} fromProp Child element property that was bound\n   * @param {string} toPath Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(event, inst, fromProp, toPath, negate) {\n    let value;\n    let detail = /** @type {Object} */event.detail;\n    let fromPath = detail && detail.path;\n    if (fromPath) {\n      toPath = Polymer.Path.translate(fromProp, toPath, fromPath);\n      value = detail && detail.value;\n    } else {\n      value = event.target[fromProp];\n    }\n    value = negate ? !value : value;\n    if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath)) && (!detail || !detail.queueProperty)) {\n        inst._invalidateProperties();\n      }\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {!Object} changedProps Bag of changed properties\n   * @param {!Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst[TYPES.COMPUTE];\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {!PropertyEffectsType} inst The instance whose props are changing\n   * @param {string | !Array<(string|number)>} path Path that has changed\n   * @param {*} value Value of changed path\n   * @private\n   */\n  function computeLinkedPaths(inst, path, value) {\n    let links = inst.__dataLinkedPaths;\n    if (links) {\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        if (Polymer.Path.isDescendant(a, path)) {\n          link = Polymer.Path.translate(a, b, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        } else if (Polymer.Path.isDescendant(b, path)) {\n          link = Polymer.Path.translate(b, a, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds binding metadata to the current `nodeInfo`, and binding effects\n   * for all part dependencies to `templateInfo`.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {TemplateInfo} templateInfo Template metadata for current template\n   * @param {NodeInfo} nodeInfo Node metadata for current template node\n   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n   * @param {string} target Target property name\n   * @param {!Array<!BindingPart>} parts Array of binding part metadata\n   * @param {string=} literal Literal text surrounding binding parts (specified\n   *   only for 'property' bindings, since these must be initialized as part\n   *   of boot-up)\n   * @private\n   */\n  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n    // Create binding metadata and add to nodeInfo\n    nodeInfo.bindings = nodeInfo.bindings || [];\n    let /** Binding */binding = { kind, target, parts, literal, isCompound: parts.length !== 1 };\n    nodeInfo.bindings.push(binding);\n    // Add listener info to binding metadata\n    if (shouldAddListener(binding)) {\n      let { event, negate } = binding.parts[0];\n      binding.listenerEvent = event || CaseMap.camelToDashCase(target) + '-changed';\n      binding.listenerNegate = negate;\n    }\n    // Add \"propagate\" property effects to templateInfo\n    let index = templateInfo.nodeInfoList.length;\n    for (let i = 0; i < binding.parts.length; i++) {\n      let part = binding.parts[i];\n      part.compoundIndex = i;\n      addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n    }\n  }\n\n  /**\n   * Adds property effects to the given `templateInfo` for the given binding\n   * part.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {TemplateInfo} templateInfo Template metadata for current template\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @param {number} index Index into `nodeInfoList` for this node\n   */\n  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n    if (!part.literal) {\n      if (binding.kind === 'attribute' && binding.target[0] === '-') {\n        console.warn('Cannot set attribute ' + binding.target + ' because \"-\" is not a valid attribute starting character');\n      } else {\n        let dependencies = part.dependencies;\n        let info = { index, binding, part, evaluator: constructor };\n        for (let j = 0; j < dependencies.length; j++) {\n          let trigger = dependencies[j];\n          if (typeof trigger == 'string') {\n            trigger = parseArg(trigger);\n            trigger.wildcard = true;\n          }\n          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n            fn: runBindingEffect,\n            info, trigger\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * Note that binding syntax is overridable via `_parseBindings` and\n   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n   * non-literal parts returned from `_parseBindings`.  However,\n   * there is no support for _path_ bindings via custom binding parts,\n   * as this is specific to Polymer's path binding syntax.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n   *   metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n    let node = nodeList[info.index];\n    let binding = info.binding;\n    let part = info.part;\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && part.source && path.length > part.source.length && binding.kind == 'property' && !binding.isCompound && node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n      let value = props[path];\n      path = Polymer.Path.translate(part.source, binding.target, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n      // Propagate value to child\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {!PropertyEffectsType} inst The instance owning the binding effect\n   * @param {Node} node Target node for binding\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, node, binding, part, value) {\n    value = computeBindingValue(node, value, binding, part);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, binding.target, binding.kind, node);\n    }\n    if (binding.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute( /** @type {Element} */node, value, binding.target);\n    } else {\n      // Property binding\n      let prop = binding.target;\n      if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n        if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, binding, part) {\n    if (binding.isCompound) {\n      let storage = node.__dataCompoundStorage[binding.target];\n      storage[part.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (binding.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (binding.target === 'textContent' || binding.target === 'value' && (node.localName === 'input' || node.localName === 'textarea')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a `<property>-changed` event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {!Binding} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return Boolean(binding.target) && binding.kind != 'attribute' && binding.kind != 'text' && !binding.isCompound && binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Setup compound binding storage structures, notify listeners, and dataHost\n   * references onto the bound nodeList.\n   *\n   * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n   * @param {TemplateInfo} templateInfo Template metadata\n   * @private\n   */\n  function setupBindings(inst, templateInfo) {\n    // Setup compound storage, dataHost, and notify listeners\n    let { nodeList, nodeInfoList } = templateInfo;\n    if (nodeInfoList.length) {\n      for (let i = 0; i < nodeInfoList.length; i++) {\n        let info = nodeInfoList[i];\n        let node = nodeList[i];\n        let bindings = info.bindings;\n        if (bindings) {\n          for (let i = 0; i < bindings.length; i++) {\n            let binding = bindings[i];\n            setupCompoundStorage(node, binding);\n            addNotifyListener(node, inst, binding);\n          }\n        }\n        node.__dataHost = inst;\n      }\n    }\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Node} node Bound node to initialize\n   * @param {Binding} binding Binding metadata\n   * @private\n   */\n  function setupCompoundStorage(node, binding) {\n    if (binding.isCompound) {\n      // Create compound storage map\n      let storage = node.__dataCompoundStorage || (node.__dataCompoundStorage = {});\n      let parts = binding.parts;\n      // Copy literals from parts into storage for this binding\n      let literals = new Array(parts.length);\n      for (let j = 0; j < parts.length; j++) {\n        literals[j] = parts[j].literal;\n      }\n      let target = binding.target;\n      storage[target] = literals;\n      // Configure properties with their literal parts\n      if (binding.literal && binding.kind == 'property') {\n        node[target] = binding.literal;\n      }\n    }\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n   * @param {Binding} binding Binding metadata\n   * @private\n   */\n  function addNotifyListener(node, inst, binding) {\n    if (binding.listenerEvent) {\n      let part = binding.parts[0];\n      node.addEventListener(binding.listenerEvent, function (e) {\n        handleNotification(e, inst, binding.target, part.source, part.negate);\n      });\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {!MethodSignature} sig Method signature metadata\n   * @param {string} type Type of property effect to add\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo Effect-specific information to be included in\n   *   method effect metadata\n   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n   *   method names should be included as a dependency to the effect. Note,\n   *   defaults to true if the signature is static (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n    dynamicFn = sig.static || dynamicFn && (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]);\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i = 0, arg; i < sig.args.length && (arg = sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @return {*} Returns the return value from the method invocation\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  // Regular expressions used for binding\n  const IDENT = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n  const NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n  const SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n  const DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n  const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' + STRING + ')\\\\s*' + ')';\n  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n  const ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' + '(?:' + ARGUMENTS + '?' + ')' + '\\\\)\\\\s*' + ')';\n  const BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n  const OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n  const CLOSE_BRACKET = '(?:]]|}})';\n  const NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n  const bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n  /**\n   * Create a string from binding parts of all the literal parts\n   *\n   * @param {!Array<BindingPart>} parts All parts to stringify\n   * @return {string} String made from the literal parts\n   */\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i = 0; i < parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?MethodSignature} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let methodName = m[1];\n      let sig = { methodName, static: true, args: emptyArray };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {!Array<string>} argList Array of argument names\n   * @param {!MethodSignature} sig Method signature metadata object\n   * @return {!MethodSignature} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function (rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {!MethodArg} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1');\n    // basic argument descriptor\n    let a = {\n      name: arg,\n      value: '',\n      literal: false\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch (fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isPath(arg);\n      if (a.structured) {\n        a.wildcard = arg.slice(-2) == '.*';\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {!Array<!MethodArg>} args Array of argument metadata\n   * @param {string} path Property/path name that triggered the method effect\n   * @param {Object} props Bag of current property changes\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i = 0, l = args.length; i < l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = name.indexOf(path + '.') === 0;\n        let matches = path.indexOf(name) === 0 && !baseChanged;\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {!PropertyEffectsType} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = { indexSplices: null };\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {!PropertyEffectsType} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key static methods for adding\n   * property effects to an element class:\n   * - `addPropertyEffect`\n   * - `createPropertyObserver`\n   * - `createMethodObserver`\n   * - `createNotifyingProperty`\n   * - `createReadOnlyProperty`\n   * - `createReflectedProperty`\n   * - `createComputedProperty`\n   * - `bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.\n   *\n   * Underscored versions of the above methods also exist on the element\n   * prototype for adding property effects on instances at runtime.\n   *\n   * Note that this mixin overrides several `PropertyAccessors` methods, in\n   * many cases to maintain guarantees provided by the Polymer 1.x features;\n   * notably it changes property accessors to be synchronous by default\n   * whereas the default when using `PropertyAccessors` standalone is to be\n   * async by default.\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.TemplateStamp\n   * @appliesMixin Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_PropertyAccessors}\n     * @implements {Polymer_TemplateStamp}\n     * @unrestricted\n     */\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_PropertyEffects}\n     * @extends {propertyEffectsBase}\n     * @unrestricted\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      constructor() {\n        super();\n        /** @type {boolean} */\n        this.__dataClientsReady;\n        /** @type {Array} */\n        this.__dataPendingClients;\n        /** @type {Object} */\n        this.__dataToNotify;\n        /** @type {Object} */\n        this.__dataLinkedPaths;\n        /** @type {boolean} */\n        this.__dataHasPaths;\n        /** @type {Object} */\n        this.__dataCompoundStorage;\n        /** @type {Polymer_PropertyEffects} */\n        this.__dataHost;\n        /** @type {!Object} */\n        this.__dataTemp;\n        /** @type {boolean} */\n        this.__dataClientsInitialized;\n        /** @type {!Object} */\n        this.__data;\n        /** @type {!Object} */\n        this.__dataPending;\n        /** @type {!Object} */\n        this.__dataOld;\n        /** @type {Object} */\n        this.__computeEffects;\n        /** @type {Object} */\n        this.__reflectEffects;\n        /** @type {Object} */\n        this.__notifyEffects;\n        /** @type {Object} */\n        this.__propagateEffects;\n        /** @type {Object} */\n        this.__observeEffects;\n        /** @type {Object} */\n        this.__readOnly;\n        /** @type {number} */\n        this.__dataCounter;\n        /** @type {!TemplateInfo} */\n        this.__templateInfo;\n      }\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      _initializeProperties() {\n        super._initializeProperties();\n        hostStack.registerHost(this);\n        this.__dataClientsReady = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n        this.__dataClientsInitialized = false;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the prototype\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the instance\n       */\n      _initializeInstanceProperties(props) {\n        let readOnly = this[TYPES.READ_ONLY];\n        for (let prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        let effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n      _removePropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, type)[property];\n        let idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification || Polymer.Path.root(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            let old = Polymer.Path.get(this, path);\n            path = /** @type {string} */Polymer.Path.set(this, path, value);\n            // Use property-accessor's simpler dirty check\n            if (!path || !super._shouldPropertyChange(path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty( /**@type{string}*/path, value, shouldNotify)) {\n            computeLinkedPaths(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty( /**@type{string}*/path, value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChanged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify True if property should fire notification\n       *   event (applies only for `notify: true` properties)\n       * @return {boolean} Returns true if the property changed\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property]) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataReady) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsReady) {\n          this.__dataClientsReady = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataReady = true;\n        } else {\n          this.__enableOrFlushClients();\n        }\n      }\n\n      // NOTE: We ensure clients either enable or flush as appropriate. This\n      // handles two corner cases:\n      // (1) clients flush properly when connected/enabled before the host\n      // enables; e.g.\n      //   (a) Templatize stamps with no properties and does not flush and\n      //   (b) the instance is inserted into dom and\n      //   (c) then the instance flushes.\n      // (2) clients enable properly when not connected/enabled when the host\n      // flushes; e.g.\n      //   (a) a template is runtime stamped and not yet connected/enabled\n      //   (b) a host sets a property, causing stamped dom to flush\n      //   (c) the stamped dom enables.\n      __enableOrFlushClients() {\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i = 0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            } else if (client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        this.__enableOrFlushClients();\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n      setProperties(props, setReadOnly) {\n        for (let path in props) {\n          if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n      ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsReady) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter == 1) {\n          this.__dataTemp = {};\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this[TYPES.PROPAGATE]) {\n          runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n        }\n        let templateInfo = this.__templateInfo;\n        while (templateInfo) {\n          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps, hasPaths, templateInfo.nodeList);\n          templateInfo = templateInfo.nextTemplateInfo;\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = { path: '' };\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */path]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = { path: '' };\n        let array = /** @type {Array}*/Polymer.Path.get(this, path, info);\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = { path: '' };\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = { path: '' };\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = { path: '' };\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = { path: '' };\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = { path: '' };\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */path;\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = /** @this {PropertyEffects} */function (value) {\n            this._setProperty(property, value);\n          };\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: { name: property }\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: { name: methodName }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' + attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *     {\n       *       fn: effectFunction, // Reference to function to call to perform effect\n       *       info: { ... }       // Effect metadata passed to function\n       *       trigger: {          // Optional triggering metadata; if not provided\n       *         name: string      // the property is treated as a wildcard\n       *         structured: boolean\n       *         wildcard: boolean\n       *       }\n       *     }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      static createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal JavaScript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      static createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal JavaScript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n\n      /**\n       * Parses the provided template to ensure binding effects are created\n       * for them, and then ensures property accessors are created for any\n       * dependent properties in the template.  Binding effects for bound\n       * templates are stored in a linked list on the instance so that\n       * templates can be efficiently stamped and unstamped.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @return {Object} Template metadata object\n       * @protected\n       */\n      static bindTemplate(template) {\n        return this.prototype._bindTemplate(template);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Equivalent to static `bindTemplate` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * This method may be called on the prototype (for prototypical template\n       * binding, to avoid creating accessors every instance) once per prototype,\n       * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n       * create and link an instance of the template metadata associated with a\n       * particular stamping.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {boolean=} instanceBinding When false (default), performs\n       *   \"prototypical\" binding of the template and overwrites any previously\n       *   bound template for the class. When true (as passed from\n       *   `_stampTemplate`), the template info is instanced and linked into\n       *   the list of bound templates.\n       * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n       *   this is an instance of the prototypical template info\n       * @protected\n       */\n      _bindTemplate(template, instanceBinding) {\n        let templateInfo = this.constructor._parseTemplate(template);\n        let wasPreBound = this.__templateInfo == templateInfo;\n        // Optimization: since this is called twice for proto-bound templates,\n        // don't attempt to recreate accessors if this template was pre-bound\n        if (!wasPreBound) {\n          for (let prop in templateInfo.propertyEffects) {\n            this._createPropertyAccessor(prop);\n          }\n        }\n        if (instanceBinding) {\n          // For instance-time binding, create instance of template metadata\n          // and link into list of templates if necessary\n          templateInfo = /** @type {!TemplateInfo} */Object.create(templateInfo);\n          templateInfo.wasPreBound = wasPreBound;\n          if (!wasPreBound && this.__templateInfo) {\n            let last = this.__templateInfoLast || this.__templateInfo;\n            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n            templateInfo.previousTemplateInfo = last;\n            return templateInfo;\n          }\n        }\n        return this.__templateInfo = templateInfo;\n      }\n\n      /**\n       * Adds a property effect to the given template metadata, which is run\n       * at the \"propagate\" stage of `_propertiesChanged` when the template\n       * has been bound to the element via `_bindTemplate`.\n       *\n       * The `effect` object should match the format in `_addPropertyEffect`.\n       *\n       * @param {Object} templateInfo Template metadata to add effect to\n       * @param {string} prop Property that should trigger the effect\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n        hostProps[prop] = true;\n        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n        let propEffects = effects[prop] = effects[prop] || [];\n        propEffects.push(effect);\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * This method may be called more than once; however note that due to\n       * `shadycss` polyfill limitations, only styles from templates prepared\n       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n       * to the shadow root and support CSS custom properties), and note that\n       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n       * any styles required by in runtime-stamped templates must be included\n       * in the main element template.\n       *\n       * @param {!HTMLTemplateElement} template Template to stamp\n       * @return {!StampedTemplate} Cloned template content\n       * @override\n       * @protected\n       */\n      _stampTemplate(template) {\n        // Ensures that created dom is `_enqueueClient`'d to this element so\n        // that it can be flushed on next call to `_flushProperties`\n        hostStack.beginHosting(this);\n        let dom = super._stampTemplate(template);\n        hostStack.endHosting(this);\n        let templateInfo = /** @type {!TemplateInfo} */this._bindTemplate(template, true);\n        // Add template-instance-specific data to instanced templateInfo\n        templateInfo.nodeList = dom.nodeList;\n        // Capture child nodes to allow unstamping of non-prototypical templates\n        if (!templateInfo.wasPreBound) {\n          let nodes = templateInfo.childNodes = [];\n          for (let n = dom.firstChild; n; n = n.nextSibling) {\n            nodes.push(n);\n          }\n        }\n        dom.templateInfo = templateInfo;\n        // Setup compound storage, 2-way listeners, and dataHost for bindings\n        setupBindings(this, templateInfo);\n        // Flush properties into template nodes if already booted\n        if (this.__dataReady) {\n          runEffects(this, templateInfo.propertyEffects, this.__data, null, false, templateInfo.nodeList);\n        }\n        return dom;\n      }\n\n      /**\n       * Removes and unbinds the nodes previously contained in the provided\n       * DocumentFragment returned from `_stampTemplate`.\n       *\n       * @param {!StampedTemplate} dom DocumentFragment previously returned\n       *   from `_stampTemplate` associated with the nodes to be removed\n       * @protected\n       */\n      _removeBoundDom(dom) {\n        // Unlink template info\n        let templateInfo = dom.templateInfo;\n        if (templateInfo.previousTemplateInfo) {\n          templateInfo.previousTemplateInfo.nextTemplateInfo = templateInfo.nextTemplateInfo;\n        }\n        if (templateInfo.nextTemplateInfo) {\n          templateInfo.nextTemplateInfo.previousTemplateInfo = templateInfo.previousTemplateInfo;\n        }\n        if (this.__templateInfoLast == templateInfo) {\n          this.__templateInfoLast = templateInfo.previousTemplateInfo;\n        }\n        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n        // Remove stamped nodes\n        let nodes = templateInfo.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          let node = nodes[i];\n          node.parentNode.removeChild(node);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n        if (node.nodeType === Node.TEXT_NODE) {\n          let parts = this._parseBindings(node.textContent, templateInfo);\n          if (parts) {\n            // Initialize the textContent with any literal parts\n            // NOTE: default to a space here so the textNode remains; some browsers\n            // (IE) omit an empty textNode following cloneNode/importNode.\n            node.textContent = literalFromParts(parts) || ' ';\n            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n            noted = true;\n          }\n        }\n        return noted;\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from attributes.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Element} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @param {string} name Attribute name\n       * @param {string} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        let parts = this._parseBindings(value, templateInfo);\n        if (parts) {\n          // Attribute or property\n          let origName = name;\n          let kind = 'property';\n          if (name[name.length - 1] == '$') {\n            name = name.slice(0, -1);\n            kind = 'attribute';\n          }\n          // Initialize attribute bindings with any literal parts\n          let literal = literalFromParts(parts);\n          if (literal && kind == 'attribute') {\n            node.setAttribute(name, literal);\n          }\n          // Clear attribute before removing, since IE won't allow removing\n          // `value` attribute if it previously had a value (can't\n          // unconditionally set '' before removing since attributes with `$`\n          // can't be set using setAttribute)\n          if (node.localName === 'input' && origName === 'value') {\n            node.setAttribute(origName, '');\n          }\n          // Remove annotation\n          node.removeAttribute(origName);\n          // Case hackery: attributes are lower-case, but bind targets\n          // (properties) are case sensitive. Gambit is to map dash-case to\n          // camel-case: `foo-bar` becomes `fooBar`.\n          // Attribute bindings are excepted.\n          if (kind === 'property') {\n            name = Polymer.CaseMap.dashToCamelCase(name);\n          }\n          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n          return true;\n        } else {\n          return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * binding the properties that a nested template depends on to the template\n       * as `_host_<property>`.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n        // Merge host props into outer template and add bindings\n        let hostProps = nodeInfo.templateInfo.hostProps;\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source] }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n        return noted;\n      }\n\n      /**\n       * Called to parse text in a template (either attribute values or\n       * textContent) into binding metadata.\n       *\n       * Any overrides of this method should return an array of binding part\n       * metadata  representing one or more bindings found in the provided text\n       * and any \"literal\" text in between.  Any non-literal parts will be passed\n       * to `_evaluateBinding` when any dependencies change.  The only required\n       * fields of each \"part\" in the returned array are as follows:\n       *\n       * - `dependencies` - Array containing trigger metadata for each property\n       *   that should trigger the binding to update\n       * - `literal` - String containing text if the part represents a literal;\n       *   in this case no `dependencies` are needed\n       *\n       * Additional metadata for use by `_evaluateBinding` may be provided in\n       * each part object as needed.\n       *\n       * The default implementation handles the following types of bindings\n       * (one or more may be intermixed with literal strings):\n       * - Property binding: `[[prop]]`\n       * - Path binding: `[[object.prop]]`\n       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n       * - Two-way property or path bindings (supports negation):\n       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n       * - Inline computed method (supports negation):\n       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n       *\n       * @param {string} text Text to parse from attribute or textContent\n       * @param {Object} templateInfo Current template metadata\n       * @return {Array<!BindingPart>} Array of binding part metadata\n       * @protected\n       */\n      static _parseBindings(text, templateInfo) {\n        let parts = [];\n        let lastIndex = 0;\n        let m;\n        // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n        // Regex matches:\n        //        Iteration 1:  Iteration 2:\n        // m[1]: '{{'          '[['\n        // m[2]: ''            '!'\n        // m[3]: 'prop'        'compute(foo,bar)'\n        while ((m = bindingRegex.exec(text)) !== null) {\n          // Add literal part\n          if (m.index > lastIndex) {\n            parts.push({ literal: text.slice(lastIndex, m.index) });\n          }\n          // Add binding part\n          let mode = m[1][0];\n          let negate = Boolean(m[2]);\n          let source = m[3].trim();\n          let customEvent = false,\n              notifyEvent = '',\n              colon = -1;\n          if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n            notifyEvent = source.substring(colon + 2);\n            source = source.substring(0, colon);\n            customEvent = true;\n          }\n          let signature = parseMethod(source);\n          let dependencies = [];\n          if (signature) {\n            // Inline computed function\n            let { args, methodName } = signature;\n            for (let i = 0; i < args.length; i++) {\n              let arg = args[i];\n              if (!arg.literal) {\n                dependencies.push(arg);\n              }\n            }\n            let dynamicFns = templateInfo.dynamicFns;\n            if (dynamicFns && dynamicFns[methodName] || signature.static) {\n              dependencies.push(methodName);\n              signature.dynamicFn = true;\n            }\n          } else {\n            // Property or path\n            dependencies.push(source);\n          }\n          parts.push({\n            source, mode, negate, customEvent, signature, dependencies,\n            event: notifyEvent\n          });\n          lastIndex = bindingRegex.lastIndex;\n        }\n        // Add a final literal part\n        if (lastIndex && lastIndex < text.length) {\n          let literal = text.substring(lastIndex);\n          if (literal) {\n            parts.push({\n              literal: literal\n            });\n          }\n        }\n        if (parts.length) {\n          return parts;\n        } else {\n          return null;\n        }\n      }\n\n      /**\n       * Called to evaluate a previously parsed binding part based on a set of\n       * one or more changed dependencies.\n       *\n       * @param {this} inst Element that should be used as scope for\n       *   binding dependencies\n       * @param {BindingPart} part Binding part metadata\n       * @param {string} path Property/path that triggered this effect\n       * @param {Object} props Bag of current property changes\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @return {*} Value the binding part evaluated to\n       * @protected\n       */\n      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n        let value;\n        if (part.signature) {\n          value = runMethodEffect(inst, path, props, oldProps, part.signature);\n        } else if (path != part.source) {\n          value = Polymer.Path.get(inst, part.source);\n        } else {\n          if (hasPaths && Polymer.Path.isPath(path)) {\n            value = Polymer.Path.get(inst, path);\n          } else {\n            value = inst.__data[path];\n          }\n        }\n        if (part.negate) {\n          value = !value;\n        }\n        return value;\n      }\n\n    }\n\n    // make a typing for closure :P\n    PropertyEffectsType = PropertyEffects;\n\n    return PropertyEffects;\n  });\n\n  /**\n   * Helper api for enqueuing client dom created by a host element.\n   *\n   * By default elements are flushed via `_flushProperties` when\n   * `connectedCallback` is called. Elements attach their client dom to\n   * themselves at `ready` time which results from this first flush.\n   * This provides an ordering guarantee that the client dom an element\n   * creates is flushed before the element itself (i.e. client `ready`\n   * fires before host `ready`).\n   *\n   * However, if `_flushProperties` is called *before* an element is connected,\n   * as for example `Templatize` does, this ordering guarantee cannot be\n   * satisfied because no elements are connected. (Note: Bound elements that\n   * receive data do become enqueued clients and are properly ordered but\n   * unbound elements are not.)\n   *\n   * To maintain the desired \"client before host\" ordering guarantee for this\n   * case we rely on the \"host stack. Client nodes registers themselves with\n   * the creating host element when created. This ensures that all client dom\n   * is readied in the proper order, maintaining the desired guarantee.\n   *\n   * @private\n   */\n  let hostStack = {\n\n    stack: [],\n\n    /**\n     * @param {*} inst Instance to add to hostStack\n     * @this {hostStack}\n     */\n    registerHost(inst) {\n      if (this.stack.length) {\n        let host = this.stack[this.stack.length - 1];\n        host._enqueueClient(inst);\n      }\n    },\n\n    /**\n     * @param {*} inst Instance to begin hosting\n     * @this {hostStack}\n     */\n    beginHosting(inst) {\n      this.stack.push(inst);\n    },\n\n    /**\n     * @param {*} inst Instance to end hosting\n     * @this {hostStack}\n     */\n    endHosting(inst) {\n      let stackLen = this.stack.length;\n      if (stackLen && this.stack[stackLen - 1] == inst) {\n        this.stack.pop();\n      }\n    }\n\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1lZmZlY3RzLmh0bWw/NmE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3V0aWxzL2Jvb3QuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi91dGlscy9taXhpbi5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL3BhdGguaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi91dGlscy9jYXNlLW1hcC5odG1sJyk7XG5cbnJlcXVpcmUoJy4vcHJvcGVydHktYWNjZXNzb3JzLmh0bWwnKTtcblxucmVxdWlyZSgnLi90ZW1wbGF0ZS1zdGFtcC5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKiBAY29uc3Qge09iamVjdH0gKi9cblxuICBjb25zdCBDYXNlTWFwID0gUG9seW1lci5DYXNlTWFwO1xuXG4gIC8vIE1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB1bmlxdWUgSUQgdXNlZCBmb3IgZGUtZHVwaW5nIGVmZmVjdHMgdHJpZ2dlcmVkXG4gIC8vIGZyb20gbXVsdGlwbGUgcHJvcGVydGllcyBpbiB0aGUgc2FtZSB0dXJuXG4gIGxldCBkZWR1cGVJZCA9IDA7XG5cbiAgLyoqXG4gICAqIFByb3BlcnR5IGVmZmVjdCB0eXBlczsgZWZmZWN0cyBhcmUgc3RvcmVkIG9uIHRoZSBwcm90b3R5cGUgdXNpbmcgdGhlc2Uga2V5c1xuICAgKiBAZW51bSB7c3RyaW5nfVxuICAgKi9cbiAgY29uc3QgVFlQRVMgPSB7XG4gICAgQ09NUFVURTogJ19fY29tcHV0ZUVmZmVjdHMnLFxuICAgIFJFRkxFQ1Q6ICdfX3JlZmxlY3RFZmZlY3RzJyxcbiAgICBOT1RJRlk6ICdfX25vdGlmeUVmZmVjdHMnLFxuICAgIFBST1BBR0FURTogJ19fcHJvcGFnYXRlRWZmZWN0cycsXG4gICAgT0JTRVJWRTogJ19fb2JzZXJ2ZUVmZmVjdHMnLFxuICAgIFJFQURfT05MWTogJ19fcmVhZE9ubHknXG4gIH07XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHt7XG4gICAqIG5hbWU6IChzdHJpbmcgfCB1bmRlZmluZWQpLFxuICAgKiBzdHJ1Y3R1cmVkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZCksXG4gICAqIHdpbGRjYXJkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZClcbiAgICogfX1cbiAgICovXG4gIGxldCBEYXRhVHJpZ2dlcjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHt7XG4gICAqIGluZm86ID8sXG4gICAqIHRyaWdnZXI6ICghRGF0YVRyaWdnZXIgfCB1bmRlZmluZWQpLFxuICAgKiBmbjogKCFGdW5jdGlvbiB8IHVuZGVmaW5lZClcbiAgICogfX1cbiAgICovXG4gIGxldCBEYXRhRWZmZWN0OyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICBsZXQgUHJvcGVydHlFZmZlY3RzVHlwZTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIEVuc3VyZXMgdGhhdCB0aGUgbW9kZWwgaGFzIGFuIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGUuXG4gICAqIFRoZSBtb2RlbCBtYXkgYmUgYSBwcm90b3R5cGUgb3IgYW4gaW5zdGFuY2UuXG4gICAqXG4gICAqIFByb3BlcnR5IGVmZmVjdHMgYXJlIHN0b3JlZCBhcyBhcnJheXMgb2YgZWZmZWN0cyBieSBwcm9wZXJ0eSBpbiBhIG1hcCxcbiAgICogYnkgbmFtZWQgdHlwZSBvbiB0aGUgbW9kZWwuIGUuZy5cbiAgICpcbiAgICogICBfX2NvbXB1dGVFZmZlY3RzOiB7XG4gICAqICAgICBmb286IFsgLi4uIF0sXG4gICAqICAgICBiYXI6IFsgLi4uIF1cbiAgICogICB9XG4gICAqXG4gICAqIElmIHRoZSBtb2RlbCBkb2VzIG5vdCB5ZXQgaGF2ZSBhbiBlZmZlY3QgbWFwIGZvciB0aGUgdHlwZSwgb25lIGlzIGNyZWF0ZWRcbiAgICogYW5kIHJldHVybmVkLiAgSWYgaXQgZG9lcywgYnV0IGl0IGlzIG5vdCBhbiBvd24gcHJvcGVydHkgKGkuZS4gdGhlXG4gICAqIHByb3RvdHlwZSBoYWQgZWZmZWN0cyksIHRoZSB0aGUgbWFwIGlzIGRlZXBseSBjbG9uZWQgYW5kIHRoZSBjb3B5IGlzXG4gICAqIHNldCBvbiB0aGUgbW9kZWwgYW5kIHJldHVybmVkLCByZWFkeSBmb3IgbmV3IGVmZmVjdHMgdG8gYmUgYWRkZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgUHJvcGVydHkgZWZmZWN0IHR5cGVcbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgb3duLXByb3BlcnR5IG1hcCBvZiBlZmZlY3RzIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZW5zdXJlT3duRWZmZWN0TWFwKG1vZGVsLCB0eXBlKSB7XG4gICAgbGV0IGVmZmVjdHMgPSBtb2RlbFt0eXBlXTtcbiAgICBpZiAoIWVmZmVjdHMpIHtcbiAgICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IHt9O1xuICAgIH0gZWxzZSBpZiAoIW1vZGVsLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICBlZmZlY3RzID0gbW9kZWxbdHlwZV0gPSBPYmplY3QuY3JlYXRlKG1vZGVsW3R5cGVdKTtcbiAgICAgIGZvciAobGV0IHAgaW4gZWZmZWN0cykge1xuICAgICAgICBsZXQgcHJvdG9GeCA9IGVmZmVjdHNbcF07XG4gICAgICAgIGxldCBpbnN0RnggPSBlZmZlY3RzW3BdID0gQXJyYXkocHJvdG9GeC5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3RvRngubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnN0RnhbaV0gPSBwcm90b0Z4W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlZmZlY3RzO1xuICB9XG5cbiAgLy8gLS0gZWZmZWN0cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFJ1bnMgYWxsIGVmZmVjdHMgb2YgYSBnaXZlbiB0eXBlIGZvciB0aGUgZ2l2ZW4gc2V0IG9mIHByb3BlcnR5IGNoYW5nZXNcbiAgICogb24gYW4gaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVmZmVjdHMgT2JqZWN0IG1hcCBvZiBwcm9wZXJ0eS10by1BcnJheSBvZiBlZmZlY3RzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwYXJhbSB7Kj19IGV4dHJhQXJncyBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIHBhc3MgdG8gZWZmZWN0IGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWZmZWN0IHJhbiBmb3IgdGhpcyBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuRWZmZWN0cyhpbnN0LCBlZmZlY3RzLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpIHtcbiAgICBpZiAoZWZmZWN0cykge1xuICAgICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgICAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHJ1bkVmZmVjdHNGb3JQcm9wZXJ0eShpbnN0LCBlZmZlY3RzLCBpZCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocywgZXh0cmFBcmdzKSkge1xuICAgICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByYW47XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGEgbGlzdCBvZiBlZmZlY3RzIGZvciBhIGdpdmVuIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlZmZlY3RzIE9iamVjdCBtYXAgb2YgcHJvcGVydHktdG8tQXJyYXkgb2YgZWZmZWN0c1xuICAgKiBAcGFyYW0ge251bWJlcn0gZGVkdXBlSWQgQ291bnRlciB1c2VkIGZvciBkZS1kdXBpbmcgZWZmZWN0c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBOYW1lIG9mIGNoYW5nZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHsqfSBwcm9wcyBDaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHsqfSBvbGRQcm9wcyBPbGQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICAgKiBAcGFyYW0geyo9fSBleHRyYUFyZ3MgQWRkaXRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRvIGVmZmVjdCBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVmZmVjdCByYW4gZm9yIHRoaXMgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkVmZmVjdHNGb3JQcm9wZXJ0eShpbnN0LCBlZmZlY3RzLCBkZWR1cGVJZCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocywgZXh0cmFBcmdzKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIGxldCByb290UHJvcGVydHkgPSBoYXNQYXRocyA/IFBvbHltZXIuUGF0aC5yb290KHByb3ApIDogcHJvcDtcbiAgICBsZXQgZnhzID0gZWZmZWN0c1tyb290UHJvcGVydHldO1xuICAgIGlmIChmeHMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZnhzLmxlbmd0aCwgZng7IGkgPCBsICYmIChmeCA9IGZ4c1tpXSk7IGkrKykge1xuICAgICAgICBpZiAoKCFmeC5pbmZvIHx8IGZ4LmluZm8ubGFzdFJ1biAhPT0gZGVkdXBlSWQpICYmICghaGFzUGF0aHMgfHwgcGF0aE1hdGNoZXNUcmlnZ2VyKHByb3AsIGZ4LnRyaWdnZXIpKSkge1xuICAgICAgICAgIGlmIChmeC5pbmZvKSB7XG4gICAgICAgICAgICBmeC5pbmZvLmxhc3RSdW4gPSBkZWR1cGVJZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnguZm4oaW5zdCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBmeC5pbmZvLCBoYXNQYXRocywgZXh0cmFBcmdzKTtcbiAgICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcHJvcGVydHkvcGF0aCB0aGF0IGhhcyBjaGFuZ2VkIG1hdGNoZXMgdGhlIHRyaWdnZXJcbiAgICogY3JpdGVyaWEgZm9yIGFuIGVmZmVjdC4gIEEgdHJpZ2dlciBpcyBhIGRlc2NyaXB0b3Igd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIHN0cnVjdHVyZSwgd2hpY2ggbWF0Y2hlcyB0aGUgZGVzY3JpcHRvcnMgcmV0dXJuZWQgZnJvbSBgcGFyc2VBcmdgLlxuICAgKiBlLmcuIGZvciBgZm9vLmJhci4qYDpcbiAgICogYGBgXG4gICAqIHRyaWdnZXI6IHtcbiAgICogICBuYW1lOiAnYS5iJyxcbiAgICogICBzdHJ1Y3R1cmVkOiB0cnVlLFxuICAgKiAgIHdpbGRjYXJkOiB0cnVlXG4gICAqIH1cbiAgICogYGBgXG4gICAqIElmIG5vIHRyaWdnZXIgaXMgZ2l2ZW4sIHRoZSBwYXRoIGlzIGRlZW1lZCB0byBtYXRjaC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvciBwcm9wZXJ0eSB0aGF0IGNoYW5nZWRcbiAgICogQHBhcmFtIHtEYXRhVHJpZ2dlcn0gdHJpZ2dlciBEZXNjcmlwdG9yXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhdGggbWF0Y2hlZCB0aGUgdHJpZ2dlclxuICAgKi9cbiAgZnVuY3Rpb24gcGF0aE1hdGNoZXNUcmlnZ2VyKHBhdGgsIHRyaWdnZXIpIHtcbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGV0IHRyaWdnZXJQYXRoID0gdHJpZ2dlci5uYW1lO1xuICAgICAgcmV0dXJuIHRyaWdnZXJQYXRoID09IHBhdGggfHwgdHJpZ2dlci5zdHJ1Y3R1cmVkICYmIFBvbHltZXIuUGF0aC5pc0FuY2VzdG9yKHRyaWdnZXJQYXRoLCBwYXRoKSB8fCB0cmlnZ2VyLndpbGRjYXJkICYmIFBvbHltZXIuUGF0aC5pc0Rlc2NlbmRhbnQodHJpZ2dlclBhdGgsIHBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50cyB0aGUgXCJvYnNlcnZlclwiIGVmZmVjdC5cbiAgICpcbiAgICogQ2FsbHMgdGhlIG1ldGhvZCB3aXRoIGBpbmZvLm1ldGhvZE5hbWVgIG9uIHRoZSBpbnN0YW5jZSwgcGFzc2luZyB0aGVcbiAgICogbmV3IGFuZCBvbGQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuT2JzZXJ2ZXJFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICAgIGxldCBmbiA9IGluc3RbaW5mby5tZXRob2ROYW1lXTtcbiAgICBsZXQgY2hhbmdlZFByb3AgPSBpbmZvLnByb3BlcnR5O1xuICAgIGlmIChmbikge1xuICAgICAgZm4uY2FsbChpbnN0LCBpbnN0Ll9fZGF0YVtjaGFuZ2VkUHJvcF0sIG9sZFByb3BzW2NoYW5nZWRQcm9wXSk7XG4gICAgfSBlbHNlIGlmICghaW5mby5keW5hbWljRm4pIHtcbiAgICAgIGNvbnNvbGUud2Fybignb2JzZXJ2ZXIgbWV0aG9kIGAnICsgaW5mby5tZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUnVucyBcIm5vdGlmeVwiIGVmZmVjdHMgZm9yIGEgc2V0IG9mIGNoYW5nZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICAgKiB3aWxsIGRpc3BhdGNoIHBhdGggbm90aWZpY2F0aW9uIGV2ZW50cyBpbiB0aGUgY2FzZSB0aGF0IHRoZSBwcm9wZXJ0eVxuICAgKiBjaGFuZ2VkIHdhcyBhIHBhdGggYW5kIHRoZSByb290IHByb3BlcnR5IGZvciB0aGF0IHBhdGggZGlkbid0IGhhdmUgYVxuICAgKiBcIm5vdGlmeVwiIGVmZmVjdC4gIFRoaXMgaXMgdG8gbWFpbnRhaW4gMS4wIGJlaGF2aW9yIHRoYXQgZGlkIG5vdCByZXF1aXJlXG4gICAqIGBub3RpZnk6IHRydWVgIHRvIGVuc3VyZSBvYmplY3Qgc3ViLXByb3BlcnR5IG5vdGlmaWNhdGlvbnMgd2VyZVxuICAgKiBzZW50LlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZnlQcm9wcyBCYWcgb2YgcHJvcGVydGllcyB0byBub3RpZnlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5Ob3RpZnlFZmZlY3RzKGluc3QsIG5vdGlmeVByb3BzLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgLy8gTm90aWZ5XG4gICAgbGV0IGZ4cyA9IGluc3RbVFlQRVMuTk9USUZZXTtcbiAgICBsZXQgbm90aWZpZWQ7XG4gICAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgICAvLyBUcnkgbm9ybWFsIG5vdGlmeSBlZmZlY3RzOyBpZiBub25lLCBmYWxsIGJhY2sgdG8gdHJ5IHBhdGggbm90aWZpY2F0aW9uXG4gICAgZm9yIChsZXQgcHJvcCBpbiBub3RpZnlQcm9wcykge1xuICAgICAgaWYgKG5vdGlmeVByb3BzW3Byb3BdKSB7XG4gICAgICAgIGlmIChmeHMgJiYgcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGZ4cywgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1BhdGhzICYmIG5vdGlmeVBhdGgoaW5zdCwgcHJvcCwgcHJvcHMpKSB7XG4gICAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZsdXNoIGhvc3QgaWYgd2UgYWN0dWFsbHkgbm90aWZpZWQgYW5kIGhvc3Qgd2FzIGJhdGNoaW5nXG4gICAgLy8gQW5kIHRoZSBob3N0IGhhcyBhbHJlYWR5IGluaXRpYWxpemVkIGNsaWVudHM7IHRoaXMgcHJldmVudHNcbiAgICAvLyBhbiBpc3N1ZSB3aXRoIGEgaG9zdCBvYnNlcnZpbmcgZGF0YSBjaGFuZ2VzIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgICBsZXQgaG9zdDtcbiAgICBpZiAobm90aWZpZWQgJiYgKGhvc3QgPSBpbnN0Ll9fZGF0YUhvc3QpICYmIGhvc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKSB7XG4gICAgICBob3N0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIHtwcm9wZXJ0eX0tY2hhbmdlZCBldmVudHMgd2l0aCBwYXRoIGluZm9ybWF0aW9uIGluIHRoZSBkZXRhaWxcbiAgICogb2JqZWN0IHRvIGluZGljYXRlIGEgc3ViLXBhdGggb2YgdGhlIHByb3BlcnR5IHdhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gZmlyZSB0aGUgZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdGhhdCB3YXMgY2hhbmdlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBhdGggd2FzIG5vdGlmaWVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBub3RpZnlQYXRoKGluc3QsIHBhdGgsIHByb3BzKSB7XG4gICAgbGV0IHJvb3RQcm9wZXJ0eSA9IFBvbHltZXIuUGF0aC5yb290KHBhdGgpO1xuICAgIGlmIChyb290UHJvcGVydHkgIT09IHBhdGgpIHtcbiAgICAgIGxldCBldmVudE5hbWUgPSBQb2x5bWVyLkNhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHJvb3RQcm9wZXJ0eSkgKyAnLWNoYW5nZWQnO1xuICAgICAgZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHByb3BzW3BhdGhdLCBwYXRoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHRvIGluZGljYXRlIGEgcHJvcGVydHkgKG9yIHBhdGgpXG4gICAqIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0byBmaXJlIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBzZW5kICgne3Byb3BlcnR5fS1jaGFuZ2VkJylcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGNoYW5nZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXRoIElmIGEgc3ViLXBhdGggb2YgdGhpcyBwcm9wZXJ0eSBjaGFuZ2VkLCB0aGUgcGF0aFxuICAgKiAgIHRoYXQgY2hhbmdlZCAob3B0aW9uYWwpLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoTm90aWZ5RXZlbnQoaW5zdCwgZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCkge1xuICAgIGxldCBkZXRhaWwgPSB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBxdWV1ZVByb3BlcnR5OiB0cnVlXG4gICAgfTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgZGV0YWlsLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9pbnN0LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgeyBkZXRhaWwgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudHMgdGhlIFwibm90aWZ5XCIgZWZmZWN0LlxuICAgKlxuICAgKiBEaXNwYXRjaGVzIGEgbm9uLWJ1YmJsaW5nIGV2ZW50IG5hbWVkIGBpbmZvLmV2ZW50TmFtZWAgb24gdGhlIGluc3RhbmNlXG4gICAqIHdpdGggYSBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5ldyBgdmFsdWVgLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5Ob3RpZnlFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbywgaGFzUGF0aHMpIHtcbiAgICBsZXQgcm9vdFByb3BlcnR5ID0gaGFzUGF0aHMgPyBQb2x5bWVyLlBhdGgucm9vdChwcm9wZXJ0eSkgOiBwcm9wZXJ0eTtcbiAgICBsZXQgcGF0aCA9IHJvb3RQcm9wZXJ0eSAhPSBwcm9wZXJ0eSA/IHByb3BlcnR5IDogbnVsbDtcbiAgICBsZXQgdmFsdWUgPSBwYXRoID8gUG9seW1lci5QYXRoLmdldChpbnN0LCBwYXRoKSA6IGluc3QuX19kYXRhW3Byb3BlcnR5XTtcbiAgICBpZiAocGF0aCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IHByb3BzW3Byb3BlcnR5XTsgLy8gc3BlY2lmaWNhbGx5IGZvciAuc3BsaWNlc1xuICAgIH1cbiAgICBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGluZm8uZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmdW5jdGlvbiBmb3IgMi13YXkgbm90aWZpY2F0aW9uIGV2ZW50cy4gUmVjZWl2ZXMgY29udGV4dFxuICAgKiBpbmZvcm1hdGlvbiBjYXB0dXJlZCBpbiB0aGUgYGFkZE5vdGlmeUxpc3RlbmVyYCBjbG9zdXJlIGZyb20gdGhlXG4gICAqIGBfX25vdGlmeUxpc3RlbmVyc2AgbWV0YWRhdGEuXG4gICAqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBub3RpZmllZCBwcm9wZXJ0eSB0byB0aGUgaG9zdCBwcm9wZXJ0eSBvciBwYXRoLiAgSWZcbiAgICogdGhlIGV2ZW50IGNvbnRhaW5lZCBwYXRoIGluZm9ybWF0aW9uLCB0cmFuc2xhdGUgdGhhdCBwYXRoIHRvIHRoZSBob3N0XG4gICAqIHNjb3BlJ3MgbmFtZSBmb3IgdGhhdCBwYXRoIGZpcnN0LlxuICAgKlxuICAgKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldmVudCBOb3RpZmljYXRpb24gZXZlbnQgKGUuZy4gJzxwcm9wZXJ0eT4tY2hhbmdlZCcpXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIGhhbmRsaW5nIHRoZSBub3RpZmljYXRpb24gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZyb21Qcm9wIENoaWxkIGVsZW1lbnQgcHJvcGVydHkgdGhhdCB3YXMgYm91bmRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvUGF0aCBIb3N0IHByb3BlcnR5L3BhdGggdGhhdCB3YXMgYm91bmRcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWdhdGUgV2hldGhlciB0aGUgYmluZGluZyB3YXMgbmVnYXRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlTm90aWZpY2F0aW9uKGV2ZW50LCBpbnN0LCBmcm9tUHJvcCwgdG9QYXRoLCBuZWdhdGUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgbGV0IGRldGFpbCA9IC8qKiBAdHlwZSB7T2JqZWN0fSAqL2V2ZW50LmRldGFpbDtcbiAgICBsZXQgZnJvbVBhdGggPSBkZXRhaWwgJiYgZGV0YWlsLnBhdGg7XG4gICAgaWYgKGZyb21QYXRoKSB7XG4gICAgICB0b1BhdGggPSBQb2x5bWVyLlBhdGgudHJhbnNsYXRlKGZyb21Qcm9wLCB0b1BhdGgsIGZyb21QYXRoKTtcbiAgICAgIHZhbHVlID0gZGV0YWlsICYmIGRldGFpbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBldmVudC50YXJnZXRbZnJvbVByb3BdO1xuICAgIH1cbiAgICB2YWx1ZSA9IG5lZ2F0ZSA/ICF2YWx1ZSA6IHZhbHVlO1xuICAgIGlmICghaW5zdFtUWVBFUy5SRUFEX09OTFldIHx8ICFpbnN0W1RZUEVTLlJFQURfT05MWV1bdG9QYXRoXSkge1xuICAgICAgaWYgKGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aCh0b1BhdGgsIHZhbHVlLCB0cnVlLCBCb29sZWFuKGZyb21QYXRoKSkgJiYgKCFkZXRhaWwgfHwgIWRldGFpbC5xdWV1ZVByb3BlcnR5KSkge1xuICAgICAgICBpbnN0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRzIHRoZSBcInJlZmxlY3RcIiBlZmZlY3QuXG4gICAqXG4gICAqIFNldHMgdGhlIGF0dHJpYnV0ZSBuYW1lZCBgaW5mby5hdHRyTmFtZWAgdG8gdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuUmVmbGVjdEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gICAgbGV0IHZhbHVlID0gaW5zdC5fX2RhdGFbcHJvcGVydHldO1xuICAgIGlmIChQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUpIHtcbiAgICAgIHZhbHVlID0gUG9seW1lci5zYW5pdGl6ZURPTVZhbHVlKHZhbHVlLCBpbmZvLmF0dHJOYW1lLCAnYXR0cmlidXRlJywgLyoqIEB0eXBlIHtOb2RlfSAqL2luc3QpO1xuICAgIH1cbiAgICBpbnN0Ll9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBpbmZvLmF0dHJOYW1lLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyBcImNvbXB1dGVkXCIgZWZmZWN0cyBmb3IgYSBzZXQgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gdGhlIGdlbmVyaWMgYHJ1bkVmZmVjdHNgIG1ldGhvZCBpbiB0aGF0IGl0XG4gICAqIGNvbnRpbnVlcyB0byBydW4gY29tcHV0ZWQgZWZmZWN0cyBiYXNlZCBvbiB0aGUgb3V0cHV0IG9mIGVhY2ggcGFzcyB1bnRpbFxuICAgKiB0aGVyZSBhcmUgbm8gbW9yZSBuZXdseSBjb21wdXRlZCBwcm9wZXJ0aWVzLiAgVGhpcyBlbnN1cmVzIHRoYXQgYWxsXG4gICAqIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIGNvbXB1dGVkIGJ5IHRoZSBpbml0aWFsIHNldCBvZiBjaGFuZ2VzIGFyZVxuICAgKiBjb21wdXRlZCBiZWZvcmUgb3RoZXIgZWZmZWN0cyAoYmluZGluZyBwcm9wYWdhdGlvbiwgb2JzZXJ2ZXJzLCBhbmQgbm90aWZ5KVxuICAgKiBydW4uXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAgICogQHBhcmFtIHshT2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0geyFPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5Db21wdXRlZEVmZmVjdHMoaW5zdCwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpIHtcbiAgICBsZXQgY29tcHV0ZUVmZmVjdHMgPSBpbnN0W1RZUEVTLkNPTVBVVEVdO1xuICAgIGlmIChjb21wdXRlRWZmZWN0cykge1xuICAgICAgbGV0IGlucHV0UHJvcHMgPSBjaGFuZ2VkUHJvcHM7XG4gICAgICB3aGlsZSAocnVuRWZmZWN0cyhpbnN0LCBjb21wdXRlRWZmZWN0cywgaW5wdXRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG9sZFByb3BzLCBpbnN0Ll9fZGF0YU9sZCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY2hhbmdlZFByb3BzLCBpbnN0Ll9fZGF0YVBlbmRpbmcpO1xuICAgICAgICBpbnB1dFByb3BzID0gaW5zdC5fX2RhdGFQZW5kaW5nO1xuICAgICAgICBpbnN0Ll9fZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRzIHRoZSBcImNvbXB1dGVkIHByb3BlcnR5XCIgZWZmZWN0IGJ5IHJ1bm5pbmcgdGhlIG1ldGhvZCB3aXRoIHRoZVxuICAgKiB2YWx1ZXMgb2YgdGhlIGFyZ3VtZW50cyBzcGVjaWZpZWQgaW4gdGhlIGBpbmZvYCBvYmplY3QgYW5kIHNldHRpbmcgdGhlXG4gICAqIHJldHVybiB2YWx1ZSB0byB0aGUgY29tcHV0ZWQgcHJvcGVydHkgc3BlY2lmaWVkLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICAgIGxldCByZXN1bHQgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbyk7XG4gICAgbGV0IGNvbXB1dGVkUHJvcCA9IGluZm8ubWV0aG9kSW5mbztcbiAgICBpZiAoaW5zdC5fX2RhdGFIYXNBY2Nlc3NvciAmJiBpbnN0Ll9fZGF0YUhhc0FjY2Vzc29yW2NvbXB1dGVkUHJvcF0pIHtcbiAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eShjb21wdXRlZFByb3AsIHJlc3VsdCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RbY29tcHV0ZWRQcm9wXSA9IHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgcGF0aCBjaGFuZ2VzIGJhc2VkIG9uIHBhdGggbGlua3Mgc2V0IHVwIHVzaW5nIHRoZSBgbGlua1BhdGhzYFxuICAgKiBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHdob3NlIHByb3BzIGFyZSBjaGFuZ2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTwoc3RyaW5nfG51bWJlcik+fSBwYXRoIFBhdGggdGhhdCBoYXMgY2hhbmdlZFxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9mIGNoYW5nZWQgcGF0aFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcHV0ZUxpbmtlZFBhdGhzKGluc3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgbGV0IGxpbmtzID0gaW5zdC5fX2RhdGFMaW5rZWRQYXRocztcbiAgICBpZiAobGlua3MpIHtcbiAgICAgIGxldCBsaW5rO1xuICAgICAgZm9yIChsZXQgYSBpbiBsaW5rcykge1xuICAgICAgICBsZXQgYiA9IGxpbmtzW2FdO1xuICAgICAgICBpZiAoUG9seW1lci5QYXRoLmlzRGVzY2VuZGFudChhLCBwYXRoKSkge1xuICAgICAgICAgIGxpbmsgPSBQb2x5bWVyLlBhdGgudHJhbnNsYXRlKGEsIGIsIHBhdGgpO1xuICAgICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChsaW5rLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoUG9seW1lci5QYXRoLmlzRGVzY2VuZGFudChiLCBwYXRoKSkge1xuICAgICAgICAgIGxpbmsgPSBQb2x5bWVyLlBhdGgudHJhbnNsYXRlKGIsIGEsIHBhdGgpO1xuICAgICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChsaW5rLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAtLSBiaW5kaW5ncyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFkZHMgYmluZGluZyBtZXRhZGF0YSB0byB0aGUgY3VycmVudCBgbm9kZUluZm9gLCBhbmQgYmluZGluZyBlZmZlY3RzXG4gICAqIGZvciBhbGwgcGFydCBkZXBlbmRlbmNpZXMgdG8gYHRlbXBsYXRlSW5mb2AuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENsYXNzIHRoYXQgYF9wYXJzZVRlbXBsYXRlYCBpcyBjdXJyZW50bHlcbiAgICogICBydW5uaW5nIG9uXG4gICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kIEJpbmRpbmcga2luZCwgZWl0aGVyICdwcm9wZXJ0eScsICdhdHRyaWJ1dGUnLCBvciAndGV4dCdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCBUYXJnZXQgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0geyFBcnJheTwhQmluZGluZ1BhcnQ+fSBwYXJ0cyBBcnJheSBvZiBiaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBsaXRlcmFsIExpdGVyYWwgdGV4dCBzdXJyb3VuZGluZyBiaW5kaW5nIHBhcnRzIChzcGVjaWZpZWRcbiAgICogICBvbmx5IGZvciAncHJvcGVydHknIGJpbmRpbmdzLCBzaW5jZSB0aGVzZSBtdXN0IGJlIGluaXRpYWxpemVkIGFzIHBhcnRcbiAgICogICBvZiBib290LXVwKVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQmluZGluZyhjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCkge1xuICAgIC8vIENyZWF0ZSBiaW5kaW5nIG1ldGFkYXRhIGFuZCBhZGQgdG8gbm9kZUluZm9cbiAgICBub2RlSW5mby5iaW5kaW5ncyA9IG5vZGVJbmZvLmJpbmRpbmdzIHx8IFtdO1xuICAgIGxldCAvKiogQmluZGluZyAqL2JpbmRpbmcgPSB7IGtpbmQsIHRhcmdldCwgcGFydHMsIGxpdGVyYWwsIGlzQ29tcG91bmQ6IHBhcnRzLmxlbmd0aCAhPT0gMSB9O1xuICAgIG5vZGVJbmZvLmJpbmRpbmdzLnB1c2goYmluZGluZyk7XG4gICAgLy8gQWRkIGxpc3RlbmVyIGluZm8gdG8gYmluZGluZyBtZXRhZGF0YVxuICAgIGlmIChzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSkge1xuICAgICAgbGV0IHsgZXZlbnQsIG5lZ2F0ZSB9ID0gYmluZGluZy5wYXJ0c1swXTtcbiAgICAgIGJpbmRpbmcubGlzdGVuZXJFdmVudCA9IGV2ZW50IHx8IENhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHRhcmdldCkgKyAnLWNoYW5nZWQnO1xuICAgICAgYmluZGluZy5saXN0ZW5lck5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICB9XG4gICAgLy8gQWRkIFwicHJvcGFnYXRlXCIgcHJvcGVydHkgZWZmZWN0cyB0byB0ZW1wbGF0ZUluZm9cbiAgICBsZXQgaW5kZXggPSB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmcucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwYXJ0ID0gYmluZGluZy5wYXJ0c1tpXTtcbiAgICAgIHBhcnQuY29tcG91bmRJbmRleCA9IGk7XG4gICAgICBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgcHJvcGVydHkgZWZmZWN0cyB0byB0aGUgZ2l2ZW4gYHRlbXBsYXRlSW5mb2AgZm9yIHRoZSBnaXZlbiBiaW5kaW5nXG4gICAqIHBhcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENsYXNzIHRoYXQgYF9wYXJzZVRlbXBsYXRlYCBpcyBjdXJyZW50bHlcbiAgICogICBydW5uaW5nIG9uXG4gICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggaW50byBgbm9kZUluZm9MaXN0YCBmb3IgdGhpcyBub2RlXG4gICAqL1xuICBmdW5jdGlvbiBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCkge1xuICAgIGlmICghcGFydC5saXRlcmFsKSB7XG4gICAgICBpZiAoYmluZGluZy5raW5kID09PSAnYXR0cmlidXRlJyAmJiBiaW5kaW5nLnRhcmdldFswXSA9PT0gJy0nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IHNldCBhdHRyaWJ1dGUgJyArIGJpbmRpbmcudGFyZ2V0ICsgJyBiZWNhdXNlIFwiLVwiIGlzIG5vdCBhIHZhbGlkIGF0dHJpYnV0ZSBzdGFydGluZyBjaGFyYWN0ZXInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBkZXBlbmRlbmNpZXMgPSBwYXJ0LmRlcGVuZGVuY2llcztcbiAgICAgICAgbGV0IGluZm8gPSB7IGluZGV4LCBiaW5kaW5nLCBwYXJ0LCBldmFsdWF0b3I6IGNvbnN0cnVjdG9yIH07XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgbGV0IHRyaWdnZXIgPSBkZXBlbmRlbmNpZXNbal07XG4gICAgICAgICAgaWYgKHR5cGVvZiB0cmlnZ2VyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0cmlnZ2VyID0gcGFyc2VBcmcodHJpZ2dlcik7XG4gICAgICAgICAgICB0cmlnZ2VyLndpbGRjYXJkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3RydWN0b3IuX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCB0cmlnZ2VyLnJvb3RQcm9wZXJ0eSwge1xuICAgICAgICAgICAgZm46IHJ1bkJpbmRpbmdFZmZlY3QsXG4gICAgICAgICAgICBpbmZvLCB0cmlnZ2VyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50cyB0aGUgXCJiaW5kaW5nXCIgKHByb3BlcnR5L3BhdGggYmluZGluZykgZWZmZWN0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYmluZGluZyBzeW50YXggaXMgb3ZlcnJpZGFibGUgdmlhIGBfcGFyc2VCaW5kaW5nc2AgYW5kXG4gICAqIGBfZXZhbHVhdGVCaW5kaW5nYC4gIFRoaXMgbWV0aG9kIHdpbGwgY2FsbCBgX2V2YWx1YXRlQmluZGluZ2AgZm9yIGFueVxuICAgKiBub24tbGl0ZXJhbCBwYXJ0cyByZXR1cm5lZCBmcm9tIGBfcGFyc2VCaW5kaW5nc2AuICBIb3dldmVyLFxuICAgKiB0aGVyZSBpcyBubyBzdXBwb3J0IGZvciBfcGF0aF8gYmluZGluZ3MgdmlhIGN1c3RvbSBiaW5kaW5nIHBhcnRzLFxuICAgKiBhcyB0aGlzIGlzIHNwZWNpZmljIHRvIFBvbHltZXIncyBwYXRoIGJpbmRpbmcgc3ludGF4LlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIE5hbWUgb2YgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICogQHBhcmFtIHtBcnJheX0gbm9kZUxpc3QgTGlzdCBvZiBub2RlcyBhc3NvY2lhdGVkIHdpdGggYG5vZGVJbmZvTGlzdGAgdGVtcGxhdGVcbiAgICogICBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuQmluZGluZ0VmZmVjdChpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzLCBub2RlTGlzdCkge1xuICAgIGxldCBub2RlID0gbm9kZUxpc3RbaW5mby5pbmRleF07XG4gICAgbGV0IGJpbmRpbmcgPSBpbmZvLmJpbmRpbmc7XG4gICAgbGV0IHBhcnQgPSBpbmZvLnBhcnQ7XG4gICAgLy8gU3VicGF0aCBub3RpZmljYXRpb246IHRyYW5zZm9ybSBwYXRoIGFuZCBzZXQgdG8gY2xpZW50XG4gICAgLy8gZS5nLjogZm9vPVwie3tvYmouc3VifX1cIiwgcGF0aDogJ29iai5zdWIucHJvcCcsIHNldCAnZm9vLnByb3AnPW9iai5zdWIucHJvcFxuICAgIGlmIChoYXNQYXRocyAmJiBwYXJ0LnNvdXJjZSAmJiBwYXRoLmxlbmd0aCA+IHBhcnQuc291cmNlLmxlbmd0aCAmJiBiaW5kaW5nLmtpbmQgPT0gJ3Byb3BlcnR5JyAmJiAhYmluZGluZy5pc0NvbXBvdW5kICYmIG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvcltiaW5kaW5nLnRhcmdldF0pIHtcbiAgICAgIGxldCB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICAgICAgcGF0aCA9IFBvbHltZXIuUGF0aC50cmFuc2xhdGUocGFydC5zb3VyY2UsIGJpbmRpbmcudGFyZ2V0LCBwYXRoKTtcbiAgICAgIGlmIChub2RlLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSBpbmZvLmV2YWx1YXRvci5fZXZhbHVhdGVCaW5kaW5nKGluc3QsIHBhcnQsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gUHJvcGFnYXRlIHZhbHVlIHRvIGNoaWxkXG4gICAgICBhcHBseUJpbmRpbmdWYWx1ZShpbnN0LCBub2RlLCBiaW5kaW5nLCBwYXJ0LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhbiBcImJpbmRpbmdcIiAoYmluZGluZykgZWZmZWN0IHRvIGEgbm9kZSxcbiAgICogZWl0aGVyIGFzIGEgcHJvcGVydHkgb3IgYXR0cmlidXRlLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSBvd25pbmcgdGhlIGJpbmRpbmcgZWZmZWN0XG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUYXJnZXQgbm9kZSBmb3IgYmluZGluZ1xuICAgKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAgICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseUJpbmRpbmdWYWx1ZShpbnN0LCBub2RlLCBiaW5kaW5nLCBwYXJ0LCB2YWx1ZSkge1xuICAgIHZhbHVlID0gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCk7XG4gICAgaWYgKFBvbHltZXIuc2FuaXRpemVET01WYWx1ZSkge1xuICAgICAgdmFsdWUgPSBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUodmFsdWUsIGJpbmRpbmcudGFyZ2V0LCBiaW5kaW5nLmtpbmQsIG5vZGUpO1xuICAgIH1cbiAgICBpZiAoYmluZGluZy5raW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ1xuICAgICAgaW5zdC5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9ub2RlLCB2YWx1ZSwgYmluZGluZy50YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQcm9wZXJ0eSBiaW5kaW5nXG4gICAgICBsZXQgcHJvcCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgICAgaWYgKG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wXSkge1xuICAgICAgICBpZiAoIW5vZGVbVFlQRVMuUkVBRF9PTkxZXSB8fCAhbm9kZVtUWVBFUy5SRUFEX09OTFldW3Byb3BdKSB7XG4gICAgICAgICAgaWYgKG5vZGUuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIGluc3QuX2VucXVldWVDbGllbnQobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0Ll9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZShub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYW4gXCJiaW5kaW5nXCIgZWZmZWN0IHZhbHVlIGJhc2VkIG9uIGNvbXBvdW5kICYgbmVnYXRpb25cbiAgICogZWZmZWN0IG1ldGFkYXRhLCBhcyB3ZWxsIGFzIGhhbmRsaW5nIGZvciBzcGVjaWFsLWNhc2UgcHJvcGVydGllc1xuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0aGUgdmFsdWUgd2lsbCBiZSBzZXQgdG9cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgKiBAcmV0dXJuIHsqfSBUcmFuc2Zvcm1lZCB2YWx1ZSB0byBzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNvbXB1dGVCaW5kaW5nVmFsdWUobm9kZSwgdmFsdWUsIGJpbmRpbmcsIHBhcnQpIHtcbiAgICBpZiAoYmluZGluZy5pc0NvbXBvdW5kKSB7XG4gICAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlW2JpbmRpbmcudGFyZ2V0XTtcbiAgICAgIHN0b3JhZ2VbcGFydC5jb21wb3VuZEluZGV4XSA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSBzdG9yYWdlLmpvaW4oJycpO1xuICAgIH1cbiAgICBpZiAoYmluZGluZy5raW5kICE9PSAnYXR0cmlidXRlJykge1xuICAgICAgLy8gU29tZSBicm93c2VycyBzZXJpYWxpemUgYHVuZGVmaW5lZGAgdG8gYFwidW5kZWZpbmVkXCJgXG4gICAgICBpZiAoYmluZGluZy50YXJnZXQgPT09ICd0ZXh0Q29udGVudCcgfHwgYmluZGluZy50YXJnZXQgPT09ICd2YWx1ZScgJiYgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnIHx8IG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBiaW5kaW5nJ3MgbWV0YWRhdGEgbWVldHMgYWxsIHRoZSByZXF1aXJlbWVudHMgdG8gYWxsb3dcbiAgICogMi13YXkgYmluZGluZywgYW5kIHRoZXJlZm9yZSBhIGA8cHJvcGVydHk+LWNoYW5nZWRgIGV2ZW50IGxpc3RlbmVyIHNob3VsZCBiZVxuICAgKiBhZGRlZDpcbiAgICogLSB1c2VkIGN1cmx5IGJyYWNlc1xuICAgKiAtIGlzIGEgcHJvcGVydHkgKG5vdCBhdHRyaWJ1dGUpIGJpbmRpbmdcbiAgICogLSBpcyBub3QgYSB0ZXh0Q29udGVudCBiaW5kaW5nXG4gICAqIC0gaXMgbm90IGNvbXBvdW5kXG4gICAqXG4gICAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIDItd2F5IGxpc3RlbmVyIHNob3VsZCBiZSBhZGRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2hvdWxkQWRkTGlzdGVuZXIoYmluZGluZykge1xuICAgIHJldHVybiBCb29sZWFuKGJpbmRpbmcudGFyZ2V0KSAmJiBiaW5kaW5nLmtpbmQgIT0gJ2F0dHJpYnV0ZScgJiYgYmluZGluZy5raW5kICE9ICd0ZXh0JyAmJiAhYmluZGluZy5pc0NvbXBvdW5kICYmIGJpbmRpbmcucGFydHNbMF0ubW9kZSA9PT0gJ3snO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIGNvbXBvdW5kIGJpbmRpbmcgc3RvcmFnZSBzdHJ1Y3R1cmVzLCBub3RpZnkgbGlzdGVuZXJzLCBhbmQgZGF0YUhvc3RcbiAgICogcmVmZXJlbmNlcyBvbnRvIHRoZSBib3VuZCBub2RlTGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBJbnN0YW5jZSB0aGF0IGJhcyBiZWVuIHByZXZpb3VzbHkgYm91bmRcbiAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2V0dXBCaW5kaW5ncyhpbnN0LCB0ZW1wbGF0ZUluZm8pIHtcbiAgICAvLyBTZXR1cCBjb21wb3VuZCBzdG9yYWdlLCBkYXRhSG9zdCwgYW5kIG5vdGlmeSBsaXN0ZW5lcnNcbiAgICBsZXQgeyBub2RlTGlzdCwgbm9kZUluZm9MaXN0IH0gPSB0ZW1wbGF0ZUluZm87XG4gICAgaWYgKG5vZGVJbmZvTGlzdC5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBpbmZvID0gbm9kZUluZm9MaXN0W2ldO1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVMaXN0W2ldO1xuICAgICAgICBsZXQgYmluZGluZ3MgPSBpbmZvLmJpbmRpbmdzO1xuICAgICAgICBpZiAoYmluZGluZ3MpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgICAgICAgICAgc2V0dXBDb21wb3VuZFN0b3JhZ2Uobm9kZSwgYmluZGluZyk7XG4gICAgICAgICAgICBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5fX2RhdGFIb3N0ID0gaW5zdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYF9fZGF0YUNvbXBvdW5kU3RvcmFnZWAgbG9jYWwgc3RvcmFnZSBvbiBhIGJvdW5kIG5vZGUgd2l0aFxuICAgKiBpbml0aWFsIGxpdGVyYWwgZGF0YSBmb3IgY29tcG91bmQgYmluZGluZ3MsIGFuZCBzZXRzIHRoZSBqb2luZWRcbiAgICogbGl0ZXJhbCBwYXJ0cyB0byB0aGUgYm91bmQgcHJvcGVydHkuXG4gICAqXG4gICAqIFdoZW4gY2hhbmdlcyB0byBjb21wb3VuZCBwYXJ0cyBvY2N1ciwgdGhleSBhcmUgZmlyc3Qgc2V0IGludG8gdGhlIGNvbXBvdW5kXG4gICAqIHN0b3JhZ2UgYXJyYXkgZm9yIHRoYXQgcHJvcGVydHksIGFuZCB0aGVuIHRoZSBhcnJheSBpcyBqb2luZWQgdG8gcmVzdWx0IGluXG4gICAqIHRoZSBmaW5hbCB2YWx1ZSBzZXQgdG8gdGhlIHByb3BlcnR5L2F0dHJpYnV0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIEJvdW5kIG5vZGUgdG8gaW5pdGlhbGl6ZVxuICAgKiBAcGFyYW0ge0JpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2V0dXBDb21wb3VuZFN0b3JhZ2Uobm9kZSwgYmluZGluZykge1xuICAgIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICAgIC8vIENyZWF0ZSBjb21wb3VuZCBzdG9yYWdlIG1hcFxuICAgICAgbGV0IHN0b3JhZ2UgPSBub2RlLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSB8fCAobm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB7fSk7XG4gICAgICBsZXQgcGFydHMgPSBiaW5kaW5nLnBhcnRzO1xuICAgICAgLy8gQ29weSBsaXRlcmFscyBmcm9tIHBhcnRzIGludG8gc3RvcmFnZSBmb3IgdGhpcyBiaW5kaW5nXG4gICAgICBsZXQgbGl0ZXJhbHMgPSBuZXcgQXJyYXkocGFydHMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGl0ZXJhbHNbal0gPSBwYXJ0c1tqXS5saXRlcmFsO1xuICAgICAgfVxuICAgICAgbGV0IHRhcmdldCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgICAgc3RvcmFnZVt0YXJnZXRdID0gbGl0ZXJhbHM7XG4gICAgICAvLyBDb25maWd1cmUgcHJvcGVydGllcyB3aXRoIHRoZWlyIGxpdGVyYWwgcGFydHNcbiAgICAgIGlmIChiaW5kaW5nLmxpdGVyYWwgJiYgYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpIHtcbiAgICAgICAgbm9kZVt0YXJnZXRdID0gYmluZGluZy5saXRlcmFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgMi13YXkgYmluZGluZyBub3RpZmljYXRpb24gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIG5vZGUgc3BlY2lmaWVkXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIENoaWxkIGVsZW1lbnQgdG8gYWRkIGxpc3RlbmVyIHRvXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIHRvIGhhbmRsZSBub3RpZmljYXRpb24gZXZlbnRcbiAgICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGFkZE5vdGlmeUxpc3RlbmVyKG5vZGUsIGluc3QsIGJpbmRpbmcpIHtcbiAgICBpZiAoYmluZGluZy5saXN0ZW5lckV2ZW50KSB7XG4gICAgICBsZXQgcGFydCA9IGJpbmRpbmcucGFydHNbMF07XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoYmluZGluZy5saXN0ZW5lckV2ZW50LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24oZSwgaW5zdCwgYmluZGluZy50YXJnZXQsIHBhcnQuc291cmNlLCBwYXJ0Lm5lZ2F0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyAtLSBmb3IgbWV0aG9kLWJhc2VkIGVmZmVjdHMgKGNvbXBsZXhPYnNlcnZlciAmIGNvbXB1dGVkKSAtLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGRzIHByb3BlcnR5IGVmZmVjdHMgZm9yIGVhY2ggYXJndW1lbnQgaW4gdGhlIG1ldGhvZCBzaWduYXR1cmUgKGFuZFxuICAgKiBvcHRpb25hbGx5LCBmb3IgdGhlIG1ldGhvZCBuYW1lIGlmIGBkeW5hbWljYCBpcyB0cnVlKSB0aGF0IGNhbGxzIHRoZVxuICAgKiBwcm92aWRlZCBlZmZlY3QgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudCB8IE9iamVjdH0gbW9kZWwgUHJvdG90eXBlIG9yIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiBwcm9wZXJ0eSBlZmZlY3QgdG8gYWRkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVmZmVjdEZuIEZ1bmN0aW9uIHRvIHJ1biB3aGVuIGFyZ3VtZW50cyBjaGFuZ2VcbiAgICogQHBhcmFtIHsqPX0gbWV0aG9kSW5mbyBFZmZlY3Qtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gYmUgaW5jbHVkZWQgaW5cbiAgICogICBtZXRob2QgZWZmZWN0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmcgd2hldGhlclxuICAgKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuIE5vdGUsXG4gICAqICAgZGVmYXVsdHMgdG8gdHJ1ZSBpZiB0aGUgc2lnbmF0dXJlIGlzIHN0YXRpYyAoc2lnLnN0YXRpYyBpcyB0cnVlKS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZEVmZmVjdChtb2RlbCwgc2lnLCB0eXBlLCBlZmZlY3RGbiwgbWV0aG9kSW5mbywgZHluYW1pY0ZuKSB7XG4gICAgZHluYW1pY0ZuID0gc2lnLnN0YXRpYyB8fCBkeW5hbWljRm4gJiYgKHR5cGVvZiBkeW5hbWljRm4gIT09ICdvYmplY3QnIHx8IGR5bmFtaWNGbltzaWcubWV0aG9kTmFtZV0pO1xuICAgIGxldCBpbmZvID0ge1xuICAgICAgbWV0aG9kTmFtZTogc2lnLm1ldGhvZE5hbWUsXG4gICAgICBhcmdzOiBzaWcuYXJncyxcbiAgICAgIG1ldGhvZEluZm8sXG4gICAgICBkeW5hbWljRm5cbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwLCBhcmc7IGkgPCBzaWcuYXJncy5sZW5ndGggJiYgKGFyZyA9IHNpZy5hcmdzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoIWFyZy5saXRlcmFsKSB7XG4gICAgICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChhcmcucm9vdFByb3BlcnR5LCB0eXBlLCB7XG4gICAgICAgICAgZm46IGVmZmVjdEZuLCBpbmZvOiBpbmZvLCB0cmlnZ2VyOiBhcmdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkeW5hbWljRm4pIHtcbiAgICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChzaWcubWV0aG9kTmFtZSwgdHlwZSwge1xuICAgICAgICBmbjogZWZmZWN0Rm4sIGluZm86IGluZm9cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBhIG1ldGhvZCB3aXRoIGFyZ3VtZW50cyBtYXJzaGFsZWQgZnJvbSBwcm9wZXJ0aWVzIG9uIHRoZSBpbnN0YW5jZVxuICAgKiBiYXNlZCBvbiB0aGUgbWV0aG9kIHNpZ25hdHVyZSBjb250YWluZWQgaW4gdGhlIGVmZmVjdCBtZXRhZGF0YS5cbiAgICpcbiAgICogTXVsdGktcHJvcGVydHkgb2JzZXJ2ZXJzLCBjb21wdXRlZCBwcm9wZXJ0aWVzLCBhbmQgaW5saW5lIGNvbXB1dGluZ1xuICAgKiBmdW5jdGlvbnMgY2FsbCB0aGlzIGZ1bmN0aW9uIHRvIGludm9rZSB0aGUgbWV0aG9kLCB0aGVuIHVzZSB0aGUgcmV0dXJuXG4gICAqIHZhbHVlIGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcmV0dXJuIHsqfSBSZXR1cm5zIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgbWV0aG9kIGludm9jYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bk1ldGhvZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gICAgLy8gSW5zdGFuY2VzIGNhbiBvcHRpb25hbGx5IGhhdmUgYSBfbWV0aG9kSG9zdCB3aGljaCBhbGxvd3MgcmVkaXJlY3Rpbmcgd2hlcmVcbiAgICAvLyB0byBmaW5kIG1ldGhvZHMuIEN1cnJlbnRseSB1c2VkIGJ5IGB0ZW1wbGF0aXplYC5cbiAgICBsZXQgY29udGV4dCA9IGluc3QuX21ldGhvZEhvc3QgfHwgaW5zdDtcbiAgICBsZXQgZm4gPSBjb250ZXh0W2luZm8ubWV0aG9kTmFtZV07XG4gICAgaWYgKGZuKSB7XG4gICAgICBsZXQgYXJncyA9IG1hcnNoYWxBcmdzKGluc3QuX19kYXRhLCBpbmZvLmFyZ3MsIHByb3BlcnR5LCBwcm9wcyk7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIGlmICghaW5mby5keW5hbWljRm4pIHtcbiAgICAgIGNvbnNvbGUud2FybignbWV0aG9kIGAnICsgaW5mby5tZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBlbXB0eUFycmF5ID0gW107XG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9ucyB1c2VkIGZvciBiaW5kaW5nXG4gIGNvbnN0IElERU5UID0gJyg/OicgKyAnW2EtekEtWl8kXVtcXFxcdy46JFxcXFwtKl0qJyArICcpJztcbiAgY29uc3QgTlVNQkVSID0gJyg/OicgKyAnWy0rXT9bMC05XSpcXFxcLj9bMC05XSsoPzpbZUVdWy0rXT9bMC05XSspPycgKyAnKSc7XG4gIGNvbnN0IFNRVU9URV9TVFJJTkcgPSAnKD86JyArICdcXCcoPzpbXlxcJ1xcXFxcXFxcXXxcXFxcXFxcXC4pKlxcJycgKyAnKSc7XG4gIGNvbnN0IERRVU9URV9TVFJJTkcgPSAnKD86JyArICdcIig/OlteXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcIicgKyAnKSc7XG4gIGNvbnN0IFNUUklORyA9ICcoPzonICsgU1FVT1RFX1NUUklORyArICd8JyArIERRVU9URV9TVFJJTkcgKyAnKSc7XG4gIGNvbnN0IEFSR1VNRU5UID0gJyg/OignICsgSURFTlQgKyAnfCcgKyBOVU1CRVIgKyAnfCcgKyBTVFJJTkcgKyAnKVxcXFxzKicgKyAnKSc7XG4gIGNvbnN0IEFSR1VNRU5UUyA9ICcoPzonICsgQVJHVU1FTlQgKyAnKD86LFxcXFxzKicgKyBBUkdVTUVOVCArICcpKicgKyAnKSc7XG4gIGNvbnN0IEFSR1VNRU5UX0xJU1QgPSAnKD86JyArICdcXFxcKFxcXFxzKicgKyAnKD86JyArIEFSR1VNRU5UUyArICc/JyArICcpJyArICdcXFxcKVxcXFxzKicgKyAnKSc7XG4gIGNvbnN0IEJJTkRJTkcgPSAnKCcgKyBJREVOVCArICdcXFxccyonICsgQVJHVU1FTlRfTElTVCArICc/JyArICcpJzsgLy8gR3JvdXAgM1xuICBjb25zdCBPUEVOX0JSQUNLRVQgPSAnKFxcXFxbXFxcXFt8e3spJyArICdcXFxccyonO1xuICBjb25zdCBDTE9TRV9CUkFDS0VUID0gJyg/Ol1dfH19KSc7XG4gIGNvbnN0IE5FR0FURSA9ICcoPzooISlcXFxccyopPyc7IC8vIEdyb3VwIDJcbiAgY29uc3QgRVhQUkVTU0lPTiA9IE9QRU5fQlJBQ0tFVCArIE5FR0FURSArIEJJTkRJTkcgKyBDTE9TRV9CUkFDS0VUO1xuICBjb25zdCBiaW5kaW5nUmVnZXggPSBuZXcgUmVnRXhwKEVYUFJFU1NJT04sIFwiZ1wiKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgc3RyaW5nIGZyb20gYmluZGluZyBwYXJ0cyBvZiBhbGwgdGhlIGxpdGVyYWwgcGFydHNcbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8QmluZGluZ1BhcnQ+fSBwYXJ0cyBBbGwgcGFydHMgdG8gc3RyaW5naWZ5XG4gICAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIG1hZGUgZnJvbSB0aGUgbGl0ZXJhbCBwYXJ0c1xuICAgKi9cbiAgZnVuY3Rpb24gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykge1xuICAgIGxldCBzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGxpdGVyYWwgPSBwYXJ0c1tpXS5saXRlcmFsO1xuICAgICAgcyArPSBsaXRlcmFsIHx8ICcnO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gZXhwcmVzc2lvbiBzdHJpbmcgZm9yIGEgbWV0aG9kIHNpZ25hdHVyZSwgYW5kIHJldHVybnMgYSBtZXRhZGF0YVxuICAgKiBkZXNjcmliaW5nIHRoZSBtZXRob2QgaW4gdGVybXMgb2YgYG1ldGhvZE5hbWVgLCBgc3RhdGljYCAod2hldGhlciBhbGwgdGhlXG4gICAqIGFyZ3VtZW50cyBhcmUgbGl0ZXJhbHMpLCBhbmQgYW4gYXJyYXkgb2YgYGFyZ3NgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHBhcnNlXG4gICAqIEByZXR1cm4gez9NZXRob2RTaWduYXR1cmV9IFRoZSBtZXRob2QgbWV0YWRhdGEgb2JqZWN0IGlmIGEgbWV0aG9kIGV4cHJlc3Npb24gd2FzXG4gICAqICAgZm91bmQsIG90aGVyd2lzZSBgdW5kZWZpbmVkYFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VNZXRob2QoZXhwcmVzc2lvbikge1xuICAgIC8vIHRyaWVzIHRvIG1hdGNoIHZhbGlkIGphdmFzY3JpcHQgcHJvcGVydHkgbmFtZXNcbiAgICBsZXQgbSA9IGV4cHJlc3Npb24ubWF0Y2goLyhbXlxcc10rPylcXCgoW1xcc1xcU10qKVxcKS8pO1xuICAgIGlmIChtKSB7XG4gICAgICBsZXQgbWV0aG9kTmFtZSA9IG1bMV07XG4gICAgICBsZXQgc2lnID0geyBtZXRob2ROYW1lLCBzdGF0aWM6IHRydWUsIGFyZ3M6IGVtcHR5QXJyYXkgfTtcbiAgICAgIGlmIChtWzJdLnRyaW0oKSkge1xuICAgICAgICAvLyByZXBsYWNlIGVzY2FwZWQgY29tbWFzIHdpdGggY29tbWEgZW50aXR5LCBzcGxpdCBvbiB1bi1lc2NhcGVkIGNvbW1hc1xuICAgICAgICBsZXQgYXJncyA9IG1bMl0ucmVwbGFjZSgvXFxcXCwvZywgJyZjb21tYTsnKS5zcGxpdCgnLCcpO1xuICAgICAgICByZXR1cm4gcGFyc2VBcmdzKGFyZ3MsIHNpZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2lnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gYXJyYXkgb2YgYXJndW1lbnRzIGFuZCBzZXRzIHRoZSBgYXJnc2AgcHJvcGVydHkgb2YgdGhlIHN1cHBsaWVkXG4gICAqIHNpZ25hdHVyZSBtZXRhZGF0YSBvYmplY3QuIFNldHMgdGhlIGBzdGF0aWNgIHByb3BlcnR5IHRvIGZhbHNlIGlmIGFueVxuICAgKiBhcmd1bWVudCBpcyBhIG5vbi1saXRlcmFsLlxuICAgKlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBhcmdMaXN0IEFycmF5IG9mIGFyZ3VtZW50IG5hbWVzXG4gICAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gICAqIEByZXR1cm4geyFNZXRob2RTaWduYXR1cmV9IFRoZSB1cGRhdGVkIHNpZ25hdHVyZSBtZXRhZGF0YSBvYmplY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlQXJncyhhcmdMaXN0LCBzaWcpIHtcbiAgICBzaWcuYXJncyA9IGFyZ0xpc3QubWFwKGZ1bmN0aW9uIChyYXdBcmcpIHtcbiAgICAgIGxldCBhcmcgPSBwYXJzZUFyZyhyYXdBcmcpO1xuICAgICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgICBzaWcuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH0sIHRoaXMpO1xuICAgIHJldHVybiBzaWc7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIGluZGl2aWR1YWwgYXJndW1lbnQsIGFuZCByZXR1cm5zIGFuIGFyZ3VtZW50IG1ldGFkYXRhIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgKlxuICAgKiAgIHtcbiAgICogICAgIHZhbHVlOiAncHJvcCcsICAgICAgICAvLyBwcm9wZXJ0eS9wYXRoIG9yIGxpdGVyYWwgdmFsdWVcbiAgICogICAgIGxpdGVyYWw6IGZhbHNlLCAgICAgICAvLyB3aGV0aGVyIGFyZ3VtZW50IGlzIGEgbGl0ZXJhbFxuICAgKiAgICAgc3RydWN0dXJlZDogZmFsc2UsICAgIC8vIHdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGEgcGF0aFxuICAgKiAgICAgcm9vdFByb3BlcnR5OiAncHJvcCcsIC8vIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoXG4gICAqICAgICB3aWxkY2FyZDogZmFsc2UgICAgICAgLy8gd2hldGhlciB0aGUgYXJndW1lbnQgd2FzIGEgd2lsZGNhcmQgJy4qJyBwYXRoXG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmF3QXJnIFRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGFyZ3VtZW50XG4gICAqIEByZXR1cm4geyFNZXRob2RBcmd9IEFyZ3VtZW50IG1ldGFkYXRhIG9iamVjdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VBcmcocmF3QXJnKSB7XG4gICAgLy8gY2xlYW4gdXAgd2hpdGVzcGFjZVxuICAgIGxldCBhcmcgPSByYXdBcmcudHJpbSgpXG4gICAgLy8gcmVwbGFjZSBjb21tYSBlbnRpdHkgd2l0aCBjb21tYVxuICAgIC5yZXBsYWNlKC8mY29tbWE7L2csICcsJylcbiAgICAvLyByZXBhaXIgZXh0cmEgZXNjYXBlIHNlcXVlbmNlczsgbm90ZSBvbmx5IGNvbW1hcyBzdHJpY3RseSBuZWVkXG4gICAgLy8gZXNjYXBpbmcsIGJ1dCB3ZSBhbGxvdyBhbnkgb3RoZXIgY2hhciB0byBiZSBlc2NhcGVkIHNpbmNlIGl0c1xuICAgIC8vIGxpa2VseSB1c2VycyB3aWxsIGRvIHRoaXNcbiAgICAucmVwbGFjZSgvXFxcXCguKS9nLCAnXFwkMScpO1xuICAgIC8vIGJhc2ljIGFyZ3VtZW50IGRlc2NyaXB0b3JcbiAgICBsZXQgYSA9IHtcbiAgICAgIG5hbWU6IGFyZyxcbiAgICAgIHZhbHVlOiAnJyxcbiAgICAgIGxpdGVyYWw6IGZhbHNlXG4gICAgfTtcbiAgICAvLyBkZXRlY3QgbGl0ZXJhbCB2YWx1ZSAobXVzdCBiZSBTdHJpbmcgb3IgTnVtYmVyKVxuICAgIGxldCBmYyA9IGFyZ1swXTtcbiAgICBpZiAoZmMgPT09ICctJykge1xuICAgICAgZmMgPSBhcmdbMV07XG4gICAgfVxuICAgIGlmIChmYyA+PSAnMCcgJiYgZmMgPD0gJzknKSB7XG4gICAgICBmYyA9ICcjJztcbiAgICB9XG4gICAgc3dpdGNoIChmYykge1xuICAgICAgY2FzZSBcIidcIjpcbiAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgYS52YWx1ZSA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICAgIGEubGl0ZXJhbCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIyc6XG4gICAgICAgIGEudmFsdWUgPSBOdW1iZXIoYXJnKTtcbiAgICAgICAgYS5saXRlcmFsID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIGlmIG5vdCBsaXRlcmFsLCBsb29rIGZvciBzdHJ1Y3R1cmVkIHBhdGhcbiAgICBpZiAoIWEubGl0ZXJhbCkge1xuICAgICAgYS5yb290UHJvcGVydHkgPSBQb2x5bWVyLlBhdGgucm9vdChhcmcpO1xuICAgICAgLy8gZGV0ZWN0IHN0cnVjdHVyZWQgcGF0aCAoaGFzIGRvdHMpXG4gICAgICBhLnN0cnVjdHVyZWQgPSBQb2x5bWVyLlBhdGguaXNQYXRoKGFyZyk7XG4gICAgICBpZiAoYS5zdHJ1Y3R1cmVkKSB7XG4gICAgICAgIGEud2lsZGNhcmQgPSBhcmcuc2xpY2UoLTIpID09ICcuKic7XG4gICAgICAgIGlmIChhLndpbGRjYXJkKSB7XG4gICAgICAgICAgYS5uYW1lID0gYXJnLnNsaWNlKDAsIC0yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHYXRoZXIgdGhlIGFyZ3VtZW50IHZhbHVlcyBmb3IgYSBtZXRob2Qgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCBhcnJheVxuICAgKiBvZiBhcmd1bWVudCBtZXRhZGF0YS5cbiAgICpcbiAgICogVGhlIGBwYXRoYCBhbmQgYHZhbHVlYCBhcmd1bWVudHMgYXJlIHVzZWQgdG8gZmlsbCBpbiB3aWxkY2FyZCBkZXNjcmlwdG9yXG4gICAqIHdoZW4gdGhlIG1ldGhvZCBpcyBiZWluZyBjYWxsZWQgYXMgYSByZXN1bHQgb2YgYSBwYXRoIG5vdGlmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgSW5zdGFuY2UgZGF0YSBzdG9yYWdlIG9iamVjdCB0byByZWFkIHByb3BlcnRpZXMgZnJvbVxuICAgKiBAcGFyYW0geyFBcnJheTwhTWV0aG9kQXJnPn0gYXJncyBBcnJheSBvZiBhcmd1bWVudCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQcm9wZXJ0eS9wYXRoIG5hbWUgdGhhdCB0cmlnZ2VyZWQgdGhlIG1ldGhvZCBlZmZlY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHJldHVybiB7QXJyYXk8Kj59IEFycmF5IG9mIGFyZ3VtZW50IHZhbHVlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gbWFyc2hhbEFyZ3MoZGF0YSwgYXJncywgcGF0aCwgcHJvcHMpIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmdzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICBsZXQgbmFtZSA9IGFyZy5uYW1lO1xuICAgICAgbGV0IHY7XG4gICAgICBpZiAoYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgdiA9IGFyZy52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhcmcuc3RydWN0dXJlZCkge1xuICAgICAgICAgIHYgPSBQb2x5bWVyLlBhdGguZ2V0KGRhdGEsIG5hbWUpO1xuICAgICAgICAgIC8vIHdoZW4gZGF0YSBpcyBub3Qgc3RvcmVkIGUuZy4gYHNwbGljZXNgXG4gICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdiA9IHByb3BzW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2ID0gZGF0YVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyZy53aWxkY2FyZCkge1xuICAgICAgICAvLyBPbmx5IHNlbmQgdGhlIGFjdHVhbCBwYXRoIGNoYW5nZWQgaW5mbyBpZiB0aGUgY2hhbmdlIHRoYXRcbiAgICAgICAgLy8gY2F1c2VkIHRoZSBvYnNlcnZlciB0byBydW4gbWF0Y2hlZCB0aGUgd2lsZGNhcmRcbiAgICAgICAgbGV0IGJhc2VDaGFuZ2VkID0gbmFtZS5pbmRleE9mKHBhdGggKyAnLicpID09PSAwO1xuICAgICAgICBsZXQgbWF0Y2hlcyA9IHBhdGguaW5kZXhPZihuYW1lKSA9PT0gMCAmJiAhYmFzZUNoYW5nZWQ7XG4gICAgICAgIHZhbHVlc1tpXSA9IHtcbiAgICAgICAgICBwYXRoOiBtYXRjaGVzID8gcGF0aCA6IG5hbWUsXG4gICAgICAgICAgdmFsdWU6IG1hdGNoZXMgPyBwcm9wc1twYXRoXSA6IHYsXG4gICAgICAgICAgYmFzZTogdlxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzW2ldID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIC8vIGRhdGEgYXBpXG5cbiAgLyoqXG4gICAqIFNlbmRzIGFycmF5IHNwbGljZSBub3RpZmljYXRpb25zIChgLnNwbGljZXNgIGFuZCBgLmxlbmd0aGApXG4gICAqXG4gICAqIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG5vcm1hbGl6ZWQgcGF0aHNcbiAgICpcbiAgICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBJbnN0YW5jZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMgdG9cbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRoZSBtdXRhdGlvbnMgb2NjdXJyZWQgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gdGhlIGFycmF5IHRoYXQgd2FzIG11dGF0ZWRcbiAgICogQHBhcmFtIHtBcnJheX0gc3BsaWNlcyBBcnJheSBvZiBzcGxpY2UgcmVjb3Jkc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gbm90aWZ5U3BsaWNlcyhpbnN0LCBhcnJheSwgcGF0aCwgc3BsaWNlcykge1xuICAgIGxldCBzcGxpY2VzUGF0aCA9IHBhdGggKyAnLnNwbGljZXMnO1xuICAgIGluc3Qubm90aWZ5UGF0aChzcGxpY2VzUGF0aCwgeyBpbmRleFNwbGljZXM6IHNwbGljZXMgfSk7XG4gICAgaW5zdC5ub3RpZnlQYXRoKHBhdGggKyAnLmxlbmd0aCcsIGFycmF5Lmxlbmd0aCk7XG4gICAgLy8gTnVsbCBoZXJlIHRvIGFsbG93IHBvdGVudGlhbGx5IGxhcmdlIHNwbGljZSByZWNvcmRzIHRvIGJlIEdDJ2VkLlxuICAgIGluc3QuX19kYXRhW3NwbGljZXNQYXRoXSA9IHsgaW5kZXhTcGxpY2VzOiBudWxsIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNwbGljZSByZWNvcmQgYW5kIHNlbmRzIGFuIGFycmF5IHNwbGljZSBub3RpZmljYXRpb24gZm9yXG4gICAqIHRoZSBkZXNjcmliZWQgbXV0YXRpb25cbiAgICpcbiAgICogTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgbm9ybWFsaXplZCBwYXRoc1xuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IEluc3RhbmNlIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB0b1xuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdGhlIG11dGF0aW9ucyBvY2N1cnJlZCBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byB0aGUgYXJyYXkgdGhhdCB3YXMgbXV0YXRlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdGhlIGFycmF5IG11dGF0aW9uIG9jY3VycmVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlZENvdW50IE51bWJlciBvZiBhZGRlZCBpdGVtc1xuICAgKiBAcGFyYW0ge0FycmF5fSByZW1vdmVkIEFycmF5IG9mIHJlbW92ZWQgaXRlbXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIG5vdGlmeVNwbGljZShpbnN0LCBhcnJheSwgcGF0aCwgaW5kZXgsIGFkZGVkQ291bnQsIHJlbW92ZWQpIHtcbiAgICBub3RpZnlTcGxpY2VzKGluc3QsIGFycmF5LCBwYXRoLCBbe1xuICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgYWRkZWRDb3VudDogYWRkZWRDb3VudCxcbiAgICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgICBvYmplY3Q6IGFycmF5LFxuICAgICAgdHlwZTogJ3NwbGljZSdcbiAgICB9XSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiB1cHBlci1jYXNlZCB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFN0cmluZyB0byB1cHBlcmNhc2VcbiAgICogQHJldHVybiB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gdXBwZXIobmFtZSkge1xuICAgIHJldHVybiBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgbWV0YS1wcm9ncmFtbWluZyBmb3IgUG9seW1lcidzIHRlbXBsYXRlXG4gICAqIGJpbmRpbmcgYW5kIGRhdGEgb2JzZXJ2YXRpb24gKGNvbGxlY3RpdmVseSwgXCJwcm9wZXJ0eSBlZmZlY3RzXCIpIHN5c3RlbS5cbiAgICpcbiAgICogVGhpcyBtaXhpbiB1c2VzIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcga2V5IHN0YXRpYyBtZXRob2RzIGZvciBhZGRpbmdcbiAgICogcHJvcGVydHkgZWZmZWN0cyB0byBhbiBlbGVtZW50IGNsYXNzOlxuICAgKiAtIGBhZGRQcm9wZXJ0eUVmZmVjdGBcbiAgICogLSBgY3JlYXRlUHJvcGVydHlPYnNlcnZlcmBcbiAgICogLSBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgXG4gICAqIC0gYGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5YFxuICAgKiAtIGBjcmVhdGVSZWFkT25seVByb3BlcnR5YFxuICAgKiAtIGBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eWBcbiAgICogLSBgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eWBcbiAgICogLSBgYmluZFRlbXBsYXRlYFxuICAgKlxuICAgKiBFYWNoIG1ldGhvZCBjcmVhdGVzIG9uZSBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycywgYWxvbmcgd2l0aCBtZXRhZGF0YVxuICAgKiB1c2VkIGJ5IHRoaXMgbWl4aW4ncyBpbXBsZW1lbnRhdGlvbiBvZiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB0byBwZXJmb3JtXG4gICAqIHRoZSBwcm9wZXJ0eSBlZmZlY3RzLlxuICAgKlxuICAgKiBVbmRlcnNjb3JlZCB2ZXJzaW9ucyBvZiB0aGUgYWJvdmUgbWV0aG9kcyBhbHNvIGV4aXN0IG9uIHRoZSBlbGVtZW50XG4gICAqIHByb3RvdHlwZSBmb3IgYWRkaW5nIHByb3BlcnR5IGVmZmVjdHMgb24gaW5zdGFuY2VzIGF0IHJ1bnRpbWUuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1peGluIG92ZXJyaWRlcyBzZXZlcmFsIGBQcm9wZXJ0eUFjY2Vzc29yc2AgbWV0aG9kcywgaW5cbiAgICogbWFueSBjYXNlcyB0byBtYWludGFpbiBndWFyYW50ZWVzIHByb3ZpZGVkIGJ5IHRoZSBQb2x5bWVyIDEueCBmZWF0dXJlcztcbiAgICogbm90YWJseSBpdCBjaGFuZ2VzIHByb3BlcnR5IGFjY2Vzc29ycyB0byBiZSBzeW5jaHJvbm91cyBieSBkZWZhdWx0XG4gICAqIHdoZXJlYXMgdGhlIGRlZmF1bHQgd2hlbiB1c2luZyBgUHJvcGVydHlBY2Nlc3NvcnNgIHN0YW5kYWxvbmUgaXMgdG8gYmVcbiAgICogYXN5bmMgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogQG1peGluRnVuY3Rpb25cbiAgICogQHBvbHltZXJcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLlRlbXBsYXRlU3RhbXBcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLlByb3BlcnR5QWNjZXNzb3JzXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBtZXRhLXByb2dyYW1taW5nIGZvciBQb2x5bWVyJ3NcbiAgICogdGVtcGxhdGUgYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiBzeXN0ZW0uXG4gICAqL1xuICBQb2x5bWVyLlByb3BlcnR5RWZmZWN0cyA9IFBvbHltZXIuZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBleHRlbmRzIHtzdXBlckNsYXNzfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5QWNjZXNzb3JzfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAgICogQHVucmVzdHJpY3RlZFxuICAgICAqL1xuICAgIGNvbnN0IHByb3BlcnR5RWZmZWN0c0Jhc2UgPSBQb2x5bWVyLlRlbXBsYXRlU3RhbXAoUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29ycyhzdXBlckNsYXNzKSk7XG5cbiAgICAvKipcbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBtaXhpbkNsYXNzXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgICAqIEBleHRlbmRzIHtwcm9wZXJ0eUVmZmVjdHNCYXNlfVxuICAgICAqIEB1bnJlc3RyaWN0ZWRcbiAgICAgKi9cbiAgICBjbGFzcyBQcm9wZXJ0eUVmZmVjdHMgZXh0ZW5kcyBwcm9wZXJ0eUVmZmVjdHNCYXNlIHtcblxuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHk7XG4gICAgICAgIC8qKiBAdHlwZSB7QXJyYXl9ICovXG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5O1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocztcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2U7XG4gICAgICAgIC8qKiBAdHlwZSB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9ICovXG4gICAgICAgIHRoaXMuX19kYXRhSG9zdDtcbiAgICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YVRlbXA7XG4gICAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFDbGllbnRzSW5pdGlhbGl6ZWQ7XG4gICAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGE7XG4gICAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nO1xuICAgICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19kYXRhT2xkO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2NvbXB1dGVFZmZlY3RzO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX3JlZmxlY3RFZmZlY3RzO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX25vdGlmeUVmZmVjdHM7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fcHJvcGFnYXRlRWZmZWN0cztcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19vYnNlcnZlRWZmZWN0cztcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19yZWFkT25seTtcbiAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICAgIHRoaXMuX19kYXRhQ291bnRlcjtcbiAgICAgICAgLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqL1xuICAgICAgICB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgICAgfVxuXG4gICAgICBnZXQgUFJPUEVSVFlfRUZGRUNUX1RZUEVTKCkge1xuICAgICAgICByZXR1cm4gVFlQRVM7XG4gICAgICB9XG5cbiAgICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGhvc3RTdGFjay5yZWdpc3Rlckhvc3QodGhpcyk7XG4gICAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSBmYWxzZTtcbiAgICAgICAgLy8gTWF5IGJlIHNldCBvbiBpbnN0YW5jZSBwcmlvciB0byB1cGdyYWRlXG4gICAgICAgIHRoaXMuX19kYXRhQ29tcG91bmRTdG9yYWdlID0gdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fX2RhdGFIb3N0ID0gdGhpcy5fX2RhdGFIb3N0IHx8IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhVGVtcCA9IHt9O1xuICAgICAgICB0aGlzLl9fZGF0YUNsaWVudHNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29yc2AgaW1wbGVtZW50YXRpb24gdG8gcHJvdmlkZSBhXG4gICAgICAgKiBtb3JlIGVmZmljaWVudCBpbXBsZW1lbnRhdGlvbiBvZiBpbml0aWFsaXppbmcgcHJvcGVydGllcyBmcm9tXG4gICAgICAgKiB0aGUgcHJvdG90eXBlIG9uIHRoZSBpbnN0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIGluaXRpYWxpemUgb24gdGhlIHByb3RvdHlwZVxuICAgICAgICovXG4gICAgICBfaW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgICB0aGlzLl9fZGF0YSA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSBPYmplY3QuY3JlYXRlKHByb3BzKTtcbiAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSB7fTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZXMgYFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNgIGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIHNldHRpbmdcbiAgICAgICAqIGBfc2V0UHJvcGVydHlgJ3MgYHNob3VsZE5vdGlmeTogdHJ1ZWAuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgUHJvcGVydGllcyB0byBpbml0aWFsaXplIG9uIHRoZSBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBfaW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgICBsZXQgcmVhZE9ubHkgPSB0aGlzW1RZUEVTLlJFQURfT05MWV07XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICBpZiAoIXJlYWRPbmx5IHx8ICFyZWFkT25seVtwcm9wXSkge1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gdGhpcy5fX2RhdGFQZW5kaW5nIHx8IHt9O1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSB0aGlzLl9fZGF0YU9sZCB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BdID0gdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFByb3RvdHlwZSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGFkZFByb3BlcnR5RWZmZWN0YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHR5cGUgPT0gVFlQRVMuUkVBRF9PTkxZKTtcbiAgICAgICAgLy8gZWZmZWN0cyBhcmUgYWNjdW11bGF0ZWQgaW50byBhcnJheXMgcGVyIHByb3BlcnR5IGJhc2VkIG9uIHR5cGVcbiAgICAgICAgbGV0IGVmZmVjdHMgPSBlbnN1cmVPd25FZmZlY3RNYXAodGhpcywgdHlwZSlbcHJvcGVydHldO1xuICAgICAgICBpZiAoIWVmZmVjdHMpIHtcbiAgICAgICAgICBlZmZlY3RzID0gdGhpc1t0eXBlXVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBwcm9wZXJ0eSBlZmZlY3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRoZSBlZmZlY3Qgd2FzIGFzc29jaWF0ZWQgd2l0aFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3QgdG8gcmVtb3ZlXG4gICAgICAgKi9cbiAgICAgIF9yZW1vdmVQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KSB7XG4gICAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUpW3Byb3BlcnR5XTtcbiAgICAgICAgbGV0IGlkeCA9IGVmZmVjdHMuaW5kZXhPZihlZmZlY3QpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICBlZmZlY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBwcm9wZXJ0eSBlZmZlY3RcbiAgICAgICAqIG9mIGEgY2VydGFpbiB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfaGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUpIHtcbiAgICAgICAgbGV0IGVmZmVjdHMgPSB0aGlzW3R5cGVdO1xuICAgICAgICByZXR1cm4gQm9vbGVhbihlZmZlY3RzICYmIGVmZmVjdHNbcHJvcGVydHldKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwicmVhZCBvbmx5XCJcbiAgICAgICAqIGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfaGFzUmVhZE9ubHlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJub3RpZnlcIlxuICAgICAgICogcHJvcGVydHkgZWZmZWN0IGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfaGFzTm90aWZ5RWZmZWN0KHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuTk9USUZZKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwicmVmbGVjdCB0byBhdHRyaWJ1dGVcIlxuICAgICAgICogcHJvcGVydHkgZWZmZWN0IGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfaGFzUmVmbGVjdEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFRkxFQ1QpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJjb21wdXRlZFwiXG4gICAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNDb21wdXRlZEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLkNPTVBVVEUpO1xuICAgICAgfVxuXG4gICAgICAvLyBSdW50aW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIGEgcGVuZGluZyBwcm9wZXJ0eSBvciBwYXRoLiAgSWYgdGhlIHJvb3QgcHJvcGVydHkgb2YgdGhlIHBhdGggaW5cbiAgICAgICAqIHF1ZXN0aW9uIGhhZCBubyBhY2Nlc3NvciwgdGhlIHBhdGggaXMgc2V0LCBvdGhlcndpc2UgaXQgaXMgZW5xdWV1ZWRcbiAgICAgICAqIHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWAuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBmdW5jdGlvbiBpc29sYXRlcyByZWxhdGl2ZWx5IGV4cGVuc2l2ZSBmdW5jdGlvbmFsaXR5IG5lY2Vzc2FyeVxuICAgICAgICogZm9yIHRoZSBwdWJsaWMgQVBJIChgc2V0YCwgYHNldFByb3BlcnRpZXNgLCBgbm90aWZ5UGF0aGAsIGFuZCBwcm9wZXJ0eVxuICAgICAgICogY2hhbmdlIGxpc3RlbmVycyB2aWEge3suLi59fSBiaW5kaW5ncyksIHN1Y2ggdGhhdCBpdCBpcyBvbmx5IGRvbmVcbiAgICAgICAqIHdoZW4gcGF0aHMgZW50ZXIgdGhlIHN5c3RlbSwgYW5kIG5vdCBhdCBldmVyeSBwcm9wYWdhdGlvbiBzdGVwLiAgSXRcbiAgICAgICAqIGFsc28gc2V0cyBhIGBfX2RhdGFIYXNQYXRoc2AgZmxhZyBvbiB0aGUgaW5zdGFuY2Ugd2hpY2ggaXMgdXNlZCB0b1xuICAgICAgICogZmFzdC1wYXRoIHNsb3dlciBwYXRoLW1hdGNoaW5nIGNvZGUgaW4gdGhlIHByb3BlcnR5IGVmZmVjdHMgaG9zdCBwYXRocy5cbiAgICAgICAqXG4gICAgICAgKiBgcGF0aGAgY2FuIGJlIGEgcGF0aCBzdHJpbmcgb3IgYXJyYXkgb2YgcGF0aCBwYXJ0cyBhcyBhY2NlcHRlZCBieSB0aGVcbiAgICAgICAqIHB1YmxpYyBBUEkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8bnVtYmVyfHN0cmluZz59IHBhdGggUGF0aCB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGROb3RpZnkgU2V0IHRvIHRydWUgaWYgdGhpcyBjaGFuZ2Ugc2hvdWxkXG4gICAgICAgKiAgY2F1c2UgYSBwcm9wZXJ0eSBub3RpZmljYXRpb24gZXZlbnQgZGlzcGF0Y2hcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlzUGF0aE5vdGlmaWNhdGlvbiBJZiB0aGUgcGF0aCBiZWluZyBzZXQgaXMgYSBwYXRoXG4gICAgICAgKiAgIG5vdGlmaWNhdGlvbiBvZiBhbiBhbHJlYWR5IGNoYW5nZWQgdmFsdWUsIGFzIG9wcG9zZWQgdG8gYSByZXF1ZXN0XG4gICAgICAgKiAgIHRvIHNldCBhbmQgbm90aWZ5IHRoZSBjaGFuZ2UuICBJbiB0aGUgbGF0dGVyIGBmYWxzZWAgY2FzZSwgYSBkaXJ0eVxuICAgICAgICogICBjaGVjayBpcyBwZXJmb3JtZWQgYW5kIHRoZW4gdGhlIHZhbHVlIGlzIHNldCB0byB0aGUgcGF0aCBiZWZvcmVcbiAgICAgICAqICAgZW5xdWV1aW5nIHRoZSBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZS5cbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvcGVydHkvcGF0aCB3YXMgZW5xdWV1ZWQgaW5cbiAgICAgICAqICAgdGhlIHBlbmRpbmcgY2hhbmdlcyBiYWcuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIHNob3VsZE5vdGlmeSwgaXNQYXRoTm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmIChpc1BhdGhOb3RpZmljYXRpb24gfHwgUG9seW1lci5QYXRoLnJvb3QoQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoKSAhPT0gcGF0aCkge1xuICAgICAgICAgIC8vIERpcnR5IGNoZWNrIGNoYW5nZXMgYmVpbmcgc2V0IHRvIGEgcGF0aCBhZ2FpbnN0IHRoZSBhY3R1YWwgb2JqZWN0LFxuICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBwYXRocyBpbnRvIHRoZSBzeXN0ZW07IGZyb20gaGVyZVxuICAgICAgICAgIC8vIHRoZSBvbmx5IGRpcnR5IGNoZWNrcyBhcmUgYWdhaW5zdCB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlIHRvIHByZXZlbnRcbiAgICAgICAgICAvLyBkdXBsaWNhdGUgd29yayBpbiB0aGUgc2FtZSB0dXJuIG9ubHkuIE5vdGUsIGlmIHRoaXMgd2FzIGEgbm90aWZpY2F0aW9uXG4gICAgICAgICAgLy8gb2YgYSBjaGFuZ2UgYWxyZWFkeSBzZXQgdG8gYSBwYXRoIChpc1BhdGhOb3RpZmljYXRpb246IHRydWUpLFxuICAgICAgICAgIC8vIHdlIGFsd2F5cyBsZXQgdGhlIGNoYW5nZSB0aHJvdWdoIGFuZCBza2lwIHRoZSBgc2V0YCBzaW5jZSBpdCB3YXNcbiAgICAgICAgICAvLyBhbHJlYWR5IGRpcnR5IGNoZWNrZWQgYXQgdGhlIHBvaW50IG9mIGVudHJ5IGFuZCB0aGUgdW5kZXJseWluZ1xuICAgICAgICAgIC8vIG9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgICBpZiAoIWlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgbGV0IG9sZCA9IFBvbHltZXIuUGF0aC5nZXQodGhpcywgcGF0aCk7XG4gICAgICAgICAgICBwYXRoID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovUG9seW1lci5QYXRoLnNldCh0aGlzLCBwYXRoLCB2YWx1ZSk7XG4gICAgICAgICAgICAvLyBVc2UgcHJvcGVydHktYWNjZXNzb3IncyBzaW1wbGVyIGRpcnR5IGNoZWNrXG4gICAgICAgICAgICBpZiAoIXBhdGggfHwgIXN1cGVyLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwYXRoLCB2YWx1ZSwgb2xkKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoIC8qKkB0eXBle3N0cmluZ30qL3BhdGgsIHZhbHVlLCBzaG91bGROb3RpZnkpKSB7XG4gICAgICAgICAgICBjb21wdXRlTGlua2VkUGF0aHModGhpcywgcGF0aCwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLl9fZGF0YUhhc0FjY2Vzc29yICYmIHRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcGF0aF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoIC8qKkB0eXBle3N0cmluZ30qL3BhdGgsIHZhbHVlLCBzaG91bGROb3RpZnkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW3BhdGhdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBcHBsaWVzIGEgdmFsdWUgdG8gYSBub24tUG9seW1lciBlbGVtZW50L25vZGUncyBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gbWFrZXMgYSBiZXN0LWVmZm9ydCBhdCBiaW5kaW5nIGludGVyb3A6XG4gICAgICAgKiBTb21lIG5hdGl2ZSBlbGVtZW50IHByb3BlcnRpZXMgaGF2ZSBzaWRlLWVmZmVjdHMgd2hlblxuICAgICAgICogcmUtc2V0dGluZyB0aGUgc2FtZSB2YWx1ZSAoZS5nLiBzZXR0aW5nIGA8aW5wdXQ+LnZhbHVlYCByZXNldHMgdGhlXG4gICAgICAgKiBjdXJzb3IgcG9zaXRpb24pLCBzbyB3ZSBkbyBhIGRpcnR5LWNoZWNrIGJlZm9yZSBzZXR0aW5nIHRoZSB2YWx1ZS5cbiAgICAgICAqIEhvd2V2ZXIsIGZvciBiZXR0ZXIgaW50ZXJvcCB3aXRoIG5vbi1Qb2x5bWVyIGN1c3RvbSBlbGVtZW50cyB0aGF0XG4gICAgICAgKiBhY2NlcHQgb2JqZWN0cywgd2UgZXhwbGljaXRseSByZS1zZXQgb2JqZWN0IGNoYW5nZXMgY29taW5nIGZyb20gdGhlXG4gICAgICAgKiBQb2x5bWVyIHdvcmxkICh3aGljaCBtYXkgaW5jbHVkZSBkZWVwIG9iamVjdCBjaGFuZ2VzIHdpdGhvdXQgdGhlXG4gICAgICAgKiB0b3AgcmVmZXJlbmNlIGNoYW5naW5nKSwgZXJyaW5nIG9uIHRoZSBzaWRlIG9mIHByb3ZpZGluZyBtb3JlXG4gICAgICAgKiBpbmZvcm1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZSBhbHRlcm5hdGUgYXBwcm9hY2hlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc2V0IGEgcHJvcGVydHkgb25cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldFxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgLy8gSXQgaXMgYSBqdWRnbWVudCBjYWxsIHRoYXQgcmVzZXR0aW5nIHByaW1pdGl2ZXMgaXNcbiAgICAgICAgLy8gXCJiYWRcIiBhbmQgcmVzZXR0aW5ncyBvYmplY3RzIGlzIGFsc28gXCJnb29kXCI7IGFsdGVybmF0aXZlbHkgd2UgY291bGRcbiAgICAgICAgLy8gaW1wbGVtZW50IGEgd2hpdGVsaXN0IG9mIHRhZyAmIHByb3BlcnR5IHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlclxuICAgICAgICAvLyBiZSByZXNldCAoZS5nLiA8aW5wdXQ+LnZhbHVlICYmIDxzZWxlY3Q+LnZhbHVlKVxuICAgICAgICBpZiAodmFsdWUgIT09IG5vZGVbcHJvcF0gfHwgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIHRoZSBgUHJvcGVydHlBY2Nlc3NvcnNgIGltcGxlbWVudGF0aW9uIHRvIGludHJvZHVjZSBzcGVjaWFsXG4gICAgICAgKiBkaXJ0eSBjaGVjayBsb2dpYyBkZXBlbmRpbmcgb24gdGhlIHByb3BlcnR5ICYgdmFsdWUgYmVpbmcgc2V0OlxuICAgICAgICpcbiAgICAgICAqIDEuIEFueSB2YWx1ZSBzZXQgdG8gYSBwYXRoIChlLmcuICdvYmoucHJvcCc6IDQyIG9yICdvYmoucHJvcCc6IHsuLi59KVxuICAgICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGBfX2RhdGFUZW1wYFxuICAgICAgICogMi4gT2JqZWN0IHNldCB0byBzaW1wbGUgcHJvcGVydHkgKGUuZy4gJ3Byb3AnOiB7Li4ufSlcbiAgICAgICAqICAgIFN0b3JlZCBpbiBgX19kYXRhVGVtcGAgYW5kIGBfX2RhdGFgLCBkaXJ0eSBjaGVja2VkIGFnYWluc3RcbiAgICAgICAqICAgIGBfX2RhdGFUZW1wYCBieSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBfc2hvdWxkUHJvcGVydHlDaGFuZ2VgXG4gICAgICAgKiAzLiBQcmltaXRpdmUgdmFsdWUgc2V0IHRvIHNpbXBsZSBwcm9wZXJ0eSAoZS5nLiAncHJvcCc6IDQyKVxuICAgICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFgLCBkaXJ0eSBjaGVja2VkIGFnYWluc3QgYF9fZGF0YWBcbiAgICAgICAqXG4gICAgICAgKiBUaGUgZGlydHktY2hlY2sgaXMgaW1wb3J0YW50IHRvIHByZXZlbnQgY3ljbGVzIGR1ZSB0byB0d28td2F5XG4gICAgICAgKiBub3RpZmljYXRpb24sIGJ1dCBwYXRocyBhbmQgb2JqZWN0cyBhcmUgb25seSBkaXJ0eSBjaGVja2VkIGFnYWluc3QgYW55XG4gICAgICAgKiBwcmV2aW91cyB2YWx1ZSBzZXQgZHVyaW5nIHRoaXMgdHVybiB2aWEgYSBcInRlbXBvcmFyeSBjYWNoZVwiIHRoYXQgaXNcbiAgICAgICAqIGNsZWFyZWQgd2hlbiB0aGUgbGFzdCBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBleGl0cy4gVGhpcyBpcyBzbzpcbiAgICAgICAqIGEuIGFueSBjYWNoZWQgYXJyYXkgcGF0aHMgKGUuZy4gJ2FycmF5LjMucHJvcCcpIG1heSBiZSBpbnZhbGlkYXRlZFxuICAgICAgICogICAgZHVlIHRvIGFycmF5IG11dGF0aW9ucyBsaWtlIHNoaWZ0L3Vuc2hpZnQvc3BsaWNlOyB0aGlzIGlzIGZpbmVcbiAgICAgICAqICAgIHNpbmNlIHBhdGggY2hhbmdlcyBhcmUgZGlydHktY2hlY2tlZCBhdCB1c2VyIGVudHJ5IHBvaW50cyBsaWtlIGBzZXRgXG4gICAgICAgKiBiLiBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBvbmx5IGxhc3RzIG9uZSB0dXJuIHRvIGFsbG93IHRoZSB1c2VyXG4gICAgICAgKiAgICB0byBtdXRhdGUgdGhlIG9iamVjdCBpbi1wbGFjZSBhbmQgcmUtc2V0IGl0IHdpdGggdGhlIHNhbWUgaWRlbnRpdHlcbiAgICAgICAqICAgIGFuZCBoYXZlIGFsbCBzdWItcHJvcGVydGllcyByZS1wcm9wYWdhdGVkIGluIGEgc3Vic2VxdWVudCB0dXJuLlxuICAgICAgICpcbiAgICAgICAqIFRoZSB0ZW1wIGNhY2hlIGlzIG5vdCBuZWNlc3NhcmlseSBzdWZmaWNpZW50IHRvIHByZXZlbnQgaW52YWxpZCBhcnJheVxuICAgICAgICogcGF0aHMsIHNpbmNlIGEgc3BsaWNlIGNhbiBoYXBwZW4gZHVyaW5nIHRoZSBzYW1lIHR1cm4gKHdpdGggcGF0aG9sb2dpY2FsXG4gICAgICAgKiB1c2VyIGNvZGUpOyB3ZSBjb3VsZCBpbnRyb2R1Y2UgYSBcImZpeHVwXCIgZm9yIHRlbXBvcmFyaWx5IGNhY2hlZCBhcnJheVxuICAgICAgICogcGF0aHMgaWYgbmVlZGVkOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyL2lzc3Vlcy80MjI3XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gc2hvdWxkTm90aWZ5IFRydWUgaWYgcHJvcGVydHkgc2hvdWxkIGZpcmUgbm90aWZpY2F0aW9uXG4gICAgICAgKiAgIGV2ZW50IChhcHBsaWVzIG9ubHkgZm9yIGBub3RpZnk6IHRydWVgIHByb3BlcnRpZXMpXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICovXG4gICAgICBfc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgc2hvdWxkTm90aWZ5KSB7XG4gICAgICAgIGxldCBpc1BhdGggPSB0aGlzLl9fZGF0YUhhc1BhdGhzICYmIFBvbHltZXIuUGF0aC5pc1BhdGgocHJvcGVydHkpO1xuICAgICAgICBsZXQgcHJldlByb3BzID0gaXNQYXRoID8gdGhpcy5fX2RhdGFUZW1wIDogdGhpcy5fX2RhdGE7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIHByZXZQcm9wc1twcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgICBpZiAoIShwcm9wZXJ0eSBpbiB0aGlzLl9fZGF0YU9sZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhT2xkW3Byb3BlcnR5XSA9IHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUGF0aHMgYXJlIHN0b3JlZCBpbiB0ZW1wb3JhcnkgY2FjaGUgKGNsZWFyZWQgYXQgZW5kIG9mIHR1cm4pLFxuICAgICAgICAgIC8vIHdoaWNoIGlzIHVzZWQgZm9yIGRpcnR5LWNoZWNraW5nLCBhbGwgb3RoZXJzIHN0b3JlZCBpbiBfX2RhdGFcbiAgICAgICAgICBpZiAoaXNQYXRoKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVRlbXBbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBbGwgY2hhbmdlcyBnbyBpbnRvIHBlbmRpbmcgcHJvcGVydHkgYmFnLCBwYXNzZWQgdG8gX3Byb3BlcnRpZXNDaGFuZ2VkXG4gICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgIC8vIFRyYWNrIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90aWZ5IHNlcGFyYXRlbHlcbiAgICAgICAgICBpZiAoaXNQYXRoIHx8IHRoaXNbVFlQRVMuTk9USUZZXSAmJiB0aGlzW1RZUEVTLk5PVElGWV1bcHJvcGVydHldKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gdGhpcy5fX2RhdGFUb05vdGlmeSB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnlbcHJvcGVydHldID0gc2hvdWxkTm90aWZ5O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gZW5zdXJlIGFsbCBhY2Nlc3NvcnMgc2V0IGBzaG91bGROb3RpZnlgXG4gICAgICAgKiB0byB0cnVlLCBmb3IgcGVyLXByb3BlcnR5IG5vdGlmaWNhdGlvbiB0cmFja2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yYCdzIGRlZmF1bHQgYXN5bmMgcXVldWluZyBvZlxuICAgICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGA6IGlmIGBfX2RhdGFSZWFkeWAgaXMgZmFsc2UgKGhhcyBub3QgeWV0IGJlZW5cbiAgICAgICAqIG1hbnVhbGx5IGZsdXNoZWQpLCB0aGUgZnVuY3Rpb24gbm8tb3BzOyBvdGhlcndpc2UgZmx1c2hlc1xuICAgICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgc3luY2hyb25vdXNseS5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgICBpZiAodGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRW5xdWV1ZXMgdGhlIGdpdmVuIGNsaWVudCBvbiBhIGxpc3Qgb2YgcGVuZGluZyBjbGllbnRzLCB3aG9zZVxuICAgICAgICogcGVuZGluZyBwcm9wZXJ0eSBjaGFuZ2VzIGNhbiBsYXRlciBiZSBmbHVzaGVkIHZpYSBhIGNhbGwgdG9cbiAgICAgICAqIGBfZmx1c2hDbGllbnRzYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2xpZW50IFByb3BlcnR5RWZmZWN0cyBjbGllbnQgdG8gZW5xdWV1ZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfZW5xdWV1ZUNsaWVudChjbGllbnQpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgfHwgW107XG4gICAgICAgIGlmIChjbGllbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzLnB1c2goY2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZsdXNoZXMgYW55IGNsaWVudHMgcHJldmlvdXNseSBlbnF1ZXVlZCB2aWEgYF9lbnF1ZXVlQ2xpZW50YCwgY2F1c2luZ1xuICAgICAgICogdGhlaXIgYF9mbHVzaFByb3BlcnRpZXNgIG1ldGhvZCB0byBydW4uXG4gICAgICAgKlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfZmx1c2hDbGllbnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX3JlYWR5Q2xpZW50cygpO1xuICAgICAgICAgIC8vIE92ZXJyaWRlIHBvaW50IHdoZXJlIGFjY2Vzc29ycyBhcmUgdHVybmVkIG9uOyBpbXBvcnRhbnRseSxcbiAgICAgICAgICAvLyB0aGlzIGlzIGFmdGVyIGNsaWVudHMgaGF2ZSBmdWxseSByZWFkaWVkLCBwcm92aWRpbmcgYSBndWFyYW50ZWVcbiAgICAgICAgICAvLyB0aGF0IGFueSBwcm9wZXJ0eSBlZmZlY3RzIG9jY3VyIG9ubHkgYWZ0ZXIgYWxsIGNsaWVudHMgYXJlIHJlYWR5LlxuICAgICAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE5PVEU6IFdlIGVuc3VyZSBjbGllbnRzIGVpdGhlciBlbmFibGUgb3IgZmx1c2ggYXMgYXBwcm9wcmlhdGUuIFRoaXNcbiAgICAgIC8vIGhhbmRsZXMgdHdvIGNvcm5lciBjYXNlczpcbiAgICAgIC8vICgxKSBjbGllbnRzIGZsdXNoIHByb3Blcmx5IHdoZW4gY29ubmVjdGVkL2VuYWJsZWQgYmVmb3JlIHRoZSBob3N0XG4gICAgICAvLyBlbmFibGVzOyBlLmcuXG4gICAgICAvLyAgIChhKSBUZW1wbGF0aXplIHN0YW1wcyB3aXRoIG5vIHByb3BlcnRpZXMgYW5kIGRvZXMgbm90IGZsdXNoIGFuZFxuICAgICAgLy8gICAoYikgdGhlIGluc3RhbmNlIGlzIGluc2VydGVkIGludG8gZG9tIGFuZFxuICAgICAgLy8gICAoYykgdGhlbiB0aGUgaW5zdGFuY2UgZmx1c2hlcy5cbiAgICAgIC8vICgyKSBjbGllbnRzIGVuYWJsZSBwcm9wZXJseSB3aGVuIG5vdCBjb25uZWN0ZWQvZW5hYmxlZCB3aGVuIHRoZSBob3N0XG4gICAgICAvLyBmbHVzaGVzOyBlLmcuXG4gICAgICAvLyAgIChhKSBhIHRlbXBsYXRlIGlzIHJ1bnRpbWUgc3RhbXBlZCBhbmQgbm90IHlldCBjb25uZWN0ZWQvZW5hYmxlZFxuICAgICAgLy8gICAoYikgYSBob3N0IHNldHMgYSBwcm9wZXJ0eSwgY2F1c2luZyBzdGFtcGVkIGRvbSB0byBmbHVzaFxuICAgICAgLy8gICAoYykgdGhlIHN0YW1wZWQgZG9tIGVuYWJsZXMuXG4gICAgICBfX2VuYWJsZU9yRmx1c2hDbGllbnRzKCkge1xuICAgICAgICBsZXQgY2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICAgIGlmIChjbGllbnRzKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyA9IG51bGw7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGllbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2xpZW50ID0gY2xpZW50c1tpXTtcbiAgICAgICAgICAgIGlmICghY2xpZW50Ll9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgY2xpZW50Ll9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsaWVudC5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgICAgIGNsaWVudC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUGVyZm9ybSBhbnkgaW5pdGlhbCBzZXR1cCBvbiBjbGllbnQgZG9tLiBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdFxuICAgICAgICogYF9mbHVzaFByb3BlcnRpZXNgIGNhbGwgb24gY2xpZW50IGRvbSBhbmQgYmVmb3JlIGFueSBlbGVtZW50XG4gICAgICAgKiBvYnNlcnZlcnMgYXJlIGNhbGxlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9yZWFkeUNsaWVudHMoKSB7XG4gICAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYSBiYWcgb2YgcHJvcGVydHkgY2hhbmdlcyB0byB0aGlzIGluc3RhbmNlLCBhbmRcbiAgICAgICAqIHN5bmNocm9ub3VzbHkgcHJvY2Vzc2VzIGFsbCBlZmZlY3RzIG9mIHRoZSBwcm9wZXJ0aWVzIGFzIGEgYmF0Y2guXG4gICAgICAgKlxuICAgICAgICogUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzaW1wbGUgcHJvcGVydGllcywgbm90IHBhdGhzLiAgQmF0Y2hlZFxuICAgICAgICogcGF0aCBwcm9wYWdhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2Ygb25lIG9yIG1vcmUga2V5LXZhbHVlIHBhaXJzIHdob3NlIGtleSBpc1xuICAgICAgICogICBhIHByb3BlcnR5IGFuZCB2YWx1ZSBpcyB0aGUgbmV3IHZhbHVlIHRvIHNldCBmb3IgdGhhdCBwcm9wZXJ0eS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNldFJlYWRPbmx5IFdoZW4gdHJ1ZSwgYW55IHByaXZhdGUgdmFsdWVzIHNldCBpblxuICAgICAgICogICBgcHJvcHNgIHdpbGwgYmUgc2V0LiBCeSBkZWZhdWx0LCBgc2V0UHJvcGVydGllc2Agd2lsbCBub3Qgc2V0XG4gICAgICAgKiAgIGByZWFkT25seTogdHJ1ZWAgcm9vdCBwcm9wZXJ0aWVzLlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBzZXRQcm9wZXJ0aWVzKHByb3BzLCBzZXRSZWFkT25seSkge1xuICAgICAgICBmb3IgKGxldCBwYXRoIGluIHByb3BzKSB7XG4gICAgICAgICAgaWYgKHNldFJlYWRPbmx5IHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV0gfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXVtwYXRoXSkge1xuICAgICAgICAgICAgLy9UT0RPKGtzY2hhYWYpOiBleHBsaWNpdGx5IGRpc2FsbG93IHBhdGhzIGluIHNldFByb3BlcnR5P1xuICAgICAgICAgICAgLy8gd2lsZGNhcmQgb2JzZXJ2ZXJzIGN1cnJlbnRseSBvbmx5IHBhc3MgdGhlIGZpcnN0IGNoYW5nZWQgcGF0aFxuICAgICAgICAgICAgLy8gaW4gdGhlIGBpbmZvYCBvYmplY3QsIGFuZCB5b3UgY291bGQgZG8gc29tZSBvZGQgdGhpbmdzIGJhdGNoaW5nXG4gICAgICAgICAgICAvLyBwYXRocywgZS5nLiB7J2Zvby5iYXInOiB7Li4ufSwgJ2Zvbyc6IG51bGx9XG4gICAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgcHJvcHNbcGF0aF0sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcnNgIHNvIHRoYXQgcHJvcGVydHkgYWNjZXNzb3JcbiAgICAgICAqIHNpZGUgZWZmZWN0cyBhcmUgbm90IGVuYWJsZWQgdW50aWwgYWZ0ZXIgY2xpZW50IGRvbSBpcyBmdWxseSByZWFkeS5cbiAgICAgICAqIEFsc28gY2FsbHMgYF9mbHVzaENsaWVudHNgIGNhbGxiYWNrIHRvIGVuc3VyZSBjbGllbnQgZG9tIGlzIGVuYWJsZWRcbiAgICAgICAqIHRoYXQgd2FzIG5vdCBlbmFibGVkIGFzIGEgcmVzdWx0IG9mIGZsdXNoaW5nIHByb3BlcnRpZXMuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKi9cbiAgICAgIHJlYWR5KCkge1xuICAgICAgICAvLyBJdCBpcyBpbXBvcnRhbnQgdGhhdCBgc3VwZXIucmVhZHkoKWAgaXMgbm90IGNhbGxlZCBoZXJlIGFzIGl0XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IHR1cm5zIG9uIGFjY2Vzc29ycy4gSW5zdGVhZCwgd2Ugd2FpdCB1bnRpbCBgcmVhZHlDbGllbnRzYFxuICAgICAgICAvLyB0byBlbmFibGUgYWNjZXNzb3JzIHRvIHByb3ZpZGUgYSBndWFyYW50ZWUgdGhhdCBjbGllbnRzIGFyZSByZWFkeVxuICAgICAgICAvLyBiZWZvcmUgcHJvY2Vzc2luZyBhbnkgYWNjZXNzb3JzIHNpZGUgZWZmZWN0cy5cbiAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgIC8vIElmIG5vIGRhdGEgd2FzIHBlbmRpbmcsIGBfZmx1c2hQcm9wZXJ0aWVzYCB3aWxsIG5vdCBgZmx1c2hDbGllbnRzYFxuICAgICAgICAvLyBzbyBlbnN1cmUgdGhpcyBpcyBkb25lLlxuICAgICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgICAgdGhpcy5fZmx1c2hDbGllbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmVmb3JlIHJlYWR5LCBjbGllbnQgbm90aWZpY2F0aW9ucyBkbyBub3QgdHJpZ2dlciBfZmx1c2hQcm9wZXJ0aWVzLlxuICAgICAgICAvLyBUaGVyZWZvcmUgYSBmbHVzaCBpcyBuZWNlc3NhcnkgaGVyZSBpZiBkYXRhIGhhcyBiZWVuIHNldC5cbiAgICAgICAgaWYgKHRoaXMuX19kYXRhUGVuZGluZykge1xuICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSW1wbGVtZW50cyBgUHJvcGVydHlBY2Nlc3NvcnNgJ3MgcHJvcGVydGllcyBjaGFuZ2VkIGNhbGxiYWNrLlxuICAgICAgICpcbiAgICAgICAqIFJ1bnMgZWFjaCBjbGFzcyBvZiBlZmZlY3RzIGZvciB0aGUgYmF0Y2ggb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIGluXG4gICAgICAgKiBhIHNwZWNpZmljIG9yZGVyIChjb21wdXRlLCBwcm9wYWdhdGUsIHJlZmxlY3QsIG9ic2VydmUsIG5vdGlmeSkuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKi9cbiAgICAgIF9wcm9wZXJ0aWVzQ2hhbmdlZChjdXJyZW50UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMpIHtcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBsZXQgYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNoYW5nZWRQcm9wcyB8fCB7fSk7XG4gICAgICAgIC8vIHdpbmRvdy5kZWJ1ZyAmJiBjb25zb2xlLmdyb3VwKHRoaXMubG9jYWxOYW1lICsgJyMnICsgdGhpcy5pZCArICc6ICcgKyBjKTtcbiAgICAgICAgLy8gaWYgKHdpbmRvdy5kZWJ1ZykgeyBkZWJ1Z2dlcjsgfVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGxldCBoYXNQYXRocyA9IHRoaXMuX19kYXRhSGFzUGF0aHM7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSBmYWxzZTtcbiAgICAgICAgLy8gQ29tcHV0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHJ1bkNvbXB1dGVkRWZmZWN0cyh0aGlzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAgIC8vIENsZWFyIG5vdGlmeSBwcm9wZXJ0aWVzIHByaW9yIHRvIHBvc3NpYmxlIHJlZW50cnkgKHByb3BhZ2F0ZSwgb2JzZXJ2ZSksXG4gICAgICAgIC8vIGJ1dCBhZnRlciBjb21wdXRpbmcgZWZmZWN0cyBoYXZlIGEgY2hhbmNlIHRvIGFkZCB0byB0aGVtXG4gICAgICAgIGxldCBub3RpZnlQcm9wcyA9IHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnkgPSBudWxsO1xuICAgICAgICAvLyBQcm9wYWdhdGUgcHJvcGVydGllcyB0byBjbGllbnRzXG4gICAgICAgIHRoaXMuX3Byb3BhZ2F0ZVByb3BlcnR5Q2hhbmdlcyhjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAgIC8vIEZsdXNoIGNsaWVudHNcbiAgICAgICAgdGhpcy5fZmx1c2hDbGllbnRzKCk7XG4gICAgICAgIC8vIFJlZmxlY3QgcHJvcGVydGllc1xuICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuUkVGTEVDVF0sIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgICAgLy8gT2JzZXJ2ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5PQlNFUlZFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgICAvLyBOb3RpZnkgcHJvcGVydGllcyB0byBob3N0XG4gICAgICAgIGlmIChub3RpZnlQcm9wcykge1xuICAgICAgICAgIHJ1bk5vdGlmeUVmZmVjdHModGhpcywgbm90aWZ5UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhciB0ZW1wb3JhcnkgY2FjaGUgYXQgZW5kIG9mIHR1cm5cbiAgICAgICAgaWYgKHRoaXMuX19kYXRhQ291bnRlciA9PSAxKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFUZW1wID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyB3aW5kb3cuZGVidWcgJiYgY29uc29sZS5ncm91cEVuZCh0aGlzLmxvY2FsTmFtZSArICcjJyArIHRoaXMuaWQgKyAnOiAnICsgYyk7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsZWQgdG8gcHJvcGFnYXRlIGFueSBwcm9wZXJ0eSBjaGFuZ2VzIHRvIHN0YW1wZWQgdGVtcGxhdGUgbm9kZXNcbiAgICAgICAqIG1hbmFnZWQgYnkgdGhpcyBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAgICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzKGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICAgIGlmICh0aGlzW1RZUEVTLlBST1BBR0FURV0pIHtcbiAgICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuUFJPUEFHQVRFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgICAgICB3aGlsZSAodGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocywgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgICAgICB0ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFsaWFzZXMgb25lIGRhdGEgcGF0aCBhcyBhbm90aGVyLCBzdWNoIHRoYXQgcGF0aCBub3RpZmljYXRpb25zIGZyb20gb25lXG4gICAgICAgKiBhcmUgcm91dGVkIHRvIHRoZSBvdGhlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gdG8gVGFyZ2V0IHBhdGggdG8gbGluay5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBmcm9tIFNvdXJjZSBwYXRoIHRvIGxpbmsuXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cbiAgICAgIGxpbmtQYXRocyh0bywgZnJvbSkge1xuICAgICAgICB0byA9IFBvbHltZXIuUGF0aC5ub3JtYWxpemUodG8pO1xuICAgICAgICBmcm9tID0gUG9seW1lci5QYXRoLm5vcm1hbGl6ZShmcm9tKTtcbiAgICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHRoaXMuX19kYXRhTGlua2VkUGF0aHMgfHwge307XG4gICAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHNbdG9dID0gZnJvbTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGEgZGF0YSBwYXRoIGFsaWFzIHByZXZpb3VzbHkgZXN0YWJsaXNoZWQgd2l0aCBgX2xpbmtQYXRoc2AuXG4gICAgICAgKlxuICAgICAgICogTm90ZSwgdGhlIHBhdGggdG8gdW5saW5rIHNob3VsZCBiZSB0aGUgdGFyZ2V0IChgdG9gKSB1c2VkIHdoZW5cbiAgICAgICAqIGxpbmtpbmcgdGhlIHBhdGhzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFRhcmdldCBwYXRoIHRvIHVubGluay5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgdW5saW5rUGF0aHMocGF0aCkge1xuICAgICAgICBwYXRoID0gUG9seW1lci5QYXRoLm5vcm1hbGl6ZShwYXRoKTtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhTGlua2VkUGF0aHMpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fX2RhdGFMaW5rZWRQYXRoc1twYXRoXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE5vdGlmeSB0aGF0IGFuIGFycmF5IGhhcyBjaGFuZ2VkLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKlxuICAgICAgICogICAgIHRoaXMuaXRlbXMgPSBbIHtuYW1lOiAnSmltJ30sIHtuYW1lOiAnVG9kZCd9LCB7bmFtZTogJ0JpbGwnfSBdO1xuICAgICAgICogICAgIC4uLlxuICAgICAgICogICAgIHRoaXMuaXRlbXMuc3BsaWNlKDEsIDEsIHtuYW1lOiAnU2FtJ30pO1xuICAgICAgICogICAgIHRoaXMuaXRlbXMucHVzaCh7bmFtZTogJ0JvYid9KTtcbiAgICAgICAqICAgICB0aGlzLm5vdGlmeVNwbGljZXMoJ2l0ZW1zJywgW1xuICAgICAgICogICAgICAgeyBpbmRleDogMSwgcmVtb3ZlZDogW3tuYW1lOiAnVG9kZCd9XSwgYWRkZWRDb3VudDogMSwgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJyB9LFxuICAgICAgICogICAgICAgeyBpbmRleDogMywgcmVtb3ZlZDogW10sIGFkZGVkQ291bnQ6IDEsIG9iamVjdDogdGhpcy5pdGVtcywgdHlwZTogJ3NwbGljZSd9XG4gICAgICAgKiAgICAgXSk7XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0aGF0IHNob3VsZCBiZSBub3RpZmllZC5cbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHNwbGljZXMgQXJyYXkgb2Ygc3BsaWNlIHJlY29yZHMgaW5kaWNhdGluZyBvcmRlcmVkXG4gICAgICAgKiAgIGNoYW5nZXMgdGhhdCBvY2N1cnJlZCB0byB0aGUgYXJyYXkuIEVhY2ggcmVjb3JkIHNob3VsZCBoYXZlIHRoZVxuICAgICAgICogICBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogICAgKiBpbmRleDogaW5kZXggYXQgd2hpY2ggdGhlIGNoYW5nZSBvY2N1cnJlZFxuICAgICAgICogICAgKiByZW1vdmVkOiBhcnJheSBvZiBpdGVtcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoaXMgaW5kZXhcbiAgICAgICAqICAgICogYWRkZWRDb3VudDogbnVtYmVyIG9mIG5ldyBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gICAgICAgKiAgICAqIG9iamVjdDogYSByZWZlcmVuY2UgdG8gdGhlIGFycmF5IGluIHF1ZXN0aW9uXG4gICAgICAgKiAgICAqIHR5cGU6IHRoZSBzdHJpbmcgbGl0ZXJhbCAnc3BsaWNlJ1xuICAgICAgICpcbiAgICAgICAqICAgTm90ZSB0aGF0IHNwbGljZSByZWNvcmRzIF9tdXN0XyBiZSBub3JtYWxpemVkIHN1Y2ggdGhhdCB0aGV5IGFyZVxuICAgICAgICogICByZXBvcnRlZCBpbiBpbmRleCBvcmRlciAocmF3IHJlc3VsdHMgZnJvbSBgT2JqZWN0Lm9ic2VydmVgIGFyZSBub3RcbiAgICAgICAqICAgb3JkZXJlZCBhbmQgbXVzdCBiZSBub3JtYWxpemVkL21lcmdlZCBiZWZvcmUgbm90aWZ5aW5nKS5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICovXG4gICAgICBub3RpZnlTcGxpY2VzKHBhdGgsIHNwbGljZXMpIHtcbiAgICAgICAgbGV0IGluZm8gPSB7IHBhdGg6ICcnIH07XG4gICAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKTtcbiAgICAgICAgbm90aWZ5U3BsaWNlcyh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzcGxpY2VzKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHJlYWRpbmcgYSB2YWx1ZSBmcm9tIGEgcGF0aC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlLCBpZiBhbnkgcGFydCBpbiB0aGUgcGF0aCBpcyB1bmRlZmluZWQsIHRoaXMgbWV0aG9kIHJldHVybnNcbiAgICAgICAqIGB1bmRlZmluZWRgICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkXG4gICAgICAgKiBwYXRocykuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAgICogICB0byByZWFkLiAgVGhlIHBhdGggbWF5IGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoZS5nLiBgZm9vLmJhci5iYXpgKVxuICAgICAgICogICBvciBhbiBhcnJheSBvZiBwYXRoIHBhcnRzIChlLmcuIGBbJ2Zvby5iYXInLCAnYmF6J11gKS4gIE5vdGUgdGhhdFxuICAgICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICAgKiAgICptdXN0KiBiZSBzZXBhcmF0ZWQgYnkgZG90cy4gIE5vdGUgdGhhdCB3aGVuIGRlcmVmZXJlbmNpbmcgYXJyYXlcbiAgICAgICAqICAgaW5kaWNlcywgdGhlIGluZGV4IG1heSBiZSB1c2VkIGFzIGEgZG90dGVkIHBhcnQgZGlyZWN0bHlcbiAgICAgICAqICAgKGUuZy4gYHVzZXJzLjEyLm5hbWVgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcm9vdCBSb290IG9iamVjdCBmcm9tIHdoaWNoIHRoZSBwYXRoIGlzIGV2YWx1YXRlZC5cbiAgICAgICAqIEByZXR1cm4geyp9IFZhbHVlIGF0IHRoZSBwYXRoLCBvciBgdW5kZWZpbmVkYCBpZiBhbnkgcGFydCBvZiB0aGUgcGF0aFxuICAgICAgICogICBpcyB1bmRlZmluZWQuXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cbiAgICAgIGdldChwYXRoLCByb290KSB7XG4gICAgICAgIHJldHVybiBQb2x5bWVyLlBhdGguZ2V0KHJvb3QgfHwgdGhpcywgcGF0aCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBzZXR0aW5nIGEgdmFsdWUgdG8gYSBwYXRoIGFuZCBub3RpZnlpbmcgYW55XG4gICAgICAgKiBlbGVtZW50cyBib3VuZCB0byB0aGUgc2FtZSBwYXRoLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXMgdW5kZWZpbmVkLFxuICAgICAgICogdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuXG4gICAgICAgKiBkZXJlZmVyZW5jaW5nIHVuZGVmaW5lZCBwYXRocykuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAgICogICB0byB3cml0ZS4gIFRoZSBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcgKGUuZy4gYCdmb28uYmFyLmJheidgKVxuICAgICAgICogICBvciBhbiBhcnJheSBvZiBwYXRoIHBhcnRzIChlLmcuIGBbJ2Zvby5iYXInLCAnYmF6J11gKS4gIE5vdGUgdGhhdFxuICAgICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICAgKiAgICptdXN0KiBiZSBzZXBhcmF0ZWQgYnkgZG90cy4gIE5vdGUgdGhhdCB3aGVuIGRlcmVmZXJlbmNpbmcgYXJyYXlcbiAgICAgICAqICAgaW5kaWNlcywgdGhlIGluZGV4IG1heSBiZSB1c2VkIGFzIGEgZG90dGVkIHBhcnQgZGlyZWN0bHlcbiAgICAgICAqICAgKGUuZy4gYCd1c2Vycy4xMi5uYW1lJ2Agb3IgYFsndXNlcnMnLCAxMiwgJ25hbWUnXWApLlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSByb290IFJvb3Qgb2JqZWN0IGZyb20gd2hpY2ggdGhlIHBhdGggaXMgZXZhbHVhdGVkLlxuICAgICAgICogICBXaGVuIHNwZWNpZmllZCwgbm8gbm90aWZpY2F0aW9uIHdpbGwgb2NjdXIuXG4gICAgICAgKiBAcHVibGljXG4gICAgICAqL1xuICAgICAgc2V0KHBhdGgsIHZhbHVlLCByb290KSB7XG4gICAgICAgIGlmIChyb290KSB7XG4gICAgICAgICAgUG9seW1lci5QYXRoLnNldChyb290LCBwYXRoLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF0aGlzW1RZUEVTLlJFQURfT05MWV0gfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXVsvKiogQHR5cGUge3N0cmluZ30gKi9wYXRoXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIGl0ZW1zIG9udG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAgICogYEFycmF5LnByb3RvdHlwZS5wdXNoYC5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gaXRlbXMgSXRlbXMgdG8gcHVzaCBvbnRvIGFycmF5XG4gICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBwdXNoKHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICAgIGxldCBpbmZvID0geyBwYXRoOiAnJyB9O1xuICAgICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSovUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKTtcbiAgICAgICAgbGV0IGxlbiA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgbGV0IHJldCA9IGFycmF5LnB1c2goLi4uaXRlbXMpO1xuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIGxlbiwgaXRlbXMubGVuZ3RoLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgZW5kIG9mIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgICAqIGBBcnJheS5wcm90b3R5cGUucG9wYC5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgICAqIEByZXR1cm4geyp9IEl0ZW0gdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgcG9wKHBhdGgpIHtcbiAgICAgICAgbGV0IGluZm8gPSB7IHBhdGg6ICcnIH07XG4gICAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKTtcbiAgICAgICAgbGV0IGhhZExlbmd0aCA9IEJvb2xlYW4oYXJyYXkubGVuZ3RoKTtcbiAgICAgICAgbGV0IHJldCA9IGFycmF5LnBvcCgpO1xuICAgICAgICBpZiAoaGFkTGVuZ3RoKSB7XG4gICAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIGFycmF5Lmxlbmd0aCwgMCwgW3JldF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnRpbmcgZnJvbSB0aGUgc3RhcnQgaW5kZXggc3BlY2lmaWVkLCByZW1vdmVzIDAgb3IgbW9yZSBpdGVtc1xuICAgICAgICogZnJvbSB0aGUgYXJyYXkgYW5kIGluc2VydHMgMCBvciBtb3JlIG5ldyBpdGVtcyBpbiB0aGVpciBwbGFjZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgICAqIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYC5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBJbmRleCBmcm9tIHdoaWNoIHRvIHN0YXJ0IHJlbW92aW5nL2luc2VydGluZy5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxldGVDb3VudCBOdW1iZXIgb2YgaXRlbXMgdG8gcmVtb3ZlLlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW50byBhcnJheS5cbiAgICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiByZW1vdmVkIGl0ZW1zLlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBzcGxpY2UocGF0aCwgc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtcykge1xuICAgICAgICBsZXQgaW5mbyA9IHsgcGF0aDogJycgfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi9Qb2x5bWVyLlBhdGguZ2V0KHRoaXMsIHBhdGgsIGluZm8pO1xuICAgICAgICAvLyBOb3JtYWxpemUgZmFuY3kgbmF0aXZlIHNwbGljZSBoYW5kbGluZyBvZiBjcmF6eSBzdGFydCB2YWx1ZXNcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgIHN0YXJ0ID0gYXJyYXkubGVuZ3RoIC0gTWF0aC5mbG9vcigtc3RhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFydCkge1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpO1xuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIHx8IHJldC5sZW5ndGgpIHtcbiAgICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgc3RhcnQsIGl0ZW1zLmxlbmd0aCwgcmV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAgICogYEFycmF5LnByb3RvdHlwZS5wb3BgLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAgICogQHJldHVybiB7Kn0gSXRlbSB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBzaGlmdChwYXRoKSB7XG4gICAgICAgIGxldCBpbmZvID0geyBwYXRoOiAnJyB9O1xuICAgICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqL1BvbHltZXIuUGF0aC5nZXQodGhpcywgcGF0aCwgaW5mbyk7XG4gICAgICAgIGxldCBoYWRMZW5ndGggPSBCb29sZWFuKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGxldCByZXQgPSBhcnJheS5zaGlmdCgpO1xuICAgICAgICBpZiAoaGFkTGVuZ3RoKSB7XG4gICAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIDAsIDAsIFtyZXRdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW5mbyBhcnJheVxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSBOZXcgbGVuZ3RoIG9mIHRoZSBhcnJheS5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgdW5zaGlmdChwYXRoLCAuLi5pdGVtcykge1xuICAgICAgICBsZXQgaW5mbyA9IHsgcGF0aDogJycgfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi9Qb2x5bWVyLlBhdGguZ2V0KHRoaXMsIHBhdGgsIGluZm8pO1xuICAgICAgICBsZXQgcmV0ID0gYXJyYXkudW5zaGlmdCguLi5pdGVtcyk7XG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgMCwgaXRlbXMubGVuZ3RoLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBOb3RpZnkgdGhhdCBhIHBhdGggaGFzIGNoYW5nZWQuXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZTpcbiAgICAgICAqXG4gICAgICAgKiAgICAgdGhpcy5pdGVtLnVzZXIubmFtZSA9ICdCb2InO1xuICAgICAgICogICAgIHRoaXMubm90aWZ5UGF0aCgnaXRlbS51c2VyLm5hbWUnKTtcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAgICogQHBhcmFtIHsqPX0gdmFsdWUgVmFsdWUgYXQgdGhlIHBhdGggKG9wdGlvbmFsKS5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICovXG4gICAgICBub3RpZnlQYXRoKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICBsZXQgcHJvcFBhdGg7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAvLyBHZXQgdmFsdWUgaWYgbm90IHN1cHBsaWVkXG4gICAgICAgICAgbGV0IGluZm8gPSB7IHBhdGg6ICcnIH07XG4gICAgICAgICAgdmFsdWUgPSBQb2x5bWVyLlBhdGguZ2V0KHRoaXMsIHBhdGgsIGluZm8pO1xuICAgICAgICAgIHByb3BQYXRoID0gaW5mby5wYXRoO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgICAgICAvLyBOb3JtYWxpemUgcGF0aCBpZiBuZWVkZWRcbiAgICAgICAgICBwcm9wUGF0aCA9IFBvbHltZXIuUGF0aC5ub3JtYWxpemUocGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcFBhdGggPSAvKiogQHR5cGV7c3RyaW5nfSAqL3BhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwcm9wUGF0aCwgdmFsdWUsIHRydWUsIHRydWUpKSB7XG4gICAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVSZWFkT25seVByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBwcm90ZWN0ZWRTZXR0ZXIgQ3JlYXRlcyBhIGN1c3RvbSBwcm90ZWN0ZWQgc2V0dGVyXG4gICAgICAgKiAgIHdoZW4gYHRydWVgLlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShwcm9wZXJ0eSwgcHJvdGVjdGVkU2V0dGVyKSB7XG4gICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgICBpZiAocHJvdGVjdGVkU2V0dGVyKSB7XG4gICAgICAgICAgdGhpc1snX3NldCcgKyB1cHBlcihwcm9wZXJ0eSldID0gLyoqIEB0aGlzIHtQcm9wZXJ0eUVmZmVjdHN9ICovZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUHJvcGVydHlPYnNlcnZlcmAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTmFtZSBvZiBvYnNlcnZlciBtZXRob2QgdG8gY2FsbFxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gZHluYW1pY0ZuIFdoZXRoZXIgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBiZSBpbmNsdWRlZCBhc1xuICAgICAgICogICBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZE5hbWUsIGR5bmFtaWNGbikge1xuICAgICAgICBsZXQgaW5mbyA9IHsgcHJvcGVydHksIG1ldGhvZE5hbWUsIGR5bmFtaWNGbjogQm9vbGVhbihkeW5hbWljRm4pIH07XG4gICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5PQlNFUlZFLCB7XG4gICAgICAgICAgZm46IHJ1bk9ic2VydmVyRWZmZWN0LCBpbmZvLCB0cmlnZ2VyOiB7IG5hbWU6IHByb3BlcnR5IH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkeW5hbWljRm4pIHtcbiAgICAgICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChtZXRob2ROYW1lLCBUWVBFUy5PQlNFUlZFLCB7XG4gICAgICAgICAgICBmbjogcnVuT2JzZXJ2ZXJFZmZlY3QsIGluZm8sIHRyaWdnZXI6IHsgbmFtZTogbWV0aG9kTmFtZSB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfY3JlYXRlTWV0aG9kT2JzZXJ2ZXIoZXhwcmVzc2lvbiwgZHluYW1pY0ZuKSB7XG4gICAgICAgIGxldCBzaWcgPSBwYXJzZU1ldGhvZChleHByZXNzaW9uKTtcbiAgICAgICAgaWYgKCFzaWcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgb2JzZXJ2ZXIgZXhwcmVzc2lvbiAnXCIgKyBleHByZXNzaW9uICsgXCInXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZU1ldGhvZEVmZmVjdCh0aGlzLCBzaWcsIFRZUEVTLk9CU0VSVkUsIHJ1bk1ldGhvZEVmZmVjdCwgbnVsbCwgZHluYW1pY0ZuKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTm90aWZ5aW5nUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5OT1RJRlksIHtcbiAgICAgICAgICBmbjogcnVuTm90aWZ5RWZmZWN0LFxuICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogQ2FzZU1hcC5jYW1lbFRvRGFzaENhc2UocHJvcGVydHkpICsgJy1jaGFuZ2VkJyxcbiAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICBsZXQgYXR0ciA9IENhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHByb3BlcnR5KTtcbiAgICAgICAgaWYgKGF0dHJbMF0gPT09ICctJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUHJvcGVydHkgJyArIHByb3BlcnR5ICsgJyBjYW5ub3QgYmUgcmVmbGVjdGVkIHRvIGF0dHJpYnV0ZSAnICsgYXR0ciArICcgYmVjYXVzZSBcIi1cIiBpcyBub3QgYSB2YWxpZCBzdGFydGluZyBhdHRyaWJ1dGUgbmFtZS4gVXNlIGEgbG93ZXJjYXNlIGZpcnN0IGxldHRlciBmb3IgdGhlIHByb3BlcnR5IGluc3RlYWQuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFRkxFQ1QsIHtcbiAgICAgICAgICAgIGZuOiBydW5SZWZsZWN0RWZmZWN0LFxuICAgICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgICBhdHRyTmFtZTogYXR0clxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZUNvbXB1dGVkUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgY29tcHV0ZWQgcHJvcGVydHkgdG8gc2V0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgICAgbGV0IHNpZyA9IHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoIXNpZykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBjb21wdXRlZCBleHByZXNzaW9uICdcIiArIGV4cHJlc3Npb24gKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgICAgY3JlYXRlTWV0aG9kRWZmZWN0KHRoaXMsIHNpZywgVFlQRVMuQ09NUFVURSwgcnVuQ29tcHV0ZWRFZmZlY3QsIHByb3BlcnR5LCBkeW5hbWljRm4pO1xuICAgICAgfVxuXG4gICAgICAvLyAtLSBzdGF0aWMgY2xhc3MgbWV0aG9kcyAtLS0tLS0tLS0tLS1cblxuICAgICAgLyoqXG4gICAgICAgKiBFbnN1cmVzIGFuIGFjY2Vzc29yIGV4aXN0cyBmb3IgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSwgYW5kIGFkZHNcbiAgICAgICAqIHRvIGEgbGlzdCBvZiBcInByb3BlcnR5IGVmZmVjdHNcIiB0aGF0IHdpbGwgcnVuIHdoZW4gdGhlIGFjY2Vzc29yIGZvclxuICAgICAgICogdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBpcyBzZXQuICBFZmZlY3RzIGFyZSBncm91cGVkIGJ5IFwidHlwZVwiLCB3aGljaFxuICAgICAgICogcm91Z2hseSBjb3JyZXNwb25kcyB0byBhIHBoYXNlIGluIGVmZmVjdCBwcm9jZXNzaW5nLiAgVGhlIGVmZmVjdFxuICAgICAgICogbWV0YWRhdGEgc2hvdWxkIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAgICAgICAqXG4gICAgICAgKiAgICAge1xuICAgICAgICogICAgICAgZm46IGVmZmVjdEZ1bmN0aW9uLCAvLyBSZWZlcmVuY2UgdG8gZnVuY3Rpb24gdG8gY2FsbCB0byBwZXJmb3JtIGVmZmVjdFxuICAgICAgICogICAgICAgaW5mbzogeyAuLi4gfSAgICAgICAvLyBFZmZlY3QgbWV0YWRhdGEgcGFzc2VkIHRvIGZ1bmN0aW9uXG4gICAgICAgKiAgICAgICB0cmlnZ2VyOiB7ICAgICAgICAgIC8vIE9wdGlvbmFsIHRyaWdnZXJpbmcgbWV0YWRhdGE7IGlmIG5vdCBwcm92aWRlZFxuICAgICAgICogICAgICAgICBuYW1lOiBzdHJpbmcgICAgICAvLyB0aGUgcHJvcGVydHkgaXMgdHJlYXRlZCBhcyBhIHdpbGRjYXJkXG4gICAgICAgKiAgICAgICAgIHN0cnVjdHVyZWQ6IGJvb2xlYW5cbiAgICAgICAqICAgICAgICAgd2lsZGNhcmQ6IGJvb2xlYW5cbiAgICAgICAqICAgICAgIH1cbiAgICAgICAqICAgICB9XG4gICAgICAgKlxuICAgICAgICogRWZmZWN0cyBhcmUgY2FsbGVkIGZyb20gYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgaW4gdGhlIGZvbGxvd2luZyBvcmRlciBieVxuICAgICAgICogdHlwZTpcbiAgICAgICAqXG4gICAgICAgKiAxLiBDT01QVVRFXG4gICAgICAgKiAyLiBQUk9QQUdBVEVcbiAgICAgICAqIDMuIFJFRkxFQ1RcbiAgICAgICAqIDQuIE9CU0VSVkVcbiAgICAgICAqIDUuIE5PVElGWVxuICAgICAgICpcbiAgICAgICAqIEVmZmVjdCBmdW5jdGlvbnMgYXJlIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgICAgICpcbiAgICAgICAqICAgICBlZmZlY3RGdW5jdGlvbihpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzKVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBhZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgc2luZ2xlLXByb3BlcnR5IG9ic2VydmVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2Ygb2JzZXJ2ZXIgbWV0aG9kIHRvIGNhbGxcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGR5bmFtaWNGbiBXaGV0aGVyIHRoZSBtZXRob2QgbmFtZSBzaG91bGQgYmUgaW5jbHVkZWQgYXNcbiAgICAgICAqICAgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2ROYW1lLCBkeW5hbWljRm4pIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZE5hbWUsIGR5bmFtaWNGbik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIG11bHRpLXByb3BlcnR5IFwibWV0aG9kIG9ic2VydmVyXCIgYmFzZWQgb24gdGhlIHByb3ZpZGVkXG4gICAgICAgKiBleHByZXNzaW9uLCB3aGljaCBzaG91bGQgYmUgYSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdFxuICAgICAgICogZnVuY3Rpb24gc2lnbmF0dXJlOiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2AuICBFYWNoIGFyZ3VtZW50XG4gICAgICAgKiBzaG91bGQgY29ycmVzcG9uZCB0byBhIHByb3BlcnR5IG9yIHBhdGggaW4gdGhlIGNvbnRleHQgb2YgdGhpc1xuICAgICAgICogcHJvdG90eXBlIChvciBpbnN0YW5jZSksIG9yIG1heSBiZSBhIGxpdGVyYWwgc3RyaW5nIG9yIG51bWJlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byBkaXNwYXRjaCBgPHByb3BlcnR5Pi1jaGFuZ2VkYFxuICAgICAgICogZXZlbnRzIHRvIG5vdGlmeSBvZiBjaGFuZ2VzIHRvIHRoZSBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgcmVhZC1vbmx5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogVG8gc2V0IHRoZSBwcm9wZXJ0eSwgdXNlIHRoZSBwcm90ZWN0ZWQgYF9zZXRQcm9wZXJ0eWAgQVBJLlxuICAgICAgICogVG8gY3JlYXRlIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXIgKGUuZy4gYF9zZXRNeVByb3AoKWAgZm9yXG4gICAgICAgKiBwcm9wZXJ0eSBgbXlQcm9wYCksIHBhc3MgYHRydWVgIGZvciBgcHJvdGVjdGVkU2V0dGVyYC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlLCBpZiB0aGUgcHJvcGVydHkgd2lsbCBoYXZlIG90aGVyIHByb3BlcnR5IGVmZmVjdHMsIHRoaXMgbWV0aG9kXG4gICAgICAgKiBzaG91bGQgYmUgY2FsbGVkIGZpcnN0LCBiZWZvcmUgYWRkaW5nIG90aGVyIGVmZmVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHByb3RlY3RlZFNldHRlciBDcmVhdGVzIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXJcbiAgICAgICAqICAgd2hlbiBgdHJ1ZWAuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkocHJvcGVydHksIHByb3RlY3RlZFNldHRlcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byByZWZsZWN0IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICogdG8gYSAoZGFzaC1jYXNlZCkgYXR0cmlidXRlIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIGNvbXB1dGVkIHByb3BlcnR5IHdob3NlIHZhbHVlIGlzIHNldCB0byB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAgICogbWV0aG9kIGRlc2NyaWJlZCBieSB0aGUgZ2l2ZW4gYGV4cHJlc3Npb25gIGVhY2ggdGltZSBvbmUgb3IgbW9yZVxuICAgICAgICogYXJndW1lbnRzIHRvIHRoZSBtZXRob2QgY2hhbmdlcy4gIFRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBhIHN0cmluZ1xuICAgICAgICogaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdCBmdW5jdGlvbiBzaWduYXR1cmU6XG4gICAgICAgKiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2BcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBjb21wdXRlZCBwcm9wZXJ0eSB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nIHdoZXRoZXJcbiAgICAgICAqICAgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGNyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eShwcm9wZXJ0eSwgZXhwcmVzc2lvbiwgZHluYW1pY0ZuKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQYXJzZXMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHRvIGVuc3VyZSBiaW5kaW5nIGVmZmVjdHMgYXJlIGNyZWF0ZWRcbiAgICAgICAqIGZvciB0aGVtLCBhbmQgdGhlbiBlbnN1cmVzIHByb3BlcnR5IGFjY2Vzc29ycyBhcmUgY3JlYXRlZCBmb3IgYW55XG4gICAgICAgKiBkZXBlbmRlbnQgcHJvcGVydGllcyBpbiB0aGUgdGVtcGxhdGUuICBCaW5kaW5nIGVmZmVjdHMgZm9yIGJvdW5kXG4gICAgICAgKiB0ZW1wbGF0ZXMgYXJlIHN0b3JlZCBpbiBhIGxpbmtlZCBsaXN0IG9uIHRoZSBpbnN0YW5jZSBzbyB0aGF0XG4gICAgICAgKiB0ZW1wbGF0ZXMgY2FuIGJlIGVmZmljaWVudGx5IHN0YW1wZWQgYW5kIHVuc3RhbXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAgICogICBiaW5kaW5nc1xuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3RcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGJpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tIGJpbmRpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAvKipcbiAgICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBiaW5kVGVtcGxhdGVgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiB0aGUgcHJvdG90eXBlIChmb3IgcHJvdG90eXBpY2FsIHRlbXBsYXRlXG4gICAgICAgKiBiaW5kaW5nLCB0byBhdm9pZCBjcmVhdGluZyBhY2Nlc3NvcnMgZXZlcnkgaW5zdGFuY2UpIG9uY2UgcGVyIHByb3RvdHlwZSxcbiAgICAgICAqIGFuZCB3aWxsIGJlIGNhbGxlZCB3aXRoIGBydW50aW1lQmluZGluZzogdHJ1ZWAgYnkgYF9zdGFtcFRlbXBsYXRlYCB0b1xuICAgICAgICogY3JlYXRlIGFuZCBsaW5rIGFuIGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggYVxuICAgICAgICogcGFydGljdWxhciBzdGFtcGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAgICogICBiaW5kaW5nc1xuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gaW5zdGFuY2VCaW5kaW5nIFdoZW4gZmFsc2UgKGRlZmF1bHQpLCBwZXJmb3Jtc1xuICAgICAgICogICBcInByb3RvdHlwaWNhbFwiIGJpbmRpbmcgb2YgdGhlIHRlbXBsYXRlIGFuZCBvdmVyd3JpdGVzIGFueSBwcmV2aW91c2x5XG4gICAgICAgKiAgIGJvdW5kIHRlbXBsYXRlIGZvciB0aGUgY2xhc3MuIFdoZW4gdHJ1ZSAoYXMgcGFzc2VkIGZyb21cbiAgICAgICAqICAgYF9zdGFtcFRlbXBsYXRlYCksIHRoZSB0ZW1wbGF0ZSBpbmZvIGlzIGluc3RhbmNlZCBhbmQgbGlua2VkIGludG9cbiAgICAgICAqICAgdGhlIGxpc3Qgb2YgYm91bmQgdGVtcGxhdGVzLlxuICAgICAgICogQHJldHVybiB7IVRlbXBsYXRlSW5mb30gVGVtcGxhdGUgbWV0YWRhdGEgb2JqZWN0OyBmb3IgYHJ1bnRpbWVCaW5kaW5nYCxcbiAgICAgICAqICAgdGhpcyBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcHJvdG90eXBpY2FsIHRlbXBsYXRlIGluZm9cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLmNvbnN0cnVjdG9yLl9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgbGV0IHdhc1ByZUJvdW5kID0gdGhpcy5fX3RlbXBsYXRlSW5mbyA9PSB0ZW1wbGF0ZUluZm87XG4gICAgICAgIC8vIE9wdGltaXphdGlvbjogc2luY2UgdGhpcyBpcyBjYWxsZWQgdHdpY2UgZm9yIHByb3RvLWJvdW5kIHRlbXBsYXRlcyxcbiAgICAgICAgLy8gZG9uJ3QgYXR0ZW1wdCB0byByZWNyZWF0ZSBhY2Nlc3NvcnMgaWYgdGhpcyB0ZW1wbGF0ZSB3YXMgcHJlLWJvdW5kXG4gICAgICAgIGlmICghd2FzUHJlQm91bmQpIHtcbiAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0YW5jZUJpbmRpbmcpIHtcbiAgICAgICAgICAvLyBGb3IgaW5zdGFuY2UtdGltZSBiaW5kaW5nLCBjcmVhdGUgaW5zdGFuY2Ugb2YgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgICAgICAvLyBhbmQgbGluayBpbnRvIGxpc3Qgb2YgdGVtcGxhdGVzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgIHRlbXBsYXRlSW5mbyA9IC8qKiBAdHlwZSB7IVRlbXBsYXRlSW5mb30gKi9PYmplY3QuY3JlYXRlKHRlbXBsYXRlSW5mbyk7XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLndhc1ByZUJvdW5kID0gd2FzUHJlQm91bmQ7XG4gICAgICAgICAgaWYgKCF3YXNQcmVCb3VuZCAmJiB0aGlzLl9fdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0IHx8IHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICAgICAgICB0aGlzLl9fdGVtcGxhdGVJbmZvTGFzdCA9IGxhc3QubmV4dFRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IGxhc3Q7XG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVJbmZvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fX3RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIGEgcHJvcGVydHkgZWZmZWN0IHRvIHRoZSBnaXZlbiB0ZW1wbGF0ZSBtZXRhZGF0YSwgd2hpY2ggaXMgcnVuXG4gICAgICAgKiBhdCB0aGUgXCJwcm9wYWdhdGVcIiBzdGFnZSBvZiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB3aGVuIHRoZSB0ZW1wbGF0ZVxuICAgICAgICogaGFzIGJlZW4gYm91bmQgdG8gdGhlIGVsZW1lbnQgdmlhIGBfYmluZFRlbXBsYXRlYC5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYGVmZmVjdGAgb2JqZWN0IHNob3VsZCBtYXRjaCB0aGUgZm9ybWF0IGluIGBfYWRkUHJvcGVydHlFZmZlY3RgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgdG8gYWRkIGVmZmVjdCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfYWRkVGVtcGxhdGVQcm9wZXJ0eUVmZmVjdCh0ZW1wbGF0ZUluZm8sIHByb3AsIGVmZmVjdCkge1xuICAgICAgICBsZXQgaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyA9IHRlbXBsYXRlSW5mby5ob3N0UHJvcHMgfHwge307XG4gICAgICAgIGhvc3RQcm9wc1twcm9wXSA9IHRydWU7XG4gICAgICAgIGxldCBlZmZlY3RzID0gdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cyA9IHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMgfHwge307XG4gICAgICAgIGxldCBwcm9wRWZmZWN0cyA9IGVmZmVjdHNbcHJvcF0gPSBlZmZlY3RzW3Byb3BdIHx8IFtdO1xuICAgICAgICBwcm9wRWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhbXBzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBhbmQgcGVyZm9ybXMgaW5zdGFuY2UtdGltZSBzZXR1cCBmb3JcbiAgICAgICAqIFBvbHltZXIgdGVtcGxhdGUgZmVhdHVyZXMsIGluY2x1ZGluZyBkYXRhIGJpbmRpbmdzLCBkZWNsYXJhdGl2ZSBldmVudFxuICAgICAgICogbGlzdGVuZXJzLCBhbmQgdGhlIGB0aGlzLiRgIG1hcCBvZiBgaWRgJ3MgdG8gbm9kZXMuICBBIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICAgKiBpcyByZXR1cm5lZCBjb250YWluaW5nIHRoZSBzdGFtcGVkIERPTSwgcmVhZHkgZm9yIGluc2VydGlvbiBpbnRvIHRoZVxuICAgICAgICogRE9NLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2U7IGhvd2V2ZXIgbm90ZSB0aGF0IGR1ZSB0b1xuICAgICAgICogYHNoYWR5Y3NzYCBwb2x5ZmlsbCBsaW1pdGF0aW9ucywgb25seSBzdHlsZXMgZnJvbSB0ZW1wbGF0ZXMgcHJlcGFyZWRcbiAgICAgICAqIHVzaW5nIGBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVgIHdpbGwgYmUgY29ycmVjdGx5IHBvbHlmaWxsZWQgKHNjb3BlZFxuICAgICAgICogdG8gdGhlIHNoYWRvdyByb290IGFuZCBzdXBwb3J0IENTUyBjdXN0b20gcHJvcGVydGllcyksIGFuZCBub3RlIHRoYXRcbiAgICAgICAqIGBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVgIG1heSBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBlbGVtZW50LiBBcyBzdWNoLFxuICAgICAgICogYW55IHN0eWxlcyByZXF1aXJlZCBieSBpbiBydW50aW1lLXN0YW1wZWQgdGVtcGxhdGVzIG11c3QgYmUgaW5jbHVkZWRcbiAgICAgICAqIGluIHRoZSBtYWluIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gc3RhbXBcbiAgICAgICAqIEByZXR1cm4geyFTdGFtcGVkVGVtcGxhdGV9IENsb25lZCB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgLy8gRW5zdXJlcyB0aGF0IGNyZWF0ZWQgZG9tIGlzIGBfZW5xdWV1ZUNsaWVudGAnZCB0byB0aGlzIGVsZW1lbnQgc29cbiAgICAgICAgLy8gdGhhdCBpdCBjYW4gYmUgZmx1c2hlZCBvbiBuZXh0IGNhbGwgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICAgIGhvc3RTdGFjay5iZWdpbkhvc3RpbmcodGhpcyk7XG4gICAgICAgIGxldCBkb20gPSBzdXBlci5fc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIGhvc3RTdGFjay5lbmRIb3N0aW5nKHRoaXMpO1xuICAgICAgICBsZXQgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqL3RoaXMuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgdHJ1ZSk7XG4gICAgICAgIC8vIEFkZCB0ZW1wbGF0ZS1pbnN0YW5jZS1zcGVjaWZpYyBkYXRhIHRvIGluc3RhbmNlZCB0ZW1wbGF0ZUluZm9cbiAgICAgICAgdGVtcGxhdGVJbmZvLm5vZGVMaXN0ID0gZG9tLm5vZGVMaXN0O1xuICAgICAgICAvLyBDYXB0dXJlIGNoaWxkIG5vZGVzIHRvIGFsbG93IHVuc3RhbXBpbmcgb2Ygbm9uLXByb3RvdHlwaWNhbCB0ZW1wbGF0ZXNcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZUluZm8ud2FzUHJlQm91bmQpIHtcbiAgICAgICAgICBsZXQgbm9kZXMgPSB0ZW1wbGF0ZUluZm8uY2hpbGROb2RlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IG4gPSBkb20uZmlyc3RDaGlsZDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2gobik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvbS50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgIC8vIFNldHVwIGNvbXBvdW5kIHN0b3JhZ2UsIDItd2F5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0IGZvciBiaW5kaW5nc1xuICAgICAgICBzZXR1cEJpbmRpbmdzKHRoaXMsIHRlbXBsYXRlSW5mbyk7XG4gICAgICAgIC8vIEZsdXNoIHByb3BlcnRpZXMgaW50byB0ZW1wbGF0ZSBub2RlcyBpZiBhbHJlYWR5IGJvb3RlZFxuICAgICAgICBpZiAodGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cywgdGhpcy5fX2RhdGEsIG51bGwsIGZhbHNlLCB0ZW1wbGF0ZUluZm8ubm9kZUxpc3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb207XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhbmQgdW5iaW5kcyB0aGUgbm9kZXMgcHJldmlvdXNseSBjb250YWluZWQgaW4gdGhlIHByb3ZpZGVkXG4gICAgICAgKiBEb2N1bWVudEZyYWdtZW50IHJldHVybmVkIGZyb20gYF9zdGFtcFRlbXBsYXRlYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFTdGFtcGVkVGVtcGxhdGV9IGRvbSBEb2N1bWVudEZyYWdtZW50IHByZXZpb3VzbHkgcmV0dXJuZWRcbiAgICAgICAqICAgZnJvbSBgX3N0YW1wVGVtcGxhdGVgIGFzc29jaWF0ZWQgd2l0aCB0aGUgbm9kZXMgdG8gYmUgcmVtb3ZlZFxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfcmVtb3ZlQm91bmREb20oZG9tKSB7XG4gICAgICAgIC8vIFVubGluayB0ZW1wbGF0ZSBpbmZvXG4gICAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSBkb20udGVtcGxhdGVJbmZvO1xuICAgICAgICBpZiAodGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPT0gdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPSB0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm87XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8gPSBudWxsO1xuICAgICAgICAvLyBSZW1vdmUgc3RhbXBlZCBub2Rlc1xuICAgICAgICBsZXQgbm9kZXMgPSB0ZW1wbGF0ZUluZm8uY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGBUZXh0Tm9kZWAncycgYHRleHRDb250ZW50YC4gIEEgYGJpbmRpbmdzYFxuICAgICAgICogYXJyYXkgaXMgYWRkZWQgdG8gYG5vZGVJbmZvYCBhbmQgcG9wdWxhdGVkIHdpdGggYmluZGluZyBtZXRhZGF0YVxuICAgICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICAgKiB3aXRoIG9uZSBvciBtb3JlIG1ldGFkYXRhIG9iamVjdHMgY2FwdHVyaW5nIHRoZSBzb3VyY2Uocykgb2YgdGhlXG4gICAgICAgKiBiaW5kaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAgIGxldCBub3RlZCA9IHN1cGVyLl9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyhub2RlLnRleHRDb250ZW50LCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdGV4dENvbnRlbnQgd2l0aCBhbnkgbGl0ZXJhbCBwYXJ0c1xuICAgICAgICAgICAgLy8gTk9URTogZGVmYXVsdCB0byBhIHNwYWNlIGhlcmUgc28gdGhlIHRleHROb2RlIHJlbWFpbnM7IHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAgIC8vIChJRSkgb21pdCBhbiBlbXB0eSB0ZXh0Tm9kZSBmb2xsb3dpbmcgY2xvbmVOb2RlL2ltcG9ydE5vZGUuXG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykgfHwgJyAnO1xuICAgICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAndGV4dCcsICd0ZXh0Q29udGVudCcsIHBhcnRzKTtcbiAgICAgICAgICAgIG5vdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdGVkO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBkZWZhdWx0IGBUZW1wbGF0ZVN0YW1wYCBpbXBsZW1lbnRhdGlvbiB0byBhZGQgc3VwcG9ydCBmb3JcbiAgICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBhdHRyaWJ1dGVzLiAgQSBgYmluZGluZ3NgXG4gICAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICAgKiB3aXRoIGluZm9ybWF0aW9uIGNhcHR1cmluZyB0aGUgYmluZGluZyB0YXJnZXQsIGFuZCBhIGBwYXJ0c2AgYXJyYXlcbiAgICAgICAqIHdpdGggb25lIG9yIG1vcmUgbWV0YWRhdGEgb2JqZWN0cyBjYXB0dXJpbmcgdGhlIHNvdXJjZShzKSBvZiB0aGVcbiAgICAgICAqIGJpbmRpbmcuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBsZXQgcGFydHMgPSB0aGlzLl9wYXJzZUJpbmRpbmdzKHZhbHVlLCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAvLyBBdHRyaWJ1dGUgb3IgcHJvcGVydHlcbiAgICAgICAgICBsZXQgb3JpZ05hbWUgPSBuYW1lO1xuICAgICAgICAgIGxldCBraW5kID0gJ3Byb3BlcnR5JztcbiAgICAgICAgICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09ICckJykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAga2luZCA9ICdhdHRyaWJ1dGUnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJbml0aWFsaXplIGF0dHJpYnV0ZSBiaW5kaW5ncyB3aXRoIGFueSBsaXRlcmFsIHBhcnRzXG4gICAgICAgICAgbGV0IGxpdGVyYWwgPSBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKTtcbiAgICAgICAgICBpZiAobGl0ZXJhbCAmJiBraW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBsaXRlcmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2xlYXIgYXR0cmlidXRlIGJlZm9yZSByZW1vdmluZywgc2luY2UgSUUgd29uJ3QgYWxsb3cgcmVtb3ZpbmdcbiAgICAgICAgICAvLyBgdmFsdWVgIGF0dHJpYnV0ZSBpZiBpdCBwcmV2aW91c2x5IGhhZCBhIHZhbHVlIChjYW4ndFxuICAgICAgICAgIC8vIHVuY29uZGl0aW9uYWxseSBzZXQgJycgYmVmb3JlIHJlbW92aW5nIHNpbmNlIGF0dHJpYnV0ZXMgd2l0aCBgJGBcbiAgICAgICAgICAvLyBjYW4ndCBiZSBzZXQgdXNpbmcgc2V0QXR0cmlidXRlKVxuICAgICAgICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PT0gJ2lucHV0JyAmJiBvcmlnTmFtZSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUob3JpZ05hbWUsICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIGFubm90YXRpb25cbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShvcmlnTmFtZSk7XG4gICAgICAgICAgLy8gQ2FzZSBoYWNrZXJ5OiBhdHRyaWJ1dGVzIGFyZSBsb3dlci1jYXNlLCBidXQgYmluZCB0YXJnZXRzXG4gICAgICAgICAgLy8gKHByb3BlcnRpZXMpIGFyZSBjYXNlIHNlbnNpdGl2ZS4gR2FtYml0IGlzIHRvIG1hcCBkYXNoLWNhc2UgdG9cbiAgICAgICAgICAvLyBjYW1lbC1jYXNlOiBgZm9vLWJhcmAgYmVjb21lcyBgZm9vQmFyYC5cbiAgICAgICAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ3MgYXJlIGV4Y2VwdGVkLlxuICAgICAgICAgIGlmIChraW5kID09PSAncHJvcGVydHknKSB7XG4gICAgICAgICAgICBuYW1lID0gUG9seW1lci5DYXNlTWFwLmRhc2hUb0NhbWVsQ2FzZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBraW5kLCBuYW1lLCBwYXJ0cywgbGl0ZXJhbCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICAgKiBiaW5kaW5nIHRoZSBwcm9wZXJ0aWVzIHRoYXQgYSBuZXN0ZWQgdGVtcGxhdGUgZGVwZW5kcyBvbiB0byB0aGUgdGVtcGxhdGVcbiAgICAgICAqIGFzIGBfaG9zdF88cHJvcGVydHk+YC5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgICAgbGV0IG5vdGVkID0gc3VwZXIuX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICAgICAgLy8gTWVyZ2UgaG9zdCBwcm9wcyBpbnRvIG91dGVyIHRlbXBsYXRlIGFuZCBhZGQgYmluZGluZ3NcbiAgICAgICAgbGV0IGhvc3RQcm9wcyA9IG5vZGVJbmZvLnRlbXBsYXRlSW5mby5ob3N0UHJvcHM7XG4gICAgICAgIGxldCBtb2RlID0gJ3snO1xuICAgICAgICBmb3IgKGxldCBzb3VyY2UgaW4gaG9zdFByb3BzKSB7XG4gICAgICAgICAgbGV0IHBhcnRzID0gW3sgbW9kZSwgc291cmNlLCBkZXBlbmRlbmNpZXM6IFtzb3VyY2VdIH1dO1xuICAgICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgJ3Byb3BlcnR5JywgJ19ob3N0XycgKyBzb3VyY2UsIHBhcnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90ZWQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGVkIHRvIHBhcnNlIHRleHQgaW4gYSB0ZW1wbGF0ZSAoZWl0aGVyIGF0dHJpYnV0ZSB2YWx1ZXMgb3JcbiAgICAgICAqIHRleHRDb250ZW50KSBpbnRvIGJpbmRpbmcgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQW55IG92ZXJyaWRlcyBvZiB0aGlzIG1ldGhvZCBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIGJpbmRpbmcgcGFydFxuICAgICAgICogbWV0YWRhdGEgIHJlcHJlc2VudGluZyBvbmUgb3IgbW9yZSBiaW5kaW5ncyBmb3VuZCBpbiB0aGUgcHJvdmlkZWQgdGV4dFxuICAgICAgICogYW5kIGFueSBcImxpdGVyYWxcIiB0ZXh0IGluIGJldHdlZW4uICBBbnkgbm9uLWxpdGVyYWwgcGFydHMgd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIHRvIGBfZXZhbHVhdGVCaW5kaW5nYCB3aGVuIGFueSBkZXBlbmRlbmNpZXMgY2hhbmdlLiAgVGhlIG9ubHkgcmVxdWlyZWRcbiAgICAgICAqIGZpZWxkcyBvZiBlYWNoIFwicGFydFwiIGluIHRoZSByZXR1cm5lZCBhcnJheSBhcmUgYXMgZm9sbG93czpcbiAgICAgICAqXG4gICAgICAgKiAtIGBkZXBlbmRlbmNpZXNgIC0gQXJyYXkgY29udGFpbmluZyB0cmlnZ2VyIG1ldGFkYXRhIGZvciBlYWNoIHByb3BlcnR5XG4gICAgICAgKiAgIHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGJpbmRpbmcgdG8gdXBkYXRlXG4gICAgICAgKiAtIGBsaXRlcmFsYCAtIFN0cmluZyBjb250YWluaW5nIHRleHQgaWYgdGhlIHBhcnQgcmVwcmVzZW50cyBhIGxpdGVyYWw7XG4gICAgICAgKiAgIGluIHRoaXMgY2FzZSBubyBgZGVwZW5kZW5jaWVzYCBhcmUgbmVlZGVkXG4gICAgICAgKlxuICAgICAgICogQWRkaXRpb25hbCBtZXRhZGF0YSBmb3IgdXNlIGJ5IGBfZXZhbHVhdGVCaW5kaW5nYCBtYXkgYmUgcHJvdmlkZWQgaW5cbiAgICAgICAqIGVhY2ggcGFydCBvYmplY3QgYXMgbmVlZGVkLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGhhbmRsZXMgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBiaW5kaW5nc1xuICAgICAgICogKG9uZSBvciBtb3JlIG1heSBiZSBpbnRlcm1peGVkIHdpdGggbGl0ZXJhbCBzdHJpbmdzKTpcbiAgICAgICAqIC0gUHJvcGVydHkgYmluZGluZzogYFtbcHJvcF1dYFxuICAgICAgICogLSBQYXRoIGJpbmRpbmc6IGBbW29iamVjdC5wcm9wXV1gXG4gICAgICAgKiAtIE5lZ2F0ZWQgcHJvcGVydHkgb3IgcGF0aCBiaW5kaW5nczogYFtbIXByb3BdXWAgb3IgYFtbIW9iamVjdC5wcm9wXV1gXG4gICAgICAgKiAtIFR3by13YXkgcHJvcGVydHkgb3IgcGF0aCBiaW5kaW5ncyAoc3VwcG9ydHMgbmVnYXRpb24pOlxuICAgICAgICogICBge3twcm9wfX1gLCBge3tvYmplY3QucHJvcH19YCwgYHt7IXByb3B9fWAgb3IgYHt7IW9iamVjdC5wcm9wfX1gXG4gICAgICAgKiAtIElubGluZSBjb21wdXRlZCBtZXRob2QgKHN1cHBvcnRzIG5lZ2F0aW9uKTpcbiAgICAgICAqICAgYFtbY29tcHV0ZShhLCAnbGl0ZXJhbCcsIGIpXV1gLCBgW1shY29tcHV0ZShhLCAnbGl0ZXJhbCcsIGIpXV1gXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dCB0byBwYXJzZSBmcm9tIGF0dHJpYnV0ZSBvciB0ZXh0Q29udGVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlSW5mbyBDdXJyZW50IHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICAgKiBAcmV0dXJuIHtBcnJheTwhQmluZGluZ1BhcnQ+fSBBcnJheSBvZiBiaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZUJpbmRpbmdzKHRleHQsIHRlbXBsYXRlSW5mbykge1xuICAgICAgICBsZXQgcGFydHMgPSBbXTtcbiAgICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICAgIGxldCBtO1xuICAgICAgICAvLyBFeGFtcGxlOiBcImxpdGVyYWwxe3twcm9wfX1saXRlcmFsMltbIWNvbXB1dGUoZm9vLGJhcildXWZpbmFsXCJcbiAgICAgICAgLy8gUmVnZXggbWF0Y2hlczpcbiAgICAgICAgLy8gICAgICAgIEl0ZXJhdGlvbiAxOiAgSXRlcmF0aW9uIDI6XG4gICAgICAgIC8vIG1bMV06ICd7eycgICAgICAgICAgJ1tbJ1xuICAgICAgICAvLyBtWzJdOiAnJyAgICAgICAgICAgICchJ1xuICAgICAgICAvLyBtWzNdOiAncHJvcCcgICAgICAgICdjb21wdXRlKGZvbyxiYXIpJ1xuICAgICAgICB3aGlsZSAoKG0gPSBiaW5kaW5nUmVnZXguZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBBZGQgbGl0ZXJhbCBwYXJ0XG4gICAgICAgICAgaWYgKG0uaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goeyBsaXRlcmFsOiB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgbS5pbmRleCkgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFkZCBiaW5kaW5nIHBhcnRcbiAgICAgICAgICBsZXQgbW9kZSA9IG1bMV1bMF07XG4gICAgICAgICAgbGV0IG5lZ2F0ZSA9IEJvb2xlYW4obVsyXSk7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IG1bM10udHJpbSgpO1xuICAgICAgICAgIGxldCBjdXN0b21FdmVudCA9IGZhbHNlLFxuICAgICAgICAgICAgICBub3RpZnlFdmVudCA9ICcnLFxuICAgICAgICAgICAgICBjb2xvbiA9IC0xO1xuICAgICAgICAgIGlmIChtb2RlID09ICd7JyAmJiAoY29sb24gPSBzb3VyY2UuaW5kZXhPZignOjonKSkgPiAwKSB7XG4gICAgICAgICAgICBub3RpZnlFdmVudCA9IHNvdXJjZS5zdWJzdHJpbmcoY29sb24gKyAyKTtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgY29sb24pO1xuICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gcGFyc2VNZXRob2Qoc291cmNlKTtcbiAgICAgICAgICBsZXQgZGVwZW5kZW5jaWVzID0gW107XG4gICAgICAgICAgaWYgKHNpZ25hdHVyZSkge1xuICAgICAgICAgICAgLy8gSW5saW5lIGNvbXB1dGVkIGZ1bmN0aW9uXG4gICAgICAgICAgICBsZXQgeyBhcmdzLCBtZXRob2ROYW1lIH0gPSBzaWduYXR1cmU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICAgICAgICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChhcmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZHluYW1pY0ZucyA9IHRlbXBsYXRlSW5mby5keW5hbWljRm5zO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNGbnMgJiYgZHluYW1pY0Zuc1ttZXRob2ROYW1lXSB8fCBzaWduYXR1cmUuc3RhdGljKSB7XG4gICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgICBzaWduYXR1cmUuZHluYW1pY0ZuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUHJvcGVydHkgb3IgcGF0aFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICBzb3VyY2UsIG1vZGUsIG5lZ2F0ZSwgY3VzdG9tRXZlbnQsIHNpZ25hdHVyZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgICAgZXZlbnQ6IG5vdGlmeUV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gYmluZGluZ1JlZ2V4Lmxhc3RJbmRleDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYSBmaW5hbCBsaXRlcmFsIHBhcnRcbiAgICAgICAgaWYgKGxhc3RJbmRleCAmJiBsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgIGxldCBsaXRlcmFsID0gdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4KTtcbiAgICAgICAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgIGxpdGVyYWw6IGxpdGVyYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGVkIHRvIGV2YWx1YXRlIGEgcHJldmlvdXNseSBwYXJzZWQgYmluZGluZyBwYXJ0IGJhc2VkIG9uIGEgc2V0IG9mXG4gICAgICAgKiBvbmUgb3IgbW9yZSBjaGFuZ2VkIGRlcGVuZGVuY2llcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3RoaXN9IGluc3QgRWxlbWVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIHNjb3BlIGZvclxuICAgICAgICogICBiaW5kaW5nIGRlcGVuZGVuY2llc1xuICAgICAgICogQHBhcmFtIHtCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFByb3BlcnR5L3BhdGggdGhhdCB0cmlnZ2VyZWQgdGhpcyBlZmZlY3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSB0aGUgYmluZGluZyBwYXJ0IGV2YWx1YXRlZCB0b1xuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgX2V2YWx1YXRlQmluZGluZyhpbnN0LCBwYXJ0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgaWYgKHBhcnQuc2lnbmF0dXJlKSB7XG4gICAgICAgICAgdmFsdWUgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBwYXJ0LnNpZ25hdHVyZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF0aCAhPSBwYXJ0LnNvdXJjZSkge1xuICAgICAgICAgIHZhbHVlID0gUG9seW1lci5QYXRoLmdldChpbnN0LCBwYXJ0LnNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGhhc1BhdGhzICYmIFBvbHltZXIuUGF0aC5pc1BhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gUG9seW1lci5QYXRoLmdldChpbnN0LCBwYXRoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBpbnN0Ll9fZGF0YVtwYXRoXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnQubmVnYXRlKSB7XG4gICAgICAgICAgdmFsdWUgPSAhdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gbWFrZSBhIHR5cGluZyBmb3IgY2xvc3VyZSA6UFxuICAgIFByb3BlcnR5RWZmZWN0c1R5cGUgPSBQcm9wZXJ0eUVmZmVjdHM7XG5cbiAgICByZXR1cm4gUHJvcGVydHlFZmZlY3RzO1xuICB9KTtcblxuICAvKipcbiAgICogSGVscGVyIGFwaSBmb3IgZW5xdWV1aW5nIGNsaWVudCBkb20gY3JlYXRlZCBieSBhIGhvc3QgZWxlbWVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCBlbGVtZW50cyBhcmUgZmx1c2hlZCB2aWEgYF9mbHVzaFByb3BlcnRpZXNgIHdoZW5cbiAgICogYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBjYWxsZWQuIEVsZW1lbnRzIGF0dGFjaCB0aGVpciBjbGllbnQgZG9tIHRvXG4gICAqIHRoZW1zZWx2ZXMgYXQgYHJlYWR5YCB0aW1lIHdoaWNoIHJlc3VsdHMgZnJvbSB0aGlzIGZpcnN0IGZsdXNoLlxuICAgKiBUaGlzIHByb3ZpZGVzIGFuIG9yZGVyaW5nIGd1YXJhbnRlZSB0aGF0IHRoZSBjbGllbnQgZG9tIGFuIGVsZW1lbnRcbiAgICogY3JlYXRlcyBpcyBmbHVzaGVkIGJlZm9yZSB0aGUgZWxlbWVudCBpdHNlbGYgKGkuZS4gY2xpZW50IGByZWFkeWBcbiAgICogZmlyZXMgYmVmb3JlIGhvc3QgYHJlYWR5YCkuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGlmIGBfZmx1c2hQcm9wZXJ0aWVzYCBpcyBjYWxsZWQgKmJlZm9yZSogYW4gZWxlbWVudCBpcyBjb25uZWN0ZWQsXG4gICAqIGFzIGZvciBleGFtcGxlIGBUZW1wbGF0aXplYCBkb2VzLCB0aGlzIG9yZGVyaW5nIGd1YXJhbnRlZSBjYW5ub3QgYmVcbiAgICogc2F0aXNmaWVkIGJlY2F1c2Ugbm8gZWxlbWVudHMgYXJlIGNvbm5lY3RlZC4gKE5vdGU6IEJvdW5kIGVsZW1lbnRzIHRoYXRcbiAgICogcmVjZWl2ZSBkYXRhIGRvIGJlY29tZSBlbnF1ZXVlZCBjbGllbnRzIGFuZCBhcmUgcHJvcGVybHkgb3JkZXJlZCBidXRcbiAgICogdW5ib3VuZCBlbGVtZW50cyBhcmUgbm90LilcbiAgICpcbiAgICogVG8gbWFpbnRhaW4gdGhlIGRlc2lyZWQgXCJjbGllbnQgYmVmb3JlIGhvc3RcIiBvcmRlcmluZyBndWFyYW50ZWUgZm9yIHRoaXNcbiAgICogY2FzZSB3ZSByZWx5IG9uIHRoZSBcImhvc3Qgc3RhY2suIENsaWVudCBub2RlcyByZWdpc3RlcnMgdGhlbXNlbHZlcyB3aXRoXG4gICAqIHRoZSBjcmVhdGluZyBob3N0IGVsZW1lbnQgd2hlbiBjcmVhdGVkLiBUaGlzIGVuc3VyZXMgdGhhdCBhbGwgY2xpZW50IGRvbVxuICAgKiBpcyByZWFkaWVkIGluIHRoZSBwcm9wZXIgb3JkZXIsIG1haW50YWluaW5nIHRoZSBkZXNpcmVkIGd1YXJhbnRlZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGxldCBob3N0U3RhY2sgPSB7XG5cbiAgICBzdGFjazogW10sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gYWRkIHRvIGhvc3RTdGFja1xuICAgICAqIEB0aGlzIHtob3N0U3RhY2t9XG4gICAgICovXG4gICAgcmVnaXN0ZXJIb3N0KGluc3QpIHtcbiAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgICBsZXQgaG9zdCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaG9zdC5fZW5xdWV1ZUNsaWVudChpbnN0KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGJlZ2luIGhvc3RpbmdcbiAgICAgKiBAdGhpcyB7aG9zdFN0YWNrfVxuICAgICAqL1xuICAgIGJlZ2luSG9zdGluZyhpbnN0KSB7XG4gICAgICB0aGlzLnN0YWNrLnB1c2goaW5zdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Kn0gaW5zdCBJbnN0YW5jZSB0byBlbmQgaG9zdGluZ1xuICAgICAqIEB0aGlzIHtob3N0U3RhY2t9XG4gICAgICovXG4gICAgZW5kSG9zdGluZyhpbnN0KSB7XG4gICAgICBsZXQgc3RhY2tMZW4gPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICAgIGlmIChzdGFja0xlbiAmJiB0aGlzLnN0YWNrW3N0YWNrTGVuIC0gMV0gPT0gaW5zdCkge1xuICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuaHRtbFxuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(11);\n\n(function () {\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n\n  let AsyncModule; // eslint-disable-line no-unused-vars\n\n  /**\n   * @summary Collapse multiple callbacks into one invocation after a timer.\n   * @memberof Polymer\n   */\n  class Debouncer {\n    constructor() {\n      this._asyncModule = null;\n      this._callback = null;\n      this._timer = null;\n    }\n    /**\n     * Sets the scheduler; that is, a module with the Async interface,\n     * a callback and optional arguments to be passed to the run function\n     * from the async module.\n     *\n     * @param {!AsyncModule} asyncModule Object with Async interface.\n     * @param {function()} callback Callback to run.\n     */\n    setConfig(asyncModule, callback) {\n      this._asyncModule = asyncModule;\n      this._callback = callback;\n      this._timer = this._asyncModule.run(() => {\n        this._timer = null;\n        this._callback();\n      });\n    }\n    /**\n     * Cancels an active debouncer and returns a reference to itself.\n     */\n    cancel() {\n      if (this.isActive()) {\n        this._asyncModule.cancel(this._timer);\n        this._timer = null;\n      }\n    }\n    /**\n     * Flushes an active debouncer and returns a reference to itself.\n     */\n    flush() {\n      if (this.isActive()) {\n        this.cancel();\n        this._callback();\n      }\n    }\n    /**\n     * Returns true if the debouncer is active.\n     *\n     * @return {boolean} True if active.\n     */\n    isActive() {\n      return this._timer != null;\n    }\n    /**\n     * Creates a debouncer if no debouncer is passed as a parameter\n     * or it cancels an active debouncer otherwise. The following\n     * example shows how a debouncer can be called multiple times within a\n     * microtask and \"debounced\" such that the provided callback function is\n     * called once. Add this method to a custom element:\n     *\n     * _debounceWork() {\n     *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n     *       Polymer.Async.microTask, () => {\n     *     this._doWork();\n     *   });\n     * }\n     *\n     * If the `_debounceWork` method is called multiple times within the same\n     * microtask, the `_doWork` function will be called only once at the next\n     * microtask checkpoint.\n     *\n     * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n     * this with a debouncer, you can use `Polymer.enqueueDebouncer` and\n     * `Polymer.flush`. For example, extend the above example by adding\n     * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n     * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\n     * the debouncer has completed.\n     *\n     * @param {Debouncer?} debouncer Debouncer object.\n     * @param {!AsyncModule} asyncModule Object with Async interface\n     * @param {function()} callback Callback to run.\n     * @return {!Debouncer} Returns a debouncer object.\n     */\n    static debounce(debouncer, asyncModule, callback) {\n      if (debouncer instanceof Debouncer) {\n        debouncer.cancel();\n      } else {\n        debouncer = new Debouncer();\n      }\n      debouncer.setConfig(asyncModule, callback);\n      return debouncer;\n    }\n  }\n\n  Polymer.Debouncer = Debouncer;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmh0bWw/OTg3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vYm9vdC5odG1sJyk7XG5cbnJlcXVpcmUoJy4vbWl4aW4uaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2FzeW5jLmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKiBAdHlwZWRlZiB7e3J1bjogZnVuY3Rpb24oZnVuY3Rpb24oKSwgbnVtYmVyPSk6bnVtYmVyLCBjYW5jZWw6IGZ1bmN0aW9uKG51bWJlcil9fSAqL1xuXG4gIGxldCBBc3luY01vZHVsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb2xsYXBzZSBtdWx0aXBsZSBjYWxsYmFja3MgaW50byBvbmUgaW52b2NhdGlvbiBhZnRlciBhIHRpbWVyLlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKi9cbiAgY2xhc3MgRGVib3VuY2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2FzeW5jTW9kdWxlID0gbnVsbDtcbiAgICAgIHRoaXMuX2NhbGxiYWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2NoZWR1bGVyOyB0aGF0IGlzLCBhIG1vZHVsZSB3aXRoIHRoZSBBc3luYyBpbnRlcmZhY2UsXG4gICAgICogYSBjYWxsYmFjayBhbmQgb3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byB0aGUgcnVuIGZ1bmN0aW9uXG4gICAgICogZnJvbSB0aGUgYXN5bmMgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshQXN5bmNNb2R1bGV9IGFzeW5jTW9kdWxlIE9iamVjdCB3aXRoIEFzeW5jIGludGVyZmFjZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICAgKi9cbiAgICBzZXRDb25maWcoYXN5bmNNb2R1bGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9hc3luY01vZHVsZSA9IGFzeW5jTW9kdWxlO1xuICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHRoaXMuX3RpbWVyID0gdGhpcy5fYXN5bmNNb2R1bGUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9jYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlciBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBpdHNlbGYuXG4gICAgICovXG4gICAgY2FuY2VsKCkge1xuICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgICB0aGlzLl9hc3luY01vZHVsZS5jYW5jZWwodGhpcy5fdGltZXIpO1xuICAgICAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZsdXNoZXMgYW4gYWN0aXZlIGRlYm91bmNlciBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBpdHNlbGYuXG4gICAgICovXG4gICAgZmx1c2goKSB7XG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZGVib3VuY2VyIGlzIGFjdGl2ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWN0aXZlLlxuICAgICAqL1xuICAgIGlzQWN0aXZlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RpbWVyICE9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZXIgaWYgbm8gZGVib3VuY2VyIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlclxuICAgICAqIG9yIGl0IGNhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlciBvdGhlcndpc2UuIFRoZSBmb2xsb3dpbmdcbiAgICAgKiBleGFtcGxlIHNob3dzIGhvdyBhIGRlYm91bmNlciBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGhpbiBhXG4gICAgICogbWljcm90YXNrIGFuZCBcImRlYm91bmNlZFwiIHN1Y2ggdGhhdCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24gaXNcbiAgICAgKiBjYWxsZWQgb25jZS4gQWRkIHRoaXMgbWV0aG9kIHRvIGEgY3VzdG9tIGVsZW1lbnQ6XG4gICAgICpcbiAgICAgKiBfZGVib3VuY2VXb3JrKCkge1xuICAgICAqICAgdGhpcy5fZGVib3VuY2VKb2IgPSBQb2x5bWVyLkRlYm91bmNlci5kZWJvdW5jZSh0aGlzLl9kZWJvdW5jZUpvYixcbiAgICAgKiAgICAgICBQb2x5bWVyLkFzeW5jLm1pY3JvVGFzaywgKCkgPT4ge1xuICAgICAqICAgICB0aGlzLl9kb1dvcmsoKTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIElmIHRoZSBgX2RlYm91bmNlV29ya2AgbWV0aG9kIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoaW4gdGhlIHNhbWVcbiAgICAgKiBtaWNyb3Rhc2ssIHRoZSBgX2RvV29ya2AgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlIGF0IHRoZSBuZXh0XG4gICAgICogbWljcm90YXNrIGNoZWNrcG9pbnQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBJbiB0ZXN0aW5nIGl0IGlzIG9mdGVuIGNvbnZlbmllbnQgdG8gYXZvaWQgYXN5bmNocm9ueS4gVG8gYWNjb21wbGlzaFxuICAgICAqIHRoaXMgd2l0aCBhIGRlYm91bmNlciwgeW91IGNhbiB1c2UgYFBvbHltZXIuZW5xdWV1ZURlYm91bmNlcmAgYW5kXG4gICAgICogYFBvbHltZXIuZmx1c2hgLiBGb3IgZXhhbXBsZSwgZXh0ZW5kIHRoZSBhYm92ZSBleGFtcGxlIGJ5IGFkZGluZ1xuICAgICAqIGBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIodGhpcy5fZGVib3VuY2VKb2IpYCBhdCB0aGUgZW5kIG9mIHRoZVxuICAgICAqIGBfZGVib3VuY2VXb3JrYCBtZXRob2QuIFRoZW4gaW4gYSB0ZXN0LCBjYWxsIGBQb2x5bWVyLmZsdXNoYCB0byBlbnN1cmVcbiAgICAgKiB0aGUgZGVib3VuY2VyIGhhcyBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RlYm91bmNlcj99IGRlYm91bmNlciBEZWJvdW5jZXIgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7IUFzeW5jTW9kdWxlfSBhc3luY01vZHVsZSBPYmplY3Qgd2l0aCBBc3luYyBpbnRlcmZhY2VcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHshRGVib3VuY2VyfSBSZXR1cm5zIGEgZGVib3VuY2VyIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGVib3VuY2UoZGVib3VuY2VyLCBhc3luY01vZHVsZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChkZWJvdW5jZXIgaW5zdGFuY2VvZiBEZWJvdW5jZXIpIHtcbiAgICAgICAgZGVib3VuY2VyLmNhbmNlbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVib3VuY2VyID0gbmV3IERlYm91bmNlcigpO1xuICAgICAgfVxuICAgICAgZGVib3VuY2VyLnNldENvbmZpZyhhc3luY01vZHVsZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGRlYm91bmNlcjtcbiAgICB9XG4gIH1cblxuICBQb2x5bWVyLkRlYm91bmNlciA9IERlYm91bmNlcjtcbn0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n  'use strict';\n\n  let debouncerQueue = [];\n\n  /**\n   * Adds a `Polymer.Debouncer` to a list of globally flushable tasks.\n   *\n   * @memberof Polymer\n   * @param {Polymer.Debouncer} debouncer Debouncer to enqueue\n   */\n  Polymer.enqueueDebouncer = function (debouncer) {\n    debouncerQueue.push(debouncer);\n  };\n\n  function flushDebouncers() {\n    const didFlush = Boolean(debouncerQueue.length);\n    while (debouncerQueue.length) {\n      try {\n        debouncerQueue.shift().flush();\n      } catch (e) {\n        setTimeout(() => {\n          throw e;\n        });\n      }\n    }\n    return didFlush;\n  }\n\n  /**\n   * Forces several classes of asynchronously queued tasks to flush:\n   * - Debouncers added via `enqueueDebouncer`\n   * - ShadyDOM distribution\n   *\n   * @memberof Polymer\n   */\n  Polymer.flush = function () {\n    let shadyDOM, debouncers;\n    do {\n      shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n      if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n        window.ShadyCSS.ScopingShim.flush();\n      }\n      debouncers = flushDebouncers();\n    } while (shadyDOM || debouncers);\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2ZsdXNoLmh0bWw/ZDM4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vYm9vdC5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBsZXQgZGVib3VuY2VyUXVldWUgPSBbXTtcblxuICAvKipcbiAgICogQWRkcyBhIGBQb2x5bWVyLkRlYm91bmNlcmAgdG8gYSBsaXN0IG9mIGdsb2JhbGx5IGZsdXNoYWJsZSB0YXNrcy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHBhcmFtIHtQb2x5bWVyLkRlYm91bmNlcn0gZGVib3VuY2VyIERlYm91bmNlciB0byBlbnF1ZXVlXG4gICAqL1xuICBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIgPSBmdW5jdGlvbiAoZGVib3VuY2VyKSB7XG4gICAgZGVib3VuY2VyUXVldWUucHVzaChkZWJvdW5jZXIpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZsdXNoRGVib3VuY2VycygpIHtcbiAgICBjb25zdCBkaWRGbHVzaCA9IEJvb2xlYW4oZGVib3VuY2VyUXVldWUubGVuZ3RoKTtcbiAgICB3aGlsZSAoZGVib3VuY2VyUXVldWUubGVuZ3RoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkZWJvdW5jZXJRdWV1ZS5zaGlmdCgpLmZsdXNoKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlkRmx1c2g7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2VzIHNldmVyYWwgY2xhc3NlcyBvZiBhc3luY2hyb25vdXNseSBxdWV1ZWQgdGFza3MgdG8gZmx1c2g6XG4gICAqIC0gRGVib3VuY2VycyBhZGRlZCB2aWEgYGVucXVldWVEZWJvdW5jZXJgXG4gICAqIC0gU2hhZHlET00gZGlzdHJpYnV0aW9uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqL1xuICBQb2x5bWVyLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBzaGFkeURPTSwgZGVib3VuY2VycztcbiAgICBkbyB7XG4gICAgICBzaGFkeURPTSA9IHdpbmRvdy5TaGFkeURPTSAmJiBTaGFkeURPTS5mbHVzaCgpO1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0pIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLmZsdXNoKCk7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZXJzID0gZmx1c2hEZWJvdW5jZXJzKCk7XG4gICAgfSB3aGlsZSAoc2hhZHlET00gfHwgZGVib3VuY2Vycyk7XG4gIH07XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi91dGlscy9mbHVzaC5odG1sXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(16);\n\n__webpack_require__(12);\n\n(function () {\n  'use strict';\n\n  // Base class for HTMLTemplateElement extension that has property effects\n  // machinery for propagating host properties to children. This is an ES5\n  // class only because Babel (incorrectly) requires super() in the class\n  // constructor even though no `this` is used and it returns an instance.\n\n  let newInstance = null;\n  /**\n   * @constructor\n   * @extends {HTMLTemplateElement}\n   */\n  function HTMLTemplateElementExtension() {\n    return newInstance;\n  }\n  HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n    constructor: {\n      value: HTMLTemplateElementExtension,\n      writable: true\n    }\n  });\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @extends {HTMLTemplateElementExtension}\n   */\n  const DataTemplate = Polymer.PropertyEffects(HTMLTemplateElementExtension);\n  /**\n   * @constructor\n   * @implements {Polymer_MutableData}\n   * @extends {DataTemplate}\n   */\n  const MutableDataTemplate = Polymer.MutableData(DataTemplate);\n\n  // Applies a DataTemplate subclass to a <template> instance\n  function upgradeTemplate(template, constructor) {\n    newInstance = template;\n    Object.setPrototypeOf(template, constructor.prototype);\n    new constructor();\n    newInstance = null;\n  }\n\n  // Base class for TemplateInstance's\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   */\n  const base = Polymer.PropertyEffects(class {});\n\n  /**\n   * @polymer\n   * @customElement\n   * @appliesMixin Polymer.PropertyEffects\n   * @unrestricted\n   */\n  class TemplateInstanceBase extends base {\n    constructor(props) {\n      super();\n      this._configureProperties(props);\n      this.root = this._stampTemplate(this.__dataHost);\n      // Save list of stamped children\n      let children = this.children = [];\n      for (let n = this.root.firstChild; n; n = n.nextSibling) {\n        children.push(n);\n        n.__templatizeInstance = this;\n      }\n      if (this.__templatizeOwner.__hideTemplateChildren__) {\n        this._showHideChildren(true);\n      }\n      // Flush props only when props are passed if instance props exist\n      // or when there isn't instance props.\n      let options = this.__templatizeOptions;\n      if (props && options.instanceProps || !options.instanceProps) {\n        this._enableProperties();\n      }\n    }\n    /**\n     * Configure the given `props` by calling `_setPendingProperty`. Also\n     * sets any properties stored in `__hostProps`.\n     * @private\n     * @param {Object} props Object of property name-value pairs to set.\n     */\n    _configureProperties(props) {\n      let options = this.__templatizeOptions;\n      if (props) {\n        for (let iprop in options.instanceProps) {\n          if (iprop in props) {\n            this._setPendingProperty(iprop, props[iprop]);\n          }\n        }\n      }\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    /**\n     * Forwards a host property to this instance.  This method should be\n     * called on instances from the `options.forwardHostProp` callback\n     * to propagate changes of host properties to each instance.\n     *\n     * Note this method enqueues the change, which are flushed as a batch.\n     *\n     * @param {string} prop Property or path name\n     * @param {*} value Value of the property to forward\n     */\n    forwardHostProp(prop, value) {\n      if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n        this.__dataHost._enqueueClient(this);\n      }\n    }\n    /**\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      if (this._methodHost && this.__templatizeOptions.parentModel) {\n        // If this instance should be considered a parent model, decorate\n        // events this template instance as `model`\n        this._methodHost._addEventListenerToNode(node, eventName, e => {\n          e.model = this;\n          handler(e);\n        });\n      } else {\n        // Otherwise delegate to the template's host (which could be)\n        // another template instance\n        let templateHost = this.__dataHost.__dataHost;\n        if (templateHost) {\n          templateHost._addEventListenerToNode(node, eventName, handler);\n        }\n      }\n    }\n    /**\n     * Shows or hides the template instance top level child elements. For\n     * text nodes, `textContent` is removed while \"hidden\" and replaced when\n     * \"shown.\"\n     * @param {boolean} hide Set to true to hide the children;\n     * set to false to show them.\n     * @protected\n     */\n    _showHideChildren(hide) {\n      let c = this.children;\n      for (let i = 0; i < c.length; i++) {\n        let n = c[i];\n        // Ignore non-changes\n        if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n          if (n.nodeType === Node.TEXT_NODE) {\n            if (hide) {\n              n.__polymerTextContent__ = n.textContent;\n              n.textContent = '';\n            } else {\n              n.textContent = n.__polymerTextContent__;\n            }\n          } else if (n.style) {\n            if (hide) {\n              n.__polymerDisplay__ = n.style.display;\n              n.style.display = 'none';\n            } else {\n              n.style.display = n.__polymerDisplay__;\n            }\n          }\n        }\n        n.__hideTemplateChildren__ = hide;\n        if (n._showHideChildren) {\n          n._showHideChildren(hide);\n        }\n      }\n    }\n    /**\n     * Overrides default property-effects implementation to intercept\n     * textContent bindings while children are \"hidden\" and cache in\n     * private storage for later retrieval.\n     *\n     * @override\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      if (node.__hideTemplateChildren__ && node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n        node.__polymerTextContent__ = value;\n      } else {\n        super._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n    /**\n     * Find the parent model of this template instance.  The parent model\n     * is either another templatize instance that had option `parentModel: true`,\n     * or else the host element.\n     *\n     * @return {Polymer_PropertyEffects} The parent model of this instance\n     */\n    get parentModel() {\n      let model = this.__parentModel;\n      if (!model) {\n        let options;\n        model = this;\n        do {\n          // A template instance's `__dataHost` is a <template>\n          // `model.__dataHost.__dataHost` is the template's host\n          model = model.__dataHost.__dataHost;\n        } while ((options = model.__templatizeOptions) && !options.parentModel);\n        this.__parentModel = model;\n      }\n      return model;\n    }\n  }\n\n  /** @type {!DataTemplate} */\n  TemplateInstanceBase.prototype.__dataHost;\n  /** @type {!TemplatizeOptions} */\n  TemplateInstanceBase.prototype.__templatizeOptions;\n  /** @type {!Polymer_PropertyEffects} */\n  TemplateInstanceBase.prototype._methodHost;\n  /** @type {!Object} */\n  TemplateInstanceBase.prototype.__templatizeOwner;\n  /** @type {!Object} */\n  TemplateInstanceBase.prototype.__hostProps;\n\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   * @implements {Polymer_MutableData}\n   */\n  const MutableTemplateInstanceBase = Polymer.MutableData(TemplateInstanceBase);\n\n  function findMethodHost(template) {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    let templateHost = template.__dataHost;\n    return templateHost && templateHost._methodHost || templateHost;\n  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * @suppress {missingProperties} class.prototype is not defined for some reason\n   */\n  function createTemplatizerClass(template, templateInfo, options) {\n    // Anonymous class created by the templatize\n    let base = options.mutableData ? MutableTemplateInstanceBase : TemplateInstanceBase;\n    /**\n     * @constructor\n     * @extends {base}\n     */\n    let klass = class extends base {};\n    klass.prototype.__templatizeOptions = options;\n    klass.prototype._bindTemplate(template);\n    addNotifyEffects(klass, template, templateInfo, options);\n    return klass;\n  }\n\n  /**\n   * @suppress {missingProperties} class.prototype is not defined for some reason\n   */\n  function addPropagateEffects(template, templateInfo, options) {\n    let userForwardHostProp = options.forwardHostProp;\n    if (userForwardHostProp) {\n      // Provide data API and property effects on memoized template class\n      let klass = templateInfo.templatizeTemplateClass;\n      if (!klass) {\n        let base = options.mutableData ? MutableDataTemplate : DataTemplate;\n        klass = templateInfo.templatizeTemplateClass = class TemplatizedTemplate extends base {};\n        // Add template - >instances effects\n        // and host <- template effects\n        let hostProps = templateInfo.hostProps;\n        for (let prop in hostProps) {\n          klass.prototype._addPropertyEffect('_host_' + prop, klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE, { fn: createForwardHostPropEffect(prop, userForwardHostProp) });\n          klass.prototype._createNotifyingProperty('_host_' + prop);\n        }\n      }\n      upgradeTemplate(template, klass);\n      // Mix any pre-bound data into __data; no need to flush this to\n      // instances since they pull from the template at instance-time\n      if (template.__dataProto) {\n        // Note, generally `__dataProto` could be chained, but it's guaranteed\n        // to not be since this is a vanilla template we just added effects to\n        Object.assign(template.__data, template.__dataProto);\n      }\n      // Clear any pending data for performance\n      template.__dataTemp = {};\n      template.__dataPending = null;\n      template.__dataOld = null;\n      template._enableProperties();\n    }\n  }\n  /* eslint-enable valid-jsdoc */\n\n  function createForwardHostPropEffect(hostProp, userForwardHostProp) {\n    return function forwardHostProp(template, prop, props) {\n      userForwardHostProp.call(template.__templatizeOwner, prop.substring('_host_'.length), props[prop]);\n    };\n  }\n\n  function addNotifyEffects(klass, template, templateInfo, options) {\n    let hostProps = templateInfo.hostProps || {};\n    for (let iprop in options.instanceProps) {\n      delete hostProps[iprop];\n      let userNotifyInstanceProp = options.notifyInstanceProp;\n      if (userNotifyInstanceProp) {\n        klass.prototype._addPropertyEffect(iprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, { fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp) });\n      }\n    }\n    if (options.forwardHostProp && template.__dataHost) {\n      for (let hprop in hostProps) {\n        klass.prototype._addPropertyEffect(hprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, { fn: createNotifyHostPropEffect() });\n      }\n    }\n  }\n\n  function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n    return function notifyInstanceProp(inst, prop, props) {\n      userNotifyInstanceProp.call(inst.__templatizeOwner, inst, prop, props[prop]);\n    };\n  }\n\n  function createNotifyHostPropEffect() {\n    return function notifyHostProp(inst, prop, props) {\n      inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n    };\n  }\n\n  /**\n   * Module for preparing and stamping instances of templates that utilize\n   * Polymer's data-binding and declarative event listener features.\n   *\n   * Example:\n   *\n   *     // Get a template from somewhere, e.g. light DOM\n   *     let template = this.querySelector('template');\n   *     // Prepare the template\n   *     let TemplateClass = Polymer.Templatize.templatize(template);\n   *     // Instance the template with an initial data model\n   *     let instance = new TemplateClass({myProp: 'initial'});\n   *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n   *     this.shadowRoot.appendChild(instance.root);\n   *     // Changing a property on the instance will propagate to bindings\n   *     // in the template\n   *     instance.myProp = 'new value';\n   *\n   * The `options` dictionary passed to `templatize` allows for customizing\n   * features of the generated template class, including how outer-scope host\n   * properties should be forwarded into template instances, how any instance\n   * properties added into the template's scope should be notified out to\n   * the host, and whether the instance should be decorated as a \"parent model\"\n   * of any event handlers.\n   *\n   *     // Customize property forwarding and event model decoration\n   *     let TemplateClass = Polymer.Templatize.templatize(template, this, {\n   *       parentModel: true,\n   *       instanceProps: {...},\n   *       forwardHostProp(property, value) {...},\n   *       notifyInstanceProp(instance, property, value) {...},\n   *     });\n   *\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module for preparing and stamping instances of templates\n   *   utilizing Polymer templating features.\n   */\n\n  const Templatize = {\n\n    /**\n     * Returns an anonymous `Polymer.PropertyEffects` class bound to the\n     * `<template>` provided.  Instancing the class will result in the\n     * template being stamped into document fragment stored as the instance's\n     * `root` property, after which it can be appended to the DOM.\n     *\n     * Templates may utilize all Polymer data-binding features as well as\n     * declarative event listeners.  Event listeners and inline computing\n     * functions in the template will be called on the host of the template.\n     *\n     * The constructor returned takes a single argument dictionary of initial\n     * property values to propagate into template bindings.  Additionally\n     * host properties can be forwarded in, and instance properties can be\n     * notified out by providing optional callbacks in the `options` dictionary.\n     *\n     * Valid configuration in `options` are as follows:\n     *\n     * - `forwardHostProp(property, value)`: Called when a property referenced\n     *   in the template changed on the template's host. As this library does\n     *   not retain references to templates instanced by the user, it is the\n     *   templatize owner's responsibility to forward host property changes into\n     *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n     *    method on the generated class should be called to forward host\n     *   properties into the template to prevent unnecessary property-changed\n     *   notifications. Any properties referenced in the template that are not\n     *   defined in `instanceProps` will be notified up to the template's host\n     *   automatically.\n     * - `instanceProps`: Dictionary of property names that will be added\n     *   to the instance by the templatize owner.  These properties shadow any\n     *   host properties, and changes within the template to these properties\n     *   will result in `notifyInstanceProp` being called.\n     * - `mutableData`: When `true`, the generated class will skip strict\n     *   dirty-checking for objects and arrays (always consider them to be\n     *   \"dirty\").\n     * - `notifyInstanceProp(instance, property, value)`: Called when\n     *   an instance property changes.  Users may choose to call `notifyPath`\n     *   on e.g. the owner to notify the change.\n     * - `parentModel`: When `true`, events handled by declarative event listeners\n     *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n     *   to the template instance that stamped it.  It will also be returned\n     *   from `instance.parentModel` in cases where template instance nesting\n     *   causes an inner model to shadow an outer model.\n     *\n     * Note that the class returned from `templatize` is generated only once\n     * for a given `<template>` using `options` from the first call for that\n     * template, and the cached class is returned for all subsequent calls to\n     * `templatize` for that template.  As such, `options` callbacks should not\n     * close over owner-specific properties since only the first `options` is\n     * used; rather, callbacks are called bound to the `owner`, and so context\n     * needed from the callbacks (such as references to `instances` stamped)\n     * should be stored on the `owner` such that they can be retrieved via `this`.\n     *\n     * @memberof Polymer.Templatize\n     * @param {!HTMLTemplateElement} template Template to templatize\n     * @param {!Polymer_PropertyEffects} owner Owner of the template instances;\n     *   any optional callbacks will be bound to this owner.\n     * @param {Object=} options Options dictionary (see summary for details)\n     * @return {function(new:TemplateInstanceBase)} Generated class bound to the template\n     *   provided\n     * @suppress {invalidCasts}\n     */\n    templatize(template, owner, options) {\n      options = /** @type {!TemplatizeOptions} */options || {};\n      if (template.__templatizeOwner) {\n        throw new Error('A <template> can only be templatized once');\n      }\n      template.__templatizeOwner = owner;\n      let templateInfo = owner.constructor._parseTemplate(template);\n      // Get memoized base class for the prototypical template, which\n      // includes property effects for binding template & forwarding\n      let baseClass = templateInfo.templatizeInstanceClass;\n      if (!baseClass) {\n        baseClass = createTemplatizerClass(template, templateInfo, options);\n        templateInfo.templatizeInstanceClass = baseClass;\n      }\n      // Host property forwarding must be installed onto template instance\n      addPropagateEffects(template, templateInfo, options);\n      // Subclass base class and add reference for this specific template\n      let klass = class TemplateInstance extends baseClass {};\n      klass.prototype._methodHost = findMethodHost(template);\n      klass.prototype.__dataHost = template;\n      klass.prototype.__templatizeOwner = owner;\n      klass.prototype.__hostProps = templateInfo.hostProps;\n      klass = /** @type {function(new:TemplateInstanceBase)} */klass; //eslint-disable-line no-self-assign\n      return klass;\n    },\n\n    /**\n     * Returns the template \"model\" associated with a given element, which\n     * serves as the binding scope for the template instance the element is\n     * contained in. A template model is an instance of\n     * `TemplateInstanceBase`, and should be used to manipulate data\n     * associated with this template instance.\n     *\n     * Example:\n     *\n     *   let model = modelForElement(el);\n     *   if (model.index < 10) {\n     *     model.set('item.checked', true);\n     *   }\n     *\n     * @memberof Polymer.Templatize\n     * @param {HTMLTemplateElement} template The model will be returned for\n     *   elements stamped from this template\n     * @param {Node} node Node for which to return a template model.\n     * @return {TemplateInstanceBase} Template instance representing the\n     *   binding scope for the element\n     */\n    modelForElement(template, node) {\n      let model;\n      while (node) {\n        // An element with a __templatizeInstance marks the top boundary\n        // of a scope; walk up until we find one, and then ensure that\n        // its __dataHost matches `this`, meaning this dom-repeat stamped it\n        if (model = node.__templatizeInstance) {\n          // Found an element stamped by another template; keep walking up\n          // from its __dataHost\n          if (model.__dataHost != template) {\n            node = model.__dataHost;\n          } else {\n            return model;\n          }\n        } else {\n          // Still in a template scope, keep going up until\n          // a __templatizeInstance is found\n          node = node.parentNode;\n        }\n      }\n      return null;\n    }\n  };\n\n  Polymer.Templatize = Templatize;\n  Polymer.TemplateInstanceBase = TemplateInstanceBase;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that control the\n * size or hidden state of their children) and \"resizables\" (elements that need to be\n * notified when they are resized or un-hidden by their parents in order to take\n * action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior` behavior to\n * their element definition and listen for the `iron-resize` event on themselves.\n * This event will be fired when they become showing after having been hidden,\n * when they are resized explicitly by another resizable, or when the window has been\n * resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior Polymer.IronResizableBehavior\n * @demo demo/index.html\n **/\nPolymer.IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged'\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function () {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n  },\n\n  attached: function () {\n    this._requestResizeNotifications();\n  },\n\n  detached: function () {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function () {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function (resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function (parentResizable) {\n    this._parentResizable = parentResizable;\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function (target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this.unlisten(target, 'iron-resize', '_onDescendantIronResize');\n    }\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function (element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function (event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // NOTE(cdata): In ShadowDOM, event retargeting makes echoing of the\n    // otherwise non-bubbling event \"just work.\" We do it manually here for\n    // the case where Polymer is not using shadow roots for whatever reason:\n    if (!Polymer.Settings.useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function () {\n    this.fire('iron-resize', null, {\n      node: this,\n      bubbles: false\n    });\n  },\n\n  _onIronRequestResizeNotifications: function (event) {\n    var target = /** @type {!EventTarget} */Polymer.dom(event).rootTarget;\n    if (target === this) {\n      return;\n    }\n\n    if (this._interestedResizables.indexOf(target) === -1) {\n      this._interestedResizables.push(target);\n      this.listen(target, 'iron-resize', '_onDescendantIronResize');\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function (parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function (descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function () {\n    if (!this.isAttached) return;\n\n    // NOTE(valdrin) In CustomElements v1 with native HTMLImports, the order\n    // of imports affects the order of `attached` callbacks (see webcomponents/custom-elements#15).\n    // This might cause a child to notify parents too early (as the parent\n    // still has to be upgraded), resulting in a parent not able to keep track\n    // of the `_interestedResizables`. To solve this, we wait for the document\n    // to be done loading before firing the event.\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications = this._requestResizeNotifications.bind(this);\n      document.addEventListener('readystatechange', function readystatechanged() {\n        document.removeEventListener('readystatechange', readystatechanged);\n        _requestResizeNotifications();\n      });\n    } else {\n      this.fire('iron-request-resize-notifications', null, {\n        node: this,\n        bubbles: true,\n        cancelable: true\n      });\n\n      if (!this._parentResizable) {\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n\n  /**\n   * @constructor\n   * @param {{type: (string|null), key: (string|null), value: *}} options\n   */\n  function IronMeta(options) {\n    this.type = options && options.type || 'default';\n    this.key = options && options.key;\n    if ('value' in options) {\n      this.value = options.value;\n    }\n  }\n\n  IronMeta.types = {};\n\n  IronMeta.prototype = {\n    get value() {\n      var type = this.type;\n      var key = this.key;\n\n      if (type && key) {\n        return IronMeta.types[type] && IronMeta.types[type][key];\n      }\n    },\n\n    set value(value) {\n      var type = this.type;\n      var key = this.key;\n\n      if (type && key) {\n        type = IronMeta.types[type] = IronMeta.types[type] || {};\n        if (value == null) {\n          delete type[key];\n        } else {\n          type[key] = value;\n        }\n      }\n    },\n\n    get list() {\n      var type = this.type;\n\n      if (type) {\n        const items = IronMeta.types[this.type];\n        if (!items) {\n          return [];\n        }\n\n        return Object.keys(items).map(function (key) {\n          return metaDatas[this.type][key];\n        }, this);\n      }\n    },\n\n    byKey: function (key) {\n      this.key = key;\n      return this.value;\n    }\n  };\n\n  Polymer.IronMeta = IronMeta;\n\n  var metaDatas = Polymer.IronMeta.types;\n\n  Polymer({\n\n    is: 'iron-meta',\n\n    properties: {\n\n      /**\n       * The type of meta-data.  All meta-data of the same type is stored\n       * together.\n       * @type {string}\n       */\n      type: {\n        type: String,\n        value: 'default'\n      },\n\n      /**\n       * The key used to store `value` under the `type` namespace.\n       * @type {?string}\n       */\n      key: {\n        type: String\n      },\n\n      /**\n       * The meta-data to store or retrieve.\n       * @type {*}\n       */\n      value: {\n        type: String,\n        notify: true\n      },\n\n      /**\n       * If true, `value` is set to the iron-meta instance itself.\n       */\n      self: {\n        type: Boolean,\n        observer: '_selfChanged'\n      },\n\n      __meta: {\n        type: Boolean,\n        computed: '__computeMeta(type, key, value)'\n      }\n    },\n\n    hostAttributes: {\n      hidden: true\n    },\n\n    __computeMeta: function (type, key, value) {\n      var meta = new Polymer.IronMeta({\n        type: type,\n        key: key\n      });\n\n      if (value !== undefined && value !== meta.value) {\n        meta.value = value;\n      } else if (this.value !== meta.value) {\n        this.value = meta.value;\n      }\n\n      return meta;\n    },\n\n    get list() {\n      return this.__meta && this.__meta.list;\n    },\n\n    _selfChanged: function (self) {\n      if (self) {\n        this.value = this;\n      }\n    },\n\n    /**\n     * Retrieves meta data value by key.\n     *\n     * @method byKey\n     * @param {string} key The key of the meta-data to be returned.\n     * @return {*}\n     */\n    byKey: function (key) {\n      return new Polymer.IronMeta({\n        type: this.type,\n        key: key\n      }).value;\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tbWV0YS9pcm9uLW1ldGEuaHRtbD9lZjBiIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7e3R5cGU6IChzdHJpbmd8bnVsbCksIGtleTogKHN0cmluZ3xudWxsKSwgdmFsdWU6ICp9fSBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBJcm9uTWV0YShvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gb3B0aW9ucyAmJiBvcHRpb25zLnR5cGUgfHwgJ2RlZmF1bHQnO1xuICAgIHRoaXMua2V5ID0gb3B0aW9ucyAmJiBvcHRpb25zLmtleTtcbiAgICBpZiAoJ3ZhbHVlJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBJcm9uTWV0YS50eXBlcyA9IHt9O1xuXG4gIElyb25NZXRhLnByb3RvdHlwZSA9IHtcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmtleTtcblxuICAgICAgaWYgKHR5cGUgJiYga2V5KSB7XG4gICAgICAgIHJldHVybiBJcm9uTWV0YS50eXBlc1t0eXBlXSAmJiBJcm9uTWV0YS50eXBlc1t0eXBlXVtrZXldO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgdmFyIGtleSA9IHRoaXMua2V5O1xuXG4gICAgICBpZiAodHlwZSAmJiBrZXkpIHtcbiAgICAgICAgdHlwZSA9IElyb25NZXRhLnR5cGVzW3R5cGVdID0gSXJvbk1ldGEudHlwZXNbdHlwZV0gfHwge307XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHR5cGVba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0eXBlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXQgbGlzdCgpIHtcbiAgICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IElyb25NZXRhLnR5cGVzW3RoaXMudHlwZV07XG4gICAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIG1ldGFEYXRhc1t0aGlzLnR5cGVdW2tleV07XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBieUtleTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgUG9seW1lci5Jcm9uTWV0YSA9IElyb25NZXRhO1xuXG4gIHZhciBtZXRhRGF0YXMgPSBQb2x5bWVyLklyb25NZXRhLnR5cGVzO1xuXG4gIFBvbHltZXIoe1xuXG4gICAgaXM6ICdpcm9uLW1ldGEnLFxuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIG1ldGEtZGF0YS4gIEFsbCBtZXRhLWRhdGEgb2YgdGhlIHNhbWUgdHlwZSBpcyBzdG9yZWRcbiAgICAgICAqIHRvZ2V0aGVyLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgdHlwZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnZGVmYXVsdCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGtleSB1c2VkIHRvIHN0b3JlIGB2YWx1ZWAgdW5kZXIgdGhlIGB0eXBlYCBuYW1lc3BhY2UuXG4gICAgICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICAgICAqL1xuICAgICAga2V5OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWV0YS1kYXRhIHRvIHN0b3JlIG9yIHJldHJpZXZlLlxuICAgICAgICogQHR5cGUgeyp9XG4gICAgICAgKi9cbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRydWUsIGB2YWx1ZWAgaXMgc2V0IHRvIHRoZSBpcm9uLW1ldGEgaW5zdGFuY2UgaXRzZWxmLlxuICAgICAgICovXG4gICAgICBzZWxmOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG9ic2VydmVyOiAnX3NlbGZDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgX19tZXRhOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIGNvbXB1dGVkOiAnX19jb21wdXRlTWV0YSh0eXBlLCBrZXksIHZhbHVlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaG9zdEF0dHJpYnV0ZXM6IHtcbiAgICAgIGhpZGRlbjogdHJ1ZVxuICAgIH0sXG5cbiAgICBfX2NvbXB1dGVNZXRhOiBmdW5jdGlvbiAodHlwZSwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG1ldGEgPSBuZXcgUG9seW1lci5Jcm9uTWV0YSh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGtleToga2V5XG4gICAgICB9KTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG1ldGEudmFsdWUpIHtcbiAgICAgICAgbWV0YS52YWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnZhbHVlICE9PSBtZXRhLnZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBtZXRhLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWV0YTtcbiAgICB9LFxuXG4gICAgZ2V0IGxpc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX21ldGEgJiYgdGhpcy5fX21ldGEubGlzdDtcbiAgICB9LFxuXG4gICAgX3NlbGZDaGFuZ2VkOiBmdW5jdGlvbiAoc2VsZikge1xuICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXM7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBtZXRhIGRhdGEgdmFsdWUgYnkga2V5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBieUtleVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0YS1kYXRhIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgYnlLZXk6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUG9seW1lci5Jcm9uTWV0YSh7XG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH0pLnZhbHVlO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLW1ldGEvaXJvbi1tZXRhLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(13);\n\n__webpack_require__(35);\n\n__webpack_require__(7);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-icon-button> <template strip-whitespace=\\\"\\\"> <style>:host{display:inline-block;position:relative;padding:8px;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;z-index:0;line-height:1;width:40px;height:40px;-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:transparent;box-sizing:border-box!important;@apply --paper-icon-button;}:host #ink{color:var(--paper-icon-button-ink-color,var(--primary-text-color));opacity:.6}:host([disabled]){color:var(--paper-icon-button-disabled-text,var(--disabled-text-color));pointer-events:none;cursor:auto;@apply --paper-icon-button-disabled;}:host([hidden]){display:none!important}:host(:hover){@apply --paper-icon-button-hover;}iron-icon{--iron-icon-width:100%;--iron-icon-height:100%}</style> <iron-icon id=icon src=[[src]] icon=[[icon]] alt$=[[alt]]></iron-icon> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-icon-button',\n\n  hostAttributes: {\n    role: 'button',\n    tabindex: '0'\n  },\n\n  behaviors: [Polymer.PaperInkyFocusBehavior],\n\n  properties: {\n    /**\n     * The URL of an image for the icon. If the src property is specified,\n     * the icon property should not be.\n     */\n    src: {\n      type: String\n    },\n\n    /**\n     * Specifies the icon name or index in the set of icons available in\n     * the icon's icon set. If the icon property is specified,\n     * the src property should not be.\n     */\n    icon: {\n      type: String\n    },\n\n    /**\n     * Specifies the alternate text for the button, for accessibility.\n     */\n    alt: {\n      type: String,\n      observer: \"_altChanged\"\n    }\n  },\n\n  _altChanged: function (newValue, oldValue) {\n    var label = this.getAttribute('aria-label');\n\n    // Don't stomp over a user-set aria-label.\n    if (!label || oldValue == label) {\n      this.setAttribute('aria-label', newValue);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWw/YjM0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24taWNvbi9pcm9uLWljb24uaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1iZWhhdmlvcnMvcGFwZXItaW5reS1mb2N1cy1iZWhhdmlvci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLXN0eWxlcy9kZWZhdWx0LXRoZW1lLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1wYXBlci1pY29uLWJ1dHRvbj4gPHRlbXBsYXRlIHN0cmlwLXdoaXRlc3BhY2U9XFxcIlxcXCI+IDxzdHlsZT46aG9zdHtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjhweDtvdXRsaW5lOjA7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2N1cnNvcjpwb2ludGVyO3otaW5kZXg6MDtsaW5lLWhlaWdodDoxO3dpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudDtib3gtc2l6aW5nOmJvcmRlci1ib3ghaW1wb3J0YW50O0BhcHBseSAtLXBhcGVyLWljb24tYnV0dG9uO306aG9zdCAjaW5re2NvbG9yOnZhcigtLXBhcGVyLWljb24tYnV0dG9uLWluay1jb2xvcix2YXIoLS1wcmltYXJ5LXRleHQtY29sb3IpKTtvcGFjaXR5Oi42fTpob3N0KFtkaXNhYmxlZF0pe2NvbG9yOnZhcigtLXBhcGVyLWljb24tYnV0dG9uLWRpc2FibGVkLXRleHQsdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvcikpO3BvaW50ZXItZXZlbnRzOm5vbmU7Y3Vyc29yOmF1dG87QGFwcGx5IC0tcGFwZXItaWNvbi1idXR0b24tZGlzYWJsZWQ7fTpob3N0KFtoaWRkZW5dKXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fTpob3N0KDpob3Zlcil7QGFwcGx5IC0tcGFwZXItaWNvbi1idXR0b24taG92ZXI7fWlyb24taWNvbnstLWlyb24taWNvbi13aWR0aDoxMDAlOy0taXJvbi1pY29uLWhlaWdodDoxMDAlfTwvc3R5bGU+IDxpcm9uLWljb24gaWQ9aWNvbiBzcmM9W1tzcmNdXSBpY29uPVtbaWNvbl1dIGFsdCQ9W1thbHRdXT48L2lyb24taWNvbj4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItaWNvbi1idXR0b24nLFxuXG4gIGhvc3RBdHRyaWJ1dGVzOiB7XG4gICAgcm9sZTogJ2J1dHRvbicsXG4gICAgdGFiaW5kZXg6ICcwJ1xuICB9LFxuXG4gIGJlaGF2aW9yczogW1BvbHltZXIuUGFwZXJJbmt5Rm9jdXNCZWhhdmlvcl0sXG5cbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgYW4gaW1hZ2UgZm9yIHRoZSBpY29uLiBJZiB0aGUgc3JjIHByb3BlcnR5IGlzIHNwZWNpZmllZCxcbiAgICAgKiB0aGUgaWNvbiBwcm9wZXJ0eSBzaG91bGQgbm90IGJlLlxuICAgICAqL1xuICAgIHNyYzoge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaWNvbiBuYW1lIG9yIGluZGV4IGluIHRoZSBzZXQgb2YgaWNvbnMgYXZhaWxhYmxlIGluXG4gICAgICogdGhlIGljb24ncyBpY29uIHNldC4gSWYgdGhlIGljb24gcHJvcGVydHkgaXMgc3BlY2lmaWVkLFxuICAgICAqIHRoZSBzcmMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZS5cbiAgICAgKi9cbiAgICBpY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBhbHRlcm5hdGUgdGV4dCBmb3IgdGhlIGJ1dHRvbiwgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAgICovXG4gICAgYWx0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBvYnNlcnZlcjogXCJfYWx0Q2hhbmdlZFwiXG4gICAgfVxuICB9LFxuXG4gIF9hbHRDaGFuZ2VkOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgdmFyIGxhYmVsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcblxuICAgIC8vIERvbid0IHN0b21wIG92ZXIgYSB1c2VyLXNldCBhcmlhLWxhYmVsLlxuICAgIGlmICghbGFiZWwgfHwgb2xkVmFsdWUgPT0gbGFiZWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n * @demo demo/index.html\n * @polymerBehavior\n */\nPolymer.IronControlState = {\n\n  properties: {\n\n    /**\n     * If true, the element currently has focus.\n     */\n    focused: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      readOnly: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * If true, the user cannot interact with this element.\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      observer: '_disabledChanged',\n      reflectToAttribute: true\n    },\n\n    _oldTabIndex: {\n      type: Number\n    },\n\n    _boundFocusBlurHandler: {\n      type: Function,\n      value: function () {\n        return this._focusBlurHandler.bind(this);\n      }\n    },\n\n    __handleEventRetargeting: {\n      type: Boolean,\n      value: function () {\n        return !this.shadowRoot && !Polymer.Element;\n      }\n    }\n  },\n\n  observers: ['_changedControlState(focused, disabled)'],\n\n  ready: function () {\n    this.addEventListener('focus', this._boundFocusBlurHandler, true);\n    this.addEventListener('blur', this._boundFocusBlurHandler, true);\n  },\n\n  _focusBlurHandler: function (event) {\n    // In Polymer 2.0, the library takes care of retargeting events.\n    if (Polymer.Element) {\n      this._setFocused(event.type === 'focus');\n      return;\n    }\n\n    // NOTE(cdata):  if we are in ShadowDOM land, `event.target` will\n    // eventually become `this` due to retargeting; if we are not in\n    // ShadowDOM land, `event.target` will eventually become `this` due\n    // to the second conditional which fires a synthetic event (that is also\n    // handled). In either case, we can disregard `event.path`.\n    if (event.target === this) {\n      this._setFocused(event.type === 'focus');\n    } else if (this.__handleEventRetargeting) {\n      var target = /** @type {Node} */Polymer.dom(event).localTarget;\n      if (!this.isLightDescendant(target)) {\n        this.fire(event.type, { sourceEvent: event }, {\n          node: this,\n          bubbles: event.bubbles,\n          cancelable: event.cancelable\n        });\n      }\n    }\n  },\n\n  _disabledChanged: function (disabled, old) {\n    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n    this.style.pointerEvents = disabled ? 'none' : '';\n    if (disabled) {\n      this._oldTabIndex = this.tabIndex;\n      this._setFocused(false);\n      this.tabIndex = -1;\n      this.blur();\n    } else if (this._oldTabIndex !== undefined) {\n      this.tabIndex = this._oldTabIndex;\n    }\n  },\n\n  _changedControlState: function () {\n    // _controlStateChanged is abstract, follow-on behaviors may implement it\n    if (this._controlStateChanged) {\n      this._controlStateChanged();\n    }\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tYmVoYXZpb3JzL2lyb24tY29udHJvbC1zdGF0ZS5odG1sPzQ2ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG4vKipcbiAqIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICogQHBvbHltZXJCZWhhdmlvclxuICovXG5Qb2x5bWVyLklyb25Db250cm9sU3RhdGUgPSB7XG5cbiAgcHJvcGVydGllczoge1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlIGVsZW1lbnQgY3VycmVudGx5IGhhcyBmb2N1cy5cbiAgICAgKi9cbiAgICBmb2N1c2VkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhpcyBlbGVtZW50LlxuICAgICAqL1xuICAgIGRpc2FibGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgb2JzZXJ2ZXI6ICdfZGlzYWJsZWRDaGFuZ2VkJyxcbiAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZVxuICAgIH0sXG5cbiAgICBfb2xkVGFiSW5kZXg6IHtcbiAgICAgIHR5cGU6IE51bWJlclxuICAgIH0sXG5cbiAgICBfYm91bmRGb2N1c0JsdXJIYW5kbGVyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb2N1c0JsdXJIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9faGFuZGxlRXZlbnRSZXRhcmdldGluZzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5zaGFkb3dSb290ICYmICFQb2x5bWVyLkVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG9ic2VydmVyczogWydfY2hhbmdlZENvbnRyb2xTdGF0ZShmb2N1c2VkLCBkaXNhYmxlZCknXSxcblxuICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3VuZEZvY3VzQmx1ckhhbmRsZXIsIHRydWUpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX2JvdW5kRm9jdXNCbHVySGFuZGxlciwgdHJ1ZSk7XG4gIH0sXG5cbiAgX2ZvY3VzQmx1ckhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEluIFBvbHltZXIgMi4wLCB0aGUgbGlicmFyeSB0YWtlcyBjYXJlIG9mIHJldGFyZ2V0aW5nIGV2ZW50cy5cbiAgICBpZiAoUG9seW1lci5FbGVtZW50KSB7XG4gICAgICB0aGlzLl9zZXRGb2N1c2VkKGV2ZW50LnR5cGUgPT09ICdmb2N1cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE5PVEUoY2RhdGEpOiAgaWYgd2UgYXJlIGluIFNoYWRvd0RPTSBsYW5kLCBgZXZlbnQudGFyZ2V0YCB3aWxsXG4gICAgLy8gZXZlbnR1YWxseSBiZWNvbWUgYHRoaXNgIGR1ZSB0byByZXRhcmdldGluZzsgaWYgd2UgYXJlIG5vdCBpblxuICAgIC8vIFNoYWRvd0RPTSBsYW5kLCBgZXZlbnQudGFyZ2V0YCB3aWxsIGV2ZW50dWFsbHkgYmVjb21lIGB0aGlzYCBkdWVcbiAgICAvLyB0byB0aGUgc2Vjb25kIGNvbmRpdGlvbmFsIHdoaWNoIGZpcmVzIGEgc3ludGhldGljIGV2ZW50ICh0aGF0IGlzIGFsc29cbiAgICAvLyBoYW5kbGVkKS4gSW4gZWl0aGVyIGNhc2UsIHdlIGNhbiBkaXNyZWdhcmQgYGV2ZW50LnBhdGhgLlxuICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpIHtcbiAgICAgIHRoaXMuX3NldEZvY3VzZWQoZXZlbnQudHlwZSA9PT0gJ2ZvY3VzJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9faGFuZGxlRXZlbnRSZXRhcmdldGluZykge1xuICAgICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7Tm9kZX0gKi9Qb2x5bWVyLmRvbShldmVudCkubG9jYWxUYXJnZXQ7XG4gICAgICBpZiAoIXRoaXMuaXNMaWdodERlc2NlbmRhbnQodGFyZ2V0KSkge1xuICAgICAgICB0aGlzLmZpcmUoZXZlbnQudHlwZSwgeyBzb3VyY2VFdmVudDogZXZlbnQgfSwge1xuICAgICAgICAgIG5vZGU6IHRoaXMsXG4gICAgICAgICAgYnViYmxlczogZXZlbnQuYnViYmxlcyxcbiAgICAgICAgICBjYW5jZWxhYmxlOiBldmVudC5jYW5jZWxhYmxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfZGlzYWJsZWRDaGFuZ2VkOiBmdW5jdGlvbiAoZGlzYWJsZWQsIG9sZCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgZGlzYWJsZWQgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICB0aGlzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBkaXNhYmxlZCA/ICdub25lJyA6ICcnO1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgdGhpcy5fb2xkVGFiSW5kZXggPSB0aGlzLnRhYkluZGV4O1xuICAgICAgdGhpcy5fc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICB0aGlzLnRhYkluZGV4ID0gLTE7XG4gICAgICB0aGlzLmJsdXIoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX29sZFRhYkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGFiSW5kZXggPSB0aGlzLl9vbGRUYWJJbmRleDtcbiAgICB9XG4gIH0sXG5cbiAgX2NoYW5nZWRDb250cm9sU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBfY29udHJvbFN0YXRlQ2hhbmdlZCBpcyBhYnN0cmFjdCwgZm9sbG93LW9uIGJlaGF2aW9ycyBtYXkgaW1wbGVtZW50IGl0XG4gICAgaWYgKHRoaXMuX2NvbnRyb2xTdGF0ZUNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2NvbnRyb2xTdGF0ZUNoYW5nZWQoKTtcbiAgICB9XG4gIH1cblxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1iZWhhdmlvcnMvaXJvbi1jb250cm9sLXN0YXRlLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(14);\n\n__webpack_require__(82);\n\n/**\n * `Polymer.PaperRippleBehavior` dynamically implements a ripple\n * when the element has focus via pointer or keyboard.\n *\n * NOTE: This behavior is intended to be used in conjunction with and after\n * `Polymer.IronButtonState` and `Polymer.IronControlState`.\n *\n * @polymerBehavior Polymer.PaperRippleBehavior\n */\nPolymer.PaperRippleBehavior = {\n  properties: {\n    /**\n     * If true, the element will not produce a ripple effect when interacted\n     * with via the pointer.\n     */\n    noink: {\n      type: Boolean,\n      observer: '_noinkChanged'\n    },\n\n    /**\n     * @type {Element|undefined}\n     */\n    _rippleContainer: {\n      type: Object\n    }\n  },\n\n  /**\n   * Ensures a `<paper-ripple>` element is available when the element is\n   * focused.\n   */\n  _buttonStateChanged: function () {\n    if (this.focused) {\n      this.ensureRipple();\n    }\n  },\n\n  /**\n   * In addition to the functionality provided in `IronButtonState`, ensures\n   * a ripple effect is created when the element is in a `pressed` state.\n   */\n  _downHandler: function (event) {\n    Polymer.IronButtonStateImpl._downHandler.call(this, event);\n    if (this.pressed) {\n      this.ensureRipple(event);\n    }\n  },\n\n  /**\n   * Ensures this element contains a ripple effect. For startup efficiency\n   * the ripple effect is dynamically on demand when needed.\n   * @param {!Event=} optTriggeringEvent (optional) event that triggered the\n   * ripple.\n   */\n  ensureRipple: function (optTriggeringEvent) {\n    if (!this.hasRipple()) {\n      this._ripple = this._createRipple();\n      this._ripple.noink = this.noink;\n      var rippleContainer = this._rippleContainer || this.root;\n      if (rippleContainer) {\n        Polymer.dom(rippleContainer).appendChild(this._ripple);\n      }\n      if (optTriggeringEvent) {\n        // Check if the event happened inside of the ripple container\n        // Fall back to host instead of the root because distributed text\n        // nodes are not valid event targets\n        var domContainer = Polymer.dom(this._rippleContainer || this);\n        var target = Polymer.dom(optTriggeringEvent).rootTarget;\n        if (domContainer.deepContains( /** @type {Node} */target)) {\n          this._ripple.uiDownAction(optTriggeringEvent);\n        }\n      }\n    }\n  },\n\n  /**\n   * Returns the `<paper-ripple>` element used by this element to create\n   * ripple effects. The element's ripple is created on demand, when\n   * necessary, and calling this method will force the\n   * ripple to be created.\n   */\n  getRipple: function () {\n    this.ensureRipple();\n    return this._ripple;\n  },\n\n  /**\n   * Returns true if this element currently contains a ripple effect.\n   * @return {boolean}\n   */\n  hasRipple: function () {\n    return Boolean(this._ripple);\n  },\n\n  /**\n   * Create the element's ripple effect via creating a `<paper-ripple>`.\n   * Override this method to customize the ripple element.\n   * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.\n   */\n  _createRipple: function () {\n    var element = /** @type {!PaperRippleElement} */document.createElement('paper-ripple');\n    return element;\n  },\n\n  _noinkChanged: function (noink) {\n    if (this.hasRipple()) {\n      this._ripple.noink = noink;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1yaXBwbGUtYmVoYXZpb3IuaHRtbD82MDczIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1iZWhhdmlvcnMvaXJvbi1idXR0b24tc3RhdGUuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1yaXBwbGUvcGFwZXItcmlwcGxlLmh0bWwnKTtcblxuLyoqXG4gKiBgUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yYCBkeW5hbWljYWxseSBpbXBsZW1lbnRzIGEgcmlwcGxlXG4gKiB3aGVuIHRoZSBlbGVtZW50IGhhcyBmb2N1cyB2aWEgcG9pbnRlciBvciBrZXlib2FyZC5cbiAqXG4gKiBOT1RFOiBUaGlzIGJlaGF2aW9yIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBhbmQgYWZ0ZXJcbiAqIGBQb2x5bWVyLklyb25CdXR0b25TdGF0ZWAgYW5kIGBQb2x5bWVyLklyb25Db250cm9sU3RhdGVgLlxuICpcbiAqIEBwb2x5bWVyQmVoYXZpb3IgUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yXG4gKi9cblBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvciA9IHtcbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRoZSBlbGVtZW50IHdpbGwgbm90IHByb2R1Y2UgYSByaXBwbGUgZWZmZWN0IHdoZW4gaW50ZXJhY3RlZFxuICAgICAqIHdpdGggdmlhIHRoZSBwb2ludGVyLlxuICAgICAqL1xuICAgIG5vaW5rOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgb2JzZXJ2ZXI6ICdfbm9pbmtDaGFuZ2VkJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RWxlbWVudHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgX3JpcHBsZUNvbnRhaW5lcjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBFbnN1cmVzIGEgYDxwYXBlci1yaXBwbGU+YCBlbGVtZW50IGlzIGF2YWlsYWJsZSB3aGVuIHRoZSBlbGVtZW50IGlzXG4gICAqIGZvY3VzZWQuXG4gICAqL1xuICBfYnV0dG9uU3RhdGVDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNlZCkge1xuICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluIGFkZGl0aW9uIHRvIHRoZSBmdW5jdGlvbmFsaXR5IHByb3ZpZGVkIGluIGBJcm9uQnV0dG9uU3RhdGVgLCBlbnN1cmVzXG4gICAqIGEgcmlwcGxlIGVmZmVjdCBpcyBjcmVhdGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgaW4gYSBgcHJlc3NlZGAgc3RhdGUuXG4gICAqL1xuICBfZG93bkhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIFBvbHltZXIuSXJvbkJ1dHRvblN0YXRlSW1wbC5fZG93bkhhbmRsZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgaWYgKHRoaXMucHJlc3NlZCkge1xuICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoZXZlbnQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRW5zdXJlcyB0aGlzIGVsZW1lbnQgY29udGFpbnMgYSByaXBwbGUgZWZmZWN0LiBGb3Igc3RhcnR1cCBlZmZpY2llbmN5XG4gICAqIHRoZSByaXBwbGUgZWZmZWN0IGlzIGR5bmFtaWNhbGx5IG9uIGRlbWFuZCB3aGVuIG5lZWRlZC5cbiAgICogQHBhcmFtIHshRXZlbnQ9fSBvcHRUcmlnZ2VyaW5nRXZlbnQgKG9wdGlvbmFsKSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGVcbiAgICogcmlwcGxlLlxuICAgKi9cbiAgZW5zdXJlUmlwcGxlOiBmdW5jdGlvbiAob3B0VHJpZ2dlcmluZ0V2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmhhc1JpcHBsZSgpKSB7XG4gICAgICB0aGlzLl9yaXBwbGUgPSB0aGlzLl9jcmVhdGVSaXBwbGUoKTtcbiAgICAgIHRoaXMuX3JpcHBsZS5ub2luayA9IHRoaXMubm9pbms7XG4gICAgICB2YXIgcmlwcGxlQ29udGFpbmVyID0gdGhpcy5fcmlwcGxlQ29udGFpbmVyIHx8IHRoaXMucm9vdDtcbiAgICAgIGlmIChyaXBwbGVDb250YWluZXIpIHtcbiAgICAgICAgUG9seW1lci5kb20ocmlwcGxlQ29udGFpbmVyKS5hcHBlbmRDaGlsZCh0aGlzLl9yaXBwbGUpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdFRyaWdnZXJpbmdFdmVudCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaGFwcGVuZWQgaW5zaWRlIG9mIHRoZSByaXBwbGUgY29udGFpbmVyXG4gICAgICAgIC8vIEZhbGwgYmFjayB0byBob3N0IGluc3RlYWQgb2YgdGhlIHJvb3QgYmVjYXVzZSBkaXN0cmlidXRlZCB0ZXh0XG4gICAgICAgIC8vIG5vZGVzIGFyZSBub3QgdmFsaWQgZXZlbnQgdGFyZ2V0c1xuICAgICAgICB2YXIgZG9tQ29udGFpbmVyID0gUG9seW1lci5kb20odGhpcy5fcmlwcGxlQ29udGFpbmVyIHx8IHRoaXMpO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gUG9seW1lci5kb20ob3B0VHJpZ2dlcmluZ0V2ZW50KS5yb290VGFyZ2V0O1xuICAgICAgICBpZiAoZG9tQ29udGFpbmVyLmRlZXBDb250YWlucyggLyoqIEB0eXBlIHtOb2RlfSAqL3RhcmdldCkpIHtcbiAgICAgICAgICB0aGlzLl9yaXBwbGUudWlEb3duQWN0aW9uKG9wdFRyaWdnZXJpbmdFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGA8cGFwZXItcmlwcGxlPmAgZWxlbWVudCB1c2VkIGJ5IHRoaXMgZWxlbWVudCB0byBjcmVhdGVcbiAgICogcmlwcGxlIGVmZmVjdHMuIFRoZSBlbGVtZW50J3MgcmlwcGxlIGlzIGNyZWF0ZWQgb24gZGVtYW5kLCB3aGVuXG4gICAqIG5lY2Vzc2FyeSwgYW5kIGNhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBmb3JjZSB0aGVcbiAgICogcmlwcGxlIHRvIGJlIGNyZWF0ZWQuXG4gICAqL1xuICBnZXRSaXBwbGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuc3VyZVJpcHBsZSgpO1xuICAgIHJldHVybiB0aGlzLl9yaXBwbGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGVsZW1lbnQgY3VycmVudGx5IGNvbnRhaW5zIGEgcmlwcGxlIGVmZmVjdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1JpcHBsZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuX3JpcHBsZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgZWxlbWVudCdzIHJpcHBsZSBlZmZlY3QgdmlhIGNyZWF0aW5nIGEgYDxwYXBlci1yaXBwbGU+YC5cbiAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY3VzdG9taXplIHRoZSByaXBwbGUgZWxlbWVudC5cbiAgICogQHJldHVybiB7IVBhcGVyUmlwcGxlRWxlbWVudH0gUmV0dXJucyBhIGA8cGFwZXItcmlwcGxlPmAgZWxlbWVudC5cbiAgICovXG4gIF9jcmVhdGVSaXBwbGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IVBhcGVyUmlwcGxlRWxlbWVudH0gKi9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwYXBlci1yaXBwbGUnKTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICBfbm9pbmtDaGFuZ2VkOiBmdW5jdGlvbiAobm9pbmspIHtcbiAgICBpZiAodGhpcy5oYXNSaXBwbGUoKSkge1xuICAgICAgdGhpcy5fcmlwcGxlLm5vaW5rID0gbm9pbms7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1iZWhhdmlvcnMvcGFwZXItcmlwcGxlLWJlaGF2aW9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(21);\n\n/**\n * The `iron-iconset-svg` element allows users to define their own icon sets\n * that contain svg icons. The svg icon elements should be children of the\n * `iron-iconset-svg` element. Multiple icons should be given distinct id's.\n *\n * Using svg elements to create icons has a few advantages over traditional\n * bitmap graphics like jpg or png. Icons that use svg are vector based so\n * they are resolution independent and should look good on any device. They\n * are stylable via css. Icons can be themed, colorized, and even animated.\n *\n * Example:\n *\n *     <iron-iconset-svg name=\"my-svg-icons\" size=\"24\">\n *       <svg>\n *         <defs>\n *           <g id=\"shape\">\n *             <rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" />\n *             <circle cx=\"12\" cy=\"12\" r=\"12\" />\n *           </g>\n *         </defs>\n *       </svg>\n *     </iron-iconset-svg>\n *\n * This will automatically register the icon set \"my-svg-icons\" to the iconset\n * database.  To use these icons from within another element, make a\n * `iron-iconset` element and call the `byId` method\n * to retrieve a given iconset. To apply a particular icon inside an\n * element use the `applyIcon` method. For example:\n *\n *     iconset.applyIcon(iconNode, 'car');\n *\n * @element iron-iconset-svg\n * @demo demo/index.html\n * @implements {Polymer.Iconset}\n */\nPolymer({\n  is: 'iron-iconset-svg',\n\n  properties: {\n\n    /**\n     * The name of the iconset.\n     */\n    name: {\n      type: String,\n      observer: '_nameChanged'\n    },\n\n    /**\n     * The size of an individual icon. Note that icons must be square.\n     */\n    size: {\n      type: Number,\n      value: 24\n    },\n\n    /**\n     * Set to true to enable mirroring of icons where specified when they are\n     * stamped. Icons that should be mirrored should be decorated with a\n     * `mirror-in-rtl` attribute.\n     *\n     * NOTE: For performance reasons, direction will be resolved once per\n     * document per iconset, so moving icons in and out of RTL subtrees will\n     * not cause their mirrored state to change.\n     */\n    rtlMirroring: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to measure RTL based on the dir attribute on the body or\n     * html elements (measured on document.body or document.documentElement as\n     * available).\n     */\n    useGlobalRtlAttribute: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  created: function () {\n    this._meta = new Polymer.IronMeta({ type: 'iconset', key: null, value: null });\n  },\n\n  attached: function () {\n    this.style.display = 'none';\n  },\n\n  /**\n   * Construct an array of all icon names in this iconset.\n   *\n   * @return {!Array} Array of icon names.\n   */\n  getIconNames: function () {\n    this._icons = this._createIconMap();\n    return Object.keys(this._icons).map(function (n) {\n      return this.name + ':' + n;\n    }, this);\n  },\n\n  /**\n   * Applies an icon to the given element.\n   *\n   * An svg icon is prepended to the element's shadowRoot if it exists,\n   * otherwise to the element itself.\n   *\n   * If RTL mirroring is enabled, and the icon is marked to be mirrored in\n   * RTL, the element will be tested (once and only once ever for each\n   * iconset) to determine the direction of the subtree the element is in.\n   * This direction will apply to all future icon applications, although only\n   * icons marked to be mirrored will be affected.\n   *\n   * @method applyIcon\n   * @param {Element} element Element to which the icon is applied.\n   * @param {string} iconName Name of the icon to apply.\n   * @return {?Element} The svg element which renders the icon.\n   */\n  applyIcon: function (element, iconName) {\n    // Remove old svg element\n    this.removeIcon(element);\n    // install new svg element\n    var svg = this._cloneIcon(iconName, this.rtlMirroring && this._targetIsRTL(element));\n    if (svg) {\n      // insert svg element into shadow root, if it exists\n      var pde = Polymer.dom(element.root || element);\n      pde.insertBefore(svg, pde.childNodes[0]);\n      return element._svgIcon = svg;\n    }\n    return null;\n  },\n\n  /**\n   * Remove an icon from the given element by undoing the changes effected\n   * by `applyIcon`.\n   *\n   * @param {Element} element The element from which the icon is removed.\n   */\n  removeIcon: function (element) {\n    // Remove old svg element\n    if (element._svgIcon) {\n      Polymer.dom(element.root || element).removeChild(element._svgIcon);\n      element._svgIcon = null;\n    }\n  },\n\n  /**\n   * Measures and memoizes the direction of the element. Note that this\n   * measurement is only done once and the result is memoized for future\n   * invocations.\n   */\n  _targetIsRTL: function (target) {\n    if (this.__targetIsRTL == null) {\n      if (this.useGlobalRtlAttribute) {\n        var globalElement = document.body && document.body.hasAttribute('dir') ? document.body : document.documentElement;\n\n        this.__targetIsRTL = globalElement.getAttribute('dir') === 'rtl';\n      } else {\n        if (target && target.nodeType !== Node.ELEMENT_NODE) {\n          target = target.host;\n        }\n\n        this.__targetIsRTL = target && window.getComputedStyle(target)['direction'] === 'rtl';\n      }\n    }\n\n    return this.__targetIsRTL;\n  },\n\n  /**\n   *\n   * When name is changed, register iconset metadata\n   *\n   */\n  _nameChanged: function () {\n    this._meta.value = null;\n    this._meta.key = this.name;\n    this._meta.value = this;\n\n    this.async(function () {\n      this.fire('iron-iconset-added', this, { node: window });\n    });\n  },\n\n  /**\n   * Create a map of child SVG elements by id.\n   *\n   * @return {!Object} Map of id's to SVG elements.\n   */\n  _createIconMap: function () {\n    // Objects chained to Object.prototype (`{}`) have members. Specifically,\n    // on FF there is a `watch` method that confuses the icon map, so we\n    // need to use a null-based object here.\n    var icons = Object.create(null);\n    Polymer.dom(this).querySelectorAll('[id]').forEach(function (icon) {\n      icons[icon.id] = icon;\n    });\n    return icons;\n  },\n\n  /**\n   * Produce installable clone of the SVG element matching `id` in this\n   * iconset, or `undefined` if there is no matching element.\n   *\n   * @return {Element} Returns an installable clone of the SVG element\n   * matching `id`.\n   */\n  _cloneIcon: function (id, mirrorAllowed) {\n    // create the icon map on-demand, since the iconset itself has no discrete\n    // signal to know when it's children are fully parsed\n    this._icons = this._icons || this._createIconMap();\n    return this._prepareSvgClone(this._icons[id], this.size, mirrorAllowed);\n  },\n\n  /**\n   * @param {Element} sourceSvg\n   * @param {number} size\n   * @param {Boolean} mirrorAllowed\n   * @return {Element}\n   */\n  _prepareSvgClone: function (sourceSvg, size, mirrorAllowed) {\n    if (sourceSvg) {\n      var content = sourceSvg.cloneNode(true),\n          svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n          viewBox = content.getAttribute('viewBox') || '0 0 ' + size + ' ' + size,\n          cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;';\n\n      if (mirrorAllowed && content.hasAttribute('mirror-in-rtl')) {\n        cssText += '-webkit-transform:scale(-1,1);transform:scale(-1,1);';\n      }\n\n      svg.setAttribute('viewBox', viewBox);\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false');\n      // TODO(dfreedm): `pointer-events: none` works around https://crbug.com/370136\n      // TODO(sjmiles): inline style may not be ideal, but avoids requiring a shadow-root\n      svg.style.cssText = cssText;\n      svg.appendChild(content).removeAttribute('id');\n      return svg;\n    }\n    return null;\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(13);\n\n__webpack_require__(25);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<iron-iconset-svg name=icons size=24> <svg><defs> <g id=3d-rotation><path d=\\\"M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z\\\"></path></g> <g id=accessibility><path d=\\\"M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z\\\"></path></g> <g id=accessible><circle cx=12 cy=4 r=2></circle><path d=\\\"M19 13v-2c-1.54.02-3.09-.75-4.07-1.83l-1.29-1.43c-.17-.19-.38-.34-.61-.45-.01 0-.01-.01-.02-.01H13c-.35-.2-.75-.3-1.19-.26C10.76 7.11 10 8.04 10 9.09V15c0 1.1.9 2 2 2h5v5h2v-5.5c0-1.1-.9-2-2-2h-3v-3.45c1.29 1.07 3.25 1.94 5 1.95zm-6.17 5c-.41 1.16-1.52 2-2.83 2-1.66 0-3-1.34-3-3 0-1.31.84-2.41 2-2.83V12.1c-2.28.46-4 2.48-4 4.9 0 2.76 2.24 5 5 5 2.42 0 4.44-1.72 4.9-4h-2.07z\\\"></path></g> <g id=account-balance><path d=\\\"M4 10v7h3v-7H4zm6 0v7h3v-7h-3zM2 22h19v-3H2v3zm14-12v7h3v-7h-3zm-4.5-9L2 6v2h19V6l-9.5-5z\\\"></path></g> <g id=account-balance-wallet><path d=\\\"M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\\\"></path></g> <g id=account-box><path d=\\\"M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z\\\"></path></g> <g id=account-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\\\"></path></g> <g id=add><path d=\\\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\\\"></path></g> <g id=add-alert><path d=\\\"M10.01 21.01c0 1.1.89 1.99 1.99 1.99s1.99-.89 1.99-1.99h-3.98zm8.87-4.19V11c0-3.25-2.25-5.97-5.29-6.69v-.72C13.59 2.71 12.88 2 12 2s-1.59.71-1.59 1.59v.72C7.37 5.03 5.12 7.75 5.12 11v5.82L3 18.94V20h18v-1.06l-2.12-2.12zM16 13.01h-3v3h-2v-3H8V11h3V8h2v3h3v2.01z\\\"></path></g> <g id=add-box><path d=\\\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\\\"></path></g> <g id=add-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\\\"></path></g> <g id=add-circle-outline><path d=\\\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=add-shopping-cart><path d=\\\"M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z\\\"></path></g> <g id=alarm><path d=\\\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\\\"></path></g> <g id=alarm-add><path d=\\\"M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z\\\"></path></g> <g id=alarm-off><path d=\\\"M12 6c3.87 0 7 3.13 7 7 0 .84-.16 1.65-.43 2.4l1.52 1.52c.58-1.19.91-2.51.91-3.92 0-4.97-4.03-9-9-9-1.41 0-2.73.33-3.92.91L9.6 6.43C10.35 6.16 11.16 6 12 6zm10-.28l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM2.92 2.29L1.65 3.57 2.98 4.9l-1.11.93 1.42 1.42 1.11-.94.8.8C3.83 8.69 3 10.75 3 13c0 4.97 4.02 9 9 9 2.25 0 4.31-.83 5.89-2.2l2.2 2.2 1.27-1.27L3.89 3.27l-.97-.98zm13.55 16.1C15.26 19.39 13.7 20 12 20c-3.87 0-7-3.13-7-7 0-1.7.61-3.26 1.61-4.47l9.86 9.86zM8.02 3.28L6.6 1.86l-.86.71 1.42 1.42.86-.71z\\\"></path></g> <g id=alarm-on><path d=\\\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1.46-5.47L8.41 12.4l-1.06 1.06 3.18 3.18 6-6-1.06-1.06-4.93 4.95z\\\"></path></g> <g id=all-out><path d=\\\"M16.21 4.16l4 4v-4zm4 12l-4 4h4zm-12 4l-4-4v4zm-4-12l4-4h-4zm12.95-.95c-2.73-2.73-7.17-2.73-9.9 0s-2.73 7.17 0 9.9 7.17 2.73 9.9 0 2.73-7.16 0-9.9zm-1.1 8.8c-2.13 2.13-5.57 2.13-7.7 0s-2.13-5.57 0-7.7 5.57-2.13 7.7 0 2.13 5.57 0 7.7z\\\"></path></g> <g id=android><path d=\\\"M6 18c0 .55.45 1 1 1h1v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h2v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h1c.55 0 1-.45 1-1V8H6v10zM3.5 8C2.67 8 2 8.67 2 9.5v7c0 .83.67 1.5 1.5 1.5S5 17.33 5 16.5v-7C5 8.67 4.33 8 3.5 8zm17 0c-.83 0-1.5.67-1.5 1.5v7c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5zm-4.97-5.84l1.3-1.3c.2-.2.2-.51 0-.71-.2-.2-.51-.2-.71 0l-1.48 1.48C13.85 1.23 12.95 1 12 1c-.96 0-1.86.23-2.66.63L7.85.15c-.2-.2-.51-.2-.71 0-.2.2-.2.51 0 .71l1.31 1.31C6.97 3.26 6 5.01 6 7h12c0-1.99-.97-3.75-2.47-4.84zM10 5H9V4h1v1zm5 0h-1V4h1v1z\\\"></path></g> <g id=announcement><path d=\\\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 9h-2V5h2v6zm0 4h-2v-2h2v2z\\\"></path></g> <g id=apps><path d=\\\"M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z\\\"></path></g> <g id=archive><path d=\\\"M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z\\\"></path></g> <g id=arrow-back><path d=\\\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\\\"></path></g> <g id=arrow-downward><path d=\\\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\\\"></path></g> <g id=arrow-drop-down><path d=\\\"M7 10l5 5 5-5z\\\"></path></g> <g id=arrow-drop-down-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z\\\"></path></g> <g id=arrow-drop-up><path d=\\\"M7 14l5-5 5 5z\\\"></path></g> <g id=arrow-forward><path d=\\\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\\\"></path></g> <g id=arrow-upward><path d=\\\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\\\"></path></g> <g id=aspect-ratio><path d=\\\"M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z\\\"></path></g> <g id=assessment><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\\"></path></g> <g id=assignment><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\\\"></path></g> <g id=assignment-ind><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z\\\"></path></g> <g id=assignment-late><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-6 15h-2v-2h2v2zm0-4h-2V8h2v6zm-1-9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\\\"></path></g> <g id=assignment-return><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm4 12h-4v3l-5-5 5-5v3h4v4z\\\"></path></g> <g id=assignment-returned><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 15l-5-5h3V9h4v4h3l-5 5z\\\"></path></g> <g id=assignment-turned-in><path d=\\\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\\\"></path></g> <g id=attachment><path d=\\\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\\\"></path></g> <g id=autorenew><path d=\\\"M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z\\\"></path></g> <g id=backspace><path d=\\\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z\\\"></path></g> <g id=backup><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\\\"></path></g> <g id=block><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\\\"></path></g> <g id=book><path d=\\\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\\\"></path></g> <g id=bookmark><path d=\\\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=bookmark-border><path d=\\\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z\\\"></path></g> <g id=bug-report><path d=\\\"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\\\"></path></g> <g id=build><path d=\\\"M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z\\\"></path></g> <g id=cached><path d=\\\"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\\\"></path></g> <g id=camera-enhance><path d=\\\"M9 3L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2h-3.17L15 3H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-1l1.25-2.75L16 13l-2.75-1.25L12 9l-1.25 2.75L8 13l2.75 1.25z\\\"></path></g> <g id=cancel><path d=\\\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\\\"></path></g> <g id=card-giftcard><path d=\\\"M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\\\"></path></g> <g id=card-membership><path d=\\\"M20 2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h4v5l4-2 4 2v-5h4c1.11 0 2-.89 2-2V4c0-1.11-.89-2-2-2zm0 13H4v-2h16v2zm0-5H4V4h16v6z\\\"></path></g> <g id=card-travel><path d=\\\"M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z\\\"></path></g> <g id=change-history><path d=\\\"M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z\\\"></path></g> <g id=check><path d=\\\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\\\"></path></g> <g id=check-box><path d=\\\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\\\"></path></g> <g id=check-box-outline-blank><path d=\\\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=check-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\\\"></path></g> <g id=chevron-left><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"></path></g> <g id=chevron-right><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"></path></g> <g id=chrome-reader-mode><path d=\\\"M13 12h7v1.5h-7zm0-2.5h7V11h-7zm0 5h7V16h-7zM21 4H3c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 15h-9V6h9v13z\\\"></path></g> <g id=class><path d=\\\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\\\"></path></g> <g id=clear><path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\"></path></g> <g id=close><path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\"></path></g> <g id=cloud><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z\\\"></path></g> <g id=cloud-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.5 14H8c-1.66 0-3-1.34-3-3s1.34-3 3-3l.14.01C8.58 8.28 10.13 7 12 7c2.21 0 4 1.79 4 4h.5c1.38 0 2.5 1.12 2.5 2.5S17.88 16 16.5 16z\\\"></path></g> <g id=cloud-done><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z\\\"></path></g> <g id=cloud-download><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z\\\"></path></g> <g id=cloud-off><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z\\\"></path></g> <g id=cloud-queue><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z\\\"></path></g> <g id=cloud-upload><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\\\"></path></g> <g id=code><path d=\\\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\\\"></path></g> <g id=compare-arrows><path d=\\\"M9.01 14H2v2h7.01v3L13 15l-3.99-4v3zm5.98-1v-3H22V8h-7.01V5L11 9l3.99 4z\\\"></path></g> <g id=content-copy><path d=\\\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\\\"></path></g> <g id=content-cut><path d=\\\"M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z\\\"></path></g> <g id=content-paste><path d=\\\"M19 2h-4.18C14.4.84 13.3 0 12 0c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 18H5V4h2v3h10V4h2v16z\\\"></path></g> <g id=copyright><path d=\\\"M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91 1.05.34 1.7.34c.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=create><path d=\\\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\\\"></path></g> <g id=create-new-folder><path d=\\\"M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-1 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z\\\"></path></g> <g id=credit-card><path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"></path></g> <g id=dashboard><path d=\\\"M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z\\\"></path></g> <g id=date-range><path d=\\\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\\\"></path></g> <g id=delete><path d=\\\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\\\"></path></g> <g id=delete-forever><path d=\\\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\\\"></path></g> <g id=delete-sweep><path d=\\\"M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z\\\"></path></g> <g id=description><path d=\\\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\\\"></path></g> <g id=dns><path d=\\\"M20 13H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 19c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM20 3H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\\"></path></g> <g id=done><path d=\\\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\\\"></path></g> <g id=done-all><path d=\\\"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\\\"></path></g> <g id=donut-large><path d=\\\"M11 5.08V2c-5 .5-9 4.81-9 10s4 9.5 9 10v-3.08c-3-.48-6-3.4-6-6.92s3-6.44 6-6.92zM18.97 11H22c-.47-5-4-8.53-9-9v3.08C16 5.51 18.54 8 18.97 11zM13 18.92V22c5-.47 8.53-4 9-9h-3.03c-.43 3-2.97 5.49-5.97 5.92z\\\"></path></g> <g id=donut-small><path d=\\\"M11 9.16V2c-5 .5-9 4.79-9 10s4 9.5 9 10v-7.16c-1-.41-2-1.52-2-2.84s1-2.43 2-2.84zM14.86 11H22c-.48-4.75-4-8.53-9-9v7.16c1 .3 1.52.98 1.86 1.84zM13 14.84V22c5-.47 8.52-4.25 9-9h-7.14c-.34.86-.86 1.54-1.86 1.84z\\\"></path></g> <g id=drafts><path d=\\\"M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z\\\"></path></g> <g id=eject><path d=\\\"M5 17h14v2H5zm7-12L5.33 15h13.34z\\\"></path></g> <g id=error><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\\\"></path></g> <g id=error-outline><path d=\\\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\\\"></path></g> <g id=euro-symbol><path d=\\\"M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z\\\"></path></g> <g id=event><path d=\\\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\\\"></path></g> <g id=event-seat><path d=\\\"M4 18v3h3v-3h10v3h3v-6H4zm15-8h3v3h-3zM2 10h3v3H2zm15 3H7V5c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2v8z\\\"></path></g> <g id=exit-to-app><path d=\\\"M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=expand-less><path d=\\\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\\\"></path></g> <g id=expand-more><path d=\\\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\\\"></path></g> <g id=explore><path d=\\\"M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z\\\"></path></g> <g id=extension><path d=\\\"M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z\\\"></path></g> <g id=face><path d=\\\"M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z\\\"></path></g> <g id=favorite><path d=\\\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\\\"></path></g> <g id=favorite-border><path d=\\\"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\\\"></path></g> <g id=feedback><path d=\\\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z\\\"></path></g> <g id=file-download><path d=\\\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\\\"></path></g> <g id=file-upload><path d=\\\"M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z\\\"></path></g> <g id=filter-list><path d=\\\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\\\"></path></g> <g id=find-in-page><path d=\\\"M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z\\\"></path></g> <g id=find-replace><path d=\\\"M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z\\\"></path></g> <g id=fingerprint><path d=\\\"M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z\\\"></path></g> <g id=first-page><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"></path></g> <g id=flag><path d=\\\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\\\"></path></g> <g id=flight-land><path d=\\\"M2.5 19h19v2h-19zm7.18-5.73l4.35 1.16 5.31 1.42c.8.21 1.62-.26 1.84-1.06.21-.8-.26-1.62-1.06-1.84l-5.31-1.42-2.76-9.02L10.12 2v8.28L5.15 8.95l-.93-2.32-1.45-.39v5.17l1.6.43 5.31 1.43z\\\"></path></g> <g id=flight-takeoff><path d=\\\"M2.5 19h19v2h-19zm19.57-9.36c-.21-.8-1.04-1.28-1.84-1.06L14.92 10l-6.9-6.43-1.93.51 4.14 7.17-4.97 1.33-1.97-1.54-1.45.39 1.82 3.16.77 1.33 1.6-.43 5.31-1.42 4.35-1.16L21 11.49c.81-.23 1.28-1.05 1.07-1.85z\\\"></path></g> <g id=flip-to-back><path d=\\\"M9 7H7v2h2V7zm0 4H7v2h2v-2zm0-8c-1.11 0-2 .9-2 2h2V3zm4 12h-2v2h2v-2zm6-12v2h2c0-1.1-.9-2-2-2zm-6 0h-2v2h2V3zM9 17v-2H7c0 1.1.89 2 2 2zm10-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zM5 7H3v12c0 1.1.89 2 2 2h12v-2H5V7zm10-2h2V3h-2v2zm0 12h2v-2h-2v2z\\\"></path></g> <g id=flip-to-front><path d=\\\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3c0 1.1.89 2 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9c-1.11 0-2 .9-2 2v10c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z\\\"></path></g> <g id=folder><path d=\\\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\\\"></path></g> <g id=folder-open><path d=\\\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\\\"></path></g> <g id=folder-shared><path d=\\\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-5 3c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm4 8h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2v1z\\\"></path></g> <g id=font-download><path d=\\\"M9.93 13.5h4.14L12 7.98zM20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4.05 16.5l-1.14-3H9.17l-1.12 3H5.96l5.11-13h1.86l5.11 13h-2.09z\\\"></path></g> <g id=forward><path d=\\\"M12 8V4l8 8-8 8v-4H4V8z\\\"></path></g> <g id=fullscreen><path d=\\\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\\\"></path></g> <g id=fullscreen-exit><path d=\\\"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\\\"></path></g> <g id=g-translate><path d=\\\"M20 5h-9.12L10 2H4c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h7l1 3h8c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zM7.17 14.59c-2.25 0-4.09-1.83-4.09-4.09s1.83-4.09 4.09-4.09c1.04 0 1.99.37 2.74 1.07l.07.06-1.23 1.18-.06-.05c-.29-.27-.78-.59-1.52-.59-1.31 0-2.38 1.09-2.38 2.42s1.07 2.42 2.38 2.42c1.37 0 1.96-.87 2.12-1.46H7.08V9.91h3.95l.01.07c.04.21.05.4.05.61 0 2.35-1.61 4-3.92 4zm6.03-1.71c.33.6.74 1.18 1.19 1.7l-.54.53-.65-2.23zm.77-.76h-.99l-.31-1.04h3.99s-.34 1.31-1.56 2.74c-.52-.62-.89-1.23-1.13-1.7zM21 20c0 .55-.45 1-1 1h-7l2-2-.81-2.77.92-.92L17.79 18l.73-.73-2.71-2.68c.9-1.03 1.6-2.25 1.92-3.51H19v-1.04h-3.64V9h-1.04v1.04h-1.96L11.18 6H20c.55 0 1 .45 1 1v13z\\\"></path></g> <g id=gavel><path d=\\\"M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z\\\"></path></g> <g id=gesture><path d=\\\"M4.59 6.89c.7-.71 1.4-1.35 1.71-1.22.5.2 0 1.03-.3 1.52-.25.42-2.86 3.89-2.86 6.31 0 1.28.48 2.34 1.34 2.98.75.56 1.74.73 2.64.46 1.07-.31 1.95-1.4 3.06-2.77 1.21-1.49 2.83-3.44 4.08-3.44 1.63 0 1.65 1.01 1.76 1.79-3.78.64-5.38 3.67-5.38 5.37 0 1.7 1.44 3.09 3.21 3.09 1.63 0 4.29-1.33 4.69-6.1H21v-2.5h-2.47c-.15-1.65-1.09-4.2-4.03-4.2-2.25 0-4.18 1.91-4.94 2.84-.58.73-2.06 2.48-2.29 2.72-.25.3-.68.84-1.11.84-.45 0-.72-.83-.36-1.92.35-1.09 1.4-2.86 1.85-3.52.78-1.14 1.3-1.92 1.3-3.28C8.95 3.69 7.31 3 6.44 3 5.12 3 3.97 4 3.72 4.25c-.36.36-.66.66-.88.93l1.75 1.71zm9.29 11.66c-.31 0-.74-.26-.74-.72 0-.6.73-2.2 2.87-2.76-.3 2.69-1.43 3.48-2.13 3.48z\\\"></path></g> <g id=get-app><path d=\\\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\\\"></path></g> <g id=gif><path d=\\\"M11.5 9H13v6h-1.5zM9 9H6c-.6 0-1 .5-1 1v4c0 .5.4 1 1 1h3c.6 0 1-.5 1-1v-2H8.5v1.5h-2v-3H10V10c0-.5-.4-1-1-1zm10 1.5V9h-4.5v6H16v-2h2v-1.5h-2v-1z\\\"></path></g> <g id=grade><path d=\\\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\\\"></path></g> <g id=group-work><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\\\"></path></g> <g id=help><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\\\"></path></g> <g id=help-outline><path d=\\\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\\\"></path></g> <g id=highlight-off><path d=\\\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=history><path d=\\\"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\\\"></path></g> <g id=home><path d=\\\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\\\"></path></g> <g id=hourglass-empty><path d=\\\"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\\\"></path></g> <g id=hourglass-full><path d=\\\"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6z\\\"></path></g> <g id=http><path d=\\\"M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z\\\"></path></g> <g id=https><path d=\\\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\\\"></path></g> <g id=important-devices><path d=\\\"M23 11.01L18 11c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-9c0-.55-.45-.99-1-.99zM23 20h-5v-7h5v7zM20 2H2C.89 2 0 2.89 0 4v12c0 1.1.89 2 2 2h7v2H7v2h8v-2h-2v-2h2v-2H2V4h18v5h2V4c0-1.11-.9-2-2-2zm-8.03 7L11 6l-.97 3H7l2.47 1.76-.94 2.91 2.47-1.8 2.47 1.8-.94-2.91L15 9h-3.03z\\\"></path></g> <g id=inbox><path d=\\\"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z\\\"></path></g> <g id=indeterminate-check-box><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\\\"></path></g> <g id=info><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\\\"></path></g> <g id=info-outline><path d=\\\"M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z\\\"></path></g> <g id=input><path d=\\\"M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z\\\"></path></g> <g id=invert-colors><path d=\\\"M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z\\\"></path></g> <g id=label><path d=\\\"M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z\\\"></path></g> <g id=label-outline><path d=\\\"M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z\\\"></path></g> <g id=language><path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z\\\"></path></g> <g id=last-page><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"></path></g> <g id=launch><path d=\\\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\\\"></path></g> <g id=lightbulb-outline><path d=\\\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\\\"></path></g> <g id=line-style><path d=\\\"M3 16h5v-2H3v2zm6.5 0h5v-2h-5v2zm6.5 0h5v-2h-5v2zM3 20h2v-2H3v2zm4 0h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 12h8v-2H3v2zm10 0h8v-2h-8v2zM3 4v4h18V4H3z\\\"></path></g> <g id=line-weight><path d=\\\"M3 17h18v-2H3v2zm0 3h18v-1H3v1zm0-7h18v-3H3v3zm0-9v4h18V4H3z\\\"></path></g> <g id=link><path d=\\\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\\\"></path></g> <g id=list><path d=\\\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\\\"></path></g> <g id=lock><path d=\\\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\\\"></path></g> <g id=lock-open><path d=\\\"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\\\"></path></g> <g id=lock-outline><path d=\\\"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM18 20H6V10h12v10z\\\"></path></g> <g id=low-priority><path d=\\\"M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z\\\"></path></g> <g id=loyalty><path d=\\\"M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7zm11.77 8.27L13 19.54l-4.27-4.27C8.28 14.81 8 14.19 8 13.5c0-1.38 1.12-2.5 2.5-2.5.69 0 1.32.28 1.77.74l.73.72.73-.73c.45-.45 1.08-.73 1.77-.73 1.38 0 2.5 1.12 2.5 2.5 0 .69-.28 1.32-.73 1.77z\\\"></path></g> <g id=mail><path d=\\\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\\\"></path></g> <g id=markunread><path d=\\\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\\\"></path></g> <g id=markunread-mailbox><path d=\\\"M20 6H10v6H8V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z\\\"></path></g> <g id=menu><path d=\\\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\\\"></path></g> <g id=more-horiz><path d=\\\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\"></path></g> <g id=more-vert><path d=\\\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\"></path></g> <g id=motorcycle><path d=\\\"M19.44 9.03L15.41 5H11v2h3.59l2 2H5c-2.8 0-5 2.2-5 5s2.2 5 5 5c2.46 0 4.45-1.69 4.9-4h1.65l2.77-2.77c-.21.54-.32 1.14-.32 1.77 0 2.8 2.2 5 5 5s5-2.2 5-5c0-2.65-1.97-4.77-4.56-4.97zM7.82 15C7.4 16.15 6.28 17 5 17c-1.63 0-3-1.37-3-3s1.37-3 3-3c1.28 0 2.4.85 2.82 2H5v2h2.82zM19 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z\\\"></path></g> <g id=move-to-inbox><path d=\\\"M19 3H4.99c-1.11 0-1.98.9-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10zm-3-5h-2V7h-4v3H8l4 4 4-4z\\\"></path></g> <g id=next-week><path d=\\\"M20 7h-4V5c0-.55-.22-1.05-.59-1.41C15.05 3.22 14.55 3 14 3h-4c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zm1 13.5l-1-1 3-3-3-3 1-1 4 4-4 4z\\\"></path></g> <g id=note-add><path d=\\\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z\\\"></path></g> <g id=offline-pin><path d=\\\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z\\\"></path></g> <g id=opacity><path d=\\\"M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z\\\"></path></g> <g id=open-in-browser><path d=\\\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z\\\"></path></g> <g id=open-in-new><path d=\\\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\\\"></path></g> <g id=open-with><path d=\\\"M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z\\\"></path></g> <g id=pageview><path d=\\\"M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z\\\"></path></g> <g id=pan-tool><path d=\\\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\\\"></path></g> <g id=payment><path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"></path></g> <g id=perm-camera-mic><path d=\\\"M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v-2.09c-2.83-.48-5-2.94-5-5.91h2c0 2.21 1.79 4 4 4s4-1.79 4-4h2c0 2.97-2.17 5.43-5 5.91V21h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-6 8c0 1.1-.9 2-2 2s-2-.9-2-2V9c0-1.1.9-2 2-2s2 .9 2 2v4z\\\"></path></g> <g id=perm-contact-calendar><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z\\\"></path></g> <g id=perm-data-setting><path d=\\\"M18.99 11.5c.34 0 .67.03 1 .07L20 0 0 20h11.56c-.04-.33-.07-.66-.07-1 0-4.14 3.36-7.5 7.5-7.5zm3.71 7.99c.02-.16.04-.32.04-.49 0-.17-.01-.33-.04-.49l1.06-.83c.09-.08.12-.21.06-.32l-1-1.73c-.06-.11-.19-.15-.31-.11l-1.24.5c-.26-.2-.54-.37-.85-.49l-.19-1.32c-.01-.12-.12-.21-.24-.21h-2c-.12 0-.23.09-.25.21l-.19 1.32c-.3.13-.59.29-.85.49l-1.24-.5c-.11-.04-.24 0-.31.11l-1 1.73c-.06.11-.04.24.06.32l1.06.83c-.02.16-.03.32-.03.49 0 .17.01.33.03.49l-1.06.83c-.09.08-.12.21-.06.32l1 1.73c.06.11.19.15.31.11l1.24-.5c.26.2.54.37.85.49l.19 1.32c.02.12.12.21.25.21h2c.12 0 .23-.09.25-.21l.19-1.32c.3-.13.59-.29.84-.49l1.25.5c.11.04.24 0 .31-.11l1-1.73c.06-.11.03-.24-.06-.32l-1.07-.83zm-3.71 1.01c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\\\"></path></g> <g id=perm-device-information><path d=\\\"M13 7h-2v2h2V7zm0 4h-2v6h2v-6zm4-9.99L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z\\\"></path></g> <g id=perm-identity><path d=\\\"M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z\\\"></path></g> <g id=perm-media><path d=\\\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\\\"></path></g> <g id=perm-phone-msg><path d=\\\"M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z\\\"></path></g> <g id=perm-scan-wifi><path d=\\\"M12 3C6.95 3 3.15 4.85 0 7.23L12 22 24 7.25C20.85 4.87 17.05 3 12 3zm1 13h-2v-6h2v6zm-2-8V6h2v2h-2z\\\"></path></g> <g id=pets><circle cx=4.5 cy=9.5 r=2.5></circle><circle cx=9 cy=5.5 r=2.5></circle><circle cx=15 cy=5.5 r=2.5></circle><circle cx=19.5 cy=9.5 r=2.5></circle><path d=\\\"M17.34 14.86c-.87-1.02-1.6-1.89-2.48-2.91-.46-.54-1.05-1.08-1.75-1.32-.11-.04-.22-.07-.33-.09-.25-.04-.52-.04-.78-.04s-.53 0-.79.05c-.11.02-.22.05-.33.09-.7.24-1.28.78-1.75 1.32-.87 1.02-1.6 1.89-2.48 2.91-1.31 1.31-2.92 2.76-2.62 4.79.29 1.02 1.02 2.03 2.33 2.32.73.15 3.06-.44 5.54-.44h.18c2.48 0 4.81.58 5.54.44 1.31-.29 2.04-1.31 2.33-2.32.31-2.04-1.3-3.49-2.61-4.8z\\\"></path></g> <g id=picture-in-picture><path d=\\\"M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z\\\"></path></g> <g id=picture-in-picture-alt><path d=\\\"M19 11h-8v6h8v-6zm4 8V4.98C23 3.88 22.1 3 21 3H3c-1.1 0-2 .88-2 1.98V19c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H3V4.97h18v14.05z\\\"></path></g> <g id=play-for-work><path d=\\\"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\\\"></path></g> <g id=polymer><path d=\\\"M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z\\\"></path></g> <g id=power-settings-new><path d=\\\"M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z\\\"></path></g> <g id=pregnant-woman><path d=\\\"M9 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm7 9c-.01-1.34-.83-2.51-2-3 0-1.66-1.34-3-3-3s-3 1.34-3 3v7h2v5h3v-5h3v-4z\\\"></path></g> <g id=print><path d=\\\"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\\\"></path></g> <g id=query-builder><path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\\\"></path></g> <g id=question-answer><path d=\\\"M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z\\\"></path></g> <g id=radio-button-checked><path d=\\\"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\\\"></path></g> <g id=radio-button-unchecked><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\\\"></path></g> <g id=receipt><path d=\\\"M18 17H6v-2h12v2zm0-4H6v-2h12v2zm0-4H6V7h12v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z\\\"></path></g> <g id=record-voice-over><circle cx=9 cy=9 r=4></circle><path d=\\\"M9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z\\\"></path></g> <g id=redeem><path d=\\\"M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\\\"></path></g> <g id=redo><path d=\\\"M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z\\\"></path></g> <g id=refresh><path d=\\\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\\\"></path></g> <g id=remove><path d=\\\"M19 13H5v-2h14v2z\\\"></path></g> <g id=remove-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\\\"></path></g> <g id=remove-circle-outline><path d=\\\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=remove-shopping-cart><path d=\\\"M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z\\\"></path></g> <g id=reorder><path d=\\\"M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z\\\"></path></g> <g id=reply><path d=\\\"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\\\"></path></g> <g id=reply-all><path d=\\\"M7 8V5l-7 7 7 7v-3l-4-4 4-4zm6 1V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\\\"></path></g> <g id=report><path d=\\\"M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z\\\"></path></g> <g id=report-problem><path d=\\\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\\\"></path></g> <g id=restore><path d=\\\"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\\\"></path></g> <g id=restore-page><path d=\\\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-2 16c-2.05 0-3.81-1.24-4.58-3h1.71c.63.9 1.68 1.5 2.87 1.5 1.93 0 3.5-1.57 3.5-3.5S13.93 9.5 12 9.5c-1.35 0-2.52.78-3.1 1.9l1.6 1.6h-4V9l1.3 1.3C8.69 8.92 10.23 8 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z\\\"></path></g> <g id=room><path d=\\\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\\\"></path></g> <g id=rounded-corner><path d=\\\"M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z\\\"></path></g> <g id=rowing><path d=\\\"M8.5 14.5L4 19l1.5 1.5L9 17h2l-2.5-2.5zM15 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 20.01L18 24l-2.99-3.01V19.5l-7.1-7.09c-.31.05-.61.07-.91.07v-2.16c1.66.03 3.61-.87 4.67-2.04l1.4-1.55c.19-.21.43-.38.69-.5.29-.14.62-.23.96-.23h.03C15.99 6.01 17 7.02 17 8.26v5.75c0 .84-.35 1.61-.92 2.16l-3.58-3.58v-2.27c-.63.52-1.43 1.02-2.29 1.39L16.5 18H18l3 3.01z\\\"></path></g> <g id=save><path d=\\\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\\\"></path></g> <g id=schedule><path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\\\"></path></g> <g id=search><path d=\\\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\\\"></path></g> <g id=select-all><path d=\\\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z\\\"></path></g> <g id=send><path d=\\\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\\\"></path></g> <g id=settings><path d=\\\"M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z\\\"></path></g> <g id=settings-applications><path d=\\\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z\\\"></path></g> <g id=settings-backup-restore><path d=\\\"M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z\\\"></path></g> <g id=settings-bluetooth><path d=\\\"M11 24h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zm2.71-18.29L12 0h-1v7.59L6.41 3 5 4.41 10.59 10 5 15.59 6.41 17 11 12.41V20h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 3.83l1.88 1.88L13 7.59V3.83zm1.88 10.46L13 16.17v-3.76l1.88 1.88z\\\"></path></g> <g id=settings-brightness><path d=\\\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02zM8 16h2.5l1.5 1.5 1.5-1.5H16v-2.5l1.5-1.5-1.5-1.5V8h-2.5L12 6.5 10.5 8H8v2.5L6.5 12 8 13.5V16zm4-7c1.66 0 3 1.34 3 3s-1.34 3-3 3V9z\\\"></path></g> <g id=settings-cell><path d=\\\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z\\\"></path></g> <g id=settings-ethernet><path d=\\\"M7.77 6.76L6.23 5.48.82 12l5.41 6.52 1.54-1.28L3.42 12l4.35-5.24zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6.77-7.52l-1.54 1.28L20.58 12l-4.35 5.24 1.54 1.28L23.18 12l-5.41-6.52z\\\"></path></g> <g id=settings-input-antenna><path d=\\\"M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z\\\"></path></g> <g id=settings-input-component><path d=\\\"M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z\\\"></path></g> <g id=settings-input-composite><path d=\\\"M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z\\\"></path></g> <g id=settings-input-hdmi><path d=\\\"M18 7V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v3H5v6l3 6v3h8v-3l3-6V7h-1zM8 4h8v3h-2V5h-1v2h-2V5h-1v2H8V4z\\\"></path></g> <g id=settings-input-svideo><path d=\\\"M8 11.5c0-.83-.67-1.5-1.5-1.5S5 10.67 5 11.5 5.67 13 6.5 13 8 12.33 8 11.5zm7-5c0-.83-.67-1.5-1.5-1.5h-3C9.67 5 9 5.67 9 6.5S9.67 8 10.5 8h3c.83 0 1.5-.67 1.5-1.5zM8.5 15c-.83 0-1.5.67-1.5 1.5S7.67 18 8.5 18s1.5-.67 1.5-1.5S9.33 15 8.5 15zM12 1C5.93 1 1 5.93 1 12s4.93 11 11 11 11-4.93 11-11S18.07 1 12 1zm0 20c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm5.5-11c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-2 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\\\"></path></g> <g id=settings-overscan><path d=\\\"M12.01 5.5L10 8h4l-1.99-2.5zM18 10v4l2.5-1.99L18 10zM6 10l-2.5 2.01L6 14v-4zm8 6h-4l2.01 2.5L14 16zm7-13H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z\\\"></path></g> <g id=settings-phone><path d=\\\"M13 9h-2v2h2V9zm4 0h-2v2h2V9zm3 6.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 9v2h2V9h-2z\\\"></path></g> <g id=settings-power><path d=\\\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z\\\"></path></g> <g id=settings-remote><path d=\\\"M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z\\\"></path></g> <g id=settings-voice><path d=\\\"M7 24h2v-2H7v2zm5-11c1.66 0 2.99-1.34 2.99-3L15 4c0-1.66-1.34-3-3-3S9 2.34 9 4v6c0 1.66 1.34 3 3 3zm-1 11h2v-2h-2v2zm4 0h2v-2h-2v2zm4-14h-1.7c0 3-2.54 5.1-5.3 5.1S6.7 13 6.7 10H5c0 3.41 2.72 6.23 6 6.72V20h2v-3.28c3.28-.49 6-3.31 6-6.72z\\\"></path></g> <g id=shop><path d=\\\"M16 6V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H2v13c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6h-6zm-6-2h4v2h-4V4zM9 18V9l7.5 4L9 18z\\\"></path></g> <g id=shop-two><path d=\\\"M3 9H1v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2H3V9zm15-4V3c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H5v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2V5h-5zm-6-2h4v2h-4V3zm0 12V8l5.5 3-5.5 4z\\\"></path></g> <g id=shopping-basket><path d=\\\"M17.21 9l-4.38-6.56c-.19-.28-.51-.42-.83-.42-.32 0-.64.14-.83.43L6.79 9H2c-.55 0-1 .45-1 1 0 .09.01.18.04.27l2.54 9.27c.23.84 1 1.46 1.92 1.46h13c.92 0 1.69-.62 1.93-1.46l2.54-9.27L23 10c0-.55-.45-1-1-1h-4.79zM9 9l3-4.4L15 9H9zm3 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\\"></path></g> <g id=shopping-cart><path d=\\\"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\\\"></path></g> <g id=sort><path d=\\\"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z\\\"></path></g> <g id=speaker-notes><path d=\\\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z\\\"></path></g> <g id=speaker-notes-off><path d=\\\"M10.54 11l-.54-.54L7.54 8 6 6.46 2.38 2.84 1.27 1.73 0 3l2.01 2.01L2 22l4-4h9l5.73 5.73L22 22.46 17.54 18l-7-7zM8 14H6v-2h2v2zm-2-3V9l2 2H6zm14-9H4.08L10 7.92V6h8v2h-7.92l1 1H18v2h-4.92l6.99 6.99C21.14 17.95 22 17.08 22 16V4c0-1.1-.9-2-2-2z\\\"></path></g> <g id=spellcheck><path d=\\\"M12.45 16h2.09L9.43 3H7.57L2.46 16h2.09l1.12-3h5.64l1.14 3zm-6.02-5L8.5 5.48 10.57 11H6.43zm15.16.59l-8.09 8.09L9.83 16l-1.41 1.41 5.09 5.09L23 13l-1.41-1.41z\\\"></path></g> <g id=star><path d=\\\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\\\"></path></g> <g id=star-border><path d=\\\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\\\"></path></g> <g id=star-half><path d=\\\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\\\"></path></g> <g id=stars><path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z\\\"></path></g> <g id=store><path d=\\\"M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z\\\"></path></g> <g id=subdirectory-arrow-left><path d=\\\"M11 9l1.42 1.42L8.83 14H18V4h2v12H8.83l3.59 3.58L11 21l-6-6 6-6z\\\"></path></g> <g id=subdirectory-arrow-right><path d=\\\"M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z\\\"></path></g> <g id=subject><path d=\\\"M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z\\\"></path></g> <g id=supervisor-account><path d=\\\"M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z\\\"></path></g> <g id=swap-horiz><path d=\\\"M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z\\\"></path></g> <g id=swap-vert><path d=\\\"M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z\\\"></path></g> <g id=swap-vertical-circle><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z\\\"></path></g> <g id=system-update-alt><path d=\\\"M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z\\\"></path></g> <g id=tab><path d=\\\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z\\\"></path></g> <g id=tab-unselected><path d=\\\"M1 9h2V7H1v2zm0 4h2v-2H1v2zm0-8h2V3c-1.1 0-2 .9-2 2zm8 16h2v-2H9v2zm-8-4h2v-2H1v2zm2 4v-2H1c0 1.1.9 2 2 2zM21 3h-8v6h10V5c0-1.1-.9-2-2-2zm0 14h2v-2h-2v2zM9 5h2V3H9v2zM5 21h2v-2H5v2zM5 5h2V3H5v2zm16 16c1.1 0 2-.9 2-2h-2v2zm0-8h2v-2h-2v2zm-8 8h2v-2h-2v2zm4 0h2v-2h-2v2z\\\"></path></g> <g id=text-format><path d=\\\"M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z\\\"></path></g> <g id=theaters><path d=\\\"M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z\\\"></path></g> <g id=thumb-down><path d=\\\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\\\"></path></g> <g id=thumb-up><path d=\\\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z\\\"></path></g> <g id=thumbs-up-down><path d=\\\"M12 6c0-.55-.45-1-1-1H5.82l.66-3.18.02-.23c0-.31-.13-.59-.33-.8L5.38 0 .44 4.94C.17 5.21 0 5.59 0 6v6.5c0 .83.67 1.5 1.5 1.5h6.75c.62 0 1.15-.38 1.38-.91l2.26-5.29c.07-.17.11-.36.11-.55V6zm10.5 4h-6.75c-.62 0-1.15.38-1.38.91l-2.26 5.29c-.07.17-.11.36-.11.55V18c0 .55.45 1 1 1h5.18l-.66 3.18-.02.24c0 .31.13.59.33.8l.79.78 4.94-4.94c.27-.27.44-.65.44-1.06v-6.5c0-.83-.67-1.5-1.5-1.5z\\\"></path></g> <g id=timeline><path d=\\\"M23 8c0 1.1-.9 2-2 2-.18 0-.35-.02-.51-.07l-3.56 3.55c.05.16.07.34.07.52 0 1.1-.9 2-2 2s-2-.9-2-2c0-.18.02-.36.07-.52l-2.55-2.55c-.16.05-.34.07-.52.07s-.36-.02-.52-.07l-4.55 4.56c.05.16.07.33.07.51 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2c.18 0 .35.02.51.07l4.56-4.55C8.02 9.36 8 9.18 8 9c0-1.1.9-2 2-2s2 .9 2 2c0 .18-.02.36-.07.52l2.55 2.55c.16-.05.34-.07.52-.07s.36.02.52.07l3.55-3.56C19.02 8.35 19 8.18 19 8c0-1.1.9-2 2-2s2 .9 2 2z\\\"></path></g> <g id=toc><path d=\\\"M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z\\\"></path></g> <g id=today><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"></path></g> <g id=toll><path d=\\\"M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zM3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z\\\"></path></g> <g id=touch-app><path d=\\\"M9 11.24V7.5C9 6.12 10.12 5 11.5 5S14 6.12 14 7.5v3.74c1.21-.81 2-2.18 2-3.74C16 5.01 13.99 3 11.5 3S7 5.01 7 7.5c0 1.56.79 2.93 2 3.74zm9.84 4.63l-4.54-2.26c-.17-.07-.35-.11-.54-.11H13v-6c0-.83-.67-1.5-1.5-1.5S10 6.67 10 7.5v10.74l-3.43-.72c-.08-.01-.15-.03-.24-.03-.31 0-.59.13-.79.33l-.79.8 4.94 4.94c.27.27.65.44 1.06.44h6.79c.75 0 1.33-.55 1.44-1.28l.75-5.27c.01-.07.02-.14.02-.2 0-.62-.38-1.16-.91-1.38z\\\"></path></g> <g id=track-changes><path d=\\\"M19.07 4.93l-1.41 1.41C19.1 7.79 20 9.79 20 12c0 4.42-3.58 8-8 8s-8-3.58-8-8c0-4.08 3.05-7.44 7-7.93v2.02C8.16 6.57 6 9.03 6 12c0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.66-.67-3.16-1.76-4.24l-1.41 1.41C15.55 9.9 16 10.9 16 12c0 2.21-1.79 4-4 4s-4-1.79-4-4c0-1.86 1.28-3.41 3-3.86v2.14c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V2h-1C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-2.76-1.12-5.26-2.93-7.07z\\\"></path></g> <g id=translate><path d=\\\"M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z\\\"></path></g> <g id=trending-down><path d=\\\"M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z\\\"></path></g> <g id=trending-flat><path d=\\\"M22 12l-4-4v3H3v2h15v3z\\\"></path></g> <g id=trending-up><path d=\\\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\\\"></path></g> <g id=turned-in><path d=\\\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=turned-in-not><path d=\\\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z\\\"></path></g> <g id=unarchive><path d=\\\"M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.15.55L3.46 5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12 5l.82-1h12l.93 1H5.12z\\\"></path></g> <g id=undo><path d=\\\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\\\"></path></g> <g id=unfold-less><path d=\\\"M7.41 18.59L8.83 20 12 16.83 15.17 20l1.41-1.41L12 14l-4.59 4.59zm9.18-13.18L15.17 4 12 7.17 8.83 4 7.41 5.41 12 10l4.59-4.59z\\\"></path></g> <g id=unfold-more><path d=\\\"M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z\\\"></path></g> <g id=update><path d=\\\"M21 10.12h-6.78l2.74-2.82c-2.73-2.7-7.15-2.8-9.88-.1-2.73 2.71-2.73 7.08 0 9.79 2.73 2.71 7.15 2.71 9.88 0C18.32 15.65 19 14.08 19 12.1h2c0 1.98-.88 4.55-2.64 6.29-3.51 3.48-9.21 3.48-12.72 0-3.5-3.47-3.53-9.11-.02-12.58 3.51-3.47 9.14-3.47 12.65 0L21 3v7.12zM12.5 8v4.25l3.5 2.08-.72 1.21L11 13V8h1.5z\\\"></path></g> <g id=verified-user><path d=\\\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\\\"></path></g> <g id=view-agenda><path d=\\\"M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z\\\"></path></g> <g id=view-array><path d=\\\"M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z\\\"></path></g> <g id=view-carousel><path d=\\\"M7 19h10V4H7v15zm-5-2h4V6H2v11zM18 6v11h4V6h-4z\\\"></path></g> <g id=view-column><path d=\\\"M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z\\\"></path></g> <g id=view-day><path d=\\\"M2 21h19v-3H2v3zM20 8H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zM2 3v3h19V3H2z\\\"></path></g> <g id=view-headline><path d=\\\"M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z\\\"></path></g> <g id=view-list><path d=\\\"M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z\\\"></path></g> <g id=view-module><path d=\\\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\\\"></path></g> <g id=view-quilt><path d=\\\"M10 18h5v-6h-5v6zm-6 0h5V5H4v13zm12 0h5v-6h-5v6zM10 5v6h11V5H10z\\\"></path></g> <g id=view-stream><path d=\\\"M4 18h17v-6H4v6zM4 5v6h17V5H4z\\\"></path></g> <g id=view-week><path d=\\\"M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z\\\"></path></g> <g id=visibility><path d=\\\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\\\"></path></g> <g id=visibility-off><path d=\\\"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\\\"></path></g> <g id=warning><path d=\\\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\\\"></path></g> <g id=watch-later><path d=\\\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z\\\"></path></g> <g id=weekend><path d=\\\"M21 10c-1.1 0-2 .9-2 2v3H5v-3c0-1.1-.9-2-2-2s-2 .9-2 2v5c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2zm-3-5H6c-1.1 0-2 .9-2 2v2.15c1.16.41 2 1.51 2 2.82V14h12v-2.03c0-1.3.84-2.4 2-2.82V7c0-1.1-.9-2-2-2z\\\"></path></g> <g id=work><path d=\\\"M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z\\\"></path></g> <g id=youtube-searched-for><path d=\\\"M17.01 14h-.8l-.27-.27c.98-1.14 1.57-2.61 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5s-6.5 3-6.5 6.5H2l3.84 4 4.16-4H6.51C6.51 7 8.53 5 11.01 5s4.5 2.01 4.5 4.5c0 2.48-2.02 4.5-4.5 4.5-.65 0-1.26-.14-1.82-.38L7.71 15.1c.97.57 2.09.9 3.3.9 1.61 0 3.08-.59 4.22-1.57l.27.27v.79l5.01 4.99L22 19l-4.99-5z\\\"></path></g> <g id=zoom-in><path d=\\\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z\\\"></path></g> <g id=zoom-out><path d=\\\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z\\\"></path></g> </defs></svg> </iron-iconset-svg>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(28);\n\n__webpack_require__(3);\n\n__webpack_require__(15);\n\n__webpack_require__(29);\n\n__webpack_require__(10);\n\n__webpack_require__(47);\n\n__webpack_require__(16);\n\n(function () {\n  'use strict';\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n\n  Polymer.ElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyEffects}\n     */\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes together to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Object} Object containing own properties for this class\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', klass))) {\n        klass.__ownProperties = klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n        /** @type {PolymerElementConstructor} */klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Array} Array containing own observers for this class\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(JSCompiler_renameProperty('__ownObservers', klass))) {\n        klass.__ownObservers = klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n        /** @type {PolymerElementConstructor} */klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     *\n     * @param {Object} flattenedProps Bag to collect flattened properties into\n     * @param {Object} props Bag of properties to add to `flattenedProps`\n     * @return {Object} The input `flattenedProps` bag\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     * @suppress {missingProperties} class.prototype is not a property for some reason?\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(JSCompiler_renameProperty('__classProperties', klass))) {\n        klass.__classProperties = flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(Object.create(propertiesForClass( /** @type {PolymerElementConstructor} */superCtor)), klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     *   that have default values\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {boolean} True if all metaprogramming for this class has been\n     *   completed\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = /** @type {PolymerElementConstructor} */klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a static `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @private\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = /** @type {PolymerElementConstructor} */klass.prototype;\n      if (klass.hasOwnProperty(JSCompiler_renameProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *    and effects to\n     * @param {Object} properties Flattened bag of property descriptors for\n     *    this class\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {Object} observers Flattened array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicFns) {\n      for (let i = 0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is deserialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {string} name Name of the property.\n     * @param {Object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {Object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @unrestricted\n     * @implements {Polymer_ElementMixin}\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template that will be stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @return {HTMLTemplateElement|string} Template to be stamped\n       */\n      static get template() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n          this._template = Polymer.DomModule && Polymer.DomModule.import(\n          /** @type {PolymerElementConstructor}*/this.is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf( /** @type {PolymerElementConstructor}*/this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @return {string} The import path for this element class\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n          const module = Polymer.DomModule && Polymer.DomModule.import( /** @type {PolymerElementConstructor} */this.is);\n          this._importPath = module ? module.assetpath : '' || Object.getPrototypeOf( /** @type {PolymerElementConstructor}*/this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      constructor() {\n        super();\n        /** @type {HTMLTemplateElement} */\n        this._template;\n        /** @type {string} */\n        this._importPath;\n        /** @type {string} */\n        this.rootPath;\n        /** @type {string} */\n        this.importPath;\n        /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n        this.root;\n        /** @type {!Object<string, !Node>} */\n        this.$;\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       * @suppress {invalidCasts}\n       */\n      _initializeProperties() {\n        Polymer.telemetry.instanceCount++;\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        this.constructor._finalizeTemplate( /** @type {!HTMLElement} */this.localName);\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            let value = typeof info.value == 'function' ? info.value.call(this) : info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Gather style text for the template\n       *\n       * @param {string} is Tag name for this element\n       * @param {!HTMLTemplateElement} template Template to process\n       * @param {string} baseURI Base URI to rebase CSS paths against\n       * @return {string} The combined CSS text\n       * @protected\n       */\n      static _processStyleText(is, template, baseURI) {\n        return Polymer.StyleGather.cssFromModuleImports(is) + Polymer.StyleGather.cssFromTemplate(template, baseURI);\n      }\n\n      /**\n      * Configures an element `proto` to function with a given `template`.\n      * The element name `is` and extends `ext` must be specified for ShadyCSS\n      * style scoping.\n      *\n      * @param {string} is Tag name (or type extension name) for this element\n      * @param {string=} ext For type extensions, the tag name that was extended\n      * @protected\n      */\n      static _finalizeTemplate(is, ext) {\n        /** @const {HTMLTemplateElement} */\n        const template = this.prototype._template;\n        if (template && !template.__polymerFinalized) {\n          template.__polymerFinalized = true;\n          const importPath = this.importPath;\n          const baseURI = importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          // support `include=\"module-name\"`\n          let cssText = this._processStyleText(is, template, baseURI);\n          if (cssText) {\n            let style = document.createElement('style');\n            style.textContent = cssText;\n            template.content.insertBefore(style, template.content.firstChild);\n          }\n          if (window.ShadyCSS) {\n            window.ShadyCSS.prepareTemplate(template, is, ext);\n          }\n          this.prototype._bindTemplate(template);\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @suppress {invalidCasts}\n       */\n      connectedCallback() {\n        if (window.ShadyCSS && this._template) {\n          window.ShadyCSS.styleElement( /** @type {!HTMLElement} */this);\n        }\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Stamps the element template.\n       *\n       * @override\n       */\n      ready() {\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n          this.$ = this.root.$;\n        }\n        super.ready();\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        if (this._template) {\n          this.root = this._attachDom( /** @type {StampedTemplate} */this.root);\n        }\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        super._readyClients();\n      }\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {StampedTemplate} dom to attach to the element.\n       * @return {ShadowRoot} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({ mode: 'open' });\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n          return null;\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' + 'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\n       * properties.\n       *\n       * @param {string} name Name of attribute.\n       * @param {?string} old Old value of attribute.\n       * @param {?string} value Current value of attribute.\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       * @suppress {invalidCasts}\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree( /** @type {!HTMLElement} */this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n      /**\n       * Overrides `PropertyAccessors` to add map of dynamic functions on\n       * template info, for consumption by `PropertyEffects` template binding\n       * code. This map determines which method templates should have accessors\n       * created for them.\n       *\n       * @override\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n        return super._parseTemplateContent(template, templateInfo, nodeInfo);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   * @summary Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @param {!PolymerElementConstructor} prototype Element prototype to log\n     * @this {this}\n     * @private\n     */\n    _regLog: function (prototype) {\n      console.log('[' + prototype.is + ']: registered');\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @param {HTMLElement} prototype Element prototype to register\n     * @this {this}\n     * @protected\n     */\n    register: function (prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     * @this {this}\n     */\n    dumpRegistrations: function () {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} props Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function (props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(10);\n\n/** @suppress {deprecated} */\n(function () {\n  'use strict';\n\n  /**\n   * Legacy settings.\n   * @namespace\n   * @memberof Polymer\n   */\n\n  const settings = Polymer.Settings || {};\n  settings.useShadow = !window.ShadyDOM;\n  settings.useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\n  settings.useNativeCustomElements = !window.customElements.polyfillWrapFlushCallback;\n\n  /**\n   * Sets the global, legacy settings.\n   *\n   * @deprecated\n   * @memberof Polymer\n   */\n  Polymer.Settings = settings;\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  let rootPath = Polymer.rootPath || Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n  Polymer.rootPath = rootPath;\n\n  /**\n   * Sets the global rootPath property used by `Polymer.ElementMixin` and\n   * available via `Polymer.rootPath`.\n   *\n   * @memberof Polymer\n   * @param {string} path The new root path\n   */\n  Polymer.setRootPath = function (path) {\n    Polymer.rootPath = path;\n  };\n\n  /**\n   * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n   *\n   *     Polymer = {\n   *       sanitizeDOMValue: function(value, name, type, node) { ... }\n   *     }\n   *\n   * Where:\n   *\n   * `value` is the value to sanitize.\n   * `name` is the name of an attribute or property (for example, href).\n   * `type` indicates where the value is being inserted: one of property, attribute, or text.\n   * `node` is the node where the value is being inserted.\n   *\n   * @type {(function(*,string,string,Node):*)|undefined}\n   * @memberof Polymer\n   */\n  let sanitizeDOMValue = Polymer.sanitizeDOMValue;\n\n  // This is needed for tooling\n  Polymer.sanitizeDOMValue = sanitizeDOMValue;\n\n  /**\n   * Sets the global sanitizeDOMValue available via `Polymer.sanitizeDOMValue`.\n   *\n   * @memberof Polymer\n   * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n   */\n  Polymer.setSanitizeDOMValue = function (newSanitizeDOMValue) {\n    Polymer.sanitizeDOMValue = newSanitizeDOMValue;\n  };\n\n  /**\n   * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n   * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n   * scrolling performance.\n   * Defaults to `false` for backwards compatibility.\n   *\n   * @memberof Polymer\n   */\n  let passiveTouchGestures = false;\n\n  Polymer.passiveTouchGestures = passiveTouchGestures;\n\n  /**\n   * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n   *\n   * @memberof Polymer\n   * @param {boolean} usePassive enable or disable passive touch gestures globally\n   */\n  Polymer.setPassiveTouchGestures = function (usePassive) {\n    Polymer.passiveTouchGestures = usePassive;\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmh0bWw/ODg3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3V0aWxzL2Jvb3QuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi91dGlscy9yZXNvbHZlLXVybC5odG1sJyk7XG5cbi8qKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9ICovXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIExlZ2FjeSBzZXR0aW5ncy5cbiAgICogQG5hbWVzcGFjZVxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKi9cblxuICBjb25zdCBzZXR0aW5ncyA9IFBvbHltZXIuU2V0dGluZ3MgfHwge307XG4gIHNldHRpbmdzLnVzZVNoYWRvdyA9ICF3aW5kb3cuU2hhZHlET007XG4gIHNldHRpbmdzLnVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMgPSBCb29sZWFuKCF3aW5kb3cuU2hhZHlDU1MgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzcyk7XG4gIHNldHRpbmdzLnVzZU5hdGl2ZUN1c3RvbUVsZW1lbnRzID0gIXdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnbG9iYWwsIGxlZ2FjeSBzZXR0aW5ncy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICovXG4gIFBvbHltZXIuU2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAvKipcbiAgICogR2xvYmFsbHkgc2V0dGFibGUgcHJvcGVydHkgdGhhdCBpcyBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvXG4gICAqIGBQb2x5bWVyLkVsZW1lbnRNaXhpbmAgaW5zdGFuY2VzLCB1c2VmdWwgZm9yIGJpbmRpbmcgaW4gdGVtcGxhdGVzIHRvXG4gICAqIG1ha2UgVVJMJ3MgcmVsYXRpdmUgdG8gYW4gYXBwbGljYXRpb24ncyByb290LiAgRGVmYXVsdHMgdG8gdGhlIG1haW5cbiAgICogZG9jdW1lbnQgVVJMLCBidXQgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlcnMuICBJdCBtYXkgYmUgdXNlZnVsIHRvIHNldFxuICAgKiBgUG9seW1lci5yb290UGF0aGAgdG8gcHJvdmlkZSBhIHN0YWJsZSBhcHBsaWNhdGlvbiBtb3VudCBwYXRoIHdoZW5cbiAgICogdXNpbmcgY2xpZW50IHNpZGUgcm91dGluZy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICovXG4gIGxldCByb290UGF0aCA9IFBvbHltZXIucm9vdFBhdGggfHwgUG9seW1lci5SZXNvbHZlVXJsLnBhdGhGcm9tVXJsKGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gIFBvbHltZXIucm9vdFBhdGggPSByb290UGF0aDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2xvYmFsIHJvb3RQYXRoIHByb3BlcnR5IHVzZWQgYnkgYFBvbHltZXIuRWxlbWVudE1peGluYCBhbmRcbiAgICogYXZhaWxhYmxlIHZpYSBgUG9seW1lci5yb290UGF0aGAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBuZXcgcm9vdCBwYXRoXG4gICAqL1xuICBQb2x5bWVyLnNldFJvb3RQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBQb2x5bWVyLnJvb3RQYXRoID0gcGF0aDtcbiAgfTtcblxuICAvKipcbiAgICogQSBnbG9iYWwgY2FsbGJhY2sgdXNlZCB0byBzYW5pdGl6ZSBhbnkgdmFsdWUgYmVmb3JlIGluc2VydGluZyBpdCBpbnRvIHRoZSBET00uIFRoZSBjYWxsYmFjayBzaWduYXR1cmUgaXM6XG4gICAqXG4gICAqICAgICBQb2x5bWVyID0ge1xuICAgKiAgICAgICBzYW5pdGl6ZURPTVZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgbmFtZSwgdHlwZSwgbm9kZSkgeyAuLi4gfVxuICAgKiAgICAgfVxuICAgKlxuICAgKiBXaGVyZTpcbiAgICpcbiAgICogYHZhbHVlYCBpcyB0aGUgdmFsdWUgdG8gc2FuaXRpemUuXG4gICAqIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgKGZvciBleGFtcGxlLCBocmVmKS5cbiAgICogYHR5cGVgIGluZGljYXRlcyB3aGVyZSB0aGUgdmFsdWUgaXMgYmVpbmcgaW5zZXJ0ZWQ6IG9uZSBvZiBwcm9wZXJ0eSwgYXR0cmlidXRlLCBvciB0ZXh0LlxuICAgKiBgbm9kZWAgaXMgdGhlIG5vZGUgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkLlxuICAgKlxuICAgKiBAdHlwZSB7KGZ1bmN0aW9uKCosc3RyaW5nLHN0cmluZyxOb2RlKToqKXx1bmRlZmluZWR9XG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqL1xuICBsZXQgc2FuaXRpemVET01WYWx1ZSA9IFBvbHltZXIuc2FuaXRpemVET01WYWx1ZTtcblxuICAvLyBUaGlzIGlzIG5lZWRlZCBmb3IgdG9vbGluZ1xuICBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUgPSBzYW5pdGl6ZURPTVZhbHVlO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBhdmFpbGFibGUgdmlhIGBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWVgLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAcGFyYW0geyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfSBuZXdTYW5pdGl6ZURPTVZhbHVlIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBjYWxsYmFja1xuICAgKi9cbiAgUG9seW1lci5zZXRTYW5pdGl6ZURPTVZhbHVlID0gZnVuY3Rpb24gKG5ld1Nhbml0aXplRE9NVmFsdWUpIHtcbiAgICBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUgPSBuZXdTYW5pdGl6ZURPTVZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHbG9iYWxseSBzZXR0YWJsZSBwcm9wZXJ0eSB0byBtYWtlIFBvbHltZXIgR2VzdHVyZXMgdXNlIHBhc3NpdmUgVG91Y2hFdmVudCBsaXN0ZW5lcnMgd2hlbiByZWNvZ25pemluZyBnZXN0dXJlcy5cbiAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBnZXN0dXJlcyBtYWRlIGZyb20gdG91Y2ggd2lsbCBub3QgYmUgYWJsZSB0byBwcmV2ZW50IHNjcm9sbGluZywgYWxsb3dpbmcgZm9yIHNtb290aGVyXG4gICAqIHNjcm9sbGluZyBwZXJmb3JtYW5jZS5cbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqL1xuICBsZXQgcGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmYWxzZTtcblxuICBQb2x5bWVyLnBhc3NpdmVUb3VjaEdlc3R1cmVzID0gcGFzc2l2ZVRvdWNoR2VzdHVyZXM7XG5cbiAgLyoqXG4gICAqIFNldHMgYHBhc3NpdmVUb3VjaEdlc3R1cmVzYCBnbG9iYWxseSBmb3IgYWxsIGVsZW1lbnRzIHVzaW5nIFBvbHltZXIgR2VzdHVyZXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUGFzc2l2ZSBlbmFibGUgb3IgZGlzYWJsZSBwYXNzaXZlIHRvdWNoIGdlc3R1cmVzIGdsb2JhbGx5XG4gICAqL1xuICBQb2x5bWVyLnNldFBhc3NpdmVUb3VjaEdlc3R1cmVzID0gZnVuY3Rpb24gKHVzZVBhc3NpdmUpIHtcbiAgICBQb2x5bWVyLnBhc3NpdmVUb3VjaEdlc3R1cmVzID0gdXNlUGFzc2l2ZTtcbiAgfTtcbn0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(10);\n\n(function () {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    const /** Polymer.DomModule */PolymerDomModule = customElements.get('dom-module');\n    if (!PolymerDomModule) {\n      return null;\n    }\n    return PolymerDomModule.import(moduleId);\n  }\n\n  /** @typedef {{assetpath: string}} */\n  let templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds List of dom-module id's within which to\n     * search for css.\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     * @this {StyleGather}\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(/\\s+/);\n      let cssText = '';\n      for (let i = 0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     * @this {StyleGather}\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        // module imports: <link rel=\"import\" type=\"css\">\n        let cssText = this._cssFromModuleImports(m);\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, /** @type {templateWithAssetPath} */m.assetpath);\n        }\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     * @this {StyleGather}\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i = 0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ? Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     * @this {StyleGather}\n     */\n    cssFromModuleImports(moduleId) {\n      let m = importModule(moduleId);\n      return m ? this._cssFromModuleImports(m) : '';\n    },\n    /**\n     * @memberof Polymer.StyleGather\n     * @this {StyleGather}\n     * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n     * @return {string} Concatenated CSS content from links in the dom-module\n     */\n    _cssFromModuleImports(module) {\n      let cssText = '';\n      let p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i = 0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText += Polymer.ResolveUrl.resolveCss(container.textContent, importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(15);\n\n__webpack_require__(11);\n\n(function () {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing. Last, call `this._enableProperties()` in the element's\n   * `connectedCallback` to enable the accessors.\n   *\n   * Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_PropertyAccessors}\n     * @extends HTMLElement\n     * @unrestricted\n     */\n    class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i = 0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        /** @type {boolean} */\n        this.__serializing;\n        /** @type {number} */\n        this.__dataCounter;\n        /** @type {boolean} */\n        this.__dataEnabled;\n        /** @type {boolean} */\n        this.__dataReady;\n        /** @type {boolean} */\n        this.__dataInvalid;\n        /** @type {!Object} */\n        this.__data;\n        /** @type {Object} */\n        this.__dataPending;\n        /** @type {Object} */\n        this.__dataOld;\n        /** @type {Object} */\n        this.__dataProto;\n        /** @type {Object} */\n        this.__dataHasAccessor;\n        /** @type {Object} */\n        this.__dataInstanceProps;\n        this._initializeProperties();\n      }\n\n      /**\n       * Implements native Custom Elements `attributeChangedCallback` to\n       * set an attribute value to a property via `_attributeToProperty`.\n       *\n       * @param {string} name Name of attribute that changed\n       * @param {?string} old Old attribute value\n       * @param {?string} value New attribute value\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataReady = false;\n        this.__dataInvalid = false;\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {?string} value of the attribute.\n       * @param {*=} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = arguments.length < 3 ? this[property] : value;\n        this._valueToNodeAttribute(this, value, attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch (x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {?string} value Attribute value to deserialize.\n       * @param {*=} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = value !== null;\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse( /** @type {string} */value);\n            } catch (x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse( /** @type {string} */value);\n            } catch (x) {\n              outValue = null;\n              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            /* eslint-disable valid-jsdoc */\n            /** @this {PropertyAccessors} */\n            get: function () {\n              return this.__data[property];\n            },\n            /** @this {PropertyAccessors} */\n            set: readOnly ? function () {} : function (value) {\n              this._setProperty(property, value);\n            }\n            /* eslint-enable */\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n      _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        let changed = this._shouldPropertyChange(property, value, old);\n        if (changed) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (this.__dataOld && !(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n        }\n        return changed;\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return Boolean(this.__dataPending && prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid && this.__dataReady) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n      _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready();\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n      _flushProperties() {\n        if (this.__dataPending && this.__dataOld) {\n          let changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        this.__dataReady = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {!Object} currentProps Bag of all current accessor values\n       * @param {!Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {!Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {} // eslint-disable-line no-unused-vars\n\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_propertiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        // check equality, and ensure (old == NaN, value == NaN) always returns false\n        return old !== value && (old === old || value === value);\n      }\n\n    }\n\n    return PropertyAccessors;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(50);\n\n__webpack_require__(27);\n\n__webpack_require__(32);\n\n__webpack_require__(53);\n\n__webpack_require__(3);\n\n__webpack_require__(54);\n\n__webpack_require__(55);\n\n__webpack_require__(56);\n\n__webpack_require__(57);\n\n(function () {\n\n  'use strict';\n\n  let styleInterface = window.ShadyCSS;\n\n  /**\n   * Element class mixin that provides Polymer's \"legacy\" API intended to be\n   * backward-compatible to the greatest extent possible with the API\n   * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements\n   * defined using the `Polymer({...})` function.\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.ElementMixin\n   * @appliesMixin Polymer.GestureEventListeners\n   * @property isAttached {boolean} Set to `true` in this element's\n   *   `connectedCallback` and `false` in `disconnectedCallback`\n   * @memberof Polymer\n   * @summary Element class mixin that provides Polymer's \"legacy\" API\n   */\n  Polymer.LegacyElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_ElementMixin}\n     * @implements {Polymer_GestureEventListeners}\n     * @implements {Polymer_DirMixin}\n     */\n    const legacyElementBase = Polymer.DirMixin(Polymer.GestureEventListeners(Polymer.ElementMixin(base)));\n\n    /**\n     * Map of simple names to touch action names\n     * @dict\n     */\n    const DIRECTION_MAP = {\n      'x': 'pan-x',\n      'y': 'pan-y',\n      'none': 'none',\n      'all': 'auto'\n    };\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @extends {legacyElementBase}\n     * @implements {Polymer_LegacyElementMixin}\n     * @unrestricted\n     */\n    class LegacyElement extends legacyElementBase {\n\n      constructor() {\n        super();\n        this.root = this;\n        /** @type {boolean} */\n        this.isAttached;\n        /** @type {WeakMap<!Element, !Object<string, !Function>>} */\n        this.__boundListeners;\n        /** @type {Object<string, Function>} */\n        this._debouncers;\n        this.created();\n      }\n\n      /**\n       * Legacy callback called during the `constructor`, for overriding\n       * by the user.\n       */\n      created() {}\n\n      /**\n       * Provides an implementation of `connectedCallback`\n       * which adds Polymer legacy API's `attached` method.\n       * @override\n       */\n      connectedCallback() {\n        super.connectedCallback();\n        this.isAttached = true;\n        this.attached();\n      }\n\n      /**\n       * Legacy callback called during `connectedCallback`, for overriding\n       * by the user.\n       */\n      attached() {}\n\n      /**\n       * Provides an implementation of `disconnectedCallback`\n       * which adds Polymer legacy API's `detached` method.\n       * @override\n       */\n      disconnectedCallback() {\n        super.disconnectedCallback();\n        this.isAttached = false;\n        this.detached();\n      }\n\n      /**\n       * Legacy callback called during `disconnectedCallback`, for overriding\n       * by the user.\n       */\n      detached() {}\n\n      /**\n       * Provides an override implementation of `attributeChangedCallback`\n       * which adds the Polymer legacy API's `attributeChanged` method.\n       * @param {string} name Name of attribute.\n       * @param {?string} old Old value of attribute.\n       * @param {?string} value Current value of attribute.\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          super.attributeChangedCallback(name, old, value);\n          this.attributeChanged(name, old, value);\n        }\n      }\n\n      /**\n       * Legacy callback called during `attributeChangedChallback`, for overriding\n       * by the user.\n       * @param {string} name Name of attribute.\n       * @param {?string} old Old value of attribute.\n       * @param {?string} value Current value of attribute.\n       */\n      attributeChanged(name, old, value) {} // eslint-disable-line no-unused-vars\n\n      /**\n       * Overrides the default `Polymer.PropertyEffects` implementation to\n       * add support for class initialization via the `_registered` callback.\n       * This is called only when the first instance of the element is created.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        let proto = Object.getPrototypeOf(this);\n        if (!proto.hasOwnProperty('__hasRegisterFinished')) {\n          proto.__hasRegisterFinished = true;\n          this._registered();\n        }\n        super._initializeProperties();\n      }\n\n      /**\n       * Called automatically when an element is initializing.\n       * Users may override this method to perform class registration time\n       * work. The implementation should ensure the work is performed\n       * only once for the class.\n       * @protected\n       */\n      _registered() {}\n\n      /**\n       * Overrides the default `Polymer.PropertyEffects` implementation to\n       * add support for installing `hostAttributes` and `listeners`.\n       *\n       * @override\n       */\n      ready() {\n        this._ensureAttributes();\n        this._applyListeners();\n        super.ready();\n      }\n\n      /**\n       * Ensures an element has required attributes. Called when the element\n       * is being readied via `ready`. Users should override to set the\n       * element's required attributes. The implementation should be sure\n       * to check and not override existing attributes added by\n       * the user of the element. Typically, setting attributes should be left\n       * to the element user and not done here; reasonable exceptions include\n       * setting aria roles and focusability.\n       * @protected\n       */\n      _ensureAttributes() {}\n\n      /**\n       * Adds element event listeners. Called when the element\n       * is being readied via `ready`. Users should override to\n       * add any required element event listeners.\n       * In performance critical elements, the work done here should be kept\n       * to a minimum since it is done before the element is rendered. In\n       * these elements, consider adding listeners asynchronously so as not to\n       * block render.\n       * @protected\n       */\n      _applyListeners() {}\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features. To customize\n       * how properties are serialized to attributes for attribute bindings and\n       * `reflectToAttribute: true` properties as well as this method, override\n       * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.\n       *\n       * @param {*} value Value to deserialize\n       * @return {string | undefined} Serialized value\n       */\n      serialize(value) {\n        return this._serializeValue(value);\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.  To customize\n       * how attributes are deserialized to properties for in\n       * `attributeChangedCallback`, override `_deserializeValue` method\n       * provided by `Polymer.PropertyAccessors`.\n       *\n       * @param {string} value String to deserialize\n       * @param {*} type Type to deserialize the string to\n       * @return {*} Returns the deserialized value in the `type` given.\n       */\n      deserialize(value, type) {\n        return this._deserializeValue(value, type);\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to reflect.\n       */\n      reflectPropertyToAttribute(property, attribute, value) {\n        this._propertyToAttribute(property, attribute, value);\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       *\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       * @param {Element} node Element to set attribute to.\n       */\n      serializeValueToAttribute(value, attribute, node) {\n        this._valueToNodeAttribute( /** @type {Element} */node || this, value, attribute);\n      }\n\n      /**\n       * Copies own properties (including accessor descriptors) from a source\n       * object to a target object.\n       *\n       * @param {Object} prototype Target object to copy properties to.\n       * @param {Object} api Source object to copy properties from.\n       * @return {Object} prototype object that was passed as first argument.\n       */\n      extend(prototype, api) {\n        if (!(prototype && api)) {\n          return prototype || api;\n        }\n        let n$ = Object.getOwnPropertyNames(api);\n        for (let i = 0, n; i < n$.length && (n = n$[i]); i++) {\n          let pd = Object.getOwnPropertyDescriptor(api, n);\n          if (pd) {\n            Object.defineProperty(prototype, n, pd);\n          }\n        }\n        return prototype;\n      }\n\n      /**\n       * Copies props from a source object to a target object.\n       *\n       * Note, this method uses a simple `for...in` strategy for enumerating\n       * properties.  To ensure only `ownProperties` are copied from source\n       * to target and that accessor implementations are copied, use `extend`.\n       *\n       * @param {Object} target Target object to copy properties to.\n       * @param {Object} source Source object to copy properties from.\n       * @return {Object} Target object that was passed as first argument.\n       */\n      mixin(target, source) {\n        for (let i in source) {\n          target[i] = source[i];\n        }\n        return target;\n      }\n\n      /**\n       * Sets the prototype of an object.\n       *\n       * Note this method is provided as backward-compatible legacy API\n       * only.  It is not directly called by any Polymer features.\n       * @param {Object} object The object on which to set the prototype.\n       * @param {Object} prototype The prototype that will be set on the given\n       * `object`.\n       * @return {Object} Returns the given `object` with its prototype set\n       * to the given `prototype` object.\n       */\n      chainObject(object, prototype) {\n        if (object && prototype && object !== prototype) {\n          object.__proto__ = prototype;\n        }\n        return object;\n      }\n\n      /* **** Begin Template **** */\n\n      /**\n       * Calls `importNode` on the `content` of the `template` specified and\n       * returns a document fragment containing the imported content.\n       *\n       * @param {HTMLTemplateElement} template HTML template element to instance.\n       * @return {DocumentFragment} Document fragment containing the imported\n       *   template content.\n      */\n      instanceTemplate(template) {\n        let content = this.constructor._contentForTemplate(template);\n        let dom = /** @type {DocumentFragment} */\n        document.importNode(content, true);\n        return dom;\n      }\n\n      /* **** Begin Events **** */\n\n      /**\n       * Dispatches a custom event with an optional detail value.\n       *\n       * @param {string} type Name of event type.\n       * @param {*=} detail Detail value containing event-specific\n       *   payload.\n       * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined), composed: (boolean|undefined) }=}\n       *  options Object specifying options.  These may include:\n       *  `bubbles` (boolean, defaults to `true`),\n       *  `cancelable` (boolean, defaults to false), and\n       *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n       * @return {Event} The new event that was fired.\n       */\n      fire(type, detail, options) {\n        options = options || {};\n        detail = detail === null || detail === undefined ? {} : detail;\n        let event = new Event(type, {\n          bubbles: options.bubbles === undefined ? true : options.bubbles,\n          cancelable: Boolean(options.cancelable),\n          composed: options.composed === undefined ? true : options.composed\n        });\n        event.detail = detail;\n        let node = options.node || this;\n        node.dispatchEvent(event);\n        return event;\n      }\n\n      /**\n       * Convenience method to add an event listener on a given element,\n       * late bound to a named method on this element.\n       *\n       * @param {Element} node Element to add event listener to.\n       * @param {string} eventName Name of event to listen for.\n       * @param {string} methodName Name of handler method on `this` to call.\n       */\n      listen(node, eventName, methodName) {\n        node = /** @type {!Element} */node || this;\n        let hbl = this.__boundListeners || (this.__boundListeners = new WeakMap());\n        let bl = hbl.get(node);\n        if (!bl) {\n          bl = {};\n          hbl.set(node, bl);\n        }\n        let key = eventName + methodName;\n        if (!bl[key]) {\n          bl[key] = this._addMethodEventListenerToNode(node, eventName, methodName, this);\n        }\n      }\n\n      /**\n       * Convenience method to remove an event listener from a given element,\n       * late bound to a named method on this element.\n       *\n       * @param {Element} node Element to remove event listener from.\n       * @param {string} eventName Name of event to stop listening to.\n       * @param {string} methodName Name of handler method on `this` to not call\n       anymore.\n       */\n      unlisten(node, eventName, methodName) {\n        node = /** @type {!Element} */node || this;\n        let bl = this.__boundListeners && this.__boundListeners.get(node);\n        let key = eventName + methodName;\n        let handler = bl && bl[key];\n        if (handler) {\n          this._removeEventListenerFromNode(node, eventName, handler);\n          bl[key] = null;\n        }\n      }\n\n      /**\n       * Override scrolling behavior to all direction, one direction, or none.\n       *\n       * Valid scroll directions:\n       *   - 'all': scroll in any direction\n       *   - 'x': scroll only in the 'x' direction\n       *   - 'y': scroll only in the 'y' direction\n       *   - 'none': disable scrolling for this node\n       *\n       * @param {string=} direction Direction to allow scrolling\n       * Defaults to `all`.\n       * @param {Element=} node Element to apply scroll direction setting.\n       * Defaults to `this`.\n       */\n      setScrollDirection(direction, node) {\n        Polymer.Gestures.setTouchAction( /** @type {Element} */node || this, DIRECTION_MAP[direction] || 'auto');\n      }\n      /* **** End Events **** */\n\n      /**\n       * Convenience method to run `querySelector` on this local DOM scope.\n       *\n       * This function calls `Polymer.dom(this.root).querySelector(slctr)`.\n       *\n       * @param {string} slctr Selector to run on this local DOM scope\n       * @return {Element} Element found by the selector, or null if not found.\n       */\n      $$(slctr) {\n        return this.root.querySelector(slctr);\n      }\n\n      /**\n       * Return the element whose local dom within which this element\n       * is contained. This is a shorthand for\n       * `this.getRootNode().host`.\n       * @this {Element}\n       */\n      get domHost() {\n        let root = this.getRootNode();\n        return root instanceof DocumentFragment ? /** @type {ShadowRoot} */root.host : root;\n      }\n\n      /**\n       * Force this element to distribute its children to its local dom.\n       * This should not be necessary as of Polymer 2.0.2 and is provided only\n       * for backwards compatibility.\n       */\n      distributeContent() {\n        if (window.ShadyDOM && this.shadowRoot) {\n          ShadyDOM.flush();\n        }\n      }\n\n      /**\n       * Returns a list of nodes that are the effective childNodes. The effective\n       * childNodes list is the same as the element's childNodes except that\n       * any `<content>` elements are replaced with the list of nodes distributed\n       * to the `<content>`, the result of its `getDistributedNodes` method.\n       * @this {Element}\n       * @return {Array<Node>} List of effective child nodes.\n       */\n      getEffectiveChildNodes() {\n        const domApi = /** @type {Polymer.DomApi} */Polymer.dom(this);\n        return domApi.getEffectiveChildNodes();\n      }\n\n      /**\n       * Returns a list of nodes distributed within this element that match\n       * `selector`. These can be dom children or elements distributed to\n       * children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @this {Element}\n       * @return {Array<Node>} List of distributed elements that match selector.\n       */\n      queryDistributedElements(selector) {\n        const domApi = /** @type {Polymer.DomApi} */Polymer.dom(this);\n        return domApi.queryDistributedElements(selector);\n      }\n\n      /**\n       * Returns a list of elements that are the effective children. The effective\n       * children list is the same as the element's children except that\n       * any `<content>` elements are replaced with the list of elements\n       * distributed to the `<content>`.\n       *\n       * @return {Array<Node>} List of effective children.\n       */\n      getEffectiveChildren() {\n        let list = this.getEffectiveChildNodes();\n        return list.filter(function ( /** @type {Node} */n) {\n          return n.nodeType === Node.ELEMENT_NODE;\n        });\n      }\n\n      /**\n       * Returns a string of text content that is the concatenation of the\n       * text content's of the element's effective childNodes (the elements\n       * returned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.\n       *\n       * @return {string} List of effective children.\n       */\n      getEffectiveTextContent() {\n        let cn = this.getEffectiveChildNodes();\n        let tc = [];\n        for (let i = 0, c; c = cn[i]; i++) {\n          if (c.nodeType !== Node.COMMENT_NODE) {\n            tc.push(c.textContent);\n          }\n        }\n        return tc.join('');\n      }\n\n      /**\n       * Returns the first effective childNode within this element that\n       * match `selector`. These can be dom child nodes or elements distributed\n       * to children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @return {Object<Node>} First effective child node that matches selector.\n       */\n      queryEffectiveChildren(selector) {\n        let e$ = this.queryDistributedElements(selector);\n        return e$ && e$[0];\n      }\n\n      /**\n       * Returns a list of effective childNodes within this element that\n       * match `selector`. These can be dom child nodes or elements distributed\n       * to children that are insertion points.\n       * @param {string} selector Selector to run.\n       * @return {Array<Node>} List of effective child nodes that match selector.\n       */\n      queryAllEffectiveChildren(selector) {\n        return this.queryDistributedElements(selector);\n      }\n\n      /**\n       * Returns a list of nodes distributed to this element's `<slot>`.\n       *\n       * If this element contains more than one `<slot>` in its local DOM,\n       * an optional selector may be passed to choose the desired content.\n       *\n       * @param {string=} slctr CSS selector to choose the desired\n       *   `<slot>`.  Defaults to `content`.\n       * @return {Array<Node>} List of distributed nodes for the `<slot>`.\n       */\n      getContentChildNodes(slctr) {\n        let content = this.root.querySelector(slctr || 'slot');\n        return content ? /** @type {Polymer.DomApi} */Polymer.dom(content).getDistributedNodes() : [];\n      }\n\n      /**\n       * Returns a list of element children distributed to this element's\n       * `<slot>`.\n       *\n       * If this element contains more than one `<slot>` in its\n       * local DOM, an optional selector may be passed to choose the desired\n       * content.  This method differs from `getContentChildNodes` in that only\n       * elements are returned.\n       *\n       * @param {string=} slctr CSS selector to choose the desired\n       *   `<content>`.  Defaults to `content`.\n       * @return {Array<HTMLElement>} List of distributed nodes for the\n       *   `<slot>`.\n       * @suppress {invalidCasts}\n       */\n      getContentChildren(slctr) {\n        let children = /** @type {Array<HTMLElement>} */this.getContentChildNodes(slctr).filter(function (n) {\n          return n.nodeType === Node.ELEMENT_NODE;\n        });\n        return children;\n      }\n\n      /**\n       * Checks whether an element is in this element's light DOM tree.\n       *\n       * @param {?Node} node The element to be checked.\n       * @this {Element}\n       * @return {boolean} true if node is in this element's light DOM tree.\n       */\n      isLightDescendant(node) {\n        return this !== node && this.contains(node) && this.getRootNode() === node.getRootNode();\n      }\n\n      /**\n       * Checks whether an element is in this element's local DOM tree.\n       *\n       * @param {Element=} node The element to be checked.\n       * @return {boolean} true if node is in this element's local DOM tree.\n       */\n      isLocalDescendant(node) {\n        return this.root === node.getRootNode();\n      }\n\n      // NOTE: should now be handled by ShadyCss library.\n      scopeSubtree(container, shouldObserve) {} // eslint-disable-line no-unused-vars\n\n\n      /**\n       * Returns the computed style value for the given property.\n       * @param {string} property The css property name.\n       * @return {string} Returns the computed css property value for the given\n       * `property`.\n       */\n      getComputedStyleValue(property) {\n        return styleInterface.getComputedStyleValue(this, property);\n      }\n\n      // debounce\n\n      /**\n       * Call `debounce` to collapse multiple requests for a named task into\n       * one invocation which is made after the wait time has elapsed with\n       * no new request.  If no wait time is given, the callback will be called\n       * at microtask timing (guaranteed before paint).\n       *\n       *     debouncedClickAction(e) {\n       *       // will not call `processClick` more than once per 100ms\n       *       this.debounce('click', function() {\n       *        this.processClick();\n       *       } 100);\n       *     }\n       *\n       * @param {string} jobName String to identify the debounce job.\n       * @param {function()} callback Function that is called (with `this`\n       *   context) when the wait time elapses.\n       * @param {number} wait Optional wait time in milliseconds (ms) after the\n       *   last signal that must elapse before invoking `callback`\n       * @return {Object} Returns a debouncer object on which exists the\n       * following methods: `isActive()` returns true if the debouncer is\n       * active; `cancel()` cancels the debouncer if it is active;\n       * `flush()` immediately invokes the debounced callback if the debouncer\n       * is active.\n       */\n      debounce(jobName, callback, wait) {\n        this._debouncers = this._debouncers || {};\n        return this._debouncers[jobName] = Polymer.Debouncer.debounce(this._debouncers[jobName], wait > 0 ? Polymer.Async.timeOut.after(wait) : Polymer.Async.microTask, callback.bind(this));\n      }\n\n      /**\n       * Returns whether a named debouncer is active.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       * @return {boolean} Whether the debouncer is active (has not yet fired).\n       */\n      isDebouncerActive(jobName) {\n        this._debouncers = this._debouncers || {};\n        let debouncer = this._debouncers[jobName];\n        return !!(debouncer && debouncer.isActive());\n      }\n\n      /**\n       * Immediately calls the debouncer `callback` and inactivates it.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       */\n      flushDebouncer(jobName) {\n        this._debouncers = this._debouncers || {};\n        let debouncer = this._debouncers[jobName];\n        if (debouncer) {\n          debouncer.flush();\n        }\n      }\n\n      /**\n       * Cancels an active debouncer.  The `callback` will not be called.\n       *\n       * @param {string} jobName The name of the debouncer started with `debounce`\n       */\n      cancelDebouncer(jobName) {\n        this._debouncers = this._debouncers || {};\n        let debouncer = this._debouncers[jobName];\n        if (debouncer) {\n          debouncer.cancel();\n        }\n      }\n\n      /**\n       * Runs a callback function asynchronously.\n       *\n       * By default (if no waitTime is specified), async callbacks are run at\n       * microtask timing, which will occur before paint.\n       *\n       * @param {Function} callback The callback function to run, bound to `this`.\n       * @param {number=} waitTime Time to wait before calling the\n       *   `callback`.  If unspecified or 0, the callback will be run at microtask\n       *   timing (before paint).\n       * @return {number} Handle that may be used to cancel the async job.\n       */\n      async(callback, waitTime) {\n        return waitTime > 0 ? Polymer.Async.timeOut.run(callback.bind(this), waitTime) : ~Polymer.Async.microTask.run(callback.bind(this));\n      }\n\n      /**\n       * Cancels an async operation started with `async`.\n       *\n       * @param {number} handle Handle returned from original `async` call to\n       *   cancel.\n       */\n      cancelAsync(handle) {\n        handle < 0 ? Polymer.Async.microTask.cancel(~handle) : Polymer.Async.timeOut.cancel(handle);\n      }\n\n      // other\n\n      /**\n       * Convenience method for creating an element and configuring it.\n       *\n       * @param {string} tag HTML element tag to create.\n       * @param {Object} props Object of properties to configure on the\n       *    instance.\n       * @return {Element} Newly created and configured element.\n       */\n      create(tag, props) {\n        let elt = document.createElement(tag);\n        if (props) {\n          if (elt.setProperties) {\n            elt.setProperties(props);\n          } else {\n            for (let n in props) {\n              elt[n] = props[n];\n            }\n          }\n        }\n        return elt;\n      }\n\n      /**\n       * Convenience method for importing an HTML document imperatively.\n       *\n       * This method creates a new `<link rel=\"import\">` element with\n       * the provided URL and appends it to the document to start loading.\n       * In the `onload` callback, the `import` property of the `link`\n       * element will contain the imported document contents.\n       *\n       * @param {string} href URL to document to load.\n       * @param {Function} onload Callback to notify when an import successfully\n       *   loaded.\n       * @param {Function} onerror Callback to notify when an import\n       *   unsuccessfully loaded.\n       * @param {boolean} optAsync True if the import should be loaded `async`.\n       *   Defaults to `false`.\n       * @return {HTMLLinkElement} The link element for the URL to be loaded.\n       */\n      importHref(href, onload, onerror, optAsync) {\n        // eslint-disable-line no-unused-vars\n        let loadFn = onload ? onload.bind(this) : null;\n        let errorFn = onerror ? onerror.bind(this) : null;\n        return Polymer.importHref(href, loadFn, errorFn, optAsync);\n      }\n\n      /**\n       * Polyfill for Element.prototype.matches, which is sometimes still\n       * prefixed.\n       *\n       * @param {string} selector Selector to test.\n       * @param {Element=} node Element to test the selector against.\n       * @return {boolean} Whether the element matches the selector.\n       */\n      elementMatches(selector, node) {\n        return Polymer.dom.matchesSelector( /** @type {!Element} */node || this, selector);\n      }\n\n      /**\n       * Toggles an HTML attribute on or off.\n       *\n       * @param {string} name HTML attribute name\n       * @param {boolean=} bool Boolean to force the attribute on or off.\n       *    When unspecified, the state of the attribute will be reversed.\n       * @param {Element=} node Node to target.  Defaults to `this`.\n       */\n      toggleAttribute(name, bool, node) {\n        node = /** @type {Element} */node || this;\n        if (arguments.length == 1) {\n          bool = !node.hasAttribute(name);\n        }\n        if (bool) {\n          node.setAttribute(name, '');\n        } else {\n          node.removeAttribute(name);\n        }\n      }\n\n      /**\n       * Toggles a CSS class on or off.\n       *\n       * @param {string} name CSS class name\n       * @param {boolean=} bool Boolean to force the class on or off.\n       *    When unspecified, the state of the class will be reversed.\n       * @param {Element=} node Node to target.  Defaults to `this`.\n       */\n      toggleClass(name, bool, node) {\n        node = /** @type {Element} */node || this;\n        if (arguments.length == 1) {\n          bool = !node.classList.contains(name);\n        }\n        if (bool) {\n          node.classList.add(name);\n        } else {\n          node.classList.remove(name);\n        }\n      }\n\n      /**\n       * Cross-platform helper for setting an element's CSS `transform` property.\n       *\n       * @param {string} transformText Transform setting.\n       * @param {Element=} node Element to apply the transform to.\n       * Defaults to `this`\n       */\n      transform(transformText, node) {\n        node = /** @type {Element} */node || this;\n        node.style.webkitTransform = transformText;\n        node.style.transform = transformText;\n      }\n\n      /**\n       * Cross-platform helper for setting an element's CSS `translate3d`\n       * property.\n       *\n       * @param {number} x X offset.\n       * @param {number} y Y offset.\n       * @param {number} z Z offset.\n       * @param {Element=} node Element to apply the transform to.\n       * Defaults to `this`.\n       */\n      translate3d(x, y, z, node) {\n        node = /** @type {Element} */node || this;\n        this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);\n      }\n\n      /**\n       * Removes an item from an array, if it exists.\n       *\n       * If the array is specified by path, a change notification is\n       * generated, so that observers, data bindings and computed\n       * properties watching that path can update.\n       *\n       * If the array is passed directly, **no change\n       * notification is generated**.\n       *\n       * @param {string | !Array<number|string>} arrayOrPath Path to array from which to remove the item\n       *   (or the array itself).\n       * @param {*} item Item to remove.\n       * @return {Array} Array containing item removed.\n       */\n      arrayDelete(arrayOrPath, item) {\n        let index;\n        if (Array.isArray(arrayOrPath)) {\n          index = arrayOrPath.indexOf(item);\n          if (index >= 0) {\n            return arrayOrPath.splice(index, 1);\n          }\n        } else {\n          let arr = Polymer.Path.get(this, arrayOrPath);\n          index = arr.indexOf(item);\n          if (index >= 0) {\n            return this.splice(arrayOrPath, index, 1);\n          }\n        }\n        return null;\n      }\n\n      // logging\n\n      /**\n       * Facades `console.log`/`warn`/`error` as override point.\n       *\n       * @param {string} level One of 'log', 'warn', 'error'\n       * @param {Array} args Array of strings or objects to log\n       */\n      _logger(level, args) {\n        // accept ['foo', 'bar'] and [['foo', 'bar']]\n        if (Array.isArray(args) && args.length === 1) {\n          args = args[0];\n        }\n        switch (level) {\n          case 'log':\n          case 'warn':\n          case 'error':\n            console[level](...args);\n        }\n      }\n\n      /**\n       * Facades `console.log` as an override point.\n       *\n       * @param {...*} args Array of strings or objects to log\n       */\n      _log(...args) {\n        this._logger('log', args);\n      }\n\n      /**\n       * Facades `console.warn` as an override point.\n       *\n       * @param {...*} args Array of strings or objects to log\n       */\n      _warn(...args) {\n        this._logger('warn', args);\n      }\n\n      /**\n       * Facades `console.error` as an override point.\n       *\n       * @param {...*} args Array of strings or objects to log\n       */\n      _error(...args) {\n        this._logger('error', args);\n      }\n\n      /**\n       * Formats a message using the element type an a method name.\n       *\n       * @param {string} methodName Method name to associate with message\n       * @param {...*} args Array of strings or objects to log\n       * @return {Array} Array with formatting information for `console`\n       *   logging.\n       */\n      _logf(methodName, ...args) {\n        return ['[%s::%s]', this.is, methodName, ...args];\n      }\n\n    }\n\n    LegacyElement.prototype.is = '';\n\n    return LegacyElement;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(52);\n\n(function () {\n\n  'use strict';\n\n  /**\n   * @const {Polymer.Gestures}\n   */\n\n  const gestures = Polymer.Gestures;\n\n  /**\n   * Element class mixin that provides API for adding Polymer's cross-platform\n   * gesture events to nodes.\n   *\n   * The API is designed to be compatible with override points implemented\n   * in `Polymer.TemplateStamp` such that declarative event listeners in\n   * templates will support gesture events when this mixin is applied along with\n   * `Polymer.TemplateStamp`.\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin that provides API for adding Polymer's cross-platform\n   * gesture events to nodes\n   */\n  Polymer.GestureEventListeners = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_GestureEventListeners}\n     */\n    class GestureEventListeners extends superClass {\n\n      _addEventListenerToNode(node, eventName, handler) {\n        if (!gestures.addListener(node, eventName, handler)) {\n          super._addEventListenerToNode(node, eventName, handler);\n        }\n      }\n\n      _removeEventListenerFromNode(node, eventName, handler) {\n        if (!gestures.removeListener(node, eventName, handler)) {\n          super._removeEventListenerFromNode(node, eventName, handler);\n        }\n      }\n\n    }\n\n    return GestureEventListeners;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL21peGlucy9nZXN0dXJlLWV2ZW50LWxpc3RlbmVycy5odG1sPzMxYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi91dGlscy9ib290Lmh0bWwnKTtcblxucmVxdWlyZSgnLi4vdXRpbHMvbWl4aW4uaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi91dGlscy9nZXN0dXJlcy5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAY29uc3Qge1BvbHltZXIuR2VzdHVyZXN9XG4gICAqL1xuXG4gIGNvbnN0IGdlc3R1cmVzID0gUG9seW1lci5HZXN0dXJlcztcblxuICAvKipcbiAgICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIEFQSSBmb3IgYWRkaW5nIFBvbHltZXIncyBjcm9zcy1wbGF0Zm9ybVxuICAgKiBnZXN0dXJlIGV2ZW50cyB0byBub2Rlcy5cbiAgICpcbiAgICogVGhlIEFQSSBpcyBkZXNpZ25lZCB0byBiZSBjb21wYXRpYmxlIHdpdGggb3ZlcnJpZGUgcG9pbnRzIGltcGxlbWVudGVkXG4gICAqIGluIGBQb2x5bWVyLlRlbXBsYXRlU3RhbXBgIHN1Y2ggdGhhdCBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgaW5cbiAgICogdGVtcGxhdGVzIHdpbGwgc3VwcG9ydCBnZXN0dXJlIGV2ZW50cyB3aGVuIHRoaXMgbWl4aW4gaXMgYXBwbGllZCBhbG9uZyB3aXRoXG4gICAqIGBQb2x5bWVyLlRlbXBsYXRlU3RhbXBgLlxuICAgKlxuICAgKiBAbWl4aW5GdW5jdGlvblxuICAgKiBAcG9seW1lclxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgQVBJIGZvciBhZGRpbmcgUG9seW1lcidzIGNyb3NzLXBsYXRmb3JtXG4gICAqIGdlc3R1cmUgZXZlbnRzIHRvIG5vZGVzXG4gICAqL1xuICBQb2x5bWVyLkdlc3R1cmVFdmVudExpc3RlbmVycyA9IFBvbHltZXIuZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuICAgIC8qKlxuICAgICAqIEBwb2x5bWVyXG4gICAgICogQG1peGluQ2xhc3NcbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9HZXN0dXJlRXZlbnRMaXN0ZW5lcnN9XG4gICAgICovXG4gICAgY2xhc3MgR2VzdHVyZUV2ZW50TGlzdGVuZXJzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAgIF9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAoIWdlc3R1cmVzLmFkZExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikpIHtcbiAgICAgICAgICBzdXBlci5fYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmICghZ2VzdHVyZXMucmVtb3ZlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSkge1xuICAgICAgICAgIHN1cGVyLl9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIEdlc3R1cmVFdmVudExpc3RlbmVycztcbiAgfSk7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n\n  'use strict';\n\n  function newSplice(index, removed, addedCount) {\n    return {\n      index: index,\n      removed: removed,\n      addedCount: addedCount\n    };\n  }\n\n  const EDIT_LEAVE = 0;\n  const EDIT_UPDATE = 1;\n  const EDIT_ADD = 2;\n  const EDIT_DELETE = 3;\n\n  // Note: This function is *based* on the computation of the Levenshtein\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\n  // edits - not one. With Array splices, an update is really a delete\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\n  // maximum array items in the original array. For example:\n  //\n  //   'xxxx123' -> '123yyyy'\n  //\n  // With 1-edit updates, the shortest path would be just to update all seven\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n  // leaves the substring '123' intact.\n  function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    let rowCount = oldEnd - oldStart + 1;\n    let columnCount = currentEnd - currentStart + 1;\n    let distances = new Array(rowCount);\n\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; i++) {\n      distances[i] = new Array(columnCount);\n      distances[i][0] = i;\n    }\n\n    // Initialize null row\n    for (let j = 0; j < columnCount; j++) distances[0][j] = j;\n\n    for (let i = 1; i < rowCount; i++) {\n      for (let j = 1; j < columnCount; j++) {\n        if (equals(current[currentStart + j - 1], old[oldStart + i - 1])) distances[i][j] = distances[i - 1][j - 1];else {\n          let north = distances[i - 1][j] + 1;\n          let west = distances[i][j - 1] + 1;\n          distances[i][j] = north < west ? north : west;\n        }\n      }\n    }\n\n    return distances;\n  }\n\n  // This starts at the final weight, and walks \"backward\" by finding\n  // the minimum previous weight recursively until the origin of the weight\n  // matrix.\n  function spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    let edits = [];\n    while (i > 0 || j > 0) {\n      if (i == 0) {\n        edits.push(EDIT_ADD);\n        j--;\n        continue;\n      }\n      if (j == 0) {\n        edits.push(EDIT_DELETE);\n        i--;\n        continue;\n      }\n      let northWest = distances[i - 1][j - 1];\n      let west = distances[i - 1][j];\n      let north = distances[i][j - 1];\n\n      let min;\n      if (west < north) min = west < northWest ? west : northWest;else min = north < northWest ? north : northWest;\n\n      if (min == northWest) {\n        if (northWest == current) {\n          edits.push(EDIT_LEAVE);\n        } else {\n          edits.push(EDIT_UPDATE);\n          current = northWest;\n        }\n        i--;\n        j--;\n      } else if (min == west) {\n        edits.push(EDIT_DELETE);\n        i--;\n        current = west;\n      } else {\n        edits.push(EDIT_ADD);\n        j--;\n        current = north;\n      }\n    }\n\n    edits.reverse();\n    return edits;\n  }\n\n  /**\n   * Splice Projection functions:\n   *\n   * A splice map is a representation of how a previous array of items\n   * was transformed into a new array of items. Conceptually it is a list of\n   * tuples of\n   *\n   *   <index, removed, addedCount>\n   *\n   * which are kept in ascending index order of. The tuple represents that at\n   * the |index|, |removed| sequence of items were removed, and counting forward\n   * from |index|, |addedCount| items were added.\n   */\n\n  /**\n   * Lacking individual splice mutation information, the minimal set of\n   * splices can be synthesized given the previous state and final state of an\n   * array. The basic approach is to calculate the edit distance matrix and\n   * choose the shortest path through it.\n   *\n   * Complexity: O(l * p)\n   *   l: The length of the current array\n   *   p: The length of the old array\n   *\n   * @param {Array} current The current \"changed\" array for which to\n   * calculate splices.\n   * @param {number} currentStart Starting index in the `current` array for\n   * which splices are calculated.\n   * @param {number} currentEnd Ending index in the `current` array for\n   * which splices are calculated.\n   * @param {Array} old The original \"unchanged\" array to compare `current`\n   * against to determine splices.\n   * @param {number} oldStart Starting index in the `old` array for\n   * which splices are calculated.\n   * @param {number} oldEnd Ending index in the `old` array for\n   * which splices are calculated.\n   * @return {Array} Returns an array of splice record objects. Each of these\n   * contains: `index` the location where the splice occurred; `removed`\n   * the array of removed items from this location; `addedCount` the number\n   * of items added at this location.\n   */\n  function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    let splice;\n\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart == 0 && oldStart == 0) prefixCount = sharedPrefix(current, old, minLength);\n\n    if (currentEnd == current.length && oldEnd == old.length) suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0) return [];\n\n    if (currentStart == currentEnd) {\n      splice = newSplice(currentStart, [], 0);\n      while (oldStart < oldEnd) splice.removed.push(old[oldStart++]);\n\n      return [splice];\n    } else if (oldStart == oldEnd) return [newSplice(currentStart, [], currentEnd - currentStart)];\n\n    let ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n\n    splice = undefined;\n    let splices = [];\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; i++) {\n      switch (ops[i]) {\n        case EDIT_LEAVE:\n          if (splice) {\n            splices.push(splice);\n            splice = undefined;\n          }\n\n          index++;\n          oldIndex++;\n          break;\n        case EDIT_UPDATE:\n          if (!splice) splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n        case EDIT_ADD:\n          if (!splice) splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n          break;\n        case EDIT_DELETE:\n          if (!splice) splice = newSplice(index, [], 0);\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n      }\n    }\n\n    if (splice) {\n      splices.push(splice);\n    }\n    return splices;\n  }\n\n  function sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; i++) if (!equals(current[i], old[i])) return i;\n    return searchLength;\n  }\n\n  function sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && equals(current[--index1], old[--index2])) count++;\n\n    return count;\n  }\n\n  function calculateSplices(current, previous) {\n    return calcSplices(current, 0, current.length, previous, 0, previous.length);\n  }\n\n  function equals(currentValue, previousValue) {\n    return currentValue === previousValue;\n  }\n\n  /**\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for diffing arrays.\n   */\n  Polymer.ArraySplice = {\n    /**\n     * Returns an array of splice records indicating the minimum edits required\n     * to transform the `previous` array into the `current` array.\n     *\n     * Splice records are ordered by index and contain the following fields:\n     * - `index`: index where edit started\n     * - `removed`: array of removed items from this index\n     * - `addedCount`: number of items added at this index\n     *\n     * This function is based on the Levenshtein \"minimum edit distance\"\n     * algorithm. Note that updates are treated as removal followed by addition.\n     *\n     * The worst-case time complexity of this algorithm is `O(l * p)`\n     *   l: The length of the current array\n     *   p: The length of the previous array\n     *\n     * However, the worst-case complexity is reduced by an `O(n)` optimization\n     * to detect any shared prefix & suffix between the two arrays and only\n     * perform the more expensive minimum edit distance calculation over the\n     * non-shared portions of the arrays.\n     *\n     * @memberof Polymer.ArraySplice\n     * @param {Array} current The \"changed\" array for which splices will be\n     * calculated.\n     * @param {Array} previous The \"unchanged\" original array to compare\n     * `current` against to determine the splices.\n     * @return {Array} Returns an array of splice record objects. Each of these\n     * contains: `index` the location where the splice occurred; `removed`\n     * the array of removed items from this location; `addedCount` the number\n     * of items added at this location.\n     */\n    calculateSplices\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(72);\n\n/**\n * @polymerBehavior Polymer.IronSelectableBehavior\n */\nPolymer.IronSelectableBehavior = {\n\n  /**\n   * Fired when iron-selector is activated (selected or deselected).\n   * It is fired before the selected items are changed.\n   * Cancel the event to abort selection.\n   *\n   * @event iron-activate\n   */\n\n  /**\n   * Fired when an item is selected\n   *\n   * @event iron-select\n   */\n\n  /**\n   * Fired when an item is deselected\n   *\n   * @event iron-deselect\n   */\n\n  /**\n   * Fired when the list of selectable items changes (e.g., items are\n   * added or removed). The detail of the event is a mutation record that\n   * describes what changed.\n   *\n   * @event iron-items-changed\n   */\n\n  properties: {\n\n    /**\n     * If you want to use an attribute value or property of an element for\n     * `selected` instead of the index, set this to the name of the attribute\n     * or property. Hyphenated values are converted to camel case when used to\n     * look up the property of a selectable element. Camel cased values are\n     * *not* converted to hyphenated values for attribute lookup. It's\n     * recommended that you provide the hyphenated form of the name so that\n     * selection works in both cases. (Use `attr-or-property-name` instead of\n     * `attrOrPropertyName`.)\n     */\n    attrForSelected: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * Gets or sets the selected element. The default is to use the index of the item.\n     * @type {string|number}\n     */\n    selected: {\n      type: String,\n      notify: true\n    },\n\n    /**\n     * Returns the currently selected item.\n     *\n     * @type {?Object}\n     */\n    selectedItem: {\n      type: Object,\n      readOnly: true,\n      notify: true\n    },\n\n    /**\n     * The event that fires from items when they are selected. Selectable\n     * will listen for this event from items and update the selection state.\n     * Set to empty string to listen to no events.\n     */\n    activateEvent: {\n      type: String,\n      value: 'tap',\n      observer: '_activateEventChanged'\n    },\n\n    /**\n     * This is a CSS selector string.  If this is set, only items that match the CSS selector\n     * are selectable.\n     */\n    selectable: String,\n\n    /**\n     * The class to set on elements when selected.\n     */\n    selectedClass: {\n      type: String,\n      value: 'iron-selected'\n    },\n\n    /**\n     * The attribute to set on elements when selected.\n     */\n    selectedAttribute: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * Default fallback if the selection based on selected with `attrForSelected`\n     * is not found.\n     */\n    fallbackSelection: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * The list of items from which a selection can be made.\n     */\n    items: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function () {\n        return [];\n      }\n    },\n\n    /**\n     * The set of excluded elements where the key is the `localName`\n     * of the element that will be ignored from the item list.\n     *\n     * @default {template: 1}\n     */\n    _excludedLocalNames: {\n      type: Object,\n      value: function () {\n        return {\n          'template': 1,\n          'dom-bind': 1,\n          'dom-if': 1,\n          'dom-repeat': 1\n        };\n      }\n    }\n  },\n\n  observers: ['_updateAttrForSelected(attrForSelected)', '_updateSelected(selected)', '_checkFallback(fallbackSelection)'],\n\n  created: function () {\n    this._bindFilterItem = this._filterItem.bind(this);\n    this._selection = new Polymer.IronSelection(this._applySelection.bind(this));\n  },\n\n  attached: function () {\n    this._observer = this._observeItems(this);\n    this._addListener(this.activateEvent);\n  },\n\n  detached: function () {\n    if (this._observer) {\n      Polymer.dom(this).unobserveNodes(this._observer);\n    }\n    this._removeListener(this.activateEvent);\n  },\n\n  /**\n   * Returns the index of the given item.\n   *\n   * @method indexOf\n   * @param {Object} item\n   * @returns Returns the index of the item\n   */\n  indexOf: function (item) {\n    return this.items ? this.items.indexOf(item) : -1;\n  },\n\n  /**\n   * Selects the given value.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function (value) {\n    this.selected = value;\n  },\n\n  /**\n   * Selects the previous item.\n   *\n   * @method selectPrevious\n   */\n  selectPrevious: function () {\n    var length = this.items.length;\n    var index = (Number(this._valueToIndex(this.selected)) - 1 + length) % length;\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the next item.\n   *\n   * @method selectNext\n   */\n  selectNext: function () {\n    var index = (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the item at the given index.\n   *\n   * @method selectIndex\n   */\n  selectIndex: function (index) {\n    this.select(this._indexToValue(index));\n  },\n\n  /**\n   * Force a synchronous update of the `items` property.\n   *\n   * NOTE: Consider listening for the `iron-items-changed` event to respond to\n   * updates to the set of selectable items after updates to the DOM list and\n   * selection state have been made.\n   *\n   * WARNING: If you are using this method, you should probably consider an\n   * alternate approach. Synchronously querying for items is potentially\n   * slow for many use cases. The `items` property will update asynchronously\n   * on its own to reflect selectable items in the DOM.\n   */\n  forceSynchronousItemUpdate: function () {\n    if (this._observer && typeof this._observer.flush === \"function\") {\n      // NOTE(bicknellr): `Polymer.dom.flush` above is no longer sufficient to\n      // trigger `observeNodes` callbacks. Polymer 2.x returns an object from\n      // `observeNodes` with a `flush` that synchronously gives the callback\n      // any pending MutationRecords (retrieved with `takeRecords`). Any case\n      // where ShadyDOM flushes were expected to synchronously trigger item\n      // updates will now require calling `forceSynchronousItemUpdate`.\n      this._observer.flush();\n    } else {\n      this._updateItems();\n    }\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null;\n  },\n\n  _checkFallback: function () {\n    this._updateSelected();\n  },\n\n  _addListener: function (eventName) {\n    this.listen(this, eventName, '_activateHandler');\n  },\n\n  _removeListener: function (eventName) {\n    this.unlisten(this, eventName, '_activateHandler');\n  },\n\n  _activateEventChanged: function (eventName, old) {\n    this._removeListener(old);\n    this._addListener(eventName);\n  },\n\n  _updateItems: function () {\n    var nodes = Polymer.dom(this).queryDistributedElements(this.selectable || '*');\n    nodes = Array.prototype.filter.call(nodes, this._bindFilterItem);\n    this._setItems(nodes);\n  },\n\n  _updateAttrForSelected: function () {\n    if (this.selectedItem) {\n      this.selected = this._valueForItem(this.selectedItem);\n    }\n  },\n\n  _updateSelected: function () {\n    this._selectSelected(this.selected);\n  },\n\n  _selectSelected: function (selected) {\n    if (!this.items) {\n      return;\n    }\n\n    var item = this._valueToItem(this.selected);\n    if (item) {\n      this._selection.select(item);\n    } else {\n      this._selection.clear();\n    }\n    // Check for items, since this array is populated only when attached\n    // Since Number(0) is falsy, explicitly check for undefined\n    if (this.fallbackSelection && this.items.length && this._selection.get() === undefined) {\n      this.selected = this.fallbackSelection;\n    }\n  },\n\n  _filterItem: function (node) {\n    return !this._excludedLocalNames[node.localName];\n  },\n\n  _valueToItem: function (value) {\n    return value == null ? null : this.items[this._valueToIndex(value)];\n  },\n\n  _valueToIndex: function (value) {\n    if (this.attrForSelected) {\n      for (var i = 0, item; item = this.items[i]; i++) {\n        if (this._valueForItem(item) == value) {\n          return i;\n        }\n      }\n    } else {\n      return Number(value);\n    }\n  },\n\n  _indexToValue: function (index) {\n    if (this.attrForSelected) {\n      var item = this.items[index];\n      if (item) {\n        return this._valueForItem(item);\n      }\n    } else {\n      return index;\n    }\n  },\n\n  _valueForItem: function (item) {\n    if (!item) {\n      return null;\n    }\n    if (!this.attrForSelected) {\n      var i = this.indexOf(item);\n      return i === -1 ? null : i;\n    }\n    var propValue = item[Polymer.CaseMap.dashToCamelCase(this.attrForSelected)];\n    return propValue != undefined ? propValue : item.getAttribute(this.attrForSelected);\n  },\n\n  _applySelection: function (item, isSelected) {\n    if (this.selectedClass) {\n      this.toggleClass(this.selectedClass, isSelected, item);\n    }\n    if (this.selectedAttribute) {\n      this.toggleAttribute(this.selectedAttribute, isSelected, item);\n    }\n    this._selectionChange();\n    this.fire('iron-' + (isSelected ? 'select' : 'deselect'), { item: item });\n  },\n\n  _selectionChange: function () {\n    this._setSelectedItem(this._selection.get());\n  },\n\n  // observe items change under the given node.\n  _observeItems: function (node) {\n    return Polymer.dom(node).observeNodes(function (mutation) {\n      this._updateItems();\n      this._updateSelected();\n\n      // Let other interested parties know about the change so that\n      // we don't have to recreate mutation observers everywhere.\n      this.fire('iron-items-changed', mutation, {\n        bubbles: false,\n        cancelable: false\n      });\n    });\n  },\n\n  _activateHandler: function (e) {\n    var t = e.target;\n    var items = this.items;\n    while (t && t != this) {\n      var i = items.indexOf(t);\n      if (i >= 0) {\n        var value = this._indexToValue(i);\n        this._itemActivate(value, t);\n        return;\n      }\n      t = t.parentNode;\n    }\n  },\n\n  _itemActivate: function (value, item) {\n    if (!this.fire('iron-activate', { selected: value, item: item }, { cancelable: true }).defaultPrevented) {\n      this.select(value);\n    }\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(14);\n\n__webpack_require__(24);\n\n/**\n * `Polymer.PaperInkyFocusBehavior` implements a ripple when the element has keyboard focus.\n *\n * @polymerBehavior Polymer.PaperInkyFocusBehavior\n */\nPolymer.PaperInkyFocusBehaviorImpl = {\n  observers: ['_focusedChanged(receivedFocusFromKeyboard)'],\n\n  _focusedChanged: function (receivedFocusFromKeyboard) {\n    if (receivedFocusFromKeyboard) {\n      this.ensureRipple();\n    }\n    if (this.hasRipple()) {\n      this._ripple.holdDown = receivedFocusFromKeyboard;\n    }\n  },\n\n  _createRipple: function () {\n    var ripple = Polymer.PaperRippleBehavior._createRipple();\n    ripple.id = 'ink';\n    ripple.setAttribute('center', '');\n    ripple.classList.add('circle');\n    return ripple;\n  }\n};\n\n/** @polymerBehavior Polymer.PaperInkyFocusBehavior */\nPolymer.PaperInkyFocusBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperInkyFocusBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1pbmt5LWZvY3VzLWJlaGF2aW9yLmh0bWw/ZDc4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tYmVoYXZpb3JzL2lyb24tYnV0dG9uLXN0YXRlLmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1yaXBwbGUtYmVoYXZpb3IuaHRtbCcpO1xuXG4vKipcbiAqIGBQb2x5bWVyLlBhcGVySW5reUZvY3VzQmVoYXZpb3JgIGltcGxlbWVudHMgYSByaXBwbGUgd2hlbiB0aGUgZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gKlxuICogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLlBhcGVySW5reUZvY3VzQmVoYXZpb3JcbiAqL1xuUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9ySW1wbCA9IHtcbiAgb2JzZXJ2ZXJzOiBbJ19mb2N1c2VkQ2hhbmdlZChyZWNlaXZlZEZvY3VzRnJvbUtleWJvYXJkKSddLFxuXG4gIF9mb2N1c2VkQ2hhbmdlZDogZnVuY3Rpb24gKHJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQpIHtcbiAgICBpZiAocmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCkge1xuICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzUmlwcGxlKCkpIHtcbiAgICAgIHRoaXMuX3JpcHBsZS5ob2xkRG93biA9IHJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQ7XG4gICAgfVxuICB9LFxuXG4gIF9jcmVhdGVSaXBwbGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmlwcGxlID0gUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yLl9jcmVhdGVSaXBwbGUoKTtcbiAgICByaXBwbGUuaWQgPSAnaW5rJztcbiAgICByaXBwbGUuc2V0QXR0cmlidXRlKCdjZW50ZXInLCAnJyk7XG4gICAgcmlwcGxlLmNsYXNzTGlzdC5hZGQoJ2NpcmNsZScpO1xuICAgIHJldHVybiByaXBwbGU7XG4gIH1cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJJbmt5Rm9jdXNCZWhhdmlvciAqL1xuUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9yID0gW1BvbHltZXIuSXJvbkJ1dHRvblN0YXRlLCBQb2x5bWVyLklyb25Db250cm9sU3RhdGUsIFBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvciwgUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9ySW1wbF07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1pbmt5LWZvY3VzLWJlaGF2aW9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(14);\n\n__webpack_require__(23);\n\n__webpack_require__(6);\n\n__webpack_require__(24);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-tab> <template> <style>:host{@apply --layout-inline;@apply --layout-center;@apply --layout-center-justified;@apply --layout-flex-auto;position:relative;padding:0 12px;overflow:hidden;cursor:pointer;vertical-align:middle;@apply --paper-font-common-base;@apply --paper-tab;}:host(:focus){outline:0}:host([link]){padding:0}.tab-content{height:100%;transform:translateZ(0);-webkit-transform:translateZ(0);transition:opacity .1s cubic-bezier(.4,0,1,1);@apply --layout-horizontal;@apply --layout-center-center;@apply --layout-flex-auto;@apply --paper-tab-content;}:host(:not(.iron-selected))>.tab-content{opacity:.8;@apply --paper-tab-content-unselected;}:host(:focus) .tab-content{opacity:1;font-weight:700}paper-ripple{color:var(--paper-tab-ink,var(--paper-yellow-a100))}.tab-content>::slotted(a){@apply --layout-flex-auto;height:100%}</style> <div class=tab-content> <slot></slot> </div> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-tab',\n\n  behaviors: [Polymer.IronControlState, Polymer.IronButtonState, Polymer.PaperRippleBehavior],\n\n  properties: {\n\n    /**\n     * If true, the tab will forward keyboard clicks (enter/space) to\n     * the first anchor element found in its descendants\n     */\n    link: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    }\n\n  },\n\n  hostAttributes: {\n    role: 'tab'\n  },\n\n  listeners: {\n    down: '_updateNoink',\n    tap: '_onTap'\n  },\n\n  attached: function () {\n    this._updateNoink();\n  },\n\n  get _parentNoink() {\n    var parent = Polymer.dom(this).parentNode;\n    return !!parent && !!parent.noink;\n  },\n\n  _updateNoink: function () {\n    this.noink = !!this.noink || !!this._parentNoink;\n  },\n\n  _onTap: function (event) {\n    if (this.link) {\n      var anchor = this.queryEffectiveChildren('a');\n\n      if (!anchor) {\n        return;\n      }\n\n      // Don't get stuck in a loop delegating\n      // the listener from the child anchor\n      if (event.target === anchor) {\n        return;\n      }\n\n      anchor.click();\n    }\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXRhYnMvcGFwZXItdGFiLmh0bWw/MThmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tYmVoYXZpb3JzL2lyb24tYnV0dG9uLXN0YXRlLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1iZWhhdmlvcnMvaXJvbi1jb250cm9sLXN0YXRlLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItYmVoYXZpb3JzL3BhcGVyLXJpcHBsZS1iZWhhdmlvci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItdGFiPiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtAYXBwbHkgLS1sYXlvdXQtaW5saW5lO0BhcHBseSAtLWxheW91dC1jZW50ZXI7QGFwcGx5IC0tbGF5b3V0LWNlbnRlci1qdXN0aWZpZWQ7QGFwcGx5IC0tbGF5b3V0LWZsZXgtYXV0bztwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjAgMTJweDtvdmVyZmxvdzpoaWRkZW47Y3Vyc29yOnBvaW50ZXI7dmVydGljYWwtYWxpZ246bWlkZGxlO0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLWJhc2U7QGFwcGx5IC0tcGFwZXItdGFiO306aG9zdCg6Zm9jdXMpe291dGxpbmU6MH06aG9zdChbbGlua10pe3BhZGRpbmc6MH0udGFiLWNvbnRlbnR7aGVpZ2h0OjEwMCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGN1YmljLWJlemllciguNCwwLDEsMSk7QGFwcGx5IC0tbGF5b3V0LWhvcml6b250YWw7QGFwcGx5IC0tbGF5b3V0LWNlbnRlci1jZW50ZXI7QGFwcGx5IC0tbGF5b3V0LWZsZXgtYXV0bztAYXBwbHkgLS1wYXBlci10YWItY29udGVudDt9Omhvc3QoOm5vdCguaXJvbi1zZWxlY3RlZCkpPi50YWItY29udGVudHtvcGFjaXR5Oi44O0BhcHBseSAtLXBhcGVyLXRhYi1jb250ZW50LXVuc2VsZWN0ZWQ7fTpob3N0KDpmb2N1cykgLnRhYi1jb250ZW50e29wYWNpdHk6MTtmb250LXdlaWdodDo3MDB9cGFwZXItcmlwcGxle2NvbG9yOnZhcigtLXBhcGVyLXRhYi1pbmssdmFyKC0tcGFwZXIteWVsbG93LWExMDApKX0udGFiLWNvbnRlbnQ+OjpzbG90dGVkKGEpe0BhcHBseSAtLWxheW91dC1mbGV4LWF1dG87aGVpZ2h0OjEwMCV9PC9zdHlsZT4gPGRpdiBjbGFzcz10YWItY29udGVudD4gPHNsb3Q+PC9zbG90PiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItdGFiJyxcblxuICBiZWhhdmlvcnM6IFtQb2x5bWVyLklyb25Db250cm9sU3RhdGUsIFBvbHltZXIuSXJvbkJ1dHRvblN0YXRlLCBQb2x5bWVyLlBhcGVyUmlwcGxlQmVoYXZpb3JdLFxuXG4gIHByb3BlcnRpZXM6IHtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRoZSB0YWIgd2lsbCBmb3J3YXJkIGtleWJvYXJkIGNsaWNrcyAoZW50ZXIvc3BhY2UpIHRvXG4gICAgICogdGhlIGZpcnN0IGFuY2hvciBlbGVtZW50IGZvdW5kIGluIGl0cyBkZXNjZW5kYW50c1xuICAgICAqL1xuICAgIGxpbms6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICB9XG5cbiAgfSxcblxuICBob3N0QXR0cmlidXRlczoge1xuICAgIHJvbGU6ICd0YWInXG4gIH0sXG5cbiAgbGlzdGVuZXJzOiB7XG4gICAgZG93bjogJ191cGRhdGVOb2luaycsXG4gICAgdGFwOiAnX29uVGFwJ1xuICB9LFxuXG4gIGF0dGFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdXBkYXRlTm9pbmsoKTtcbiAgfSxcblxuICBnZXQgX3BhcmVudE5vaW5rKCkge1xuICAgIHZhciBwYXJlbnQgPSBQb2x5bWVyLmRvbSh0aGlzKS5wYXJlbnROb2RlO1xuICAgIHJldHVybiAhIXBhcmVudCAmJiAhIXBhcmVudC5ub2luaztcbiAgfSxcblxuICBfdXBkYXRlTm9pbms6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm5vaW5rID0gISF0aGlzLm5vaW5rIHx8ICEhdGhpcy5fcGFyZW50Tm9pbms7XG4gIH0sXG5cbiAgX29uVGFwOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5saW5rKSB7XG4gICAgICB2YXIgYW5jaG9yID0gdGhpcy5xdWVyeUVmZmVjdGl2ZUNoaWxkcmVuKCdhJyk7XG5cbiAgICAgIGlmICghYW5jaG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgZ2V0IHN0dWNrIGluIGEgbG9vcCBkZWxlZ2F0aW5nXG4gICAgICAvLyB0aGUgbGlzdGVuZXIgZnJvbSB0aGUgY2hpbGQgYW5jaG9yXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBhbmNob3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhbmNob3IuY2xpY2soKTtcbiAgICB9XG4gIH1cblxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXRhYnMvcGFwZXItdGFiLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>html{--shadow-transition:{transition:box-shadow .28s cubic-bezier(.4,0,.2,1)};--shadow-none:{box-shadow:none};--shadow-elevation-2dp:{box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2)};--shadow-elevation-3dp:{box-shadow:0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12),0 3px 3px -2px rgba(0,0,0,.4)};--shadow-elevation-4dp:{box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.4)};--shadow-elevation-6dp:{box-shadow:0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12),0 3px 5px -1px rgba(0,0,0,.4)};--shadow-elevation-8dp:{box-shadow:0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.4)};--shadow-elevation-12dp:{box-shadow:0 12px 16px 1px rgba(0,0,0,.14),0 4px 22px 3px rgba(0,0,0,.12),0 6px 7px -4px rgba(0,0,0,.4)};--shadow-elevation-16dp:{box-shadow:0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12),0 8px 10px -5px rgba(0,0,0,.4)};--shadow-elevation-24dp:{box-shadow:0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12),0 11px 15px -7px rgba(0,0,0,.4)};}</style> </custom-style>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXN0eWxlcy9zaGFkb3cuaHRtbD8zMjlkIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUudG9Cb2R5KFwiPGN1c3RvbS1zdHlsZT4gPHN0eWxlIGlzPWN1c3RvbS1zdHlsZT5odG1sey0tc2hhZG93LXRyYW5zaXRpb246e3RyYW5zaXRpb246Ym94LXNoYWRvdyAuMjhzIGN1YmljLWJlemllciguNCwwLC4yLDEpfTstLXNoYWRvdy1ub25lOntib3gtc2hhZG93Om5vbmV9Oy0tc2hhZG93LWVsZXZhdGlvbi0yZHA6e2JveC1zaGFkb3c6MCAycHggMnB4IDAgcmdiYSgwLDAsMCwuMTQpLDAgMXB4IDVweCAwIHJnYmEoMCwwLDAsLjEyKSwwIDNweCAxcHggLTJweCByZ2JhKDAsMCwwLC4yKX07LS1zaGFkb3ctZWxldmF0aW9uLTNkcDp7Ym94LXNoYWRvdzowIDNweCA0cHggMCByZ2JhKDAsMCwwLC4xNCksMCAxcHggOHB4IDAgcmdiYSgwLDAsMCwuMTIpLDAgM3B4IDNweCAtMnB4IHJnYmEoMCwwLDAsLjQpfTstLXNoYWRvdy1lbGV2YXRpb24tNGRwOntib3gtc2hhZG93OjAgNHB4IDVweCAwIHJnYmEoMCwwLDAsLjE0KSwwIDFweCAxMHB4IDAgcmdiYSgwLDAsMCwuMTIpLDAgMnB4IDRweCAtMXB4IHJnYmEoMCwwLDAsLjQpfTstLXNoYWRvdy1lbGV2YXRpb24tNmRwOntib3gtc2hhZG93OjAgNnB4IDEwcHggMCByZ2JhKDAsMCwwLC4xNCksMCAxcHggMThweCAwIHJnYmEoMCwwLDAsLjEyKSwwIDNweCA1cHggLTFweCByZ2JhKDAsMCwwLC40KX07LS1zaGFkb3ctZWxldmF0aW9uLThkcDp7Ym94LXNoYWRvdzowIDhweCAxMHB4IDFweCByZ2JhKDAsMCwwLC4xNCksMCAzcHggMTRweCAycHggcmdiYSgwLDAsMCwuMTIpLDAgNXB4IDVweCAtM3B4IHJnYmEoMCwwLDAsLjQpfTstLXNoYWRvdy1lbGV2YXRpb24tMTJkcDp7Ym94LXNoYWRvdzowIDEycHggMTZweCAxcHggcmdiYSgwLDAsMCwuMTQpLDAgNHB4IDIycHggM3B4IHJnYmEoMCwwLDAsLjEyKSwwIDZweCA3cHggLTRweCByZ2JhKDAsMCwwLC40KX07LS1zaGFkb3ctZWxldmF0aW9uLTE2ZHA6e2JveC1zaGFkb3c6MCAxNnB4IDI0cHggMnB4IHJnYmEoMCwwLDAsLjE0KSwwIDZweCAzMHB4IDVweCByZ2JhKDAsMCwwLC4xMiksMCA4cHggMTBweCAtNXB4IHJnYmEoMCwwLDAsLjQpfTstLXNoYWRvdy1lbGV2YXRpb24tMjRkcDp7Ym94LXNoYWRvdzowIDI0cHggMzhweCAzcHggcmdiYSgwLDAsMCwuMTQpLDAgOXB4IDQ2cHggOHB4IHJnYmEoMCwwLDAsLjEyKSwwIDExcHggMTVweCAtN3B4IHJnYmEoMCwwLDAsLjQpfTt9PC9zdHlsZT4gPC9jdXN0b20tc3R5bGU+XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1zdHlsZXMvc2hhZG93Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(21);\n\n/**\n * Singleton IronMeta instance.\n */\nPolymer.IronValidatableBehaviorMeta = null;\n\n/**\n * `Use Polymer.IronValidatableBehavior` to implement an element that validates user input.\n * Use the related `Polymer.IronValidatorBehavior` to add custom validation logic to an iron-input.\n *\n * By default, an `<iron-form>` element validates its fields when the user presses the submit button.\n * To validate a form imperatively, call the form's `validate()` method, which in turn will\n * call `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your\n * custom element will get a public `validate()`, which\n * will return the validity of the element, and a corresponding `invalid` attribute,\n * which can be used for styling.\n *\n * To implement the custom validation logic of your element, you must override\n * the protected `_getValidity()` method of this behaviour, rather than `validate()`.\n * See [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\n * for an example.\n *\n * ### Accessibility\n *\n * Changing the `invalid` property, either manually or by calling `validate()` will update the\n * `aria-invalid` attribute.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nPolymer.IronValidatableBehavior = {\n\n  properties: {\n    /**\n     * Name of the validator to use.\n     */\n    validator: {\n      type: String\n    },\n\n    /**\n     * True if the last call to `validate` is invalid.\n     */\n    invalid: {\n      notify: true,\n      reflectToAttribute: true,\n      type: Boolean,\n      value: false,\n      observer: '_invalidChanged'\n    }\n  },\n\n  registered: function () {\n    Polymer.IronValidatableBehaviorMeta = new Polymer.IronMeta({ type: 'validator' });\n  },\n\n  _invalidChanged: function () {\n    if (this.invalid) {\n      this.setAttribute('aria-invalid', 'true');\n    } else {\n      this.removeAttribute('aria-invalid');\n    }\n  },\n\n  /* Recompute this every time it's needed, because we don't know if the\n   * underlying IronValidatableBehaviorMeta has changed. */\n  get _validator() {\n    return Polymer.IronValidatableBehaviorMeta && Polymer.IronValidatableBehaviorMeta.byKey(this.validator);\n  },\n\n  /**\n   * @return {boolean} True if the validator `validator` exists.\n   */\n  hasValidator: function () {\n    return this._validator != null;\n  },\n\n  /**\n   * Returns true if the `value` is valid, and updates `invalid`. If you want\n   * your element to have custom validation logic, do not override this method;\n   * override `_getValidity(value)` instead.\n    * @param {Object} value Deprecated: The value to be validated. By default,\n   * it is passed to the validator's `validate()` function, if a validator is set.\n   * If this argument is not specified, then the element's `value` property\n   * is used, if it exists.\n   * @return {boolean} True if `value` is valid.\n   */\n  validate: function (value) {\n    // If this is an element that also has a value property, and there was\n    // no explicit value argument passed, use the element's property instead.\n    if (value === undefined && this.value !== undefined) this.invalid = !this._getValidity(this.value);else this.invalid = !this._getValidity(value);\n    return !this.invalid;\n  },\n\n  /**\n   * Returns true if `value` is valid.  By default, it is passed\n   * to the validator's `validate()` function, if a validator is set. You\n   * should override this method if you want to implement custom validity\n   * logic for your element.\n   *\n   * @param {Object} value The value to be validated.\n   * @return {boolean} True if `value` is valid.\n   */\n\n  _getValidity: function (value) {\n    if (this.hasValidator()) {\n      return this._validator.validate(value);\n    }\n    return true;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tdmFsaWRhdGFibGUtYmVoYXZpb3IvaXJvbi12YWxpZGF0YWJsZS1iZWhhdmlvci5odG1sPzRmOGUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLW1ldGEvaXJvbi1tZXRhLmh0bWwnKTtcblxuLyoqXG4gKiBTaW5nbGV0b24gSXJvbk1ldGEgaW5zdGFuY2UuXG4gKi9cblBvbHltZXIuSXJvblZhbGlkYXRhYmxlQmVoYXZpb3JNZXRhID0gbnVsbDtcblxuLyoqXG4gKiBgVXNlIFBvbHltZXIuSXJvblZhbGlkYXRhYmxlQmVoYXZpb3JgIHRvIGltcGxlbWVudCBhbiBlbGVtZW50IHRoYXQgdmFsaWRhdGVzIHVzZXIgaW5wdXQuXG4gKiBVc2UgdGhlIHJlbGF0ZWQgYFBvbHltZXIuSXJvblZhbGlkYXRvckJlaGF2aW9yYCB0byBhZGQgY3VzdG9tIHZhbGlkYXRpb24gbG9naWMgdG8gYW4gaXJvbi1pbnB1dC5cbiAqXG4gKiBCeSBkZWZhdWx0LCBhbiBgPGlyb24tZm9ybT5gIGVsZW1lbnQgdmFsaWRhdGVzIGl0cyBmaWVsZHMgd2hlbiB0aGUgdXNlciBwcmVzc2VzIHRoZSBzdWJtaXQgYnV0dG9uLlxuICogVG8gdmFsaWRhdGUgYSBmb3JtIGltcGVyYXRpdmVseSwgY2FsbCB0aGUgZm9ybSdzIGB2YWxpZGF0ZSgpYCBtZXRob2QsIHdoaWNoIGluIHR1cm4gd2lsbFxuICogY2FsbCBgdmFsaWRhdGUoKWAgb24gYWxsIGl0cyBjaGlsZHJlbi4gQnkgdXNpbmcgYFBvbHltZXIuSXJvblZhbGlkYXRhYmxlQmVoYXZpb3JgLCB5b3VyXG4gKiBjdXN0b20gZWxlbWVudCB3aWxsIGdldCBhIHB1YmxpYyBgdmFsaWRhdGUoKWAsIHdoaWNoXG4gKiB3aWxsIHJldHVybiB0aGUgdmFsaWRpdHkgb2YgdGhlIGVsZW1lbnQsIGFuZCBhIGNvcnJlc3BvbmRpbmcgYGludmFsaWRgIGF0dHJpYnV0ZSxcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBzdHlsaW5nLlxuICpcbiAqIFRvIGltcGxlbWVudCB0aGUgY3VzdG9tIHZhbGlkYXRpb24gbG9naWMgb2YgeW91ciBlbGVtZW50LCB5b3UgbXVzdCBvdmVycmlkZVxuICogdGhlIHByb3RlY3RlZCBgX2dldFZhbGlkaXR5KClgIG1ldGhvZCBvZiB0aGlzIGJlaGF2aW91ciwgcmF0aGVyIHRoYW4gYHZhbGlkYXRlKClgLlxuICogU2VlIFt0aGlzXShodHRwczovL2dpdGh1Yi5jb20vUG9seW1lckVsZW1lbnRzL2lyb24tZm9ybS9ibG9iL21hc3Rlci9kZW1vL3NpbXBsZS1lbGVtZW50Lmh0bWwpXG4gKiBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiAjIyMgQWNjZXNzaWJpbGl0eVxuICpcbiAqIENoYW5naW5nIHRoZSBgaW52YWxpZGAgcHJvcGVydHksIGVpdGhlciBtYW51YWxseSBvciBieSBjYWxsaW5nIGB2YWxpZGF0ZSgpYCB3aWxsIHVwZGF0ZSB0aGVcbiAqIGBhcmlhLWludmFsaWRgIGF0dHJpYnV0ZS5cbiAqXG4gKiBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbiAqIEBwb2x5bWVyQmVoYXZpb3JcbiAqL1xuUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvciA9IHtcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgdmFsaWRhdG9yIHRvIHVzZS5cbiAgICAgKi9cbiAgICB2YWxpZGF0b3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBsYXN0IGNhbGwgdG8gYHZhbGlkYXRlYCBpcyBpbnZhbGlkLlxuICAgICAqL1xuICAgIGludmFsaWQ6IHtcbiAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvYnNlcnZlcjogJ19pbnZhbGlkQ2hhbmdlZCdcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJlZDogZnVuY3Rpb24gKCkge1xuICAgIFBvbHltZXIuSXJvblZhbGlkYXRhYmxlQmVoYXZpb3JNZXRhID0gbmV3IFBvbHltZXIuSXJvbk1ldGEoeyB0eXBlOiAndmFsaWRhdG9yJyB9KTtcbiAgfSxcblxuICBfaW52YWxpZENoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pbnZhbGlkKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJywgJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpO1xuICAgIH1cbiAgfSxcblxuICAvKiBSZWNvbXB1dGUgdGhpcyBldmVyeSB0aW1lIGl0J3MgbmVlZGVkLCBiZWNhdXNlIHdlIGRvbid0IGtub3cgaWYgdGhlXG4gICAqIHVuZGVybHlpbmcgSXJvblZhbGlkYXRhYmxlQmVoYXZpb3JNZXRhIGhhcyBjaGFuZ2VkLiAqL1xuICBnZXQgX3ZhbGlkYXRvcigpIHtcbiAgICByZXR1cm4gUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvck1ldGEgJiYgUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvck1ldGEuYnlLZXkodGhpcy52YWxpZGF0b3IpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWxpZGF0b3IgYHZhbGlkYXRvcmAgZXhpc3RzLlxuICAgKi9cbiAgaGFzVmFsaWRhdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvciAhPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGB2YWx1ZWAgaXMgdmFsaWQsIGFuZCB1cGRhdGVzIGBpbnZhbGlkYC4gSWYgeW91IHdhbnRcbiAgICogeW91ciBlbGVtZW50IHRvIGhhdmUgY3VzdG9tIHZhbGlkYXRpb24gbG9naWMsIGRvIG5vdCBvdmVycmlkZSB0aGlzIG1ldGhvZDtcbiAgICogb3ZlcnJpZGUgYF9nZXRWYWxpZGl0eSh2YWx1ZSlgIGluc3RlYWQuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgRGVwcmVjYXRlZDogVGhlIHZhbHVlIHRvIGJlIHZhbGlkYXRlZC4gQnkgZGVmYXVsdCxcbiAgICogaXQgaXMgcGFzc2VkIHRvIHRoZSB2YWxpZGF0b3IncyBgdmFsaWRhdGUoKWAgZnVuY3Rpb24sIGlmIGEgdmFsaWRhdG9yIGlzIHNldC5cbiAgICogSWYgdGhpcyBhcmd1bWVudCBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIHRoZSBlbGVtZW50J3MgYHZhbHVlYCBwcm9wZXJ0eVxuICAgKiBpcyB1c2VkLCBpZiBpdCBleGlzdHMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB2YWxpZC5cbiAgICovXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyBJZiB0aGlzIGlzIGFuIGVsZW1lbnQgdGhhdCBhbHNvIGhhcyBhIHZhbHVlIHByb3BlcnR5LCBhbmQgdGhlcmUgd2FzXG4gICAgLy8gbm8gZXhwbGljaXQgdmFsdWUgYXJndW1lbnQgcGFzc2VkLCB1c2UgdGhlIGVsZW1lbnQncyBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZCkgdGhpcy5pbnZhbGlkID0gIXRoaXMuX2dldFZhbGlkaXR5KHRoaXMudmFsdWUpO2Vsc2UgdGhpcy5pbnZhbGlkID0gIXRoaXMuX2dldFZhbGlkaXR5KHZhbHVlKTtcbiAgICByZXR1cm4gIXRoaXMuaW52YWxpZDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgdmFsaWQuICBCeSBkZWZhdWx0LCBpdCBpcyBwYXNzZWRcbiAgICogdG8gdGhlIHZhbGlkYXRvcidzIGB2YWxpZGF0ZSgpYCBmdW5jdGlvbiwgaWYgYSB2YWxpZGF0b3IgaXMgc2V0LiBZb3VcbiAgICogc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGlmIHlvdSB3YW50IHRvIGltcGxlbWVudCBjdXN0b20gdmFsaWRpdHlcbiAgICogbG9naWMgZm9yIHlvdXIgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSB2YWxpZGF0ZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB2YWxpZC5cbiAgICovXG5cbiAgX2dldFZhbGlkaXR5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5oYXNWYWxpZGF0b3IoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXZhbGlkYXRhYmxlLWJlaGF2aW9yL2lyb24tdmFsaWRhdGFibGUtYmVoYXZpb3IuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\nPolymer.IronFormElementBehavior enables a custom element to be included\nin an `iron-form`.\n Events `iron-form-element-register` and `iron-form-element-unregister` are not fired on Polymer 2.0.\n @demo demo/index.html\n@polymerBehavior\n*/\nPolymer.IronFormElementBehavior = {\n\n  properties: {\n    /**\n     * Fired when the element is added to an `iron-form`.\n     *\n     * @event iron-form-element-register\n     */\n\n    /**\n     * Fired when the element is removed from an `iron-form`.\n     *\n     * @event iron-form-element-unregister\n     */\n\n    /**\n     * The name of this element.\n     */\n    name: {\n      type: String\n    },\n\n    /**\n     * The value for this element.\n     */\n    value: {\n      notify: true,\n      type: String\n    },\n\n    /**\n     * Set to true to mark the input as required. If used in a form, a\n     * custom element that uses this behavior should also use\n     * Polymer.IronValidatableBehavior and define a custom validation method.\n     * Otherwise, a `required` element will always be considered valid.\n     * It's also strongly recommended to provide a visual style for the element\n     * when its value is invalid.\n     */\n    required: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The form that the element is registered to.\n     */\n    _parentForm: {\n      type: Object\n    }\n  },\n\n  attached: Polymer.Element ? null : function () {\n    // Note: the iron-form that this element belongs to will set this\n    // element's _parentForm property when handling this event.\n    this.fire('iron-form-element-register');\n  },\n\n  detached: Polymer.Element ? null : function () {\n    if (this._parentForm) {\n      this._parentForm.fire('iron-form-element-unregister', { target: this });\n    }\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tZm9ybS1lbGVtZW50LWJlaGF2aW9yL2lyb24tZm9ybS1lbGVtZW50LWJlaGF2aW9yLmh0bWw/ZTE3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbi8qKlxuUG9seW1lci5Jcm9uRm9ybUVsZW1lbnRCZWhhdmlvciBlbmFibGVzIGEgY3VzdG9tIGVsZW1lbnQgdG8gYmUgaW5jbHVkZWRcbmluIGFuIGBpcm9uLWZvcm1gLlxuIEV2ZW50cyBgaXJvbi1mb3JtLWVsZW1lbnQtcmVnaXN0ZXJgIGFuZCBgaXJvbi1mb3JtLWVsZW1lbnQtdW5yZWdpc3RlcmAgYXJlIG5vdCBmaXJlZCBvbiBQb2x5bWVyIDIuMC5cbiBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbkBwb2x5bWVyQmVoYXZpb3JcbiovXG5Qb2x5bWVyLklyb25Gb3JtRWxlbWVudEJlaGF2aW9yID0ge1xuXG4gIHByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGFkZGVkIHRvIGFuIGBpcm9uLWZvcm1gLlxuICAgICAqXG4gICAgICogQGV2ZW50IGlyb24tZm9ybS1lbGVtZW50LXJlZ2lzdGVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBhbiBgaXJvbi1mb3JtYC5cbiAgICAgKlxuICAgICAqIEBldmVudCBpcm9uLWZvcm0tZWxlbWVudC11bnJlZ2lzdGVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGlzIGVsZW1lbnQuXG4gICAgICovXG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhpcyBlbGVtZW50LlxuICAgICAqL1xuICAgIHZhbHVlOiB7XG4gICAgICBub3RpZnk6IHRydWUsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRvIHRydWUgdG8gbWFyayB0aGUgaW5wdXQgYXMgcmVxdWlyZWQuIElmIHVzZWQgaW4gYSBmb3JtLCBhXG4gICAgICogY3VzdG9tIGVsZW1lbnQgdGhhdCB1c2VzIHRoaXMgYmVoYXZpb3Igc2hvdWxkIGFsc28gdXNlXG4gICAgICogUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvciBhbmQgZGVmaW5lIGEgY3VzdG9tIHZhbGlkYXRpb24gbWV0aG9kLlxuICAgICAqIE90aGVyd2lzZSwgYSBgcmVxdWlyZWRgIGVsZW1lbnQgd2lsbCBhbHdheXMgYmUgY29uc2lkZXJlZCB2YWxpZC5cbiAgICAgKiBJdCdzIGFsc28gc3Ryb25nbHkgcmVjb21tZW5kZWQgdG8gcHJvdmlkZSBhIHZpc3VhbCBzdHlsZSBmb3IgdGhlIGVsZW1lbnRcbiAgICAgKiB3aGVuIGl0cyB2YWx1ZSBpcyBpbnZhbGlkLlxuICAgICAqL1xuICAgIHJlcXVpcmVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtIHRoYXQgdGhlIGVsZW1lbnQgaXMgcmVnaXN0ZXJlZCB0by5cbiAgICAgKi9cbiAgICBfcGFyZW50Rm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfVxuICB9LFxuXG4gIGF0dGFjaGVkOiBQb2x5bWVyLkVsZW1lbnQgPyBudWxsIDogZnVuY3Rpb24gKCkge1xuICAgIC8vIE5vdGU6IHRoZSBpcm9uLWZvcm0gdGhhdCB0aGlzIGVsZW1lbnQgYmVsb25ncyB0byB3aWxsIHNldCB0aGlzXG4gICAgLy8gZWxlbWVudCdzIF9wYXJlbnRGb3JtIHByb3BlcnR5IHdoZW4gaGFuZGxpbmcgdGhpcyBldmVudC5cbiAgICB0aGlzLmZpcmUoJ2lyb24tZm9ybS1lbGVtZW50LXJlZ2lzdGVyJyk7XG4gIH0sXG5cbiAgZGV0YWNoZWQ6IFBvbHltZXIuRWxlbWVudCA/IG51bGwgOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudEZvcm0pIHtcbiAgICAgIHRoaXMuX3BhcmVudEZvcm0uZmlyZSgnaXJvbi1mb3JtLWVsZW1lbnQtdW5yZWdpc3RlcicsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgIH1cbiAgfVxuXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWZvcm0tZWxlbWVudC1iZWhhdmlvci9pcm9uLWZvcm0tZWxlbWVudC1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for `<paper-input-container>`. A\n * add-on appears below the input, and may display information based on the input value and\n * validity such as a character counter or an error message.\n * @polymerBehavior\n */\nPolymer.PaperInputAddonBehavior = {\n  attached: function () {\n    // Workaround for https://github.com/webcomponents/shadydom/issues/96\n    Polymer.dom.flush();\n    this.fire('addon-attached');\n  },\n\n  /**\n   * The function called by `<paper-input-container>` when the input value or validity changes.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function (state) {}\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWlucHV0L3BhcGVyLWlucHV0LWFkZG9uLWJlaGF2aW9yLmh0bWw/M2QwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbi8qKlxuICogVXNlIGBQb2x5bWVyLlBhcGVySW5wdXRBZGRvbkJlaGF2aW9yYCB0byBpbXBsZW1lbnQgYW4gYWRkLW9uIGZvciBgPHBhcGVyLWlucHV0LWNvbnRhaW5lcj5gLiBBXG4gKiBhZGQtb24gYXBwZWFycyBiZWxvdyB0aGUgaW5wdXQsIGFuZCBtYXkgZGlzcGxheSBpbmZvcm1hdGlvbiBiYXNlZCBvbiB0aGUgaW5wdXQgdmFsdWUgYW5kXG4gKiB2YWxpZGl0eSBzdWNoIGFzIGEgY2hhcmFjdGVyIGNvdW50ZXIgb3IgYW4gZXJyb3IgbWVzc2FnZS5cbiAqIEBwb2x5bWVyQmVoYXZpb3JcbiAqL1xuUG9seW1lci5QYXBlcklucHV0QWRkb25CZWhhdmlvciA9IHtcbiAgYXR0YWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWRvbS9pc3N1ZXMvOTZcbiAgICBQb2x5bWVyLmRvbS5mbHVzaCgpO1xuICAgIHRoaXMuZmlyZSgnYWRkb24tYXR0YWNoZWQnKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIGNhbGxlZCBieSBgPHBhcGVyLWlucHV0LWNvbnRhaW5lcj5gIHdoZW4gdGhlIGlucHV0IHZhbHVlIG9yIHZhbGlkaXR5IGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7e1xuICAgKiAgIGlucHV0RWxlbWVudDogKEVsZW1lbnR8dW5kZWZpbmVkKSxcbiAgICogICB2YWx1ZTogKHN0cmluZ3x1bmRlZmluZWQpLFxuICAgKiAgIGludmFsaWQ6IGJvb2xlYW5cbiAgICogfX0gc3RhdGUgLVxuICAgKiAgICAgaW5wdXRFbGVtZW50OiBUaGUgaW5wdXQgZWxlbWVudC5cbiAgICogICAgIHZhbHVlOiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqICAgICBpbnZhbGlkOiBUcnVlIGlmIHRoZSBpbnB1dCB2YWx1ZSBpcyBpbnZhbGlkLlxuICAgKi9cbiAgdXBkYXRlOiBmdW5jdGlvbiAoc3RhdGUpIHt9XG5cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWlucHV0L3BhcGVyLWlucHV0LWFkZG9uLWJlaGF2aW9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(6);\n\n__webpack_require__(109);\n\n__webpack_require__(42);\n\n__webpack_require__(7);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-card> <template> <style include=paper-material-styles>:host{display:inline-block;position:relative;box-sizing:border-box;background-color:var(--paper-card-background-color,var(--primary-background-color));border-radius:2px;@apply --paper-font-common-base;@apply --paper-card;}[hidden]{display:none!important}.header{position:relative;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden;@apply --paper-card-header;}.header iron-image{display:block;width:100%;--iron-image-width:100%;pointer-events:none;@apply --paper-card-header-image;}.header .title-text{padding:16px;font-size:24px;font-weight:400;color:var(--paper-card-header-color,#000);@apply --paper-card-header-text;}.header .title-text.over-image{position:absolute;bottom:0;@apply --paper-card-header-image-text;}:host ::slotted(.card-content){padding:16px;position:relative;@apply --paper-card-content;}:host ::slotted(.card-actions){border-top:1px solid #e8e8e8;padding:5px 16px;position:relative;@apply --paper-card-actions;}:host([elevation=\\\"1\\\"]){@apply --paper-material-elevation-1;}:host([elevation=\\\"2\\\"]){@apply --paper-material-elevation-2;}:host([elevation=\\\"3\\\"]){@apply --paper-material-elevation-3;}:host([elevation=\\\"4\\\"]){@apply --paper-material-elevation-4;}:host([elevation=\\\"5\\\"]){@apply --paper-material-elevation-5;}</style> <div class=header> <iron-image hidden$=[[!image]] aria-hidden$=[[_isHidden(image)]] src=[[image]] alt=[[alt]] placeholder=[[placeholderImage]] preload=[[preloadImage]] fade=[[fadeImage]]></iron-image> <div hidden$=[[!heading]] class$=\\\"title-text [[_computeHeadingClass(image)]]\\\">[[heading]]</div> </div> <slot></slot> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-card',\n\n  properties: {\n    /**\n     * The title of the card.\n     */\n    heading: {\n      type: String,\n      value: '',\n      observer: '_headingChanged'\n    },\n\n    /**\n     * The url of the title image of the card.\n     */\n    image: {\n      type: String,\n      value: ''\n    },\n\n    /**\n     * The text alternative of the card's title image.\n     */\n    alt: {\n      type: String\n    },\n\n    /**\n     * When `true`, any change to the image url property will cause the\n     * `placeholder` image to be shown until the image is fully rendered.\n     */\n    preloadImage: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * When `preloadImage` is true, setting `fadeImage` to true will cause the\n     * image to fade into place.\n     */\n    fadeImage: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * This image will be used as a background/placeholder until the src image has\n     * loaded. Use of a data-URI for placeholder is encouraged for instant rendering.\n     */\n    placeholderImage: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * The z-depth of the card, from 0-5.\n     */\n    elevation: {\n      type: Number,\n      value: 1,\n      reflectToAttribute: true\n    },\n\n    /**\n     * Set this to true to animate the card shadow when setting a new\n     * `z` value.\n     */\n    animatedShadow: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Read-only property used to pass down the `animatedShadow` value to\n     * the underlying paper-material style (since they have different names).\n     */\n    animated: {\n      type: Boolean,\n      reflectToAttribute: true,\n      readOnly: true,\n      computed: '_computeAnimated(animatedShadow)'\n    }\n  },\n\n  /**\n   * Format function for aria-hidden. Use the ! operator results in the\n   * empty string when given a falsy value.\n   */\n  _isHidden: function (image) {\n    return image ? 'false' : 'true';\n  },\n\n  _headingChanged: function (heading) {\n    var currentHeading = this.getAttribute('heading'),\n        currentLabel = this.getAttribute('aria-label');\n\n    if (typeof currentLabel !== 'string' || currentLabel === currentHeading) {\n      this.setAttribute('aria-label', heading);\n    }\n  },\n\n  _computeHeadingClass: function (image) {\n    return image ? ' over-image' : '';\n  },\n\n  _computeAnimated: function (animatedShadow) {\n    return animatedShadow;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWNhcmQvcGFwZXItY2FyZC5odG1sP2Y2N2EiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLWZsZXgtbGF5b3V0L2lyb24tZmxleC1sYXlvdXQuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLWltYWdlL2lyb24taW1hZ2UuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1zdHlsZXMvZWxlbWVudC1zdHlsZXMvcGFwZXItbWF0ZXJpYWwtc3R5bGVzLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItc3R5bGVzL2RlZmF1bHQtdGhlbWUuaHRtbCcpO1xuXG5jb25zdCBSZWdpc3Rlckh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJ3BvbHltZXItd2VicGFjay1sb2FkZXIvcmVnaXN0ZXItaHRtbC10ZW1wbGF0ZScpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS5yZWdpc3RlcihcIjxkb20tbW9kdWxlIGlkPXBhcGVyLWNhcmQ+IDx0ZW1wbGF0ZT4gPHN0eWxlIGluY2x1ZGU9cGFwZXItbWF0ZXJpYWwtc3R5bGVzPjpob3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXBhcGVyLWNhcmQtYmFja2dyb3VuZC1jb2xvcix2YXIoLS1wcmltYXJ5LWJhY2tncm91bmQtY29sb3IpKTtib3JkZXItcmFkaXVzOjJweDtAYXBwbHkgLS1wYXBlci1mb250LWNvbW1vbi1iYXNlO0BhcHBseSAtLXBhcGVyLWNhcmQ7fVtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmhlYWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXItdG9wLWxlZnQtcmFkaXVzOmluaGVyaXQ7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6aW5oZXJpdDtvdmVyZmxvdzpoaWRkZW47QGFwcGx5IC0tcGFwZXItY2FyZC1oZWFkZXI7fS5oZWFkZXIgaXJvbi1pbWFnZXtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7LS1pcm9uLWltYWdlLXdpZHRoOjEwMCU7cG9pbnRlci1ldmVudHM6bm9uZTtAYXBwbHkgLS1wYXBlci1jYXJkLWhlYWRlci1pbWFnZTt9LmhlYWRlciAudGl0bGUtdGV4dHtwYWRkaW5nOjE2cHg7Zm9udC1zaXplOjI0cHg7Zm9udC13ZWlnaHQ6NDAwO2NvbG9yOnZhcigtLXBhcGVyLWNhcmQtaGVhZGVyLWNvbG9yLCMwMDApO0BhcHBseSAtLXBhcGVyLWNhcmQtaGVhZGVyLXRleHQ7fS5oZWFkZXIgLnRpdGxlLXRleHQub3Zlci1pbWFnZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtAYXBwbHkgLS1wYXBlci1jYXJkLWhlYWRlci1pbWFnZS10ZXh0O306aG9zdCA6OnNsb3R0ZWQoLmNhcmQtY29udGVudCl7cGFkZGluZzoxNnB4O3Bvc2l0aW9uOnJlbGF0aXZlO0BhcHBseSAtLXBhcGVyLWNhcmQtY29udGVudDt9Omhvc3QgOjpzbG90dGVkKC5jYXJkLWFjdGlvbnMpe2JvcmRlci10b3A6MXB4IHNvbGlkICNlOGU4ZTg7cGFkZGluZzo1cHggMTZweDtwb3NpdGlvbjpyZWxhdGl2ZTtAYXBwbHkgLS1wYXBlci1jYXJkLWFjdGlvbnM7fTpob3N0KFtlbGV2YXRpb249XFxcIjFcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTE7fTpob3N0KFtlbGV2YXRpb249XFxcIjJcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTI7fTpob3N0KFtlbGV2YXRpb249XFxcIjNcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTM7fTpob3N0KFtlbGV2YXRpb249XFxcIjRcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTQ7fTpob3N0KFtlbGV2YXRpb249XFxcIjVcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTU7fTwvc3R5bGU+IDxkaXYgY2xhc3M9aGVhZGVyPiA8aXJvbi1pbWFnZSBoaWRkZW4kPVtbIWltYWdlXV0gYXJpYS1oaWRkZW4kPVtbX2lzSGlkZGVuKGltYWdlKV1dIHNyYz1bW2ltYWdlXV0gYWx0PVtbYWx0XV0gcGxhY2Vob2xkZXI9W1twbGFjZWhvbGRlckltYWdlXV0gcHJlbG9hZD1bW3ByZWxvYWRJbWFnZV1dIGZhZGU9W1tmYWRlSW1hZ2VdXT48L2lyb24taW1hZ2U+IDxkaXYgaGlkZGVuJD1bWyFoZWFkaW5nXV0gY2xhc3MkPVxcXCJ0aXRsZS10ZXh0IFtbX2NvbXB1dGVIZWFkaW5nQ2xhc3MoaW1hZ2UpXV1cXFwiPltbaGVhZGluZ11dPC9kaXY+IDwvZGl2PiA8c2xvdD48L3Nsb3Q+IDwvdGVtcGxhdGU+IDwvZG9tLW1vZHVsZT5cIik7XG5cblBvbHltZXIoe1xuICBpczogJ3BhcGVyLWNhcmQnLFxuXG4gIHByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIGNhcmQuXG4gICAgICovXG4gICAgaGVhZGluZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsdWU6ICcnLFxuICAgICAgb2JzZXJ2ZXI6ICdfaGVhZGluZ0NoYW5nZWQnXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB1cmwgb2YgdGhlIHRpdGxlIGltYWdlIG9mIHRoZSBjYXJkLlxuICAgICAqL1xuICAgIGltYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogJydcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgYWx0ZXJuYXRpdmUgb2YgdGhlIGNhcmQncyB0aXRsZSBpbWFnZS5cbiAgICAgKi9cbiAgICBhbHQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgYW55IGNoYW5nZSB0byB0aGUgaW1hZ2UgdXJsIHByb3BlcnR5IHdpbGwgY2F1c2UgdGhlXG4gICAgICogYHBsYWNlaG9sZGVyYCBpbWFnZSB0byBiZSBzaG93biB1bnRpbCB0aGUgaW1hZ2UgaXMgZnVsbHkgcmVuZGVyZWQuXG4gICAgICovXG4gICAgcHJlbG9hZEltYWdlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHByZWxvYWRJbWFnZWAgaXMgdHJ1ZSwgc2V0dGluZyBgZmFkZUltYWdlYCB0byB0cnVlIHdpbGwgY2F1c2UgdGhlXG4gICAgICogaW1hZ2UgdG8gZmFkZSBpbnRvIHBsYWNlLlxuICAgICAqL1xuICAgIGZhZGVJbWFnZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGltYWdlIHdpbGwgYmUgdXNlZCBhcyBhIGJhY2tncm91bmQvcGxhY2Vob2xkZXIgdW50aWwgdGhlIHNyYyBpbWFnZSBoYXNcbiAgICAgKiBsb2FkZWQuIFVzZSBvZiBhIGRhdGEtVVJJIGZvciBwbGFjZWhvbGRlciBpcyBlbmNvdXJhZ2VkIGZvciBpbnN0YW50IHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICBwbGFjZWhvbGRlckltYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogbnVsbFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgei1kZXB0aCBvZiB0aGUgY2FyZCwgZnJvbSAwLTUuXG4gICAgICovXG4gICAgZWxldmF0aW9uOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMSxcbiAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhpcyB0byB0cnVlIHRvIGFuaW1hdGUgdGhlIGNhcmQgc2hhZG93IHdoZW4gc2V0dGluZyBhIG5ld1xuICAgICAqIGB6YCB2YWx1ZS5cbiAgICAgKi9cbiAgICBhbmltYXRlZFNoYWRvdzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWFkLW9ubHkgcHJvcGVydHkgdXNlZCB0byBwYXNzIGRvd24gdGhlIGBhbmltYXRlZFNoYWRvd2AgdmFsdWUgdG9cbiAgICAgKiB0aGUgdW5kZXJseWluZyBwYXBlci1tYXRlcmlhbCBzdHlsZSAoc2luY2UgdGhleSBoYXZlIGRpZmZlcmVudCBuYW1lcykuXG4gICAgICovXG4gICAgYW5pbWF0ZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgIGNvbXB1dGVkOiAnX2NvbXB1dGVBbmltYXRlZChhbmltYXRlZFNoYWRvdyknXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JtYXQgZnVuY3Rpb24gZm9yIGFyaWEtaGlkZGVuLiBVc2UgdGhlICEgb3BlcmF0b3IgcmVzdWx0cyBpbiB0aGVcbiAgICogZW1wdHkgc3RyaW5nIHdoZW4gZ2l2ZW4gYSBmYWxzeSB2YWx1ZS5cbiAgICovXG4gIF9pc0hpZGRlbjogZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgcmV0dXJuIGltYWdlID8gJ2ZhbHNlJyA6ICd0cnVlJztcbiAgfSxcblxuICBfaGVhZGluZ0NoYW5nZWQ6IGZ1bmN0aW9uIChoZWFkaW5nKSB7XG4gICAgdmFyIGN1cnJlbnRIZWFkaW5nID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hlYWRpbmcnKSxcbiAgICAgICAgY3VycmVudExhYmVsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcblxuICAgIGlmICh0eXBlb2YgY3VycmVudExhYmVsICE9PSAnc3RyaW5nJyB8fCBjdXJyZW50TGFiZWwgPT09IGN1cnJlbnRIZWFkaW5nKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGhlYWRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBfY29tcHV0ZUhlYWRpbmdDbGFzczogZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgcmV0dXJuIGltYWdlID8gJyBvdmVyLWltYWdlJyA6ICcnO1xuICB9LFxuXG4gIF9jb21wdXRlQW5pbWF0ZWQ6IGZ1bmN0aW9uIChhbmltYXRlZFNoYWRvdykge1xuICAgIHJldHVybiBhbmltYXRlZFNoYWRvdztcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWNhcmQvcGFwZXItY2FyZC5odG1sXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(37);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-material-styles> <template> <style>:host,html{--paper-material:{display:block;position:relative};--paper-material-elevation-1:{@apply --shadow-elevation-2dp;};--paper-material-elevation-2:{@apply --shadow-elevation-4dp;};--paper-material-elevation-3:{@apply --shadow-elevation-6dp;};--paper-material-elevation-4:{@apply --shadow-elevation-8dp;};--paper-material-elevation-5:{@apply --shadow-elevation-16dp;};}.paper-material,:host(.paper-material){@apply --paper-material;}.paper-material[elevation=\\\"1\\\"],:host(.paper-material[elevation=\\\"1\\\"]){@apply --paper-material-elevation-1;}.paper-material[elevation=\\\"2\\\"],:host(.paper-material[elevation=\\\"2\\\"]){@apply --paper-material-elevation-2;}.paper-material[elevation=\\\"3\\\"],:host(.paper-material[elevation=\\\"3\\\"]){@apply --paper-material-elevation-3;}.paper-material[elevation=\\\"4\\\"],:host(.paper-material[elevation=\\\"4\\\"]){@apply --paper-material-elevation-4;}.paper-material[elevation=\\\"5\\\"],:host(.paper-material[elevation=\\\"5\\\"]){@apply --paper-material-elevation-5;}</style> </template> </dom-module>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXN0eWxlcy9lbGVtZW50LXN0eWxlcy9wYXBlci1tYXRlcmlhbC1zdHlsZXMuaHRtbD9mZmFjIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vc2hhZG93Lmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1wYXBlci1tYXRlcmlhbC1zdHlsZXM+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0LGh0bWx7LS1wYXBlci1tYXRlcmlhbDp7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX07LS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tMTp7QGFwcGx5IC0tc2hhZG93LWVsZXZhdGlvbi0yZHA7fTstLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0yOntAYXBwbHkgLS1zaGFkb3ctZWxldmF0aW9uLTRkcDt9Oy0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTM6e0BhcHBseSAtLXNoYWRvdy1lbGV2YXRpb24tNmRwO307LS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tNDp7QGFwcGx5IC0tc2hhZG93LWVsZXZhdGlvbi04ZHA7fTstLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi01OntAYXBwbHkgLS1zaGFkb3ctZWxldmF0aW9uLTE2ZHA7fTt9LnBhcGVyLW1hdGVyaWFsLDpob3N0KC5wYXBlci1tYXRlcmlhbCl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWw7fS5wYXBlci1tYXRlcmlhbFtlbGV2YXRpb249XFxcIjFcXFwiXSw6aG9zdCgucGFwZXItbWF0ZXJpYWxbZWxldmF0aW9uPVxcXCIxXFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0xO30ucGFwZXItbWF0ZXJpYWxbZWxldmF0aW9uPVxcXCIyXFxcIl0sOmhvc3QoLnBhcGVyLW1hdGVyaWFsW2VsZXZhdGlvbj1cXFwiMlxcXCJdKXtAYXBwbHkgLS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tMjt9LnBhcGVyLW1hdGVyaWFsW2VsZXZhdGlvbj1cXFwiM1xcXCJdLDpob3N0KC5wYXBlci1tYXRlcmlhbFtlbGV2YXRpb249XFxcIjNcXFwiXSl7QGFwcGx5IC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTM7fS5wYXBlci1tYXRlcmlhbFtlbGV2YXRpb249XFxcIjRcXFwiXSw6aG9zdCgucGFwZXItbWF0ZXJpYWxbZWxldmF0aW9uPVxcXCI0XFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi00O30ucGFwZXItbWF0ZXJpYWxbZWxldmF0aW9uPVxcXCI1XFxcIl0sOmhvc3QoLnBhcGVyLW1hdGVyaWFsW2VsZXZhdGlvbj1cXFwiNVxcXCJdKXtAYXBwbHkgLS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tNTt9PC9zdHlsZT4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL2VsZW1lbnQtc3R5bGVzL3BhcGVyLW1hdGVyaWFsLXN0eWxlcy5odG1sXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\n  lib: __webpack_require__(114),\n  ordered: __webpack_require__(115),\n  fitzpatrick_scale_modifiers: [\"🏻\", \"🏼\", \"🏽\", \"🏾\", \"🏿\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vamlsaWIvaW5kZXguanM/ZWIwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGliOiByZXF1aXJlKCcuL2Vtb2ppcycpLFxuICBvcmRlcmVkOiByZXF1aXJlKCcuL29yZGVyZWQnKSxcbiAgZml0enBhdHJpY2tfc2NhbGVfbW9kaWZpZXJzOiBbXCLwn4+7XCIsIFwi8J+PvFwiLCBcIvCfj71cIiwgXCLwn4++XCIsIFwi8J+Pv1wiXVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9lbW9qaWxpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=emoji-generator> <template> <style></style> {{emoji}} </template> </dom-module>\");\n\nconst emoji = __webpack_require__(43);\n\n/**\n * @customElement\n * @polymer\n */\nclass EmojiGenerator extends Polymer.Element {\n  static get is() {\n    return 'emoji-generator';\n  }\n  static get properties() {\n    return {\n      keyword: {\n        type: String,\n        value: [],\n        observer: '_keywordUpdated'\n      },\n      emoji: {\n        type: String,\n        value: null\n      }\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.generateEmoji();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  _keywordUpdated(newval) {\n    if (newval !== null) {\n      this.generateEmoji();\n    }\n  }\n\n  generateEmoji() {\n    const entries = Object.entries(emoji.lib).filter(entry => {\n      const keywords = entry[1].keywords;\n      if (keywords && keywords.length > 0) {\n        if (keywords.includes(this.keyword)) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    });\n\n    if (entries.length < 1) {\n      return;\n    }\n\n    const index = Math.floor(Math.random() * entries.length);\n    const entry = entries[index][1];\n\n    this.emoji = entry.char;\n  }\n\n}\n\nwindow.customElements.define(EmojiGenerator.is, EmojiGenerator);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbW9qaS1nZW5lcmF0b3IuaHRtbD83OGM5Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnfi9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9ZW1vamktZ2VuZXJhdG9yPiA8dGVtcGxhdGU+IDxzdHlsZT48L3N0eWxlPiB7e2Vtb2ppfX0gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuY29uc3QgZW1vamkgPSByZXF1aXJlKFwiZW1vamlsaWJcIik7XG5cbi8qKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBwb2x5bWVyXG4gKi9cbmNsYXNzIEVtb2ppR2VuZXJhdG9yIGV4dGVuZHMgUG9seW1lci5FbGVtZW50IHtcbiAgc3RhdGljIGdldCBpcygpIHtcbiAgICByZXR1cm4gJ2Vtb2ppLWdlbmVyYXRvcic7XG4gIH1cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICBvYnNlcnZlcjogJ19rZXl3b3JkVXBkYXRlZCdcbiAgICAgIH0sXG4gICAgICBlbW9qaToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmdlbmVyYXRlRW1vamkoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBfa2V5d29yZFVwZGF0ZWQobmV3dmFsKSB7XG4gICAgaWYgKG5ld3ZhbCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUVtb2ppKCk7XG4gICAgfVxuICB9XG5cbiAgZ2VuZXJhdGVFbW9qaSgpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZW1vamkubGliKS5maWx0ZXIoZW50cnkgPT4ge1xuICAgICAgY29uc3Qga2V5d29yZHMgPSBlbnRyeVsxXS5rZXl3b3JkcztcbiAgICAgIGlmIChrZXl3b3JkcyAmJiBrZXl3b3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChrZXl3b3Jkcy5pbmNsdWRlcyh0aGlzLmtleXdvcmQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgaWYgKGVudHJpZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW50cmllcy5sZW5ndGgpO1xuICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1tpbmRleF1bMV07XG5cbiAgICB0aGlzLmVtb2ppID0gZW50cnkuY2hhcjtcbiAgfVxuXG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoRW1vamlHZW5lcmF0b3IuaXMsIEVtb2ppR2VuZXJhdG9yKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2Vtb2ppLWdlbmVyYXRvci5odG1sXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__emoji_caption_app_html__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__emoji_caption_app_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__emoji_caption_app_html__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/ODc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vZW1vamktY2FwdGlvbi1hcHAuaHRtbCc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(5);\n\n__webpack_require__(8);\n\n__webpack_require__(71);\n\n__webpack_require__(73);\n\n__webpack_require__(77);\n\n__webpack_require__(78);\n\n__webpack_require__(36);\n\n__webpack_require__(84);\n\n__webpack_require__(95);\n\n__webpack_require__(116);\n\n__webpack_require__(44);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<custom-style> <style is=custom-style>body,html{box-sizing:border-box}body{margin:0;width:100vw;height:100vh;padding:16px;overflow:auto;background:#004d40;color:#fff;--theme-primary:var(--paper-green-800);--theme-secondary:var(--paper-green-a400);--theme-accent:white;--accent-font:'Lobster',cursive}*{box-sizing:inherit}</style> </custom-style>\");\n\nRegisterHtmlTemplate.register(\"<dom-module id=emoji-caption-app> <template> <style>:host{display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;min-height:100%}.content-container{display:flex;flex-direction:column;align-items:center;width:100%;padding-bottom:8px}.page-title{@apply --paper-font-headline;}.page-title-emoji{animation:fadeIn .3s cubic-bezier(.4,0,.2,1) 1}.page-title-text{margin:0 8px;font-family:var(--accent-font)}iron-pages{width:100%;max-width:500px}.caption{@apply --paper-font-caption;padding:8px;font-family:var(--accent-font)}.caption>a{color:var(--theme-secondary);text-decoration:none}</style> <h1 class=page-title> <span class=page-title-emoji> <emoji-generator keyword=[[keyword1]]></emoji-generator> </span> <span class=page-title-text>Emoji Caption</span> <span class=page-title-emoji> <emoji-generator keyword=[[keyword2]]></emoji-generator> </span> </h1> <div class=content-container> <paper-dialog id=modal modal=\\\"\\\"> <p> There was an error loading this image URL, please try again. </p> <div class=buttons> <paper-button dialog-confirm=\\\"\\\" autofocus=\\\"\\\">OK</paper-button> </div> </paper-dialog> <app-location route={{route}}></app-location> <app-route route={{route}} pattern=/emoji-caption/:view data={{routeData}}></app-route> <iron-pages selected=[[routeData.view]] attr-for-selected=data-route> <image-input-view data-route=\\\"\\\" route={{route}} id=image-input-view image-url={{imageUrl}} image-loading={{imageLoading}}></image-input-view> <image-caption-view data-route=caption route={{route}} id=image-caption-view image-url={{imageUrl}}> </image-caption-view> </iron-pages> </div> <span class=caption>Made with ❤️ by <a href=https://twitter.com/AlexJRsaunders rel=noopener target=_blank>Alex</a> . Find the source on <a href=https://github.com/alex-saunders/emoji-caption rel=noopener target=_blank>Github</a> </span> </template> </dom-module>\");\n\n/**\n * @customElement\n * @polymer\n */\nclass EmojiCaptionApp extends Polymer.Element {\n  static get is() {\n    return 'emoji-caption-app';\n  }\n  static get properties() {\n    return {\n      keyword1: {\n        type: String,\n        value: []\n      },\n      keyword2: {\n        type: String,\n        value: []\n      },\n      image: {\n        type: String\n      },\n      imageUrl: {\n        type: String\n      },\n      imageLoading: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n\n  constructor() {\n    super();\n\n    // get all emojis that have either any of the following keywords\n    // associated with them\n\n    this._imageLoaded = e => {\n      this.$['image-caption-view'].removeEventListener('imageLoaded', this._imageLoaded);\n      clearTimeout(this.timeout);\n\n      this.set('route.path', 'emoji-caption/caption/');\n      this.imageLoading = false;\n      this.imageUrl = \"\";\n    };\n\n    this._imageError = e => {\n      this.$['image-caption-view'].removeEventListener('imageError', this._imageError);\n      clearTimeout(this.timeout);\n\n      this.set('route.path', 'emoji-caption/');\n      this.imageLoading = false;\n\n      this.$.modal.open();\n      this.imageUrl = \"\";\n    };\n\n    const keywordsToInclude = ['face', 'photo'];\n\n    this.keyword1 = this._randomKeyword(keywordsToInclude);\n    this.keyword2 = this._randomKeyword(keywordsToInclude);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.imageUrl) {\n      this.set('route.path', '/emoji-caption/');\n    } else {\n      this.set('route.path', '/emoji-caption/caption');\n    }\n\n    const imageInputView = this.$['image-input-view'];\n    imageInputView.addEventListener('imageUrlSubmitted', e => {\n      console.log('imageurlsubmitted', this.imageUrl);\n\n      const imageCaptionView = this.$['image-caption-view'];\n      imageCaptionView.addEventListener('imageLoaded', this._imageLoaded);\n      imageCaptionView.addEventListener('imageError', this._imageError);\n\n      this.timeout = setTimeout(() => {\n        this.imageLoading = true;\n      }, 0);\n      imageCaptionView.loadImageAndCaption(this.imageUrl);\n    });\n  }\n\n  _randomKeyword(keywords) {\n    const index = Math.floor(Math.random() * keywords.length);\n    const keyword = keywords[index];\n\n    return keyword;\n  }\n\n}\n\nwindow.customElements.define(EmojiCaptionApp.is, EmojiCaptionApp);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(10);\n\n(function () {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = customElements.get('dom-module').import('foo', 'img');\n   *\n   * @customElement\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   * @unrestricted\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() {\n      return ['id'];\n    }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ? HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1tb2R1bGUuaHRtbD80YTMyIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vdXRpbHMvYm9vdC5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL3Jlc29sdmUtdXJsLmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGxldCBtb2R1bGVzID0ge307XG4gIGxldCBsY01vZHVsZXMgPSB7fTtcbiAgZnVuY3Rpb24gZmluZE1vZHVsZShpZCkge1xuICAgIHJldHVybiBtb2R1bGVzW2lkXSB8fCBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrKGluc3QpIHtcbiAgICBpZiAoaW5zdC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2RvbS1tb2R1bGUgJXMgaGFzIHN0eWxlIG91dHNpZGUgdGVtcGxhdGUnLCBpbnN0LmlkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGBkb20tbW9kdWxlYCBlbGVtZW50IHJlZ2lzdGVycyB0aGUgZG9tIGl0IGNvbnRhaW5zIHRvIHRoZSBuYW1lIGdpdmVuXG4gICAqIGJ5IHRoZSBtb2R1bGUncyBpZCBhdHRyaWJ1dGUuIEl0IHByb3ZpZGVzIGEgdW5pZmllZCBkYXRhYmFzZSBvZiBkb21cbiAgICogYWNjZXNzaWJsZSB2aWEgaXRzIHN0YXRpYyBgaW1wb3J0YCBBUEkuXG4gICAqXG4gICAqIEEga2V5IHVzZSBjYXNlIG9mIGBkb20tbW9kdWxlYCBpcyBmb3IgcHJvdmlkaW5nIGN1c3RvbSBlbGVtZW50IGA8dGVtcGxhdGU+YHNcbiAgICogdmlhIEhUTUwgaW1wb3J0cyB0aGF0IGFyZSBwYXJzZWQgYnkgdGhlIG5hdGl2ZSBIVE1MIHBhcnNlciwgdGhhdCBjYW4gYmVcbiAgICogcmVsb2NhdGVkIGR1cmluZyBhIGJ1bmRsaW5nIHBhc3MgYW5kIHN0aWxsIGxvb2tlZCB1cCBieSBgaWRgLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgICAgPGRvbS1tb2R1bGUgaWQ9XCJmb29cIj5cbiAgICogICAgICAgPGltZyBzcmM9XCJzdHVmZi5wbmdcIj5cbiAgICogICAgIDwvZG9tLW1vZHVsZT5cbiAgICpcbiAgICogVGhlbiBpbiBjb2RlIGluIHNvbWUgb3RoZXIgbG9jYXRpb24gdGhhdCBjYW5ub3QgYWNjZXNzIHRoZSBkb20tbW9kdWxlIGFib3ZlXG4gICAqXG4gICAqICAgICBsZXQgaW1nID0gY3VzdG9tRWxlbWVudHMuZ2V0KCdkb20tbW9kdWxlJykuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gICAqXG4gICAqIEBjdXN0b21FbGVtZW50XG4gICAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgcHJvdmlkZXMgYSByZWdpc3RyeSBvZiByZWxvY2F0YWJsZSBET00gY29udGVudFxuICAgKiAgIGJ5IGBpZGAgdGhhdCBpcyBhZ25vc3RpYyB0byBidW5kbGluZy5cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgRG9tTW9kdWxlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICByZXR1cm4gWydpZCddO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZWxlbWVudCBzcGVjaWZpZWQgYnkgdGhlIGNzcyBgc2VsZWN0b3JgIGluIHRoZSBtb2R1bGVcbiAgICAgKiByZWdpc3RlcmVkIGJ5IGBpZGAuIEZvciBleGFtcGxlLCB0aGlzLmltcG9ydCgnZm9vJywgJ2ltZycpO1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGRvbS1tb2R1bGUgaW4gd2hpY2ggdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gc2VsZWN0b3IgVGhlIGNzcyBzZWxlY3RvciBieSB3aGljaCB0byBmaW5kIHRoZSBlbGVtZW50LlxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IFJldHVybnMgdGhlIGVsZW1lbnQgd2hpY2ggbWF0Y2hlcyBgc2VsZWN0b3JgIGluIHRoZVxuICAgICAqIG1vZHVsZSByZWdpc3RlcmVkIGF0IHRoZSBzcGVjaWZpZWQgYGlkYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW1wb3J0KGlkLCBzZWxlY3Rvcikge1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGxldCBtID0gZmluZE1vZHVsZShpZCk7XG4gICAgICAgIGlmIChtICYmIHNlbGVjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIG0ucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSkge1xuICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBhYnNvbHV0ZSBVUkwgb2YgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIG9mIHRoaXMgYGRvbS1tb2R1bGVgLlxuICAgICAqXG4gICAgICogVGhpcyB2YWx1ZSB3aWxsIGRpZmZlciBmcm9tIHRoaXMgZWxlbWVudCdzIGBvd25lckRvY3VtZW50YCBpbiB0aGVcbiAgICAgKiBmb2xsb3dpbmcgd2F5czpcbiAgICAgKiAtIFRha2VzIGludG8gYWNjb3VudCBhbnkgYGFzc2V0cGF0aGAgYXR0cmlidXRlIGFkZGVkIGR1cmluZyBidW5kbGluZ1xuICAgICAqICAgdG8gaW5kaWNhdGUgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIHJlbGF0aXZlIHRvIHRoZSBidW5kbGVkIGxvY2F0aW9uXG4gICAgICogLSBVc2VzIHRoZSBIVE1MSW1wb3J0cyBwb2x5ZmlsbCdzIGBpbXBvcnRGb3JFbGVtZW50YCBBUEkgdG8gZW5zdXJlXG4gICAgICogICB0aGUgcGF0aCBpcyByZWxhdGl2ZSB0byB0aGUgaW1wb3J0IGRvY3VtZW50J3MgbG9jYXRpb24gc2luY2VcbiAgICAgKiAgIGBvd25lckRvY3VtZW50YCBpcyBub3QgY3VycmVudGx5IHBvbHlmaWxsZWRcbiAgICAgKi9cbiAgICBnZXQgYXNzZXRwYXRoKCkge1xuICAgICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYXNzZXRwYXRoLlxuICAgICAgaWYgKCF0aGlzLl9fYXNzZXRwYXRoKSB7XG4gICAgICAgIC8vIG5vdGU6IGFzc2V0cGF0aCBzZXQgdmlhIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIHJlbGF0aXZlIHRvIHRoaXNcbiAgICAgICAgLy8gZWxlbWVudCdzIGxvY2F0aW9uOyBhY2NvbW9kYXRlIHBvbHlmaWxsZWQgSFRNTEltcG9ydHNcbiAgICAgICAgY29uc3Qgb3duZXIgPSB3aW5kb3cuSFRNTEltcG9ydHMgJiYgSFRNTEltcG9ydHMuaW1wb3J0Rm9yRWxlbWVudCA/IEhUTUxJbXBvcnRzLmltcG9ydEZvckVsZW1lbnQodGhpcykgfHwgZG9jdW1lbnQgOiB0aGlzLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IHVybCA9IFBvbHltZXIuUmVzb2x2ZVVybC5yZXNvbHZlVXJsKHRoaXMuZ2V0QXR0cmlidXRlKCdhc3NldHBhdGgnKSB8fCAnJywgb3duZXIuYmFzZVVSSSk7XG4gICAgICAgIHRoaXMuX19hc3NldHBhdGggPSBQb2x5bWVyLlJlc29sdmVVcmwucGF0aEZyb21VcmwodXJsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9fYXNzZXRwYXRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyB0aGUgZG9tLW1vZHVsZSBhdCBhIGdpdmVuIGlkLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWRcbiAgICAgKiB3aGVuIGEgZG9tLW1vZHVsZSBpcyBpbXBlcmF0aXZlbHkgY3JlYXRlZC4gRm9yXG4gICAgICogZXhhbXBsZSwgYGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RvbS1tb2R1bGUnKS5yZWdpc3RlcignZm9vJylgLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgVGhlIGlkIGF0IHdoaWNoIHRvIHJlZ2lzdGVyIHRoZSBkb20tbW9kdWxlLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyKGlkKSB7XG4gICAgICBpZCA9IGlkIHx8IHRoaXMuaWQ7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAvLyBzdG9yZSBpZCBzZXBhcmF0ZSBmcm9tIGxvd2VyY2FzZWQgaWQgc28gdGhhdFxuICAgICAgICAvLyBpbiBhbGwgY2FzZXMgbWl4ZWRDYXNlIGlkIHdpbGwgc3RvcmVkIGRpc3RpbmN0bHlcbiAgICAgICAgLy8gYW5kIGxvd2VyY2FzZSB2ZXJzaW9uIGlzIGEgZmFsbGJhY2tcbiAgICAgICAgbW9kdWxlc1tpZF0gPSB0aGlzO1xuICAgICAgICBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV0gPSB0aGlzO1xuICAgICAgICBzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIERvbU1vZHVsZS5wcm90b3R5cGVbJ21vZHVsZXMnXSA9IG1vZHVsZXM7XG5cbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tbW9kdWxlJywgRG9tTW9kdWxlKTtcblxuICAvLyBleHBvcnRcbiAgUG9seW1lci5Eb21Nb2R1bGUgPSBEb21Nb2R1bGU7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tbW9kdWxlLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function (path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function (path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is an ancestor of `base`.\n     */\n    isAncestor: function (base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is a descendant of `base`.\n     */\n    isDescendant: function (base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function (base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    /**\n     * @param {string} base Path string to test against\n     * @param {string} path Path string to test\n     * @return {boolean} True if `path` is equal to `base`\n     * @this {Path}\n     */\n    matches: function (base, path) {\n      return base === path || this.isAncestor(base, path) || this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function (path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i = 0; i < path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j = 0; j < args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     * @this {Path}\n     * @suppress {checkTypes}\n     */\n    split: function (path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     * @this {Path}\n     */\n    get: function (root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i = 0; i < parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     * @this {Path}\n     */\n    set: function (root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length - 1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i = 0; i < parts.length - 1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n(function () {\n\n  'use strict';\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while (t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  function findTemplateNode(root, nodeInfo) {\n    // recursively ascend tree until we hit root\n    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n = parent.firstChild, i = 0; n; n = n.nextSibling) {\n        if (nodeInfo.parentIndex === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, nodeInfo) {\n    if (nodeInfo.id) {\n      map[nodeInfo.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, nodeInfo) {\n    if (nodeInfo.events && nodeInfo.events.length) {\n      for (let j = 0, e$ = nodeInfo.events, e; j < e$.length && (e = e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, nodeInfo) {\n    if (nodeInfo.templateInfo) {\n      node._templateInfo = nodeInfo.templateInfo;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function (e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_TemplateStamp}\n     */\n    class TemplateStamp extends superClass {\n\n      /**\n       * Scans a template to produce template metadata.\n       *\n       * Template-specific metadata are stored in the object returned, and node-\n       * specific metadata are stored in objects in its flattened `nodeInfoList`\n       * array.  Only nodes in the template that were parsed as nodes of\n       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n       * contains an `index` (`childNodes` index in parent) and optionally\n       * `parent`, which points to node info of its parent (including its index).\n       *\n       * The template metadata object returned from this method has the following\n       * structure (many fields optional):\n       *\n       * ```js\n       *   {\n       *     // Flattened list of node metadata (for nodes that generated metadata)\n       *     nodeInfoList: [\n       *       {\n       *         // `id` attribute for any nodes with id's for generating `$` map\n       *         id: {string},\n       *         // `on-event=\"handler\"` metadata\n       *         events: [\n       *           {\n       *             name: {string},   // event name\n       *             value: {string},  // handler method name\n       *           }, ...\n       *         ],\n       *         // Notes when the template contained a `<slot>` for shady DOM\n       *         // optimization purposes\n       *         hasInsertionPoint: {boolean},\n       *         // For nested `<template>`` nodes, nested template metadata\n       *         templateInfo: {object}, // nested template metadata\n       *         // Metadata to allow efficient retrieval of instanced node\n       *         // corresponding to this metadata\n       *         parentInfo: {number},   // reference to parent nodeInfo>\n       *         parentIndex: {number},  // index in parent's `childNodes` collection\n       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n       *       },\n       *       ...\n       *     ],\n       *     // When true, the template had the `strip-whitespace` attribute\n       *     // or was nested in a template with that setting\n       *     stripWhitespace: {boolean},\n       *     // For nested templates, nested template content is moved into\n       *     // a document fragment stored here; this is an optimization to\n       *     // avoid the cost of nested template cloning\n       *     content: {DocumentFragment}\n       *   }\n       * ```\n       *\n       * This method kicks off a recursive treewalk as follows:\n       *\n       * ```\n       *    _parseTemplate <---------------------+\n       *      _parseTemplateContent              |\n       *        _parseTemplateNode  <------------|--+\n       *          _parseTemplateNestedTemplate --+  |\n       *          _parseTemplateChildNodes ---------+\n       *          _parseTemplateNodeAttributes\n       *            _parseTemplateNodeAttribute\n       *\n       * ```\n       *\n       * These methods may be overridden to add custom metadata about templates\n       * to either `templateInfo` or `nodeInfo`.\n       *\n       * Note that this method may be destructive to the template, in that\n       * e.g. event annotations may be removed after being noted in the\n       * template metadata.\n       *\n       * @param {!HTMLTemplateElement} template Template to parse\n       * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n       *   template, for parsing nested templates\n       * @return {!TemplateInfo} Parsed template metadata\n       */\n      static _parseTemplate(template, outerTemplateInfo) {\n        // since a template may be re-used, memo-ize metadata\n        if (!template._templateInfo) {\n          let templateInfo = template._templateInfo = {};\n          templateInfo.nodeInfoList = [];\n          templateInfo.stripWhiteSpace = outerTemplateInfo && outerTemplateInfo.stripWhiteSpace || template.hasAttribute('strip-whitespace');\n          this._parseTemplateContent(template, templateInfo, { parent: null });\n        }\n        return template._templateInfo;\n      }\n\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n      }\n\n      /**\n       * Parses template node and adds template and node metadata based on\n       * the current node, and its `childNodes` and `attributes`.\n       *\n       * This method may be overridden to add custom node or template specific\n       * metadata based on this node.\n       *\n       * @param {Node} node Node to parse\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted;\n        let element = /** @type {Element} */node;\n        if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n          noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n        } else if (element.localName === 'slot') {\n          // For ShadyDom optimization, indicating there is an insertion point\n          templateInfo.hasInsertionPoint = true;\n        }\n        if (element.firstChild) {\n          noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n        }\n        if (element.hasAttributes && element.hasAttributes()) {\n          noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses template child nodes for the given root node.\n       *\n       * This method also wraps whitelisted legacy template extensions\n       * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n       * wrappers, collapses text nodes, and strips whitespace from the template\n       * if the `templateInfo.stripWhitespace` setting was provided.\n       *\n       * @param {Node} root Root node whose `childNodes` will be parsed\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       */\n      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n        if (root.localName === 'script' || root.localName === 'style') {\n          return;\n        }\n        for (let node = root.firstChild, parentIndex = 0, next; node; node = next) {\n          // Wrap templates\n          if (node.localName == 'template') {\n            node = wrapTemplateExtension(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          next = node.nextSibling;\n          if (node.nodeType === Node.TEXT_NODE) {\n            let /** Node */n = next;\n            while (n && n.nodeType === Node.TEXT_NODE) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              continue;\n            }\n          }\n          let childInfo = { parentIndex, parentInfo: nodeInfo };\n          if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n            childInfo.infoIndex = templateInfo.nodeInfoList.push( /** @type {!NodeInfo} */childInfo) - 1;\n          }\n          // Increment if not removed\n          if (node.parentNode) {\n            parentIndex++;\n          }\n        }\n      }\n\n      /**\n       * Parses template content for the given nested `<template>`.\n       *\n       * Nested template info is stored as `templateInfo` in the current node's\n       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n       * It will then be the responsibility of the host to set it back to the\n       * template and for users stamping nested templates to use the\n       * `_contentForTemplate` method to retrieve the content for this template\n       * (an optimization to avoid the cost of cloning nested template content).\n       *\n       * @param {HTMLTemplateElement} node Node to parse (a <template>)\n       * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n       *   that includes the template `node`\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n        let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n        let content = templateInfo.content = node.content.ownerDocument.createDocumentFragment();\n        content.appendChild(node.content);\n        nodeInfo.templateInfo = templateInfo;\n        return true;\n      }\n\n      /**\n       * Parses template node attributes and adds node metadata to `nodeInfo`\n       * for nodes of interest.\n       *\n       * @param {Element} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n        // Make copy of original attribute list, since the order may change\n        // as attributes are added and removed\n        let noted = false;\n        let attrs = Array.from(node.attributes);\n        for (let i = attrs.length - 1, a; a = attrs[i]; i--) {\n          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses a single template node attribute and adds node metadata to\n       * `nodeInfo` for attributes of interest.\n       *\n       * This implementation adds metadata for `on-event=\"handler\"` attributes\n       * and `id` attributes.\n       *\n       * @param {Element} node Node to parse\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @param {string} name Attribute name\n       * @param {string} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        // events (on-*)\n        if (name.slice(0, 3) === 'on-') {\n          node.removeAttribute(name);\n          nodeInfo.events = nodeInfo.events || [];\n          nodeInfo.events.push({\n            name: name.slice(3),\n            value\n          });\n          return true;\n        }\n        // static id\n        else if (name === 'id') {\n            nodeInfo.id = value;\n            return true;\n          }\n        return false;\n      }\n\n      /**\n       * Returns the `content` document fragment for a given template.\n       *\n       * For nested templates, Polymer performs an optimization to cache nested\n       * template content to avoid the cost of cloning deeply nested templates.\n       * This method retrieves the cached content for a given template.\n       *\n       * @param {HTMLTemplateElement} template Template to retrieve `content` for\n       * @return {DocumentFragment} Content fragment\n       */\n      static _contentForTemplate(template) {\n        let templateInfo = /** @type {HTMLTemplateElementWithInfo} */template._templateInfo;\n        return templateInfo && templateInfo.content || template.content;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, and provides the following value-added\n       * features:\n       * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n       * * Generates an \"id map\" for all nodes with id's under `$` on returned\n       *   document fragment\n       * * Passes template info including `content` back to templates as\n       *   `_templateInfo` (a performance optimization to avoid deep template\n       *   cloning)\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested `<template>.content`\n       * is removed and stored in notes as well.\n       *\n       * @param {!HTMLTemplateElement} template Template to stamp\n       * @return {!StampedTemplate} Cloned template content\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content && window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let templateInfo = this.constructor._parseTemplate(template);\n        let nodeInfo = templateInfo.nodeInfoList;\n        let content = templateInfo.content || template.content;\n        let dom = /** @type {DocumentFragment} */document.importNode(content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n        let nodes = dom.nodeList = new Array(nodeInfo.length);\n        dom.$ = {};\n        for (let i = 0, l = nodeInfo.length, info; i < l && (info = nodeInfo[i]); i++) {\n          let node = nodes[i] = findTemplateNode(dom, info);\n          applyIdToMap(this, dom.$, node, info);\n          applyTemplateContent(this, node, info);\n          applyEventListener(this, node, info);\n        }\n        dom = /** @type {!StampedTemplate} */dom; // eslint-disable-line no-self-assign\n        return dom;\n      }\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n    return TemplateStamp;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(51);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3NoYWR5Y3NzL2FwcGx5LXNoaW0uaHRtbD80MjRiIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9hcHBseS1zaGltLm1pbi5qcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9zaGFkeWNzcy9hcHBseS1zaGltLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

eval("(function () {\n  /*\n  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n  Code distributed by Google as part of the polymer project is also\n  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n  */\n  'use strict';\n  var k = {};function n() {\n    this.end = this.start = 0;this.rules = this.parent = this.previous = null;this.cssText = this.parsedCssText = \"\";this.atRule = !1;this.type = 0;this.parsedSelector = this.selector = this.keyframesName = \"\";\n  }\n  function p(a) {\n    a = a.replace(aa, \"\").replace(ba, \"\");var c = q,\n        b = a,\n        d = new n();d.start = 0;d.end = b.length;for (var e = d, f = 0, h = b.length; f < h; f++) if (\"{\" === b[f]) {\n      e.rules || (e.rules = []);var g = e,\n          m = g.rules[g.rules.length - 1] || null;e = new n();e.start = f + 1;e.parent = g;e.previous = m;g.rules.push(e);\n    } else \"}\" === b[f] && (e.end = f + 1, e = e.parent || d);return c(d, a);\n  }\n  function q(a, c) {\n    var b = c.substring(a.start, a.end - 1);a.parsedCssText = a.cssText = b.trim();a.parent && (b = c.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), b = ca(b), b = b.replace(r, \" \"), b = b.substring(b.lastIndexOf(\";\") + 1), b = a.parsedSelector = a.selector = b.trim(), a.atRule = 0 === b.indexOf(\"@\"), a.atRule ? 0 === b.indexOf(\"@media\") ? a.type = t : b.match(da) && (a.type = u, a.keyframesName = a.selector.split(r).pop()) : a.type = 0 === b.indexOf(\"--\") ? v : x);if (b = a.rules) for (var d = 0, e = b.length, f; d < e && (f = b[d]); d++) q(f, c);return a;\n  }\n  function ca(a) {\n    return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function (a, b) {\n      a = b;for (b = 6 - a.length; b--;) a = \"0\" + a;return \"\\\\\" + a;\n    });\n  }\n  function y(a, c, b) {\n    b = void 0 === b ? \"\" : b;var d = \"\";if (a.cssText || a.rules) {\n      var e = a.rules,\n          f;if (f = e) f = e[0], f = !(f && f.selector && 0 === f.selector.indexOf(\"--\"));if (f) {\n        f = 0;for (var h = e.length, g; f < h && (g = e[f]); f++) d = y(g, c, d);\n      } else c ? c = a.cssText : (c = a.cssText, c = c.replace(ea, \"\").replace(fa, \"\"), c = c.replace(ha, \"\").replace(ia, \"\")), (d = c.trim()) && (d = \"  \" + d + \"\\n\");\n    }d && (a.selector && (b += a.selector + \" {\\n\"), b += d, a.selector && (b += \"}\\n\\n\"));return b;\n  }\n  var x = 1,\n      u = 7,\n      t = 4,\n      v = 1E3,\n      aa = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n      ba = /@import[^;]*;/gim,\n      ea = /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n      fa = /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n      ha = /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n      ia = /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n      da = /^@[^\\s]*keyframes/,\n      r = /\\s+/g;var ja = Promise.resolve();function ka(a) {\n    if (a = k[a]) a._applyShimCurrentVersion = a._applyShimCurrentVersion || 0, a._applyShimValidatingVersion = a._applyShimValidatingVersion || 0, a._applyShimNextVersion = (a._applyShimNextVersion || 0) + 1;\n  }function z(a) {\n    return a._applyShimCurrentVersion === a._applyShimNextVersion;\n  }function la(a) {\n    a._applyShimValidatingVersion = a._applyShimNextVersion;a.b || (a.b = !0, ja.then(function () {\n      a._applyShimCurrentVersion = a._applyShimNextVersion;a.b = !1;\n    }));\n  };var A = !(window.ShadyDOM && window.ShadyDOM.inUse),\n      B;function C(a) {\n    B = a && a.shimcssproperties ? !1 : A || !(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) || !window.CSS || !CSS.supports || !CSS.supports(\"box-shadow\", \"0 0 0 var(--foo)\"));\n  }window.ShadyCSS && void 0 !== window.ShadyCSS.nativeCss ? B = window.ShadyCSS.nativeCss : window.ShadyCSS ? (C(window.ShadyCSS), window.ShadyCSS = void 0) : C(window.WebComponents && window.WebComponents.flags);var D = B;var F = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi,\n      G = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n      ma = /@media\\s(.*)/;var H = new Set();function I(a) {\n    if (!a) return \"\";\"string\" === typeof a && (a = p(a));return y(a, D);\n  }function J(a) {\n    !a.__cssRules && a.textContent && (a.__cssRules = p(a.textContent));return a.__cssRules || null;\n  }function K(a, c, b, d) {\n    if (a) {\n      var e = !1,\n          f = a.type;if (d && f === t) {\n        var h = a.selector.match(ma);h && (window.matchMedia(h[1]).matches || (e = !0));\n      }f === x ? c(a) : b && f === u ? b(a) : f === v && (e = !0);if ((a = a.rules) && !e) {\n        e = 0;f = a.length;for (var g; e < f && (g = a[e]); e++) K(g, c, b, d);\n      }\n    }\n  }\n  function L(a, c) {\n    var b = a.indexOf(\"var(\");if (-1 === b) return c(a, \"\", \"\", \"\");a: {\n      var d = 0;var e = b + 3;for (var f = a.length; e < f; e++) if (\"(\" === a[e]) d++;else if (\")\" === a[e] && 0 === --d) break a;e = -1;\n    }d = a.substring(b + 4, e);b = a.substring(0, b);a = L(a.substring(e + 1), c);e = d.indexOf(\",\");return -1 === e ? c(b, d.trim(), \"\", a) : c(b, d.substring(0, e).trim(), d.substring(e + 1).trim(), a);\n  };var na = /;\\s*/m,\n      oa = /^\\s*(initial)|(inherit)\\s*$/;function M() {\n    this.a = {};\n  }M.prototype.set = function (a, c) {\n    a = a.trim();this.a[a] = { h: c, i: {} };\n  };M.prototype.get = function (a) {\n    a = a.trim();return this.a[a] || null;\n  };var N = null;function O() {\n    this.b = this.c = null;this.a = new M();\n  }O.prototype.o = function (a) {\n    a = G.test(a) || F.test(a);G.lastIndex = 0;F.lastIndex = 0;return a;\n  };\n  O.prototype.m = function (a, c) {\n    if (void 0 === a.a) {\n      var b = [];for (var d = a.content.querySelectorAll(\"style\"), e = 0; e < d.length; e++) {\n        var f = d[e];if (f.hasAttribute(\"shady-unscoped\")) {\n          if (!A) {\n            var h = f.textContent;H.has(h) || (H.add(h), h = f.cloneNode(!0), document.head.appendChild(h));f.parentNode.removeChild(f);\n          }\n        } else b.push(f.textContent), f.parentNode.removeChild(f);\n      }(b = b.join(\"\").trim()) ? (d = document.createElement(\"style\"), d.textContent = b, a.content.insertBefore(d, a.content.firstChild), b = d) : b = null;a.a = b;\n    }return (a = a.a) ? this.j(a, c) : null;\n  };O.prototype.j = function (a, c) {\n    c = void 0 === c ? \"\" : c;var b = J(a);this.l(b, c);a.textContent = I(b);return b;\n  };O.prototype.f = function (a) {\n    var c = this,\n        b = J(a);K(b, function (a) {\n      \":root\" === a.selector && (a.selector = \"html\");c.g(a);\n    });a.textContent = I(b);return b;\n  };O.prototype.l = function (a, c) {\n    var b = this;this.c = c;K(a, function (a) {\n      b.g(a);\n    });this.c = null;\n  };O.prototype.g = function (a) {\n    a.cssText = pa(this, a.parsedCssText);\":root\" === a.selector && (a.selector = \":host > *\");\n  };\n  function pa(a, c) {\n    c = c.replace(F, function (b, c, e, f) {\n      return qa(a, b, c, e, f);\n    });return P(a, c);\n  }function P(a, c) {\n    for (var b; b = G.exec(c);) {\n      var d = b[0],\n          e = b[1];b = b.index;var f = c.slice(0, b + d.indexOf(\"@apply\"));c = c.slice(b + d.length);var h = Q(a, f);d = void 0;var g = a;e = e.replace(na, \"\");var m = [];var l = g.a.get(e);l || (g.a.set(e, {}), l = g.a.get(e));if (l) for (d in g.c && (l.i[g.c] = !0), l.h) g = h && h[d], l = [d, \": var(\", e, \"_-_\", d], g && l.push(\",\", g), l.push(\")\"), m.push(l.join(\"\"));d = m.join(\"; \");c = \"\" + f + d + c;G.lastIndex = b + d.length;\n    }return c;\n  }\n  function Q(a, c) {\n    c = c.split(\";\");for (var b, d, e = {}, f = 0, h; f < c.length; f++) if (b = c[f]) if (h = b.split(\":\"), 1 < h.length) {\n      b = h[0].trim();var g = a;d = b;h = h.slice(1).join(\":\");var m = oa.exec(h);m && (m[1] ? (g.b || (g.b = document.createElement(\"meta\"), g.b.setAttribute(\"apply-shim-measure\", \"\"), g.b.style.all = \"initial\", document.head.appendChild(g.b)), d = window.getComputedStyle(g.b).getPropertyValue(d)) : d = \"apply-shim-inherit\", h = d);d = h;e[b] = d;\n    }return e;\n  }function ra(a, c) {\n    if (N) for (var b in c.i) b !== a.c && N(b);\n  }\n  function qa(a, c, b, d, e) {\n    d && L(d, function (c, b) {\n      b && a.a.get(b) && (e = \"@apply \" + b + \";\");\n    });if (!e) return c;var f = P(a, e),\n        h = c.slice(0, c.indexOf(\"--\")),\n        g = f = Q(a, f),\n        m = a.a.get(b),\n        l = m && m.h;l ? g = Object.assign(Object.create(l), f) : a.a.set(b, g);var Y = [],\n        w,\n        Z = !1;for (w in g) {\n      var E = f[w];void 0 === E && (E = \"initial\");!l || w in l || (Z = !0);Y.push(\"\" + b + \"_-_\" + w + \": \" + E);\n    }Z && ra(a, m);m && (m.h = g);d && (h = c + \";\" + h);return \"\" + h + Y.join(\"; \") + \";\";\n  }O.prototype.detectMixin = O.prototype.o;O.prototype.transformStyle = O.prototype.j;\n  O.prototype.transformCustomStyle = O.prototype.f;O.prototype.transformRules = O.prototype.l;O.prototype.transformRule = O.prototype.g;O.prototype.transformTemplate = O.prototype.m;O.prototype._separator = \"_-_\";Object.defineProperty(O.prototype, \"invalidCallback\", { get: function () {\n      return N;\n    }, set: function (a) {\n      N = a;\n    } });var R = null,\n      sa = window.HTMLImports && window.HTMLImports.whenReady || null,\n      S;function ta(a) {\n    requestAnimationFrame(function () {\n      sa ? sa(a) : (R || (R = new Promise(function (a) {\n        S = a;\n      }), \"complete\" === document.readyState ? S() : document.addEventListener(\"readystatechange\", function () {\n        \"complete\" === document.readyState && S();\n      })), R.then(function () {\n        a && a();\n      }));\n    });\n  };var T = new O();function U() {\n    var a = this;this.a = null;ta(function () {\n      V(a);\n    });T.invalidCallback = ka;\n  }function V(a) {\n    a.a || (a.a = window.ShadyCSS.CustomStyleInterface, a.a && (a.a.transformCallback = function (a) {\n      T.f(a);\n    }, a.a.validateCallback = function () {\n      requestAnimationFrame(function () {\n        a.a.enqueued && W(a);\n      });\n    }));\n  }U.prototype.prepareTemplate = function (a, c) {\n    V(this);k[c] = a;c = T.m(a, c);a._styleAst = c;\n  };\n  function W(a) {\n    V(a);if (a.a) {\n      var c = a.a.processStyles();if (a.a.enqueued) {\n        for (var b = 0; b < c.length; b++) {\n          var d = a.a.getStyleForCustomStyle(c[b]);d && T.f(d);\n        }a.a.enqueued = !1;\n      }\n    }\n  }U.prototype.styleSubtree = function (a, c) {\n    V(this);if (c) for (var b in c) null === b ? a.style.removeProperty(b) : a.style.setProperty(b, c[b]);if (a.shadowRoot) for (this.styleElement(a), a = a.shadowRoot.children || a.shadowRoot.childNodes, c = 0; c < a.length; c++) this.styleSubtree(a[c]);else for (a = a.children || a.childNodes, c = 0; c < a.length; c++) this.styleSubtree(a[c]);\n  };\n  U.prototype.styleElement = function (a) {\n    V(this);var c = a.localName,\n        b;c ? -1 < c.indexOf(\"-\") ? b = c : b = a.getAttribute && a.getAttribute(\"is\") || \"\" : b = a.is;if ((c = k[b]) && !z(c)) {\n      if (z(c) || c._applyShimValidatingVersion !== c._applyShimNextVersion) this.prepareTemplate(c, b), la(c);if (a = a.shadowRoot) if (a = a.querySelector(\"style\")) a.__cssRules = c._styleAst, a.textContent = I(c._styleAst);\n    }\n  };U.prototype.styleDocument = function (a) {\n    V(this);this.styleSubtree(document.body, a);\n  };\n  if (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n    var X = new U(),\n        ua = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;window.ShadyCSS = { prepareTemplate: function (a, c) {\n        W(X);X.prepareTemplate(a, c);\n      }, styleSubtree: function (a, c) {\n        W(X);X.styleSubtree(a, c);\n      }, styleElement: function (a) {\n        W(X);X.styleElement(a);\n      }, styleDocument: function (a) {\n        W(X);X.styleDocument(a);\n      }, getComputedStyleValue: function (a, c) {\n        return (a = window.getComputedStyle(a).getPropertyValue(c)) ? a.trim() : \"\";\n      }, nativeCss: D, nativeShadow: A };ua && (window.ShadyCSS.CustomStyleInterface = ua);\n  }window.ShadyCSS.ApplyShim = T;\n}).call(this);\n\n//# sourceMappingURL=apply-shim.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(11);\n\n__webpack_require__(17);\n\n(function () {\n\n  'use strict';\n\n  // detect native touch action support\n\n  let HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\n  let GESTURE_KEY = '__polymerGestures';\n  let HANDLED_OBJ = '__polymerGesturesHandled';\n  let TOUCH_ACTION = '__polymerGesturesTouchAction';\n  // radius for tap and track\n  let TAP_DISTANCE = 25;\n  let TRACK_DISTANCE = 5;\n  // number of last N track positions to keep\n  let TRACK_LENGTH = 2;\n\n  // Disabling \"mouse\" handlers for 2500ms is enough\n  let MOUSE_TIMEOUT = 2500;\n  let MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n  // an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\n  let MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\n  let MOUSE_HAS_BUTTONS = function () {\n    try {\n      return new MouseEvent('test', { buttons: 1 }).buttons === 1;\n    } catch (e) {\n      return false;\n    }\n  }();\n\n  /**\n   * @param {string} name Possible mouse event name\n   * @return {boolean} true if mouse event, false if not\n   */\n  function isMouseEvent(name) {\n    return MOUSE_EVENTS.indexOf(name) > -1;\n  }\n\n  /* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n  // check for passive event listeners\n  let SUPPORTS_PASSIVE = false;\n  (function () {\n    try {\n      let opts = Object.defineProperty({}, 'passive', { get() {\n          SUPPORTS_PASSIVE = true;\n        } });\n      window.addEventListener('test', null, opts);\n      window.removeEventListener('test', null, opts);\n    } catch (e) {}\n  })();\n\n  /**\n   * Generate settings for event listeners, dependant on `Polymer.passiveTouchGestures`\n   *\n   * @return {{passive: boolean} | undefined} Options to use for addEventListener and removeEventListener\n   */\n  function PASSIVE_TOUCH() {\n    if (HAS_NATIVE_TA && SUPPORTS_PASSIVE && Polymer.passiveTouchGestures) {\n      return { passive: true };\n    } else {\n      return;\n    }\n  }\n\n  // Check for touch-only devices\n  let IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\n  let GestureRecognizer = function () {}; // eslint-disable-line no-unused-vars\n  /** @type {function()} */\n  GestureRecognizer.prototype.reset;\n  /** @type {function(MouseEvent) | undefined} */\n  GestureRecognizer.prototype.mousedown;\n  /** @type {(function(MouseEvent) | undefined)} */\n  GestureRecognizer.prototype.mousemove;\n  /** @type {(function(MouseEvent) | undefined)} */\n  GestureRecognizer.prototype.mouseup;\n  /** @type {(function(TouchEvent) | undefined)} */\n  GestureRecognizer.prototype.touchstart;\n  /** @type {(function(TouchEvent) | undefined)} */\n  GestureRecognizer.prototype.touchmove;\n  /** @type {(function(TouchEvent) | undefined)} */\n  GestureRecognizer.prototype.touchend;\n  /** @type {(function(MouseEvent) | undefined)} */\n  GestureRecognizer.prototype.click;\n\n  // touch will make synthetic mouse events\n  // `preventDefault` on touchend will cancel them,\n  // but this breaks `<input>` focus and link clicks\n  // disable mouse handlers for MOUSE_TIMEOUT ms after\n  // a touchend to ignore synthetic mouse events\n  let mouseCanceller = function (mouseEvent) {\n    // Check for sourceCapabilities, used to distinguish synthetic events\n    // if mouseEvent did not come from a device that fires touch events,\n    // it was made by a real mouse and should be counted\n    // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n    let sc = mouseEvent.sourceCapabilities;\n    if (sc && !sc.firesTouchEvents) {\n      return;\n    }\n    // skip synthetic mouse events\n    mouseEvent[HANDLED_OBJ] = { skip: true };\n    // disable \"ghost clicks\"\n    if (mouseEvent.type === 'click') {\n      let path = mouseEvent.composedPath && mouseEvent.composedPath();\n      if (path) {\n        for (let i = 0; i < path.length; i++) {\n          if (path[i] === POINTERSTATE.mouse.target) {\n            return;\n          }\n        }\n      }\n      mouseEvent.preventDefault();\n      mouseEvent.stopPropagation();\n    }\n  };\n\n  /**\n   * @param {boolean=} setup True to add, false to remove.\n   */\n  function setupTeardownMouseCanceller(setup) {\n    let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n    for (let i = 0, en; i < events.length; i++) {\n      en = events[i];\n      if (setup) {\n        document.addEventListener(en, mouseCanceller, true);\n      } else {\n        document.removeEventListener(en, mouseCanceller, true);\n      }\n    }\n  }\n\n  function ignoreMouse(e) {\n    if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n      setupTeardownMouseCanceller(true);\n    }\n    let unset = function () {\n      setupTeardownMouseCanceller();\n      POINTERSTATE.mouse.target = null;\n      POINTERSTATE.mouse.mouseIgnoreJob = null;\n    };\n    POINTERSTATE.mouse.target = e.composedPath()[0];\n    POINTERSTATE.mouse.mouseIgnoreJob = Polymer.Debouncer.debounce(POINTERSTATE.mouse.mouseIgnoreJob, Polymer.Async.timeOut.after(MOUSE_TIMEOUT), unset);\n  }\n\n  /**\n   * @param {MouseEvent} ev event to test for left mouse button down\n   * @return {boolean} has left mouse button down\n   */\n  function hasLeftMouseButton(ev) {\n    let type = ev.type;\n    // exit early if the event is not a mouse event\n    if (!isMouseEvent(type)) {\n      return false;\n    }\n    // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n    // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n    if (type === 'mousemove') {\n      // allow undefined for testing events\n      let buttons = ev.buttons === undefined ? 1 : ev.buttons;\n      if (ev instanceof window.MouseEvent && !MOUSE_HAS_BUTTONS) {\n        buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n      }\n      // buttons is a bitmask, check that the left button bit is set (1)\n      return Boolean(buttons & 1);\n    } else {\n      // allow undefined for testing events\n      let button = ev.button === undefined ? 0 : ev.button;\n      // ev.button is 0 in mousedown/mouseup/click for left button activation\n      return button === 0;\n    }\n  }\n\n  function isSyntheticClick(ev) {\n    if (ev.type === 'click') {\n      // ev.detail is 0 for HTMLElement.click in most browsers\n      if (ev.detail === 0) {\n        return true;\n      }\n      // in the worst case, check that the x/y position of the click is within\n      // the bounding box of the target of the event\n      // Thanks IE 10 >:(\n      let t = Gestures._findOriginalTarget(ev);\n      // make sure the target of the event is an element so we can use getBoundingClientRect,\n      // if not, just assume it is a synthetic click\n      if (!t.nodeType || /** @type {Element} */t.nodeType !== Node.ELEMENT_NODE) {\n        return true;\n      }\n      let bcr = /** @type {Element} */t.getBoundingClientRect();\n      // use page x/y to account for scrolling\n      let x = ev.pageX,\n          y = ev.pageY;\n      // ev is a synthetic click if the position is outside the bounding box of the target\n      return !(x >= bcr.left && x <= bcr.right && y >= bcr.top && y <= bcr.bottom);\n    }\n    return false;\n  }\n\n  let POINTERSTATE = {\n    mouse: {\n      target: null,\n      mouseIgnoreJob: null\n    },\n    touch: {\n      x: 0,\n      y: 0,\n      id: -1,\n      scrollDecided: false\n    }\n  };\n\n  function firstTouchAction(ev) {\n    let ta = 'auto';\n    let path = ev.composedPath && ev.composedPath();\n    if (path) {\n      for (let i = 0, n; i < path.length; i++) {\n        n = path[i];\n        if (n[TOUCH_ACTION]) {\n          ta = n[TOUCH_ACTION];\n          break;\n        }\n      }\n    }\n    return ta;\n  }\n\n  function trackDocument(stateObj, movefn, upfn) {\n    stateObj.movefn = movefn;\n    stateObj.upfn = upfn;\n    document.addEventListener('mousemove', movefn);\n    document.addEventListener('mouseup', upfn);\n  }\n\n  function untrackDocument(stateObj) {\n    document.removeEventListener('mousemove', stateObj.movefn);\n    document.removeEventListener('mouseup', stateObj.upfn);\n    stateObj.movefn = null;\n    stateObj.upfn = null;\n  }\n\n  // use a document-wide touchend listener to start the ghost-click prevention mechanism\n  // Use passive event listeners, if supported, to not affect scrolling performance\n  document.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? { passive: true } : false);\n\n  /**\n   * Module for adding listeners to a node for the following normalized\n   * cross-platform \"gesture\" events:\n   * - `down` - mouse or touch went down\n   * - `up` - mouse or touch went up\n   * - `tap` - mouse click or finger tap\n   * - `track` - mouse drag or touch move\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module for adding cross-platform gesture event listeners.\n   */\n  const Gestures = {\n    gestures: {},\n    recognizers: [],\n\n    /**\n     * Finds the element rendered on the screen at the provided coordinates.\n     *\n     * Similar to `document.elementFromPoint`, but pierces through\n     * shadow roots.\n     *\n     * @memberof Polymer.Gestures\n     * @param {number} x Horizontal pixel coordinate\n     * @param {number} y Vertical pixel coordinate\n     * @return {Element} Returns the deepest shadowRoot inclusive element\n     * found at the screen position given.\n     */\n    deepTargetFind: function (x, y) {\n      let node = document.elementFromPoint(x, y);\n      let next = node;\n      // this code path is only taken when native ShadowDOM is used\n      // if there is a shadowroot, it may have a node at x/y\n      // if there is not a shadowroot, exit the loop\n      while (next && next.shadowRoot && !window.ShadyDOM) {\n        // if there is a node at x/y in the shadowroot, look deeper\n        let oldNext = next;\n        next = next.shadowRoot.elementFromPoint(x, y);\n        // on Safari, elementFromPoint may return the shadowRoot host\n        if (oldNext === next) {\n          break;\n        }\n        if (next) {\n          node = next;\n        }\n      }\n      return node;\n    },\n    /**\n     * a cheaper check than ev.composedPath()[0];\n     *\n     * @private\n     * @param {Event} ev Event.\n     * @return {EventTarget} Returns the event target.\n     */\n    _findOriginalTarget: function (ev) {\n      // shadowdom\n      if (ev.composedPath) {\n        const target = /** @type {EventTarget} */ev.composedPath()[0];\n        return target;\n      }\n      // shadydom\n      return ev.target;\n    },\n\n    /**\n     * @private\n     * @param {Event} ev Event.\n     */\n    _handleNative: function (ev) {\n      let handled;\n      let type = ev.type;\n      let node = ev.currentTarget;\n      let gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        return;\n      }\n      let gs = gobj[type];\n      if (!gs) {\n        return;\n      }\n      if (!ev[HANDLED_OBJ]) {\n        ev[HANDLED_OBJ] = {};\n        if (type.slice(0, 5) === 'touch') {\n          ev = /** @type {TouchEvent} */ev; // eslint-disable-line no-self-assign\n          let t = ev.changedTouches[0];\n          if (type === 'touchstart') {\n            // only handle the first finger\n            if (ev.touches.length === 1) {\n              POINTERSTATE.touch.id = t.identifier;\n            }\n          }\n          if (POINTERSTATE.touch.id !== t.identifier) {\n            return;\n          }\n          if (!HAS_NATIVE_TA) {\n            if (type === 'touchstart' || type === 'touchmove') {\n              Gestures._handleTouchAction(ev);\n            }\n          }\n        }\n      }\n      handled = ev[HANDLED_OBJ];\n      // used to ignore synthetic mouse events\n      if (handled.skip) {\n        return;\n      }\n      // reset recognizer state\n      for (let i = 0, r; i < Gestures.recognizers.length; i++) {\n        r = Gestures.recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n            r.reset();\n          }\n        }\n      }\n      // enforce gesture recognizer order\n      for (let i = 0, r; i < Gestures.recognizers.length; i++) {\n        r = Gestures.recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          handled[r.name] = true;\n          r[type](ev);\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {TouchEvent} ev Event.\n     */\n    _handleTouchAction: function (ev) {\n      let t = ev.changedTouches[0];\n      let type = ev.type;\n      if (type === 'touchstart') {\n        POINTERSTATE.touch.x = t.clientX;\n        POINTERSTATE.touch.y = t.clientY;\n        POINTERSTATE.touch.scrollDecided = false;\n      } else if (type === 'touchmove') {\n        if (POINTERSTATE.touch.scrollDecided) {\n          return;\n        }\n        POINTERSTATE.touch.scrollDecided = true;\n        let ta = firstTouchAction(ev);\n        let prevent = false;\n        let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n        let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n        if (!ev.cancelable) {\n          // scrolling is happening\n        } else if (ta === 'none') {\n          prevent = true;\n        } else if (ta === 'pan-x') {\n          prevent = dy > dx;\n        } else if (ta === 'pan-y') {\n          prevent = dx > dy;\n        }\n        if (prevent) {\n          ev.preventDefault();\n        } else {\n          Gestures.prevent('track');\n        }\n      }\n    },\n\n    /**\n     * Adds an event listener to a node for the given gesture type.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Node} node Node to add listener on\n     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n     * @param {Function} handler Event listener function to call\n     * @return {boolean} Returns true if a gesture event listener was added.\n     * @this {Gestures}\n     */\n    addListener: function (node, evType, handler) {\n      if (this.gestures[evType]) {\n        this._add(node, evType, handler);\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Removes an event listener from a node for the given gesture type.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Node} node Node to remove listener from\n     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n     * @param {Function} handler Event listener function previously passed to\n     *  `addListener`.\n     * @return {boolean} Returns true if a gesture event listener was removed.\n     * @this {Gestures}\n     */\n    removeListener: function (node, evType, handler) {\n      if (this.gestures[evType]) {\n        this._remove(node, evType, handler);\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * automate the event listeners for the native events\n     *\n     * @private\n     * @param {HTMLElement} node Node on which to add the event.\n     * @param {string} evType Event type to add.\n     * @param {function(Event?)} handler Event handler function.\n     * @this {Gestures}\n     */\n    _add: function (node, evType, handler) {\n      let recognizer = this.gestures[evType];\n      let deps = recognizer.deps;\n      let name = recognizer.name;\n      let gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        node[GESTURE_KEY] = gobj = {};\n      }\n      for (let i = 0, dep, gd; i < deps.length; i++) {\n        dep = deps[i];\n        // don't add mouse handlers on iOS because they cause gray selection overlays\n        if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {\n          continue;\n        }\n        gd = gobj[dep];\n        if (!gd) {\n          gobj[dep] = gd = { _count: 0 };\n        }\n        if (gd._count === 0) {\n          let options = !isMouseEvent(dep) && PASSIVE_TOUCH();\n          node.addEventListener(dep, this._handleNative, options);\n        }\n        gd[name] = (gd[name] || 0) + 1;\n        gd._count = (gd._count || 0) + 1;\n      }\n      node.addEventListener(evType, handler);\n      if (recognizer.touchAction) {\n        this.setTouchAction(node, recognizer.touchAction);\n      }\n    },\n\n    /**\n     * automate event listener removal for native events\n     *\n     * @private\n     * @param {HTMLElement} node Node on which to remove the event.\n     * @param {string} evType Event type to remove.\n     * @param {function(Event?)} handler Event handler function.\n     * @this {Gestures}\n     */\n    _remove: function (node, evType, handler) {\n      let recognizer = this.gestures[evType];\n      let deps = recognizer.deps;\n      let name = recognizer.name;\n      let gobj = node[GESTURE_KEY];\n      if (gobj) {\n        for (let i = 0, dep, gd; i < deps.length; i++) {\n          dep = deps[i];\n          gd = gobj[dep];\n          if (gd && gd[name]) {\n            gd[name] = (gd[name] || 1) - 1;\n            gd._count = (gd._count || 1) - 1;\n            if (gd._count === 0) {\n              let options = !isMouseEvent(dep) && PASSIVE_TOUCH();\n              node.removeEventListener(dep, this._handleNative, options);\n            }\n          }\n        }\n      }\n      node.removeEventListener(evType, handler);\n    },\n\n    /**\n     * Registers a new gesture event recognizer for adding new custom\n     * gesture event types.\n     *\n     * @memberof Polymer.Gestures\n     * @param {GestureRecognizer} recog Gesture recognizer descriptor\n     * @this {Gestures}\n     */\n    register: function (recog) {\n      this.recognizers.push(recog);\n      for (let i = 0; i < recog.emits.length; i++) {\n        this.gestures[recog.emits[i]] = recog;\n      }\n    },\n\n    /**\n     * @private\n     * @param {string} evName Event name.\n     * @return {Object} Returns the gesture for the given event name.\n     * @this {Gestures}\n     */\n    _findRecognizerByEvent: function (evName) {\n      for (let i = 0, r; i < this.recognizers.length; i++) {\n        r = this.recognizers[i];\n        for (let j = 0, n; j < r.emits.length; j++) {\n          n = r.emits[j];\n          if (n === evName) {\n            return r;\n          }\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Sets scrolling direction on node.\n     *\n     * This value is checked on first move, thus it should be called prior to\n     * adding event listeners.\n     *\n     * @memberof Polymer.Gestures\n     * @param {Element} node Node to set touch action setting on\n     * @param {string} value Touch action value\n     */\n    setTouchAction: function (node, value) {\n      if (HAS_NATIVE_TA) {\n        node.style.touchAction = value;\n      }\n      node[TOUCH_ACTION] = value;\n    },\n\n    /**\n     * Dispatches an event on the `target` element of `type` with the given\n     * `detail`.\n     * @private\n     * @param {EventTarget} target The element on which to fire an event.\n     * @param {string} type The type of event to fire.\n     * @param {Object=} detail The detail object to populate on the event.\n     */\n    _fire: function (target, type, detail) {\n      let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });\n      ev.detail = detail;\n      target.dispatchEvent(ev);\n      // forward `preventDefault` in a clean way\n      if (ev.defaultPrevented) {\n        let preventer = detail.preventer || detail.sourceEvent;\n        if (preventer && preventer.preventDefault) {\n          preventer.preventDefault();\n        }\n      }\n    },\n\n    /**\n     * Prevents the dispatch and default action of the given event name.\n     *\n     * @memberof Polymer.Gestures\n     * @param {string} evName Event name.\n     * @this {Gestures}\n     */\n    prevent: function (evName) {\n      let recognizer = this._findRecognizerByEvent(evName);\n      if (recognizer.info) {\n        recognizer.info.prevent = true;\n      }\n    },\n\n    /**\n     * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n     *\n     * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n     * This method should only be called during testing with simulated touch inputs.\n     * Calling this method in production may cause duplicate taps or other Gestures.\n     *\n     * @memberof Polymer.Gestures\n     */\n    resetMouseCanceller: function () {\n      if (POINTERSTATE.mouse.mouseIgnoreJob) {\n        POINTERSTATE.mouse.mouseIgnoreJob.flush();\n      }\n    }\n  };\n\n  /* eslint-disable valid-jsdoc */\n\n  Gestures.register({\n    name: 'downup',\n    deps: ['mousedown', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['down', 'up'],\n\n    info: {\n      movefn: null,\n      upfn: null\n    },\n\n    /** @this {GestureRecognizer} */\n    reset: function () {\n      untrackDocument(this.info);\n    },\n\n    /**\n     * @this {GestureRecognizer}\n     * @param {MouseEvent} e\n     */\n    mousedown: function (e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      let t = Gestures._findOriginalTarget(e);\n      let self = this;\n      let movefn = function movefn(e) {\n        if (!hasLeftMouseButton(e)) {\n          self._fire('up', t, e);\n          untrackDocument(self.info);\n        }\n      };\n      let upfn = function upfn(e) {\n        if (hasLeftMouseButton(e)) {\n          self._fire('up', t, e);\n        }\n        untrackDocument(self.info);\n      };\n      trackDocument(this.info, movefn, upfn);\n      this._fire('down', t, e);\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchstart: function (e) {\n      this._fire('down', Gestures._findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchend: function (e) {\n      this._fire('up', Gestures._findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    /**\n     * @param {string} type\n     * @param {EventTarget} target\n     * @param {Event} event\n     * @param {Function} preventer\n     */\n    _fire: function (type, target, event, preventer) {\n      Gestures._fire(target, type, {\n        x: event.clientX,\n        y: event.clientY,\n        sourceEvent: event,\n        preventer: preventer,\n        prevent: function (e) {\n          return Gestures.prevent(e);\n        }\n      });\n    }\n  });\n\n  Gestures.register({\n    name: 'track',\n    touchAction: 'none',\n    deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['track'],\n\n    info: {\n      x: 0,\n      y: 0,\n      state: 'start',\n      started: false,\n      moves: [],\n      /** @this {GestureRecognizer} */\n      addMove: function (move) {\n        if (this.moves.length > TRACK_LENGTH) {\n          this.moves.shift();\n        }\n        this.moves.push(move);\n      },\n      movefn: null,\n      upfn: null,\n      prevent: false\n    },\n\n    /** @this {GestureRecognizer} */\n    reset: function () {\n      this.info.state = 'start';\n      this.info.started = false;\n      this.info.moves = [];\n      this.info.x = 0;\n      this.info.y = 0;\n      this.info.prevent = false;\n      untrackDocument(this.info);\n    },\n\n    /**\n     * @this {GestureRecognizer}\n     * @param {number} x\n     * @param {number} y\n     * @return {boolean}\n     */\n    hasMovedEnough: function (x, y) {\n      if (this.info.prevent) {\n        return false;\n      }\n      if (this.info.started) {\n        return true;\n      }\n      let dx = Math.abs(this.info.x - x);\n      let dy = Math.abs(this.info.y - y);\n      return dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE;\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {MouseEvent} e\n     */\n    mousedown: function (e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      let t = Gestures._findOriginalTarget(e);\n      let self = this;\n      let movefn = function movefn(e) {\n        let x = e.clientX,\n            y = e.clientY;\n        if (self.hasMovedEnough(x, y)) {\n          // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n          self.info.state = self.info.started ? e.type === 'mouseup' ? 'end' : 'track' : 'start';\n          if (self.info.state === 'start') {\n            // if and only if tracking, always prevent tap\n            Gestures.prevent('tap');\n          }\n          self.info.addMove({ x: x, y: y });\n          if (!hasLeftMouseButton(e)) {\n            // always _fire \"end\"\n            self.info.state = 'end';\n            untrackDocument(self.info);\n          }\n          self._fire(t, e);\n          self.info.started = true;\n        }\n      };\n      let upfn = function upfn(e) {\n        if (self.info.started) {\n          movefn(e);\n        }\n\n        // remove the temporary listeners\n        untrackDocument(self.info);\n      };\n      // add temporary document listeners as mouse retargets\n      trackDocument(this.info, movefn, upfn);\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchstart: function (e) {\n      let ct = e.changedTouches[0];\n      this.info.x = ct.clientX;\n      this.info.y = ct.clientY;\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchmove: function (e) {\n      let t = Gestures._findOriginalTarget(e);\n      let ct = e.changedTouches[0];\n      let x = ct.clientX,\n          y = ct.clientY;\n      if (this.hasMovedEnough(x, y)) {\n        if (this.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          Gestures.prevent('tap');\n        }\n        this.info.addMove({ x: x, y: y });\n        this._fire(t, ct);\n        this.info.state = 'track';\n        this.info.started = true;\n      }\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchend: function (e) {\n      let t = Gestures._findOriginalTarget(e);\n      let ct = e.changedTouches[0];\n      // only trackend if track was started and not aborted\n      if (this.info.started) {\n        // reset started state on up\n        this.info.state = 'end';\n        this.info.addMove({ x: ct.clientX, y: ct.clientY });\n        this._fire(t, ct, e);\n      }\n    },\n\n    /**\n     * @this {GestureRecognizer}\n     * @param {EventTarget} target\n     * @param {Touch} touch\n     */\n    _fire: function (target, touch) {\n      let secondlast = this.info.moves[this.info.moves.length - 2];\n      let lastmove = this.info.moves[this.info.moves.length - 1];\n      let dx = lastmove.x - this.info.x;\n      let dy = lastmove.y - this.info.y;\n      let ddx,\n          ddy = 0;\n      if (secondlast) {\n        ddx = lastmove.x - secondlast.x;\n        ddy = lastmove.y - secondlast.y;\n      }\n      Gestures._fire(target, 'track', {\n        state: this.info.state,\n        x: touch.clientX,\n        y: touch.clientY,\n        dx: dx,\n        dy: dy,\n        ddx: ddx,\n        ddy: ddy,\n        sourceEvent: touch,\n        hover: function () {\n          return Gestures.deepTargetFind(touch.clientX, touch.clientY);\n        }\n      });\n    }\n\n  });\n\n  Gestures.register({\n    name: 'tap',\n    deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['click', 'touchend']\n    },\n    emits: ['tap'],\n    info: {\n      x: NaN,\n      y: NaN,\n      prevent: false\n    },\n    /** @this {GestureRecognizer} */\n    reset: function () {\n      this.info.x = NaN;\n      this.info.y = NaN;\n      this.info.prevent = false;\n    },\n    /** @this {GestureRecognizer} */\n    save: function (e) {\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {MouseEvent} e\n     */\n    mousedown: function (e) {\n      if (hasLeftMouseButton(e)) {\n        this.save(e);\n      }\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {MouseEvent} e\n     */\n    click: function (e) {\n      if (hasLeftMouseButton(e)) {\n        this.forward(e);\n      }\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchstart: function (e) {\n      this.save(e.changedTouches[0], e);\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {TouchEvent} e\n     */\n    touchend: function (e) {\n      this.forward(e.changedTouches[0], e);\n    },\n    /**\n     * @this {GestureRecognizer}\n     * @param {Event | Touch} e\n     * @param {Event=} preventer\n     */\n    forward: function (e, preventer) {\n      let dx = Math.abs(e.clientX - this.info.x);\n      let dy = Math.abs(e.clientY - this.info.y);\n      // find original target from `preventer` for TouchEvents, or `e` for MouseEvents\n      let t = Gestures._findOriginalTarget( /** @type {Event} */preventer || e);\n      // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n      if (isNaN(dx) || isNaN(dy) || dx <= TAP_DISTANCE && dy <= TAP_DISTANCE || isSyntheticClick(e)) {\n        // prevent taps from being generated if an event has canceled them\n        if (!this.info.prevent) {\n          Gestures._fire(t, 'tap', {\n            x: e.clientX,\n            y: e.clientY,\n            sourceEvent: e,\n            preventer: preventer\n          });\n        }\n      }\n    }\n  });\n\n  /* eslint-enable valid-jsdoc */\n\n  /** @deprecated */\n  Gestures.findOriginalTarget = Gestures._findOriginalTarget;\n\n  /** @deprecated */\n  Gestures.add = Gestures.addListener;\n\n  /** @deprecated */\n  Gestures.remove = Gestures.removeListener;\n\n  Polymer.Gestures = Gestures;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(30);\n\n(function () {\n  'use strict';\n\n  const HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\n  const HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\n\n  const EL_DIR = /([\\s\\w#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\n  const EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\n\n  /**\n   * @type {!Array<!Polymer_DirMixin>}\n   */\n  const DIR_INSTANCES = [];\n\n  /** @type {MutationObserver} */\n  let observer = null;\n\n  let DOCUMENT_DIR = '';\n\n  function getRTL() {\n    DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n  }\n\n  /**\n   * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n   */\n  function setRTL(instance) {\n    if (!instance.__autoDirOptOut) {\n      const el = /** @type {!HTMLElement} */instance;\n      el.setAttribute('dir', DOCUMENT_DIR);\n    }\n  }\n\n  function updateDirection() {\n    getRTL();\n    DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n    for (let i = 0; i < DIR_INSTANCES.length; i++) {\n      setRTL(DIR_INSTANCES[i]);\n    }\n  }\n\n  function takeRecords() {\n    if (observer && observer.takeRecords().length) {\n      updateDirection();\n    }\n  }\n\n  /**\n   * Element class mixin that allows elements to use the `:dir` CSS Selector to have\n   * text direction specific styling.\n   *\n   * With this mixin, any stylesheet provided in the template will transform `:dir` into\n   * `:host([dir])` and sync direction with the page via the element's `dir` attribute.\n   *\n   * Elements can opt out of the global page text direction by setting the `dir` attribute\n   * directly in `ready()` or in HTML.\n   *\n   * Caveats:\n   * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync direction\n   * - Automatic left-to-right or right-to-left styling is sync'd with the `<html>` element only.\n   * - Changing `dir` at runtime is supported.\n   * - Opting out of the global direction styling is permanent\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.PropertyAccessors\n   * @memberof Polymer\n   */\n  Polymer.DirMixin = Polymer.dedupingMixin(base => {\n\n    if (!observer) {\n      getRTL();\n      observer = new MutationObserver(updateDirection);\n      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['dir'] });\n    }\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyAccessors}\n     */\n    const elementBase = Polymer.PropertyAccessors(base);\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_DirMixin}\n     */\n    class Dir extends elementBase {\n\n      /**\n       * @override\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _processStyleText(is, template, baseURI) {\n        let cssText = super._processStyleText(is, template, baseURI);\n        cssText = this._replaceDirInCssText(cssText);\n        return cssText;\n      }\n\n      /**\n       * Replace `:dir` in the given CSS text\n       *\n       * @param {string} text CSS text to replace DIR\n       * @return {string} Modified CSS\n       */\n      static _replaceDirInCssText(text) {\n        let replacedText = text;\n        replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n        replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n        if (text !== replacedText) {\n          this.__activateDir = true;\n        }\n        return replacedText;\n      }\n\n      constructor() {\n        super();\n        /** @type {boolean} */\n        this.__autoDirOptOut = false;\n      }\n\n      /**\n       * @suppress {invalidCasts} Closure doesn't understand that `this` is an HTMLElement\n       */\n      ready() {\n        super.ready();\n        this.__autoDirOptOut = /** @type {!HTMLElement} */this.hasAttribute('dir');\n      }\n\n      /** @suppress {missingProperties} If it exists on elementBase, it can be super'd */\n      connectedCallback() {\n        if (elementBase.prototype.connectedCallback) {\n          super.connectedCallback();\n        }\n        if (this.constructor.__activateDir) {\n          takeRecords();\n          DIR_INSTANCES.push(this);\n          setRTL(this);\n        }\n      }\n\n      /** @suppress {missingProperties} If it exists on elementBase, it can be super'd */\n      disconnectedCallback() {\n        if (elementBase.prototype.disconnectedCallback) {\n          super.disconnectedCallback();\n        }\n        if (this.constructor.__activateDir) {\n          const idx = DIR_INSTANCES.indexOf(this);\n          if (idx > -1) {\n            DIR_INSTANCES.splice(idx, 1);\n          }\n        }\n      }\n    }\n\n    Dir.__activateDir = false;\n\n    return Dir;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL21peGlucy9kaXItbWl4aW4uaHRtbD9iZDQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9wcm9wZXJ0eS1hY2Nlc3NvcnMuaHRtbCcpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgY29uc3QgSE9TVF9ESVIgPSAvOmhvc3RcXCg6ZGlyXFwoKGx0cnxydGwpXFwpXFwpL2c7XG4gIGNvbnN0IEhPU1RfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQxXCJdKSc7XG5cbiAgY29uc3QgRUxfRElSID0gLyhbXFxzXFx3I1xcLlxcW1xcXVxcKl0qKTpkaXJcXCgobHRyfHJ0bClcXCkvZztcbiAgY29uc3QgRUxfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQyXCJdKSAkMSc7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHshQXJyYXk8IVBvbHltZXJfRGlyTWl4aW4+fVxuICAgKi9cbiAgY29uc3QgRElSX0lOU1RBTkNFUyA9IFtdO1xuXG4gIC8qKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcn0gKi9cbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcblxuICBsZXQgRE9DVU1FTlRfRElSID0gJyc7XG5cbiAgZnVuY3Rpb24gZ2V0UlRMKCkge1xuICAgIERPQ1VNRU5UX0RJUiA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBvbHltZXJfRGlyTWl4aW59IGluc3RhbmNlIEluc3RhbmNlIHRvIHNldCBSVEwgc3RhdHVzIG9uXG4gICAqL1xuICBmdW5jdGlvbiBzZXRSVEwoaW5zdGFuY2UpIHtcbiAgICBpZiAoIWluc3RhbmNlLl9fYXV0b0Rpck9wdE91dCkge1xuICAgICAgY29uc3QgZWwgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9pbnN0YW5jZTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGlyJywgRE9DVU1FTlRfRElSKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVEaXJlY3Rpb24oKSB7XG4gICAgZ2V0UlRMKCk7XG4gICAgRE9DVU1FTlRfRElSID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBESVJfSU5TVEFOQ0VTLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzZXRSVEwoRElSX0lOU1RBTkNFU1tpXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGFrZVJlY29yZHMoKSB7XG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnRha2VSZWNvcmRzKCkubGVuZ3RoKSB7XG4gICAgICB1cGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IGFsbG93cyBlbGVtZW50cyB0byB1c2UgdGhlIGA6ZGlyYCBDU1MgU2VsZWN0b3IgdG8gaGF2ZVxuICAgKiB0ZXh0IGRpcmVjdGlvbiBzcGVjaWZpYyBzdHlsaW5nLlxuICAgKlxuICAgKiBXaXRoIHRoaXMgbWl4aW4sIGFueSBzdHlsZXNoZWV0IHByb3ZpZGVkIGluIHRoZSB0ZW1wbGF0ZSB3aWxsIHRyYW5zZm9ybSBgOmRpcmAgaW50b1xuICAgKiBgOmhvc3QoW2Rpcl0pYCBhbmQgc3luYyBkaXJlY3Rpb24gd2l0aCB0aGUgcGFnZSB2aWEgdGhlIGVsZW1lbnQncyBgZGlyYCBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEVsZW1lbnRzIGNhbiBvcHQgb3V0IG9mIHRoZSBnbG9iYWwgcGFnZSB0ZXh0IGRpcmVjdGlvbiBieSBzZXR0aW5nIHRoZSBgZGlyYCBhdHRyaWJ1dGVcbiAgICogZGlyZWN0bHkgaW4gYHJlYWR5KClgIG9yIGluIEhUTUwuXG4gICAqXG4gICAqIENhdmVhdHM6XG4gICAqIC0gQXBwbGljYXRpb25zIG11c3Qgc2V0IGA8aHRtbCBkaXI9XCJsdHJcIj5gIG9yIGA8aHRtbCBkaXI9XCJydGxcIj5gIHRvIHN5bmMgZGlyZWN0aW9uXG4gICAqIC0gQXV0b21hdGljIGxlZnQtdG8tcmlnaHQgb3IgcmlnaHQtdG8tbGVmdCBzdHlsaW5nIGlzIHN5bmMnZCB3aXRoIHRoZSBgPGh0bWw+YCBlbGVtZW50IG9ubHkuXG4gICAqIC0gQ2hhbmdpbmcgYGRpcmAgYXQgcnVudGltZSBpcyBzdXBwb3J0ZWQuXG4gICAqIC0gT3B0aW5nIG91dCBvZiB0aGUgZ2xvYmFsIGRpcmVjdGlvbiBzdHlsaW5nIGlzIHBlcm1hbmVudFxuICAgKlxuICAgKiBAbWl4aW5GdW5jdGlvblxuICAgKiBAcG9seW1lclxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICovXG4gIFBvbHltZXIuRGlyTWl4aW4gPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oYmFzZSA9PiB7XG5cbiAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICBnZXRSVEwoKTtcbiAgICAgIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodXBkYXRlRGlyZWN0aW9uKTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogWydkaXInXSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUFjY2Vzc29yc31cbiAgICAgKi9cbiAgICBjb25zdCBlbGVtZW50QmFzZSA9IFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnMoYmFzZSk7XG5cbiAgICAvKipcbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBtaXhpbkNsYXNzXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfRGlyTWl4aW59XG4gICAgICovXG4gICAgY2xhc3MgRGlyIGV4dGVuZHMgZWxlbWVudEJhc2Uge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfcHJvY2Vzc1N0eWxlVGV4dChpcywgdGVtcGxhdGUsIGJhc2VVUkkpIHtcbiAgICAgICAgbGV0IGNzc1RleHQgPSBzdXBlci5fcHJvY2Vzc1N0eWxlVGV4dChpcywgdGVtcGxhdGUsIGJhc2VVUkkpO1xuICAgICAgICBjc3NUZXh0ID0gdGhpcy5fcmVwbGFjZURpckluQ3NzVGV4dChjc3NUZXh0KTtcbiAgICAgICAgcmV0dXJuIGNzc1RleHQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVwbGFjZSBgOmRpcmAgaW4gdGhlIGdpdmVuIENTUyB0ZXh0XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgQ1NTIHRleHQgdG8gcmVwbGFjZSBESVJcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gTW9kaWZpZWQgQ1NTXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfcmVwbGFjZURpckluQ3NzVGV4dCh0ZXh0KSB7XG4gICAgICAgIGxldCByZXBsYWNlZFRleHQgPSB0ZXh0O1xuICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShIT1NUX0RJUiwgSE9TVF9ESVJfUkVQTEFDTUVOVCk7XG4gICAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEVMX0RJUiwgRUxfRElSX1JFUExBQ01FTlQpO1xuICAgICAgICBpZiAodGV4dCAhPT0gcmVwbGFjZWRUZXh0KSB7XG4gICAgICAgICAgdGhpcy5fX2FjdGl2YXRlRGlyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVwbGFjZWRUZXh0O1xuICAgICAgfVxuXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fYXV0b0Rpck9wdE91dCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGF0IGB0aGlzYCBpcyBhbiBIVE1MRWxlbWVudFxuICAgICAgICovXG4gICAgICByZWFkeSgpIHtcbiAgICAgICAgc3VwZXIucmVhZHkoKTtcbiAgICAgICAgdGhpcy5fX2F1dG9EaXJPcHRPdXQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi90aGlzLmhhc0F0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICB9XG5cbiAgICAgIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJZiBpdCBleGlzdHMgb24gZWxlbWVudEJhc2UsIGl0IGNhbiBiZSBzdXBlcidkICovXG4gICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRCYXNlLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuX19hY3RpdmF0ZURpcikge1xuICAgICAgICAgIHRha2VSZWNvcmRzKCk7XG4gICAgICAgICAgRElSX0lOU1RBTkNFUy5wdXNoKHRoaXMpO1xuICAgICAgICAgIHNldFJUTCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSWYgaXQgZXhpc3RzIG9uIGVsZW1lbnRCYXNlLCBpdCBjYW4gYmUgc3VwZXInZCAqL1xuICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmIChlbGVtZW50QmFzZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9fYWN0aXZhdGVEaXIpIHtcbiAgICAgICAgICBjb25zdCBpZHggPSBESVJfSU5TVEFOQ0VTLmluZGV4T2YodGhpcyk7XG4gICAgICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgICAgICBESVJfSU5TVEFOQ0VTLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIERpci5fX2FjdGl2YXRlRGlyID0gZmFsc2U7XG5cbiAgICByZXR1cm4gRGlyO1xuICB9KTtcbn0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL21peGlucy9kaXItbWl4aW4uaHRtbFxuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n\n  'use strict';\n\n  // run a callback when HTMLImports are ready or immediately if\n  // this api is not available.\n\n  function whenImportsReady(cb) {\n    if (window.HTMLImports) {\n      HTMLImports.whenReady(cb);\n    } else {\n      cb();\n    }\n  }\n\n  /**\n   * Convenience method for importing an HTML document imperatively.\n   *\n   * This method creates a new `<link rel=\"import\">` element with\n   * the provided URL and appends it to the document to start loading.\n   * In the `onload` callback, the `import` property of the `link`\n   * element will contain the imported document contents.\n   *\n   * @memberof Polymer\n   * @param {string} href URL to document to load.\n   * @param {Function=} onload Callback to notify when an import successfully\n   *   loaded.\n   * @param {Function=} onerror Callback to notify when an import\n   *   unsuccessfully loaded.\n   * @param {boolean=} optAsync True if the import should be loaded `async`.\n   *   Defaults to `false`.\n   * @return {HTMLLinkElement} The link element for the URL to be loaded.\n   */\n  Polymer.importHref = function (href, onload, onerror, optAsync) {\n    let link = /** @type {HTMLLinkElement} */\n    document.head.querySelector('link[href=\"' + href + '\"][import-href]');\n    if (!link) {\n      link = /** @type {HTMLLinkElement} */document.createElement('link');\n      link.rel = 'import';\n      link.href = href;\n      link.setAttribute('import-href', '');\n    }\n    // always ensure link has `async` attribute if user specified one,\n    // even if it was previously not async. This is considered less confusing.\n    if (optAsync) {\n      link.setAttribute('async', '');\n    }\n    // NOTE: the link may now be in 3 states: (1) pending insertion,\n    // (2) inflight, (3) already loaded. In each case, we need to add\n    // event listeners to process callbacks.\n    let cleanup = function () {\n      link.removeEventListener('load', loadListener);\n      link.removeEventListener('error', errorListener);\n    };\n    let loadListener = function (event) {\n      cleanup();\n      // In case of a successful load, cache the load event on the link so\n      // that it can be used to short-circuit this method in the future when\n      // it is called with the same href param.\n      link.__dynamicImportLoaded = true;\n      if (onload) {\n        whenImportsReady(() => {\n          onload(event);\n        });\n      }\n    };\n    let errorListener = function (event) {\n      cleanup();\n      // In case of an error, remove the link from the document so that it\n      // will be automatically created again the next time `importHref` is\n      // called.\n      if (link.parentNode) {\n        link.parentNode.removeChild(link);\n      }\n      if (onerror) {\n        whenImportsReady(() => {\n          onerror(event);\n        });\n      }\n    };\n    link.addEventListener('load', loadListener);\n    link.addEventListener('error', errorListener);\n    if (link.parentNode == null) {\n      document.head.appendChild(link);\n      // if the link already loaded, dispatch a fake load event\n      // so that listeners are called and get a proper event argument.\n    } else if (link.__dynamicImportLoaded) {\n      link.dispatchEvent(new Event('load'));\n    }\n    return link;\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2ltcG9ydC1ocmVmLmh0bWw/NGU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vYm9vdC5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIHJ1biBhIGNhbGxiYWNrIHdoZW4gSFRNTEltcG9ydHMgYXJlIHJlYWR5IG9yIGltbWVkaWF0ZWx5IGlmXG4gIC8vIHRoaXMgYXBpIGlzIG5vdCBhdmFpbGFibGUuXG5cbiAgZnVuY3Rpb24gd2hlbkltcG9ydHNSZWFkeShjYikge1xuICAgIGlmICh3aW5kb3cuSFRNTEltcG9ydHMpIHtcbiAgICAgIEhUTUxJbXBvcnRzLndoZW5SZWFkeShjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgaW1wb3J0aW5nIGFuIEhUTUwgZG9jdW1lbnQgaW1wZXJhdGl2ZWx5LlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGEgbmV3IGA8bGluayByZWw9XCJpbXBvcnRcIj5gIGVsZW1lbnQgd2l0aFxuICAgKiB0aGUgcHJvdmlkZWQgVVJMIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBkb2N1bWVudCB0byBzdGFydCBsb2FkaW5nLlxuICAgKiBJbiB0aGUgYG9ubG9hZGAgY2FsbGJhY2ssIHRoZSBgaW1wb3J0YCBwcm9wZXJ0eSBvZiB0aGUgYGxpbmtgXG4gICAqIGVsZW1lbnQgd2lsbCBjb250YWluIHRoZSBpbXBvcnRlZCBkb2N1bWVudCBjb250ZW50cy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWYgVVJMIHRvIGRvY3VtZW50IHRvIGxvYWQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbmxvYWQgQ2FsbGJhY2sgdG8gbm90aWZ5IHdoZW4gYW4gaW1wb3J0IHN1Y2Nlc3NmdWxseVxuICAgKiAgIGxvYWRlZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uZXJyb3IgQ2FsbGJhY2sgdG8gbm90aWZ5IHdoZW4gYW4gaW1wb3J0XG4gICAqICAgdW5zdWNjZXNzZnVsbHkgbG9hZGVkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRBc3luYyBUcnVlIGlmIHRoZSBpbXBvcnQgc2hvdWxkIGJlIGxvYWRlZCBgYXN5bmNgLlxuICAgKiAgIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqIEByZXR1cm4ge0hUTUxMaW5rRWxlbWVudH0gVGhlIGxpbmsgZWxlbWVudCBmb3IgdGhlIFVSTCB0byBiZSBsb2FkZWQuXG4gICAqL1xuICBQb2x5bWVyLmltcG9ydEhyZWYgPSBmdW5jdGlvbiAoaHJlZiwgb25sb2FkLCBvbmVycm9yLCBvcHRBc3luYykge1xuICAgIGxldCBsaW5rID0gLyoqIEB0eXBlIHtIVE1MTGlua0VsZW1lbnR9ICovXG4gICAgZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKCdsaW5rW2hyZWY9XCInICsgaHJlZiArICdcIl1baW1wb3J0LWhyZWZdJyk7XG4gICAgaWYgKCFsaW5rKSB7XG4gICAgICBsaW5rID0gLyoqIEB0eXBlIHtIVE1MTGlua0VsZW1lbnR9ICovZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgbGluay5yZWwgPSAnaW1wb3J0JztcbiAgICAgIGxpbmsuaHJlZiA9IGhyZWY7XG4gICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaW1wb3J0LWhyZWYnLCAnJyk7XG4gICAgfVxuICAgIC8vIGFsd2F5cyBlbnN1cmUgbGluayBoYXMgYGFzeW5jYCBhdHRyaWJ1dGUgaWYgdXNlciBzcGVjaWZpZWQgb25lLFxuICAgIC8vIGV2ZW4gaWYgaXQgd2FzIHByZXZpb3VzbHkgbm90IGFzeW5jLiBUaGlzIGlzIGNvbnNpZGVyZWQgbGVzcyBjb25mdXNpbmcuXG4gICAgaWYgKG9wdEFzeW5jKSB7XG4gICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnYXN5bmMnLCAnJyk7XG4gICAgfVxuICAgIC8vIE5PVEU6IHRoZSBsaW5rIG1heSBub3cgYmUgaW4gMyBzdGF0ZXM6ICgxKSBwZW5kaW5nIGluc2VydGlvbixcbiAgICAvLyAoMikgaW5mbGlnaHQsICgzKSBhbHJlYWR5IGxvYWRlZC4gSW4gZWFjaCBjYXNlLCB3ZSBuZWVkIHRvIGFkZFxuICAgIC8vIGV2ZW50IGxpc3RlbmVycyB0byBwcm9jZXNzIGNhbGxiYWNrcy5cbiAgICBsZXQgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRMaXN0ZW5lcik7XG4gICAgICBsaW5rLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgfTtcbiAgICBsZXQgbG9hZExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICAvLyBJbiBjYXNlIG9mIGEgc3VjY2Vzc2Z1bCBsb2FkLCBjYWNoZSB0aGUgbG9hZCBldmVudCBvbiB0aGUgbGluayBzb1xuICAgICAgLy8gdGhhdCBpdCBjYW4gYmUgdXNlZCB0byBzaG9ydC1jaXJjdWl0IHRoaXMgbWV0aG9kIGluIHRoZSBmdXR1cmUgd2hlblxuICAgICAgLy8gaXQgaXMgY2FsbGVkIHdpdGggdGhlIHNhbWUgaHJlZiBwYXJhbS5cbiAgICAgIGxpbmsuX19keW5hbWljSW1wb3J0TG9hZGVkID0gdHJ1ZTtcbiAgICAgIGlmIChvbmxvYWQpIHtcbiAgICAgICAgd2hlbkltcG9ydHNSZWFkeSgoKSA9PiB7XG4gICAgICAgICAgb25sb2FkKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgZXJyb3JMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgLy8gSW4gY2FzZSBvZiBhbiBlcnJvciwgcmVtb3ZlIHRoZSBsaW5rIGZyb20gdGhlIGRvY3VtZW50IHNvIHRoYXQgaXRcbiAgICAgIC8vIHdpbGwgYmUgYXV0b21hdGljYWxseSBjcmVhdGVkIGFnYWluIHRoZSBuZXh0IHRpbWUgYGltcG9ydEhyZWZgIGlzXG4gICAgICAvLyBjYWxsZWQuXG4gICAgICBpZiAobGluay5wYXJlbnROb2RlKSB7XG4gICAgICAgIGxpbmsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICAgIH1cbiAgICAgIGlmIChvbmVycm9yKSB7XG4gICAgICAgIHdoZW5JbXBvcnRzUmVhZHkoKCkgPT4ge1xuICAgICAgICAgIG9uZXJyb3IoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRMaXN0ZW5lcik7XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgIGlmIChsaW5rLnBhcmVudE5vZGUgPT0gbnVsbCkge1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgIC8vIGlmIHRoZSBsaW5rIGFscmVhZHkgbG9hZGVkLCBkaXNwYXRjaCBhIGZha2UgbG9hZCBldmVudFxuICAgICAgLy8gc28gdGhhdCBsaXN0ZW5lcnMgYXJlIGNhbGxlZCBhbmQgZ2V0IGEgcHJvcGVyIGV2ZW50IGFyZ3VtZW50LlxuICAgIH0gZWxzZSBpZiAobGluay5fX2R5bmFtaWNJbXBvcnRMb2FkZWQpIHtcbiAgICAgIGxpbmsuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2xvYWQnKSk7XG4gICAgfVxuICAgIHJldHVybiBsaW5rO1xuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvaW1wb3J0LWhyZWYuaHRtbFxuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n(function () {\n\n  'use strict';\n\n  let scheduled = false;\n  let beforeRenderQueue = [];\n  let afterRenderQueue = [];\n\n  function schedule() {\n    scheduled = true;\n    // before next render\n    requestAnimationFrame(function () {\n      scheduled = false;\n      flushQueue(beforeRenderQueue);\n      // after the render\n      setTimeout(function () {\n        runQueue(afterRenderQueue);\n      });\n    });\n  }\n\n  function flushQueue(queue) {\n    while (queue.length) {\n      callMethod(queue.shift());\n    }\n  }\n\n  function runQueue(queue) {\n    for (let i = 0, l = queue.length; i < l; i++) {\n      callMethod(queue.shift());\n    }\n  }\n\n  function callMethod(info) {\n    const context = info[0];\n    const callback = info[1];\n    const args = info[2];\n    try {\n      callback.apply(context, args);\n    } catch (e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  }\n\n  function flush() {\n    while (beforeRenderQueue.length || afterRenderQueue.length) {\n      flushQueue(beforeRenderQueue);\n      flushQueue(afterRenderQueue);\n    }\n    scheduled = false;\n  }\n\n  /**\n   * Module for scheduling flushable pre-render and post-render tasks.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module for scheduling flushable pre-render and post-render tasks.\n   */\n  Polymer.RenderStatus = {\n\n    /**\n     * Enqueues a callback which will be run before the next render, at\n     * `requestAnimationFrame` timing.\n     *\n     * This method is useful for enqueuing work that requires DOM measurement,\n     * since measurement may not be reliable in custom element callbacks before\n     * the first render, as well as for batching measurement tasks in general.\n     *\n     * Tasks in this queue may be flushed by calling `Polymer.RenderStatus.flush()`.\n     *\n     * @memberof Polymer.RenderStatus\n     * @param {*} context Context object the callback function will be bound to\n     * @param {function()} callback Callback function\n     * @param {Array} args An array of arguments to call the callback function with\n     */\n    beforeNextRender: function (context, callback, args) {\n      if (!scheduled) {\n        schedule();\n      }\n      beforeRenderQueue.push([context, callback, args]);\n    },\n\n    /**\n     * Enqueues a callback which will be run after the next render, equivalent\n     * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n     *\n     * This method is useful for tuning the first-render performance of an\n     * element or application by deferring non-critical work until after the\n     * first paint.  Typical non-render-critical work may include adding UI\n     * event listeners and aria attributes.\n     *\n     * @memberof Polymer.RenderStatus\n     * @param {*} context Context object the callback function will be bound to\n     * @param {function()} callback Callback function\n     * @param {Array} args An array of arguments to call the callback function with\n     */\n    afterNextRender: function (context, callback, args) {\n      if (!scheduled) {\n        schedule();\n      }\n      afterRenderQueue.push([context, callback, args]);\n    },\n\n    /**\n     * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n     * tasks.\n     *\n     * @memberof Polymer.RenderStatus\n     */\n    flush: flush\n\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3JlbmRlci1zdGF0dXMuaHRtbD9iZjUyIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9ib290Lmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICBsZXQgYmVmb3JlUmVuZGVyUXVldWUgPSBbXTtcbiAgbGV0IGFmdGVyUmVuZGVyUXVldWUgPSBbXTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZSgpIHtcbiAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgIC8vIGJlZm9yZSBuZXh0IHJlbmRlclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgIGZsdXNoUXVldWUoYmVmb3JlUmVuZGVyUXVldWUpO1xuICAgICAgLy8gYWZ0ZXIgdGhlIHJlbmRlclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJ1blF1ZXVlKGFmdGVyUmVuZGVyUXVldWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2FsbE1ldGhvZChxdWV1ZS5zaGlmdCgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5RdWV1ZShxdWV1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcXVldWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjYWxsTWV0aG9kKHF1ZXVlLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxNZXRob2QoaW5mbykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBpbmZvWzBdO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gaW5mb1sxXTtcbiAgICBjb25zdCBhcmdzID0gaW5mb1syXTtcbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2suYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB3aGlsZSAoYmVmb3JlUmVuZGVyUXVldWUubGVuZ3RoIHx8IGFmdGVyUmVuZGVyUXVldWUubGVuZ3RoKSB7XG4gICAgICBmbHVzaFF1ZXVlKGJlZm9yZVJlbmRlclF1ZXVlKTtcbiAgICAgIGZsdXNoUXVldWUoYWZ0ZXJSZW5kZXJRdWV1ZSk7XG4gICAgfVxuICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZHVsZSBmb3Igc2NoZWR1bGluZyBmbHVzaGFibGUgcHJlLXJlbmRlciBhbmQgcG9zdC1yZW5kZXIgdGFza3MuXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgTW9kdWxlIGZvciBzY2hlZHVsaW5nIGZsdXNoYWJsZSBwcmUtcmVuZGVyIGFuZCBwb3N0LXJlbmRlciB0YXNrcy5cbiAgICovXG4gIFBvbHltZXIuUmVuZGVyU3RhdHVzID0ge1xuXG4gICAgLyoqXG4gICAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB3aGljaCB3aWxsIGJlIHJ1biBiZWZvcmUgdGhlIG5leHQgcmVuZGVyLCBhdFxuICAgICAqIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIHRpbWluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgZW5xdWV1aW5nIHdvcmsgdGhhdCByZXF1aXJlcyBET00gbWVhc3VyZW1lbnQsXG4gICAgICogc2luY2UgbWVhc3VyZW1lbnQgbWF5IG5vdCBiZSByZWxpYWJsZSBpbiBjdXN0b20gZWxlbWVudCBjYWxsYmFja3MgYmVmb3JlXG4gICAgICogdGhlIGZpcnN0IHJlbmRlciwgYXMgd2VsbCBhcyBmb3IgYmF0Y2hpbmcgbWVhc3VyZW1lbnQgdGFza3MgaW4gZ2VuZXJhbC5cbiAgICAgKlxuICAgICAqIFRhc2tzIGluIHRoaXMgcXVldWUgbWF5IGJlIGZsdXNoZWQgYnkgY2FsbGluZyBgUG9seW1lci5SZW5kZXJTdGF0dXMuZmx1c2goKWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5SZW5kZXJTdGF0dXNcbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBvYmplY3QgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgYm91bmQgdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gY2FsbCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aFxuICAgICAqL1xuICAgIGJlZm9yZU5leHRSZW5kZXI6IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaywgYXJncykge1xuICAgICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgICAgc2NoZWR1bGUoKTtcbiAgICAgIH1cbiAgICAgIGJlZm9yZVJlbmRlclF1ZXVlLnB1c2goW2NvbnRleHQsIGNhbGxiYWNrLCBhcmdzXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVucXVldWVzIGEgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBydW4gYWZ0ZXIgdGhlIG5leHQgcmVuZGVyLCBlcXVpdmFsZW50XG4gICAgICogdG8gb25lIHRhc2sgKGBzZXRUaW1lb3V0YCkgYWZ0ZXIgdGhlIG5leHQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yIHR1bmluZyB0aGUgZmlyc3QtcmVuZGVyIHBlcmZvcm1hbmNlIG9mIGFuXG4gICAgICogZWxlbWVudCBvciBhcHBsaWNhdGlvbiBieSBkZWZlcnJpbmcgbm9uLWNyaXRpY2FsIHdvcmsgdW50aWwgYWZ0ZXIgdGhlXG4gICAgICogZmlyc3QgcGFpbnQuICBUeXBpY2FsIG5vbi1yZW5kZXItY3JpdGljYWwgd29yayBtYXkgaW5jbHVkZSBhZGRpbmcgVUlcbiAgICAgKiBldmVudCBsaXN0ZW5lcnMgYW5kIGFyaWEgYXR0cmlidXRlcy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlJlbmRlclN0YXR1c1xuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IG9iamVjdCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSBib3VuZCB0b1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIEFuIGFycmF5IG9mIGFyZ3VtZW50cyB0byBjYWxsIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aXRoXG4gICAgICovXG4gICAgYWZ0ZXJOZXh0UmVuZGVyOiBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICAgIHNjaGVkdWxlKCk7XG4gICAgICB9XG4gICAgICBhZnRlclJlbmRlclF1ZXVlLnB1c2goW2NvbnRleHQsIGNhbGxiYWNrLCBhcmdzXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZsdXNoZXMgYWxsIGBiZWZvcmVOZXh0UmVuZGVyYCB0YXNrcywgZm9sbG93ZWQgYnkgYWxsIGBhZnRlck5leHRSZW5kZXJgXG4gICAgICogdGFza3MuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5SZW5kZXJTdGF0dXNcbiAgICAgKi9cbiAgICBmbHVzaDogZmx1c2hcblxuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvcmVuZGVyLXN0YXR1cy5odG1sXG4vLyBtb2R1bGUgaWQgPSA1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports) {

eval("\n\n(function () {\n  'use strict';\n\n  // unresolved\n\n  function resolve() {\n    document.body.removeAttribute('unresolved');\n  }\n\n  if (window.WebComponents) {\n    window.addEventListener('WebComponentsReady', resolve);\n  } else {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      resolve();\n    } else {\n      window.addEventListener('DOMContentLoaded', resolve);\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3VucmVzb2x2ZWQuaHRtbD83NTc0Il0sInNvdXJjZXNDb250ZW50IjpbIlxuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gdW5yZXNvbHZlZFxuXG4gIGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ3VucmVzb2x2ZWQnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cuV2ViQ29tcG9uZW50cykge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdXZWJDb21wb25lbnRzUmVhZHknLCByZXNvbHZlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSk7XG4gICAgfVxuICB9XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi91dGlscy91bnJlc29sdmVkLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(28);\n\n__webpack_require__(58);\n\n__webpack_require__(18);\n\n(function () {\n  'use strict';\n\n  const p = Element.prototype;\n  /**\n   * @const {function(this:Element, string): boolean}\n   */\n  const normalizedMatchesSelector = p.matches || p.matchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector || p.webkitMatchesSelector;\n\n  /**\n   * Cross-platform `element.matches` shim.\n   *\n   * @function matchesSelector\n   * @memberof Polymer.dom\n   * @param {!Element} node Node to check selector against\n   * @param {string} selector Selector to match\n   * @return {boolean} True if node matched selector\n   */\n  const matchesSelector = function (node, selector) {\n    return normalizedMatchesSelector.call(node, selector);\n  };\n\n  /**\n   * Node API wrapper class returned from `Polymer.dom.(target)` when\n   * `target` is a `Node`.\n   */\n  class DomApi {\n\n    /**\n     * @param {Node} node Node for which to create a Polymer.dom helper object.\n     */\n    constructor(node) {\n      this.node = node;\n    }\n\n    /**\n     * Returns an instance of `Polymer.FlattenedNodesObserver` that\n     * listens for node changes on this element.\n     *\n     * @param {Function} callback Called when direct or distributed children\n     *   of this element changes\n     * @return {Polymer.FlattenedNodesObserver} Observer instance\n     */\n    observeNodes(callback) {\n      return new Polymer.FlattenedNodesObserver(this.node, callback);\n    }\n\n    /**\n     * Disconnects an observer previously created via `observeNodes`\n     *\n     * @param {Polymer.FlattenedNodesObserver} observerHandle Observer instance\n     *   to disconnect.\n     */\n    unobserveNodes(observerHandle) {\n      observerHandle.disconnect();\n    }\n\n    /**\n     * Provided as a backwards-compatible API only.  This method does nothing.\n     */\n    notifyObserver() {}\n\n    /**\n     * Returns true if the provided node is contained with this element's\n     * light-DOM children or shadow root, including any nested shadow roots\n     * of children therein.\n     *\n     * @param {Node} node Node to test\n     * @return {boolean} Returns true if the given `node` is contained within\n     *   this element's light or shadow DOM.\n     */\n    deepContains(node) {\n      if (this.node.contains(node)) {\n        return true;\n      }\n      let n = node;\n      let doc = node.ownerDocument;\n      // walk from node to `this` or `document`\n      while (n && n !== doc && n !== this.node) {\n        // use logical parentnode, or native ShadowRoot host\n        n = n.parentNode || n.host;\n      }\n      return n === this.node;\n    }\n\n    /**\n     * Returns the root node of this node.  Equivalent to `getRoodNode()`.\n     *\n     * @return {Node} Top most element in the dom tree in which the node\n     * exists. If the node is connected to a document this is either a\n     * shadowRoot or the document; otherwise, it may be the node\n     * itself or a node or document fragment containing it.\n     */\n    getOwnerRoot() {\n      return this.node.getRootNode();\n    }\n\n    /**\n     * For slot elements, returns the nodes assigned to the slot; otherwise\n     * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.\n     *\n     * @return {Array<Node>} Array of assigned nodes\n     */\n    getDistributedNodes() {\n      return this.node.localName === 'slot' ? this.node.assignedNodes({ flatten: true }) : [];\n    }\n\n    /**\n     * Returns an array of all slots this element was distributed to.\n     *\n     * @return {Array<HTMLSlotElement>} Description\n     */\n    getDestinationInsertionPoints() {\n      let ip$ = [];\n      let n = this.node.assignedSlot;\n      while (n) {\n        ip$.push(n);\n        n = n.assignedSlot;\n      }\n      return ip$;\n    }\n\n    /**\n     * Calls `importNode` on the `ownerDocument` for this node.\n     *\n     * @param {Node} node Node to import\n     * @param {boolean} deep True if the node should be cloned deeply during\n     *   import\n     * @return {Node} Clone of given node imported to this owner document\n     */\n    importNode(node, deep) {\n      let doc = this.node instanceof Document ? this.node : this.node.ownerDocument;\n      return doc.importNode(node, deep);\n    }\n\n    /**\n     * @return {Array} Returns a flattened list of all child nodes and nodes assigned\n     * to child slots.\n     */\n    getEffectiveChildNodes() {\n      return Polymer.FlattenedNodesObserver.getFlattenedNodes(this.node);\n    }\n\n    /**\n     * Returns a filtered list of flattened child elements for this element based\n     * on the given selector.\n     *\n     * @param {string} selector Selector to filter nodes against\n     * @return {Array<HTMLElement>} List of flattened child elements\n     */\n    queryDistributedElements(selector) {\n      let c$ = this.getEffectiveChildNodes();\n      let list = [];\n      for (let i = 0, l = c$.length, c; i < l && (c = c$[i]); i++) {\n        if (c.nodeType === Node.ELEMENT_NODE && matchesSelector(c, selector)) {\n          list.push(c);\n        }\n      }\n      return list;\n    }\n\n    /**\n     * For shadow roots, returns the currently focused element within this\n     * shadow root.\n     *\n     * @return {Node|undefined} Currently focused element\n     */\n    get activeElement() {\n      let node = this.node;\n      return node._activeElement !== undefined ? node._activeElement : node.activeElement;\n    }\n  }\n\n  function forwardMethods(proto, methods) {\n    for (let i = 0; i < methods.length; i++) {\n      let method = methods[i];\n      proto[method] = /** @this {DomApi} */function () {\n        return this.node[method].apply(this.node, arguments);\n      };\n    }\n  }\n\n  function forwardReadOnlyProperties(proto, properties) {\n    for (let i = 0; i < properties.length; i++) {\n      let name = properties[i];\n      Object.defineProperty(proto, name, {\n        get: function () {\n          const domApi = /** @type {DomApi} */this;\n          return domApi.node[name];\n        },\n        configurable: true\n      });\n    }\n  }\n\n  function forwardProperties(proto, properties) {\n    for (let i = 0; i < properties.length; i++) {\n      let name = properties[i];\n      Object.defineProperty(proto, name, {\n        get: function () {\n          const domApi = /** @type {DomApi} */this;\n          return domApi.node[name];\n        },\n        set: function (value) {\n          /** @type {DomApi} */this.node[name] = value;\n        },\n        configurable: true\n      });\n    }\n  }\n\n  forwardMethods(DomApi.prototype, ['cloneNode', 'appendChild', 'insertBefore', 'removeChild', 'replaceChild', 'setAttribute', 'removeAttribute', 'querySelector', 'querySelectorAll']);\n\n  forwardReadOnlyProperties(DomApi.prototype, ['parentNode', 'firstChild', 'lastChild', 'nextSibling', 'previousSibling', 'firstElementChild', 'lastElementChild', 'nextElementSibling', 'previousElementSibling', 'childNodes', 'children', 'classList']);\n\n  forwardProperties(DomApi.prototype, ['textContent', 'innerHTML']);\n\n  /**\n   * Event API wrapper class returned from `Polymer.dom.(target)` when\n   * `target` is an `Event`.\n   */\n  class EventApi {\n    constructor(event) {\n      this.event = event;\n    }\n\n    /**\n     * Returns the first node on the `composedPath` of this event.\n     *\n     * @return {Node} The node this event was dispatched to\n     */\n    get rootTarget() {\n      return this.event.composedPath()[0];\n    }\n\n    /**\n     * Returns the local (re-targeted) target for this event.\n     *\n     * @return {Node} The local (re-targeted) target for this event.\n     */\n    get localTarget() {\n      return this.event.target;\n    }\n\n    /**\n     * Returns the `composedPath` for this event.\n     */\n    get path() {\n      return this.event.composedPath();\n    }\n  }\n\n  Polymer.DomApi = DomApi;\n\n  /**\n   * Legacy DOM and Event manipulation API wrapper factory used to abstract\n   * differences between native Shadow DOM and \"Shady DOM\" when polyfilling on\n   * older browsers.\n   *\n   * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and\n   * in the majority of cases simply facades directly to the standard native\n   * API.\n   *\n   * @namespace\n   * @summary Legacy DOM and Event manipulation API wrapper factory used to\n   * abstract differences between native Shadow DOM and \"Shady DOM.\"\n   * @memberof Polymer\n   * @param {!Node|Event} obj Node or event to operate on\n   * @return {DomApi|EventApi} Wrapper providing either node API or event API\n   */\n  Polymer.dom = function (obj) {\n    obj = obj || document;\n    if (!obj.__domApi) {\n      let helper;\n      if (obj instanceof Event) {\n        helper = new EventApi(obj);\n      } else {\n        helper = new DomApi(obj);\n      }\n      obj.__domApi = helper;\n    }\n    return obj.__domApi;\n  };\n\n  Polymer.dom.matchesSelector = matchesSelector;\n\n  /**\n   * Forces several classes of asynchronously queued tasks to flush:\n   * - Debouncers added via `Polymer.enqueueDebouncer`\n   * - ShadyDOM distribution\n   *\n   * This method facades to `Polymer.flush`.\n   *\n   * @memberof Polymer.dom\n   */\n  Polymer.dom.flush = Polymer.flush;\n\n  /**\n   * Adds a `Polymer.Debouncer` to a list of globally flushable tasks.\n   *\n   * This method facades to `Polymer.enqueueDebouncer`.\n   *\n   * @memberof Polymer.dom\n   * @param {Polymer.Debouncer} debouncer Debouncer to enqueue\n   */\n  Polymer.dom.addDebouncer = Polymer.enqueueDebouncer;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(33);\n\n__webpack_require__(11);\n\n(function () {\n  'use strict';\n\n  /**\n   * Returns true if `node` is a slot element\n   * @param {HTMLElement} node Node to test.\n   * @return {boolean} Returns true if the given `node` is a slot\n   * @private\n   */\n\n  function isSlot(node) {\n    return node.localName === 'slot';\n  }\n\n  /**\n   * Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n   * of a node's children and, for any children that are `<slot>` elements,\n   * the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * The provided `callback` is called whenever any change to this list\n   * of flattened nodes occurs, where an addition or removal of a node is\n   * considered a change. The `callback` is called with one argument, an object\n   * containing an array of any `addedNodes` and `removedNodes`.\n   *\n   * Note: the callback is called asynchronous to any changes\n   * at a microtask checkpoint. This is because observation is performed using\n   * `MutationObserver` and the `<slot>` element's `slotchange` event which\n   * are asynchronous.\n   *\n   * @memberof Polymer\n   * @summary Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`.\n   */\n  class FlattenedNodesObserver {\n\n    /**\n     * Returns the list of flattened nodes for the given `node`.\n     * This list consists of a node's children and, for any children\n     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n     * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n     * and the `<slot>` has one `<div>` assigned to it, then the flattened\n     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n     * `<slot>` elements assigned to it, these are flattened as well.\n     *\n     * @param {HTMLElement|HTMLSlotElement} node The node for which to return the list of flattened nodes.\n     * @return {Array} The list of flattened nodes for the given `node`.\n    */\n    static getFlattenedNodes(node) {\n      if (isSlot(node)) {\n        node = /** @type {HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n        return node.assignedNodes({ flatten: true });\n      } else {\n        return Array.from(node.childNodes).map(node => {\n          if (isSlot(node)) {\n            node = /** @type {HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n            return node.assignedNodes({ flatten: true });\n          } else {\n            return [node];\n          }\n        }).reduce((a, b) => a.concat(b), []);\n      }\n    }\n\n    /**\n     * @param {Node} target Node on which to listen for changes.\n     * @param {Function} callback Function called when there are additions\n     * or removals from the target's list of flattened nodes.\n    */\n    constructor(target, callback) {\n      /** @type {MutationObserver} */\n      this._shadyChildrenObserver = null;\n      /** @type {MutationObserver} */\n      this._nativeChildrenObserver = null;\n      this._connected = false;\n      this._target = target;\n      this.callback = callback;\n      this._effectiveNodes = [];\n      this._observer = null;\n      this._scheduled = false;\n      /** @type {function()} */\n      this._boundSchedule = () => {\n        this._schedule();\n      };\n      this.connect();\n      this._schedule();\n    }\n\n    /**\n     * Activates an observer. This method is automatically called when\n     * a `FlattenedNodesObserver` is created. It should only be called to\n     * re-activate an observer that has been deactivated via the `disconnect` method.\n     */\n    connect() {\n      if (isSlot(this._target)) {\n        this._listenSlots([this._target]);\n      } else {\n        this._listenSlots(this._target.children);\n        if (window.ShadyDOM) {\n          this._shadyChildrenObserver = ShadyDOM.observeChildren(this._target, mutations => {\n            this._processMutations(mutations);\n          });\n        } else {\n          this._nativeChildrenObserver = new MutationObserver(mutations => {\n            this._processMutations(mutations);\n          });\n          this._nativeChildrenObserver.observe(this._target, { childList: true });\n        }\n      }\n      this._connected = true;\n    }\n\n    /**\n     * Deactivates the flattened nodes observer. After calling this method\n     * the observer callback will not be called when changes to flattened nodes\n     * occur. The `connect` method may be subsequently called to reactivate\n     * the observer.\n     */\n    disconnect() {\n      if (isSlot(this._target)) {\n        this._unlistenSlots([this._target]);\n      } else {\n        this._unlistenSlots(this._target.children);\n        if (window.ShadyDOM && this._shadyChildrenObserver) {\n          ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n          this._shadyChildrenObserver = null;\n        } else if (this._nativeChildrenObserver) {\n          this._nativeChildrenObserver.disconnect();\n          this._nativeChildrenObserver = null;\n        }\n      }\n      this._connected = false;\n    }\n\n    _schedule() {\n      if (!this._scheduled) {\n        this._scheduled = true;\n        Polymer.Async.microTask.run(() => this.flush());\n      }\n    }\n\n    _processMutations(mutations) {\n      this._processSlotMutations(mutations);\n      this.flush();\n    }\n\n    _processSlotMutations(mutations) {\n      if (mutations) {\n        for (let i = 0; i < mutations.length; i++) {\n          let mutation = mutations[i];\n          if (mutation.addedNodes) {\n            this._listenSlots(mutation.addedNodes);\n          }\n          if (mutation.removedNodes) {\n            this._unlistenSlots(mutation.removedNodes);\n          }\n        }\n      }\n    }\n\n    /**\n     * Flushes the observer causing any pending changes to be immediately\n     * delivered the observer callback. By default these changes are delivered\n     * asynchronously at the next microtask checkpoint.\n     *\n     * @return {boolean} Returns true if any pending changes caused the observer\n     * callback to run.\n     */\n    flush() {\n      if (!this._connected) {\n        return false;\n      }\n      if (window.ShadyDOM) {\n        ShadyDOM.flush();\n      }\n      if (this._nativeChildrenObserver) {\n        this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n      } else if (this._shadyChildrenObserver) {\n        this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n      }\n      this._scheduled = false;\n      let info = {\n        target: this._target,\n        addedNodes: [],\n        removedNodes: []\n      };\n      let newNodes = this.constructor.getFlattenedNodes(this._target);\n      let splices = Polymer.ArraySplice.calculateSplices(newNodes, this._effectiveNodes);\n      // process removals\n      for (let i = 0, s; i < splices.length && (s = splices[i]); i++) {\n        for (let j = 0, n; j < s.removed.length && (n = s.removed[j]); j++) {\n          info.removedNodes.push(n);\n        }\n      }\n      // process adds\n      for (let i = 0, s; i < splices.length && (s = splices[i]); i++) {\n        for (let j = s.index; j < s.index + s.addedCount; j++) {\n          info.addedNodes.push(newNodes[j]);\n        }\n      }\n      // update cache\n      this._effectiveNodes = newNodes;\n      let didFlush = false;\n      if (info.addedNodes.length || info.removedNodes.length) {\n        didFlush = true;\n        this.callback.call(this._target, info);\n      }\n      return didFlush;\n    }\n\n    _listenSlots(nodeList) {\n      for (let i = 0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.addEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n    _unlistenSlots(nodeList) {\n      for (let i = 0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.removeEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n  }\n\n  Polymer.FlattenedNodesObserver = FlattenedNodesObserver;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(60);\n\n(function () {\n  'use strict';\n\n  /**\n   * Legacy class factory and registration helper for defining Polymer\n   * elements.\n   *\n   * This method is equivalent to\n   * `customElements.define(info.is, Polymer.Class(info));`\n   *\n   * See `Polymer.Class` for details on valid legacy metadata format for `info`.\n   *\n   * @override\n   * @function Polymer\n   * @param {!PolymerInit} info Object containing Polymer metadata and functions\n   *   to become class methods.\n   * @return {!HTMLElement} Generated class\n   * @suppress {duplicate, invalidCasts, checkTypes}\n   */\n\n  window.Polymer._polymerFn = function (info) {\n    // if input is a `class` (aka a function with a prototype), use the prototype\n    // remember that the `constructor` will never be called\n    let klass;\n    if (typeof info === 'function') {\n      klass = info;\n    } else {\n      klass = Polymer.Class(info);\n    }\n    customElements.define(klass.is, /** @type {!HTMLElement} */klass);\n    return klass;\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2xlZ2FjeS9wb2x5bWVyLWZuLmh0bWw/NWIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4vY2xhc3MuaHRtbCcpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIExlZ2FjeSBjbGFzcyBmYWN0b3J5IGFuZCByZWdpc3RyYXRpb24gaGVscGVyIGZvciBkZWZpbmluZyBQb2x5bWVyXG4gICAqIGVsZW1lbnRzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvXG4gICAqIGBjdXN0b21FbGVtZW50cy5kZWZpbmUoaW5mby5pcywgUG9seW1lci5DbGFzcyhpbmZvKSk7YFxuICAgKlxuICAgKiBTZWUgYFBvbHltZXIuQ2xhc3NgIGZvciBkZXRhaWxzIG9uIHZhbGlkIGxlZ2FjeSBtZXRhZGF0YSBmb3JtYXQgZm9yIGBpbmZvYC5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEBmdW5jdGlvbiBQb2x5bWVyXG4gICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIE9iamVjdCBjb250YWluaW5nIFBvbHltZXIgbWV0YWRhdGEgYW5kIGZ1bmN0aW9uc1xuICAgKiAgIHRvIGJlY29tZSBjbGFzcyBtZXRob2RzLlxuICAgKiBAcmV0dXJuIHshSFRNTEVsZW1lbnR9IEdlbmVyYXRlZCBjbGFzc1xuICAgKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZSwgaW52YWxpZENhc3RzLCBjaGVja1R5cGVzfVxuICAgKi9cblxuICB3aW5kb3cuUG9seW1lci5fcG9seW1lckZuID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAvLyBpZiBpbnB1dCBpcyBhIGBjbGFzc2AgKGFrYSBhIGZ1bmN0aW9uIHdpdGggYSBwcm90b3R5cGUpLCB1c2UgdGhlIHByb3RvdHlwZVxuICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhlIGBjb25zdHJ1Y3RvcmAgd2lsbCBuZXZlciBiZSBjYWxsZWRcbiAgICBsZXQga2xhc3M7XG4gICAgaWYgKHR5cGVvZiBpbmZvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBrbGFzcyA9IGluZm87XG4gICAgfSBlbHNlIHtcbiAgICAgIGtsYXNzID0gUG9seW1lci5DbGFzcyhpbmZvKTtcbiAgICB9XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGtsYXNzLmlzLCAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9rbGFzcyk7XG4gICAgcmV0dXJuIGtsYXNzO1xuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbGVnYWN5L3BvbHltZXItZm4uaHRtbFxuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(31);\n\n(function () {\n\n  'use strict';\n\n  let metaProps = {\n    attached: true,\n    detached: true,\n    ready: true,\n    created: true,\n    beforeRegister: true,\n    registered: true,\n    attributeChanged: true,\n    // meta objects\n    behaviors: true\n  };\n\n  /**\n   * Applies a \"legacy\" behavior or array of behaviors to the provided class.\n   *\n   * Note: this method will automatically also apply the `Polymer.LegacyElementMixin`\n   * to ensure that any legacy behaviors can rely on legacy Polymer API on\n   * the underlying element.\n   *\n   * @param {!(Object|Array)} behaviors Behavior object or array of behaviors.\n   * @param {!HTMLElement|function(new:HTMLElement)} klass Element class.\n   * @return {function(new:HTMLElement)} Returns a new Element class extended by the\n   * passed in `behaviors` and also by `Polymer.LegacyElementMixin`.\n   * @memberof Polymer\n   * @suppress {invalidCasts, checkTypes}\n   */\n  function mixinBehaviors(behaviors, klass) {\n    if (!behaviors) {\n      klass = /** @type {HTMLElement} */klass; // eslint-disable-line no-self-assign\n      return klass;\n    }\n    // NOTE: ensure the behavior is extending a class with\n    // legacy element api. This is necessary since behaviors expect to be able\n    // to access 1.x legacy api.\n    klass = Polymer.LegacyElementMixin(klass);\n    if (!Array.isArray(behaviors)) {\n      behaviors = [behaviors];\n    }\n    let superBehaviors = klass.prototype.behaviors;\n    // get flattened, deduped list of behaviors *not* already on super class\n    behaviors = flattenBehaviors(behaviors, null, superBehaviors);\n    // mixin new behaviors\n    klass = _mixinBehaviors(behaviors, klass);\n    if (superBehaviors) {\n      behaviors = superBehaviors.concat(behaviors);\n    }\n    // Set behaviors on prototype for BC...\n    klass.prototype.behaviors = behaviors;\n    return klass;\n  }\n\n  // NOTE:\n  // 1.x\n  // Behaviors were mixed in *in reverse order* and de-duped on the fly.\n  // The rule was that behavior properties were copied onto the element\n  // prototype if and only if the property did not already exist.\n  // Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:\n  // (1), B, (2), A, (3) C. This means prototype properties win over\n  // B properties win over A win over C. This mirrors what would happen\n  // with inheritance if element extended B extended A extended C.\n  //\n  // Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting\n  // `behaviors` array was [C, A, B].\n  // Behavior lifecycle methods were called in behavior array order\n  // followed by the element, e.g. (1) C.created, (2) A.created,\n  // (3) B.created, (4) element.created. There was no support for\n  // super, and \"super-behavior\" methods were callable only by name).\n  //\n  // 2.x\n  // Behaviors are made into proper mixins which live in the\n  // element's prototype chain. Behaviors are placed in the element prototype\n  // eldest to youngest and de-duped youngest to oldest:\n  // So, first [A, B, C, A, B] becomes [C, A, B] then,\n  // the element prototype becomes (oldest) (1) Polymer.Element, (2) class(C),\n  // (3) class(A), (4) class(B), (5) class(Polymer({...})).\n  // Result:\n  // This means element properties win over B properties win over A win\n  // over C. (same as 1.x)\n  // If lifecycle is called (super then me), order is\n  // (1) C.created, (2) A.created, (3) B.created, (4) element.created\n  // (again same as 1.x)\n  function _mixinBehaviors(behaviors, klass) {\n    for (let i = 0; i < behaviors.length; i++) {\n      let b = behaviors[i];\n      if (b) {\n        klass = Array.isArray(b) ? _mixinBehaviors(b, klass) : GenerateClassFromInfo(b, klass);\n      }\n    }\n    return klass;\n  }\n\n  /**\n   * @param {Array} behaviors List of behaviors to flatten.\n   * @param {Array=} list Target list to flatten behaviors into.\n   * @param {Array=} exclude List of behaviors to exclude from the list.\n   * @return {!Array} Returns the list of flattened behaviors.\n   */\n  function flattenBehaviors(behaviors, list, exclude) {\n    list = list || [];\n    for (let i = behaviors.length - 1; i >= 0; i--) {\n      let b = behaviors[i];\n      if (b) {\n        if (Array.isArray(b)) {\n          flattenBehaviors(b, list);\n        } else {\n          // dedup\n          if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {\n            list.unshift(b);\n          }\n        }\n      } else {\n        console.warn('behavior is null, check for missing or 404 import');\n      }\n    }\n    return list;\n  }\n\n  /**\n   * @param {!PolymerInit} info Polymer info object\n   * @param {function(new:HTMLElement)} Base base class to extend with info object\n   * @return {function(new:HTMLElement)} Generated class\n   * @suppress {checkTypes}\n   * @private\n   */\n  function GenerateClassFromInfo(info, Base) {\n\n    class PolymerGenerated extends Base {\n\n      static get properties() {\n        return info.properties;\n      }\n\n      static get observers() {\n        return info.observers;\n      }\n\n      /**\n       * @return {HTMLTemplateElement} template for this class\n       */\n      static get template() {\n        // get template first from any imperative set in `info._template`\n        return info._template ||\n        // next look in dom-module associated with this element's is.\n        Polymer.DomModule && Polymer.DomModule.import(this.is, 'template') ||\n        // next look for superclass template (note: use superclass symbol\n        // to ensure correct `this.is`)\n        Base.template ||\n        // finally fall back to `_template` in element's prototype.\n        this.prototype._template || null;\n      }\n\n      created() {\n        super.created();\n        if (info.created) {\n          info.created.call(this);\n        }\n      }\n\n      _registered() {\n        super._registered();\n        /* NOTE: `beforeRegister` is called here for bc, but the behavior\n         is different than in 1.x. In 1.0, the method was called *after*\n         mixing prototypes together but *before* processing of meta-objects.\n         However, dynamic effects can still be set here and can be done either\n         in `beforeRegister` or `registered`. It is no longer possible to set\n         `is` in `beforeRegister` as you could in 1.x.\n        */\n        if (info.beforeRegister) {\n          info.beforeRegister.call(Object.getPrototypeOf(this));\n        }\n        if (info.registered) {\n          info.registered.call(Object.getPrototypeOf(this));\n        }\n      }\n\n      _applyListeners() {\n        super._applyListeners();\n        if (info.listeners) {\n          for (let l in info.listeners) {\n            this._addMethodEventListenerToNode(this, l, info.listeners[l]);\n          }\n        }\n      }\n\n      // note: exception to \"super then me\" rule;\n      // do work before calling super so that super attributes\n      // only apply if not already set.\n      _ensureAttributes() {\n        if (info.hostAttributes) {\n          for (let a in info.hostAttributes) {\n            this._ensureAttribute(a, info.hostAttributes[a]);\n          }\n        }\n        super._ensureAttributes();\n      }\n\n      ready() {\n        super.ready();\n        if (info.ready) {\n          info.ready.call(this);\n        }\n      }\n\n      attached() {\n        super.attached();\n        if (info.attached) {\n          info.attached.call(this);\n        }\n      }\n\n      detached() {\n        super.detached();\n        if (info.detached) {\n          info.detached.call(this);\n        }\n      }\n\n      attributeChanged(name, old, value) {\n        super.attributeChanged(name, old, value);\n        if (info.attributeChanged) {\n          info.attributeChanged.call(this, name, old, value);\n        }\n      }\n    }\n\n    PolymerGenerated.generatedFrom = info;\n\n    for (let p in info) {\n      // NOTE: cannot copy `metaProps` methods onto prototype at least because\n      // `super.ready` must be called and is not included in the user fn.\n      if (!(p in metaProps)) {\n        let pd = Object.getOwnPropertyDescriptor(info, p);\n        if (pd) {\n          Object.defineProperty(PolymerGenerated.prototype, p, pd);\n        }\n      }\n    }\n\n    return PolymerGenerated;\n  }\n\n  /**\n   * Generates a class that extends `Polymer.LegacyElement` based on the\n   * provided info object.  Metadata objects on the `info` object\n   * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used\n   * for Polymer's meta-programming systems, and any functions are copied\n   * to the generated class.\n   *\n   * Valid \"metadata\" values are as follows:\n   *\n   * `is`: String providing the tag name to register the element under. In\n   * addition, if a `dom-module` with the same id exists, the first template\n   * in that `dom-module` will be stamped into the shadow root of this element,\n   * with support for declarative event listeners (`on-...`), Polymer data\n   * bindings (`[[...]]` and `{{...}}`), and id-based node finding into\n   * `this.$`.\n   *\n   * `properties`: Object describing property-related metadata used by Polymer\n   * features (key: property names, value: object containing property metadata).\n   * Valid keys in per-property metadata include:\n   * - `type` (String|Number|Object|Array|...): Used by\n   *   `attributeChangedCallback` to determine how string-based attributes\n   *   are deserialized to JavaScript property values.\n   * - `notify` (boolean): Causes a change in the property to fire a\n   *   non-bubbling event called `<property>-changed`. Elements that have\n   *   enabled two-way binding to the property use this event to observe changes.\n   * - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *   To set a read-only property, use the private setter method\n   *   `_setProperty(property, value)`.\n   * - `observer` (string): Observer method name that will be called when\n   *   the property changes. The arguments of the method are\n   *   `(value, previousValue)`.\n   * - `computed` (string): String describing method and dependent properties\n   *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *   Computed properties are read-only by default and can only be changed\n   *   via the return value of the computing method.\n   *\n   * `observers`: Array of strings describing multi-property observer methods\n   *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).\n   *\n   * `listeners`: Object describing event listeners to be added to each\n   *  instance of this element (key: event name, value: method name).\n   *\n   * `behaviors`: Array of additional `info` objects containing metadata\n   * and callbacks in the same format as the `info` object here which are\n   * merged into this element.\n   *\n   * `hostAttributes`: Object listing attributes to be applied to the host\n   *  once created (key: attribute name, value: attribute value).  Values\n   *  are serialized based on the type of the value.  Host attributes should\n   *  generally be limited to attributes such as `tabIndex` and `aria-...`.\n   *  Attributes in `hostAttributes` are only applied if a user-supplied\n   *  attribute is not already present (attributes in markup override\n   *  `hostAttributes`).\n   *\n   * In addition, the following Polymer-specific callbacks may be provided:\n   * - `registered`: called after first instance of this element,\n   * - `created`: called during `constructor`\n   * - `attached`: called during `connectedCallback`\n   * - `detached`: called during `disconnectedCallback`\n   * - `ready`: called before first `attached`, after all properties of\n   *   this element have been propagated to its template and all observers\n   *   have run\n   *\n   * @param {!PolymerInit} info Object containing Polymer metadata and functions\n   *   to become class methods.\n   * @return {function(new:HTMLElement)} Generated class\n   * @memberof Polymer\n   */\n  Polymer.Class = function (info) {\n    if (!info) {\n      console.warn('Polymer.Class requires `info` argument');\n    }\n    let klass = GenerateClassFromInfo(info, info.behaviors ?\n    // note: mixinBehaviors ensures `LegacyElementMixin`.\n    mixinBehaviors(info.behaviors, HTMLElement) : Polymer.LegacyElementMixin(HTMLElement));\n    // decorate klass with registration info\n    klass.is = info.is;\n    return klass;\n  };\n\n  Polymer.mixinBehaviors = mixinBehaviors;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(19);\n\n(function () {\n  'use strict';\n\n  let TemplateInstanceBase = Polymer.TemplateInstanceBase; // eslint-disable-line\n\n  /**\n   * @typedef {{\n   *   _templatizerTemplate: HTMLTemplateElement,\n   *   _parentModel: boolean,\n   *   _instanceProps: Object,\n   *   _forwardHostPropV2: Function,\n   *   _notifyInstancePropV2: Function,\n   *   ctor: TemplateInstanceBase\n   * }}\n   */\n  let TemplatizerUser; // eslint-disable-line\n\n  /**\n   * The `Polymer.Templatizer` behavior adds methods to generate instances of\n   * templates that are each managed by an anonymous `Polymer.PropertyEffects`\n   * instance where data-bindings in the stamped template content are bound to\n   * accessors on itself.\n   *\n   * This behavior is provided in Polymer 2.x as a hybrid-element convenience\n   * only.  For non-hybrid usage, the `Polymer.Templatize` library\n   * should be used instead.\n   *\n   * Example:\n   *\n   *     // Get a template from somewhere, e.g. light DOM\n   *     let template = this.querySelector('template');\n   *     // Prepare the template\n   *     this.templatize(template);\n   *     // Instance the template with an initial data model\n   *     let instance = this.stamp({myProp: 'initial'});\n   *     // Insert the instance's DOM somewhere, e.g. light DOM\n   *     Polymer.dom(this).appendChild(instance.root);\n   *     // Changing a property on the instance will propagate to bindings\n   *     // in the template\n   *     instance.myProp = 'new value';\n   *\n   * Users of `Templatizer` may need to implement the following abstract\n   * API's to determine how properties and paths from the host should be\n   * forwarded into to instances:\n   *\n   *     _forwardHostPropV2: function(prop, value)\n   *\n   * Likewise, users may implement these additional abstract API's to determine\n   * how instance-specific properties that change on the instance should be\n   * forwarded out to the host, if necessary.\n   *\n   *     _notifyInstancePropV2: function(inst, prop, value)\n   *\n   * In order to determine which properties are instance-specific and require\n   * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n   * object containing keys for each instance prop, for example:\n   *\n   *     _instanceProps: {\n   *       item: true,\n   *       index: true\n   *     }\n   *\n   * Any properties used in the template that are not defined in _instanceProp\n   * will be forwarded out to the Templatize `owner` automatically.\n   *\n   * Users may also implement the following abstract function to show or\n   * hide any DOM generated using `stamp`:\n   *\n   *     _showHideChildren: function(shouldHide)\n   *\n   * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n   * as the implementations will need to differ from the callbacks required\n   * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n   * between versions 1.x and 2.x.\n   *\n   * @polymerBehavior\n   */\n  Polymer.Templatizer = {\n\n    /**\n     * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n     * for the provided template.  This method should be called once per\n     * template to prepare an element for stamping the template, followed\n     * by `stamp` to create new instances of the template.\n     *\n     * @param {HTMLTemplateElement} template Template to prepare\n     * @param {boolean=} mutableData When `true`, the generated class will skip\n     *   strict dirty-checking for objects and arrays (always consider them to\n     *   be \"dirty\"). Defaults to false.\n     * @this {TemplatizerUser}\n     */\n    templatize(template, mutableData) {\n      this._templatizerTemplate = template;\n      this.ctor = Polymer.Templatize.templatize(template, this, {\n        mutableData: Boolean(mutableData),\n        parentModel: this._parentModel,\n        instanceProps: this._instanceProps,\n        forwardHostProp: this._forwardHostPropV2,\n        notifyInstanceProp: this._notifyInstancePropV2\n      });\n    },\n\n    /**\n     * Creates an instance of the template prepared by `templatize`.  The object\n     * returned is an instance of the anonymous class generated by `templatize`\n     * whose `root` property is a document fragment containing newly cloned\n     * template content, and which has property accessors corresponding to\n     * properties referenced in template bindings.\n     *\n     * @param {Object=} model Object containing initial property values to\n     *   populate into the template bindings.\n     * @return {TemplateInstanceBase} Returns the created instance of\n     * the template prepared by `templatize`.\n     * @this {TemplatizerUser}\n     */\n    stamp(model) {\n      return new this.ctor(model);\n    },\n\n    /**\n     * Returns the template \"model\" (`TemplateInstance`) associated with\n     * a given element, which serves as the binding scope for the template\n     * instance the element is contained in.  A template model should be used\n     * to manipulate data associated with this template instance.\n     *\n     * @param {HTMLElement} el Element for which to return a template model.\n     * @return {TemplateInstanceBase} Model representing the binding scope for\n     *   the element.\n     * @this {TemplatizerUser}\n     */\n    modelForElement(el) {\n      return Polymer.Templatize.modelForElement(this._templatizerTemplate, el);\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(2);\n\n__webpack_require__(16);\n\n__webpack_require__(12);\n\n__webpack_require__(32);\n\n(function () {\n  'use strict';\n\n  /**\n   * @constructor\n   * @extends {HTMLElement}\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_OptionalMutableData}\n   * @implements {Polymer_GestureEventListeners}\n   */\n\n  const domBindBase = Polymer.GestureEventListeners(Polymer.OptionalMutableData(Polymer.PropertyEffects(HTMLElement)));\n\n  /**\n   * Custom element to allow using Polymer's template features (data binding,\n   * declarative event listeners, etc.) in the main document without defining\n   * a new custom element.\n   *\n   * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n   * element, which will immediately stamp the wrapped template into the main\n   * document and bind elements to the `dom-bind` element itself as the\n   * binding scope.\n   *\n   * @polymer\n   * @customElement\n   * @appliesMixin Polymer.PropertyEffects\n   * @appliesMixin Polymer.OptionalMutableData\n   * @appliesMixin Polymer.GestureEventListeners\n   * @extends {domBindBase}\n   * @memberof Polymer\n   * @summary Custom element to allow using Polymer's template features (data\n   *   binding, declarative event listeners, etc.) in the main document.\n   */\n  class DomBind extends domBindBase {\n\n    static get observedAttributes() {\n      return ['mutable-data'];\n    }\n\n    constructor() {\n      super();\n      this.root = null;\n      this.$ = null;\n      this.__children = null;\n    }\n\n    // assumes only one observed attribute\n    attributeChangedCallback() {\n      this.mutableData = true;\n    }\n\n    connectedCallback() {\n      this.style.display = 'none';\n      this.render();\n    }\n\n    disconnectedCallback() {\n      this.__removeChildren();\n    }\n\n    __insertChildren() {\n      this.parentNode.insertBefore(this.root, this);\n    }\n\n    __removeChildren() {\n      if (this.__children) {\n        for (let i = 0; i < this.__children.length; i++) {\n          this.root.appendChild(this.__children[i]);\n        }\n      }\n    }\n\n    /**\n     * Forces the element to render its content. This is typically only\n     * necessary to call if HTMLImports with the async attribute are used.\n     */\n    render() {\n      let template;\n      if (!this.__children) {\n        template = /** @type {HTMLTemplateElement} */template || this.querySelector('template');\n        if (!template) {\n          // Wait until childList changes and template should be there by then\n          let observer = new MutationObserver(() => {\n            template = /** @type {HTMLTemplateElement} */this.querySelector('template');\n            if (template) {\n              observer.disconnect();\n              this.render();\n            } else {\n              throw new Error('dom-bind requires a <template> child');\n            }\n          });\n          observer.observe(this, { childList: true });\n          return;\n        }\n        this.root = this._stampTemplate(template);\n        this.$ = this.root.$;\n        this.__children = [];\n        for (let n = this.root.firstChild; n; n = n.nextSibling) {\n          this.__children[this.__children.length] = n;\n        }\n        this._enableProperties();\n      }\n      this.__insertChildren();\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n\n  }\n\n  customElements.define('dom-bind', DomBind);\n\n  Polymer.DomBind = DomBind;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1iaW5kLmh0bWw/YzdiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3V0aWxzL2Jvb3QuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9taXhpbnMvcHJvcGVydHktZWZmZWN0cy5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL21peGlucy9tdXRhYmxlLWRhdGEuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9taXhpbnMvZ2VzdHVyZS1ldmVudC1saXN0ZW5lcnMuaHRtbCcpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7SFRNTEVsZW1lbnR9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfR2VzdHVyZUV2ZW50TGlzdGVuZXJzfVxuICAgKi9cblxuICBjb25zdCBkb21CaW5kQmFzZSA9IFBvbHltZXIuR2VzdHVyZUV2ZW50TGlzdGVuZXJzKFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YShQb2x5bWVyLlByb3BlcnR5RWZmZWN0cyhIVE1MRWxlbWVudCkpKTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVsZW1lbnQgdG8gYWxsb3cgdXNpbmcgUG9seW1lcidzIHRlbXBsYXRlIGZlYXR1cmVzIChkYXRhIGJpbmRpbmcsXG4gICAqIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycywgZXRjLikgaW4gdGhlIG1haW4gZG9jdW1lbnQgd2l0aG91dCBkZWZpbmluZ1xuICAgKiBhIG5ldyBjdXN0b20gZWxlbWVudC5cbiAgICpcbiAgICogYDx0ZW1wbGF0ZT5gIHRhZ3MgdXRpbGl6aW5nIGJpbmRpbmdzIG1heSBiZSB3cmFwcGVkIHdpdGggdGhlIGA8ZG9tLWJpbmQ+YFxuICAgKiBlbGVtZW50LCB3aGljaCB3aWxsIGltbWVkaWF0ZWx5IHN0YW1wIHRoZSB3cmFwcGVkIHRlbXBsYXRlIGludG8gdGhlIG1haW5cbiAgICogZG9jdW1lbnQgYW5kIGJpbmQgZWxlbWVudHMgdG8gdGhlIGBkb20tYmluZGAgZWxlbWVudCBpdHNlbGYgYXMgdGhlXG4gICAqIGJpbmRpbmcgc2NvcGUuXG4gICAqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBjdXN0b21FbGVtZW50XG4gICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGFcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLkdlc3R1cmVFdmVudExpc3RlbmVyc1xuICAgKiBAZXh0ZW5kcyB7ZG9tQmluZEJhc2V9XG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRvIGFsbG93IHVzaW5nIFBvbHltZXIncyB0ZW1wbGF0ZSBmZWF0dXJlcyAoZGF0YVxuICAgKiAgIGJpbmRpbmcsIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycywgZXRjLikgaW4gdGhlIG1haW4gZG9jdW1lbnQuXG4gICAqL1xuICBjbGFzcyBEb21CaW5kIGV4dGVuZHMgZG9tQmluZEJhc2Uge1xuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICByZXR1cm4gWydtdXRhYmxlLWRhdGEnXTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLnJvb3QgPSBudWxsO1xuICAgICAgdGhpcy4kID0gbnVsbDtcbiAgICAgIHRoaXMuX19jaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gYXNzdW1lcyBvbmx5IG9uZSBvYnNlcnZlZCBhdHRyaWJ1dGVcbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soKSB7XG4gICAgICB0aGlzLm11dGFibGVEYXRhID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICB0aGlzLl9fcmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICBfX2luc2VydENoaWxkcmVuKCkge1xuICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnJvb3QsIHRoaXMpO1xuICAgIH1cblxuICAgIF9fcmVtb3ZlQ2hpbGRyZW4oKSB7XG4gICAgICBpZiAodGhpcy5fX2NoaWxkcmVuKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5yb290LmFwcGVuZENoaWxkKHRoaXMuX19jaGlsZHJlbltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIGVsZW1lbnQgdG8gcmVuZGVyIGl0cyBjb250ZW50LiBUaGlzIGlzIHR5cGljYWxseSBvbmx5XG4gICAgICogbmVjZXNzYXJ5IHRvIGNhbGwgaWYgSFRNTEltcG9ydHMgd2l0aCB0aGUgYXN5bmMgYXR0cmlidXRlIGFyZSB1c2VkLlxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgIGxldCB0ZW1wbGF0ZTtcbiAgICAgIGlmICghdGhpcy5fX2NoaWxkcmVuKSB7XG4gICAgICAgIHRlbXBsYXRlID0gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqL3RlbXBsYXRlIHx8IHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgIC8vIFdhaXQgdW50aWwgY2hpbGRMaXN0IGNoYW5nZXMgYW5kIHRlbXBsYXRlIHNob3VsZCBiZSB0aGVyZSBieSB0aGVuXG4gICAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgICAgdGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovdGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpO1xuICAgICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZG9tLWJpbmQgcmVxdWlyZXMgYSA8dGVtcGxhdGU+IGNoaWxkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5fc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIHRoaXMuJCA9IHRoaXMucm9vdC4kO1xuICAgICAgICB0aGlzLl9fY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbiA9IHRoaXMucm9vdC5maXJzdENoaWxkOyBuOyBuID0gbi5uZXh0U2libGluZykge1xuICAgICAgICAgIHRoaXMuX19jaGlsZHJlblt0aGlzLl9fY2hpbGRyZW4ubGVuZ3RoXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX2luc2VydENoaWxkcmVuKCk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgfSkpO1xuICAgIH1cblxuICB9XG5cbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tYmluZCcsIERvbUJpbmQpO1xuXG4gIFBvbHltZXIuRG9tQmluZCA9IERvbUJpbmQ7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tYmluZC5odG1sXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(19);\n\n__webpack_require__(17);\n\n__webpack_require__(18);\n\n__webpack_require__(12);\n\n(function () {\n  'use strict';\n\n  let TemplateInstanceBase = Polymer.TemplateInstanceBase; // eslint-disable-line\n\n  /**\n   * @constructor\n   * @implements {Polymer_OptionalMutableData}\n   * @extends {Polymer.Element}\n   */\n  const domRepeatBase = Polymer.OptionalMutableData(Polymer.Element);\n\n  /**\n   * The `<dom-repeat>` element will automatically stamp and binds one instance\n   * of template content to each object in a user-provided array.\n   * `dom-repeat` accepts an `items` property, and one instance of the template\n   * is stamped for each item into the DOM at the location of the `dom-repeat`\n   * element.  The `item` property will be set on each instance's binding\n   * scope, thus templates should bind to sub-properties of `item`.\n   *\n   * Example:\n   *\n   * ```html\n   * <dom-module id=\"employee-list\">\n   *\n   *   <template>\n   *\n   *     <div> Employee list: </div>\n   *     <template is=\"dom-repeat\" items=\"{{employees}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *     </template>\n   *\n   *   </template>\n   *\n   *   <script>\n   *     Polymer({\n   *       is: 'employee-list',\n   *       ready: function() {\n   *         this.employees = [\n   *             {first: 'Bob', last: 'Smith'},\n   *             {first: 'Sally', last: 'Johnson'},\n   *             ...\n   *         ];\n   *       }\n   *     });\n   *   < /script>\n   *\n   * </dom-module>\n   * ```\n   *\n   * Notifications for changes to items sub-properties will be forwarded to template\n   * instances, which will update via the normal structured data notification system.\n   *\n   * Mutations to the `items` array itself should be made using the Array\n   * mutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n   * `unshift`), and template instances will be kept in sync with the data in the\n   * array.\n   *\n   * Events caught by event handlers within the `dom-repeat` template will be\n   * decorated with a `model` property, which represents the binding scope for\n   * each template instance.  The model is an instance of Polymer.Base, and should\n   * be used to manipulate data on the instance, for example\n   * `event.model.set('item.checked', true);`.\n   *\n   * Alternatively, the model for a template instance for an element stamped by\n   * a `dom-repeat` can be obtained using the `modelForElement` API on the\n   * `dom-repeat` that stamped it, for example\n   * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n   * This may be useful for manipulating instance data of event targets obtained\n   * by event handlers on parents of the `dom-repeat` (event delegation).\n   *\n   * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n   * `filter` and/or `sort` property.  This may be a string that names a function on\n   * the host, or a function may be assigned to the property directly.  The functions\n   * should implemented following the standard `Array` filter/sort API.\n   *\n   * In order to re-run the filter or sort functions based on changes to sub-fields\n   * of `items`, the `observe` property may be set as a space-separated list of\n   * `item` sub-fields that should cause a re-filter/sort when modified.  If\n   * the filter or sort function depends on properties not contained in `items`,\n   * the user should observe changes to those properties and call `render` to update\n   * the view based on the dependency change.\n   *\n   * For example, for an `dom-repeat` with a filter of the following:\n   *\n   * ```js\n   * isEngineer: function(item) {\n   *     return item.type == 'engineer' || item.manager.type == 'engineer';\n   * }\n   * ```\n   *\n   * Then the `observe` property should be configured as follows:\n   *\n   * ```html\n   * <template is=\"dom-repeat\" items=\"{{employees}}\"\n   *           filter=\"isEngineer\" observe=\"type manager.type\">\n   * ```\n   *\n   * @customElement\n   * @polymer\n   * @memberof Polymer\n   * @extends {domRepeatBase}\n   * @appliesMixin Polymer.OptionalMutableData\n   * @summary Custom element for stamping instance of a template bound to\n   *   items in an array.\n   */\n  class DomRepeat extends domRepeatBase {\n\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() {\n      return 'dom-repeat';\n    }\n\n    static get template() {\n      return null;\n    }\n\n    static get properties() {\n\n      /**\n       * Fired whenever DOM is added or removed by this template (by\n       * default, rendering occurs lazily).  To force immediate rendering, call\n       * `render`.\n       *\n       * @event dom-change\n       */\n      return {\n\n        /**\n         * An array containing items determining how many instances of the template\n         * to stamp and that that each template instance should bind to.\n         */\n        items: {\n          type: Array\n        },\n\n        /**\n         * The name of the variable to add to the binding scope for the array\n         * element associated with a given template instance.\n         */\n        as: {\n          type: String,\n          value: 'item'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the sorted and filtered list of rendered items.\n         * Note, for the index in the `this.items` array, use the value of the\n         * `itemsIndexAs` property.\n         */\n        indexAs: {\n          type: String,\n          value: 'index'\n        },\n\n        /**\n         * The name of the variable to add to the binding scope with the index\n         * of the instance in the `this.items` array. Note, for the index of\n         * this instance in the sorted and filtered list of rendered items,\n         * use the value of the `indexAs` property.\n         */\n        itemsIndexAs: {\n          type: String,\n          value: 'itemsIndex'\n        },\n\n        /**\n         * A function that should determine the sort order of the items.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.sort`.\n         * Using a sort function has no effect on the underlying `items` array.\n         */\n        sort: {\n          type: Function,\n          observer: '__sortChanged'\n        },\n\n        /**\n         * A function that can be used to filter items out of the view.  This\n         * property should either be provided as a string, indicating a method\n         * name on the element's host, or else be an actual function.  The\n         * function should match the sort function passed to `Array.filter`.\n         * Using a filter function has no effect on the underlying `items` array.\n         */\n        filter: {\n          type: Function,\n          observer: '__filterChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `observe` property\n         * should be set to a space-separated list of the names of item\n         * sub-fields that should trigger a re-sort or re-filter when changed.\n         * These should generally be fields of `item` that the sort or filter\n         * function depends on.\n         */\n        observe: {\n          type: String,\n          observer: '__observeChanged'\n        },\n\n        /**\n         * When using a `filter` or `sort` function, the `delay` property\n         * determines a debounce time after a change to observed item\n         * properties that must pass before the filter or sort is re-run.\n         * This is useful in rate-limiting shuffling of the view when\n         * item changes may be frequent.\n         */\n        delay: Number,\n\n        /**\n         * Count of currently rendered items after `filter` (if any) has been applied.\n         * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n         * set of template instances is rendered.\n         *\n         */\n        renderedItemCount: {\n          type: Number,\n          notify: true,\n          readOnly: true\n        },\n\n        /**\n         * Defines an initial count of template instances to render after setting\n         * the `items` array, before the next paint, and puts the `dom-repeat`\n         * into \"chunking mode\".  The remaining items will be created and rendered\n         * incrementally at each animation frame therof until all instances have\n         * been rendered.\n         */\n        initialCount: {\n          type: Number,\n          observer: '__initializeChunking'\n        },\n\n        /**\n         * When `initialCount` is used, this property defines a frame rate to\n         * target by throttling the number of instances rendered each frame to\n         * not exceed the budget for the target frame rate.  Setting this to a\n         * higher number will allow lower latency and higher throughput for\n         * things like event handlers, but will result in a longer time for the\n         * remaining items to complete rendering.\n         */\n        targetFramerate: {\n          type: Number,\n          value: 20\n        },\n\n        _targetFrameTime: {\n          type: Number,\n          computed: '__computeFrameTime(targetFramerate)'\n        }\n\n      };\n    }\n\n    static get observers() {\n      return ['__itemsChanged(items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__instances = [];\n      this.__limit = Infinity;\n      this.__pool = [];\n      this.__renderDebouncer = null;\n      this.__itemsIdxToInstIdx = {};\n      this.__chunkCount = null;\n      this.__lastChunkTime = null;\n      this.__sortFn = null;\n      this.__filterFn = null;\n      this.__observePaths = null;\n      this.__ctor = null;\n      this.__isDetached = true;\n      this.template = null;\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__isDetached = true;\n      for (let i = 0; i < this.__instances.length; i++) {\n        this.__detachInstance(i);\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.style.display = 'none';\n      // only perform attachment if the element was previously detached.\n      if (this.__isDetached) {\n        this.__isDetached = false;\n        let parent = this.parentNode;\n        for (let i = 0; i < this.__instances.length; i++) {\n          this.__attachInstance(i, parent);\n        }\n      }\n    }\n\n    __ensureTemplatized() {\n      // Templatizing (generating the instance constructor) needs to wait\n      // until ready, since won't have its template content handed back to\n      // it until then\n      if (!this.__ctor) {\n        let template = this.template = this.querySelector('template');\n        if (!template) {\n          // // Wait until childList changes and template should be there by then\n          let observer = new MutationObserver(() => {\n            if (this.querySelector('template')) {\n              observer.disconnect();\n              this.__render();\n            } else {\n              throw new Error('dom-repeat requires a <template> child');\n            }\n          });\n          observer.observe(this, { childList: true });\n          return false;\n        }\n        // Template instance props that should be excluded from forwarding\n        let instanceProps = {};\n        instanceProps[this.as] = true;\n        instanceProps[this.indexAs] = true;\n        instanceProps[this.itemsIndexAs] = true;\n        this.__ctor = Polymer.Templatize.templatize(template, this, {\n          mutableData: this.mutableData,\n          parentModel: true,\n          instanceProps: instanceProps,\n          /**\n           * @this {this}\n           * @param {string} prop Property to set\n           * @param {*} value Value to set property to\n           */\n          forwardHostProp: function (prop, value) {\n            let i$ = this.__instances;\n            for (let i = 0, inst; i < i$.length && (inst = i$[i]); i++) {\n              inst.forwardHostProp(prop, value);\n            }\n          },\n          /**\n           * @this {this}\n           * @param {Object} inst Instance to notify\n           * @param {string} prop Property to notify\n           * @param {*} value Value to notify\n           */\n          notifyInstanceProp: function (inst, prop, value) {\n            if (Polymer.Path.matches(this.as, prop)) {\n              let idx = inst[this.itemsIndexAs];\n              if (prop == this.as) {\n                this.items[idx] = value;\n              }\n              let path = Polymer.Path.translate(this.as, 'items.' + idx, prop);\n              this.notifyPath(path, value);\n            }\n          }\n        });\n      }\n      return true;\n    }\n\n    __getMethodHost() {\n      // Technically this should be the owner of the outermost template.\n      // In shadow dom, this is always getRootNode().host, but we can\n      // approximate this via cooperation with our dataHost always setting\n      // `_methodHost` as long as there were bindings (or id's) on this\n      // instance causing it to get a dataHost.\n      return this.__dataHost._methodHost || this.__dataHost;\n    }\n\n    __sortChanged(sort) {\n      let methodHost = this.__getMethodHost();\n      this.__sortFn = sort && (typeof sort == 'function' ? sort : function () {\n        return methodHost[sort].apply(methodHost, arguments);\n      });\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __filterChanged(filter) {\n      let methodHost = this.__getMethodHost();\n      this.__filterFn = filter && (typeof filter == 'function' ? filter : function () {\n        return methodHost[filter].apply(methodHost, arguments);\n      });\n      if (this.items) {\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __computeFrameTime(rate) {\n      return Math.ceil(1000 / rate);\n    }\n\n    __initializeChunking() {\n      if (this.initialCount) {\n        this.__limit = this.initialCount;\n        this.__chunkCount = this.initialCount;\n        this.__lastChunkTime = performance.now();\n      }\n    }\n\n    __tryRenderChunk() {\n      // Debounced so that multiple calls through `_render` between animation\n      // frames only queue one new rAF (e.g. array mutation & chunked render)\n      if (this.items && this.__limit < this.items.length) {\n        this.__debounceRender(this.__requestRenderChunk);\n      }\n    }\n\n    __requestRenderChunk() {\n      requestAnimationFrame(() => this.__renderChunk());\n    }\n\n    __renderChunk() {\n      // Simple auto chunkSize throttling algorithm based on feedback loop:\n      // measure actual time between frames and scale chunk count by ratio\n      // of target/actual frame time\n      let currChunkTime = performance.now();\n      let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n      this.__limit += this.__chunkCount;\n      this.__lastChunkTime = currChunkTime;\n      this.__debounceRender(this.__render);\n    }\n\n    __observeChanged() {\n      this.__observePaths = this.observe && this.observe.replace('.*', '.').split(' ');\n    }\n\n    __itemsChanged(change) {\n      if (this.items && !Array.isArray(this.items)) {\n        console.warn('dom-repeat expected array for `items`, found', this.items);\n      }\n      // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n      // path to that instance synchronously (returns false for non-item paths)\n      if (!this.__handleItemPath(change.path, change.value)) {\n        // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n        // so queue a full refresh\n        this.__initializeChunking();\n        this.__debounceRender(this.__render);\n      }\n    }\n\n    __handleObservedPaths(path) {\n      if (this.__observePaths) {\n        path = path.substring(path.indexOf('.') + 1);\n        let paths = this.__observePaths;\n        for (let i = 0; i < paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n            return true;\n          }\n        }\n      }\n    }\n\n    /**\n     * @param {function(this:DomRepeat)} fn Function to debounce.\n     * @param {number=} delay Delay in ms to debounce by.\n     */\n    __debounceRender(fn, delay = 0) {\n      this.__renderDebouncer = Polymer.Debouncer.debounce(this.__renderDebouncer, delay > 0 ? Polymer.Async.timeOut.after(delay) : Polymer.Async.microTask, fn.bind(this));\n      Polymer.enqueueDebouncer(this.__renderDebouncer);\n    }\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render() {\n      // Queue this repeater, then flush all in order\n      this.__debounceRender(this.__render);\n      Polymer.flush();\n    }\n\n    __render() {\n      if (!this.__ensureTemplatized()) {\n        // No template found yet\n        return;\n      }\n      this.__applyFullRefresh();\n      // Reset the pool\n      // TODO(kschaaf): Reuse pool across turns and nested templates\n      // Now that objects/arrays are re-evaluated when set, we can safely\n      // reuse pooled instances across turns, however we still need to decide\n      // semantics regarding how long to hold, how many to hold, etc.\n      this.__pool.length = 0;\n      // Set rendered item count\n      this._setRenderedItemCount(this.__instances.length);\n      // Notify users\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n      // Check to see if we need to render more items\n      this.__tryRenderChunk();\n    }\n\n    __applyFullRefresh() {\n      let items = this.items || [];\n      let isntIdxToItemsIdx = new Array(items.length);\n      for (let i = 0; i < items.length; i++) {\n        isntIdxToItemsIdx[i] = i;\n      }\n      // Apply user filter\n      if (this.__filterFn) {\n        isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) => this.__filterFn(items[i], idx, array));\n      }\n      // Apply user sort\n      if (this.__sortFn) {\n        isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n      }\n      // items->inst map kept for item path forwarding\n      const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n      let instIdx = 0;\n      // Generate instances and assign items\n      const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n      for (; instIdx < limit; instIdx++) {\n        let inst = this.__instances[instIdx];\n        let itemIdx = isntIdxToItemsIdx[instIdx];\n        let item = items[itemIdx];\n        itemsIdxToInstIdx[itemIdx] = instIdx;\n        if (inst && instIdx < this.__limit) {\n          inst._setPendingProperty(this.as, item);\n          inst._setPendingProperty(this.indexAs, instIdx);\n          inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n          inst._flushProperties();\n        } else {\n          this.__insertInstance(item, instIdx, itemIdx);\n        }\n      }\n      // Remove any extra instances from previous state\n      for (let i = this.__instances.length - 1; i >= instIdx; i--) {\n        this.__detachAndRemoveInstance(i);\n      }\n    }\n\n    __detachInstance(idx) {\n      let inst = this.__instances[idx];\n      for (let i = 0; i < inst.children.length; i++) {\n        let el = inst.children[i];\n        inst.root.appendChild(el);\n      }\n      return inst;\n    }\n\n    __attachInstance(idx, parent) {\n      let inst = this.__instances[idx];\n      parent.insertBefore(inst.root, this);\n    }\n\n    __detachAndRemoveInstance(idx) {\n      let inst = this.__detachInstance(idx);\n      if (inst) {\n        this.__pool.push(inst);\n      }\n      this.__instances.splice(idx, 1);\n    }\n\n    __stampInstance(item, instIdx, itemIdx) {\n      let model = {};\n      model[this.as] = item;\n      model[this.indexAs] = instIdx;\n      model[this.itemsIndexAs] = itemIdx;\n      return new this.__ctor(model);\n    }\n\n    __insertInstance(item, instIdx, itemIdx) {\n      let inst = this.__pool.pop();\n      if (inst) {\n        // TODO(kschaaf): If the pool is shared across turns, hostProps\n        // need to be re-set to reused instances in addition to item\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        inst = this.__stampInstance(item, instIdx, itemIdx);\n      }\n      let beforeRow = this.__instances[instIdx + 1];\n      let beforeNode = beforeRow ? beforeRow.children[0] : this;\n      this.parentNode.insertBefore(inst.root, beforeNode);\n      this.__instances[instIdx] = inst;\n      return inst;\n    }\n\n    // Implements extension point from Templatize mixin\n    _showHideChildren(hidden) {\n      for (let i = 0; i < this.__instances.length; i++) {\n        this.__instances[i]._showHideChildren(hidden);\n      }\n    }\n\n    // Called as a side effect of a host items.<key>.<path> path change,\n    // responsible for notifying item.<path> changes to inst for key\n    __handleItemPath(path, value) {\n      let itemsPath = path.slice(6); // 'items.'.length == 6\n      let dot = itemsPath.indexOf('.');\n      let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n      // If path was index into array...\n      if (itemsIdx == parseInt(itemsIdx, 10)) {\n        let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot + 1);\n        // If the path is observed, it will trigger a full refresh\n        this.__handleObservedPaths(itemSubPath);\n        // Note, even if a rull refresh is triggered, always do the path\n        // notification because unless mutableData is used for dom-repeat\n        // and all elements in the instance subtree, a full refresh may\n        // not trigger the proper update.\n        let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n        let inst = this.__instances[instIdx];\n        if (inst) {\n          let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n          // This is effectively `notifyPath`, but avoids some of the overhead\n          // of the public API\n          inst._setPendingPropertyOrPath(itemPath, value, false, true);\n          inst._flushProperties();\n        }\n        return true;\n      }\n    }\n\n    /**\n     * Returns the item associated with a given element stamped by\n     * this `dom-repeat`.\n     *\n     * Note, to modify sub-properties of the item,\n     * `modelForElement(el).set('item.<sub-prop>', value)`\n     * should be used.\n     *\n     * @param {HTMLElement} el Element for which to return the item.\n     * @return {*} Item associated with the element.\n     */\n    itemForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.as];\n    }\n\n    /**\n     * Returns the inst index for a given element stamped by this `dom-repeat`.\n     * If `sort` is provided, the index will reflect the sorted order (rather\n     * than the original array order).\n     *\n     * @param {HTMLElement} el Element for which to return the index.\n     * @return {*} Row index associated with the element (note this may\n     *   not correspond to the array index if a user `sort` is applied).\n     */\n    indexForElement(el) {\n      let instance = this.modelForElement(el);\n      return instance && instance[this.indexAs];\n    }\n\n    /**\n     * Returns the template \"model\" associated with a given element, which\n     * serves as the binding scope for the template instance the element is\n     * contained in. A template model is an instance of `Polymer.Base`, and\n     * should be used to manipulate data associated with this template instance.\n     *\n     * Example:\n     *\n     *   let model = modelForElement(el);\n     *   if (model.index < 10) {\n     *     model.set('item.checked', true);\n     *   }\n     *\n     * @param {HTMLElement} el Element for which to return a template model.\n     * @return {TemplateInstanceBase} Model representing the binding scope for\n     *   the element.\n     */\n    modelForElement(el) {\n      return Polymer.Templatize.modelForElement(this.template, el);\n    }\n\n  }\n\n  customElements.define(DomRepeat.is, DomRepeat);\n\n  Polymer.DomRepeat = DomRepeat;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(19);\n\n__webpack_require__(17);\n\n__webpack_require__(18);\n\n(function () {\n  'use strict';\n\n  /**\n   * The `<dom-if>` element will stamp a light-dom `<template>` child when\n   * the `if` property becomes truthy, and the template can use Polymer\n   * data-binding and declarative event features when used in the context of\n   * a Polymer element's template.\n   *\n   * When `if` becomes falsy, the stamped content is hidden but not\n   * removed from dom. When `if` subsequently becomes truthy again, the content\n   * is simply re-shown. This approach is used due to its favorable performance\n   * characteristics: the expense of creating template content is paid only\n   * once and lazily.\n   *\n   * Set the `restamp` property to true to force the stamped content to be\n   * created / destroyed when the `if` condition changes.\n   *\n   * @customElement\n   * @polymer\n   * @extends Polymer.Element\n   * @memberof Polymer\n   * @summary Custom element that conditionally stamps and hides or removes\n   *   template content based on a boolean flag.\n   */\n\n  class DomIf extends Polymer.Element {\n\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() {\n      return 'dom-if';\n    }\n\n    static get template() {\n      return null;\n    }\n\n    static get properties() {\n\n      return {\n\n        /**\n         * Fired whenever DOM is added or removed/hidden by this template (by\n         * default, rendering occurs lazily).  To force immediate rendering, call\n         * `render`.\n         *\n         * @event dom-change\n         */\n\n        /**\n         * A boolean indicating whether this template should stamp.\n         */\n        if: {\n          type: Boolean,\n          observer: '__debounceRender'\n        },\n\n        /**\n         * When true, elements will be removed from DOM and discarded when `if`\n         * becomes false and re-created and added back to the DOM when `if`\n         * becomes true.  By default, stamped elements will be hidden but left\n         * in the DOM when `if` becomes false, which is generally results\n         * in better performance.\n         */\n        restamp: {\n          type: Boolean,\n          observer: '__debounceRender'\n        }\n\n      };\n    }\n\n    constructor() {\n      super();\n      this.__renderDebouncer = null;\n      this.__invalidProps = null;\n      this.__instance = null;\n      this._lastIf = false;\n      this.__ctor = null;\n    }\n\n    __debounceRender() {\n      // Render is async for 2 reasons:\n      // 1. To eliminate dom creation trashing if user code thrashes `if` in the\n      //    same turn. This was more common in 1.x where a compound computed\n      //    property could result in the result changing multiple times, but is\n      //    mitigated to a large extent by batched property processing in 2.x.\n      // 2. To avoid double object propagation when a bag including values bound\n      //    to the `if` property as well as one or more hostProps could enqueue\n      //    the <dom-if> to flush before the <template>'s host property\n      //    forwarding. In that scenario creating an instance would result in\n      //    the host props being set once, and then the enqueued changes on the\n      //    template would set properties a second time, potentially causing an\n      //    object to be set to an instance more than once.  Creating the\n      //    instance async from flushing data ensures this doesn't happen. If\n      //    we wanted a sync option in the future, simply having <dom-if> flush\n      //    (or clear) its template's pending host properties before creating\n      //    the instance would also avoid the problem.\n      this.__renderDebouncer = Polymer.Debouncer.debounce(this.__renderDebouncer, Polymer.Async.microTask, () => this.__render());\n      Polymer.enqueueDebouncer(this.__renderDebouncer);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      if (!this.parentNode || this.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE && !this.parentNode.host) {\n        this.__teardownInstance();\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.style.display = 'none';\n      if (this.if) {\n        this.__debounceRender();\n      }\n    }\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render() {\n      Polymer.flush();\n    }\n\n    __render() {\n      if (this.if) {\n        if (!this.__ensureInstance()) {\n          // No template found yet\n          return;\n        }\n        this._showHideChildren();\n      } else if (this.restamp) {\n        this.__teardownInstance();\n      }\n      if (!this.restamp && this.__instance) {\n        this._showHideChildren();\n      }\n      if (this.if != this._lastIf) {\n        this.dispatchEvent(new CustomEvent('dom-change', {\n          bubbles: true,\n          composed: true\n        }));\n        this._lastIf = this.if;\n      }\n    }\n\n    __ensureInstance() {\n      let parentNode = this.parentNode;\n      // Guard against element being detached while render was queued\n      if (parentNode) {\n        if (!this.__ctor) {\n          let template = this.querySelector('template');\n          if (!template) {\n            // Wait until childList changes and template should be there by then\n            let observer = new MutationObserver(() => {\n              if (this.querySelector('template')) {\n                observer.disconnect();\n                this.__render();\n              } else {\n                throw new Error('dom-if requires a <template> child');\n              }\n            });\n            observer.observe(this, { childList: true });\n            return false;\n          }\n          this.__ctor = Polymer.Templatize.templatize(template, this, {\n            // dom-if templatizer instances require `mutable: true`, as\n            // `__syncHostProperties` relies on that behavior to sync objects\n            mutableData: true,\n            /**\n             * @param {string} prop Property to forward\n             * @param {*} value Value of property\n             * @this {this}\n             */\n            forwardHostProp: function (prop, value) {\n              if (this.__instance) {\n                if (this.if) {\n                  this.__instance.forwardHostProp(prop, value);\n                } else {\n                  // If we have an instance but are squelching host property\n                  // forwarding due to if being false, note the invalidated\n                  // properties so `__syncHostProperties` can sync them the next\n                  // time `if` becomes true\n                  this.__invalidProps = this.__invalidProps || Object.create(null);\n                  this.__invalidProps[Polymer.Path.root(prop)] = true;\n                }\n              }\n            }\n          });\n        }\n        if (!this.__instance) {\n          this.__instance = new this.__ctor();\n          parentNode.insertBefore(this.__instance.root, this);\n        } else {\n          this.__syncHostProperties();\n          let c$ = this.__instance.children;\n          if (c$ && c$.length) {\n            // Detect case where dom-if was re-attached in new position\n            let lastChild = this.previousSibling;\n            if (lastChild !== c$[c$.length - 1]) {\n              for (let i = 0, n; i < c$.length && (n = c$[i]); i++) {\n                parentNode.insertBefore(n, this);\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n\n    __syncHostProperties() {\n      let props = this.__invalidProps;\n      if (props) {\n        for (let prop in props) {\n          this.__instance._setPendingProperty(prop, this.__dataHost[prop]);\n        }\n        this.__invalidProps = null;\n        this.__instance._flushProperties();\n      }\n    }\n\n    __teardownInstance() {\n      if (this.__instance) {\n        let c$ = this.__instance.children;\n        if (c$ && c$.length) {\n          // use first child parent, for case when dom-if may have been detached\n          let parent = c$[0].parentNode;\n          for (let i = 0, n; i < c$.length && (n = c$[i]); i++) {\n            parent.removeChild(n);\n          }\n        }\n        this.__instance = null;\n        this.__invalidProps = null;\n      }\n    }\n\n    _showHideChildren() {\n      let hidden = this.__hideTemplateChildren__ || !this.if;\n      if (this.__instance) {\n        this.__instance._showHideChildren(hidden);\n      }\n    }\n\n  }\n\n  customElements.define(DomIf.is, DomIf);\n\n  Polymer.DomIf = DomIf;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(3);\n\n__webpack_require__(33);\n\n(function () {\n  'use strict';\n\n  /**\n   * Element mixin for recording dynamic associations between item paths in a\n   * master `items` array and a `selected` array such that path changes to the\n   * master array (at the host) element or elsewhere via data-binding) are\n   * correctly propagated to items in the selected array and vice-versa.\n   *\n   * The `items` property accepts an array of user data, and via the\n   * `select(item)` and `deselect(item)` API, updates the `selected` property\n   * which may be bound to other parts of the application, and any changes to\n   * sub-fields of `selected` item(s) will be kept in sync with items in the\n   * `items` array.  When `multi` is false, `selected` is a property\n   * representing the last selected item.  When `multi` is true, `selected`\n   * is an array of multiply selected items.\n   *\n   * @polymer\n   * @mixinFunction\n   * @appliesMixin Polymer.ElementMixin\n   * @memberof Polymer\n   * @summary Element mixin for recording dynamic associations between item paths in a\n   * master `items` array and a `selected` array\n   */\n\n  let ArraySelectorMixin = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_ElementMixin}\n     */\n    let elementBase = Polymer.ElementMixin(superClass);\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_ArraySelectorMixin}\n     * @unrestricted\n     */\n    class ArraySelectorMixin extends elementBase {\n\n      static get properties() {\n\n        return {\n\n          /**\n           * An array containing items from which selection will be made.\n           */\n          items: {\n            type: Array\n          },\n\n          /**\n           * When `true`, multiple items may be selected at once (in this case,\n           * `selected` is an array of currently selected items).  When `false`,\n           * only one item may be selected at a time.\n           */\n          multi: {\n            type: Boolean,\n            value: false\n          },\n\n          /**\n           * When `multi` is true, this is an array that contains any selected.\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           * @type {?(Object|Array<!Object>)}\n           */\n          selected: {\n            type: Object,\n            notify: true\n          },\n\n          /**\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           * @type {?Object}\n           */\n          selectedItem: {\n            type: Object,\n            notify: true\n          },\n\n          /**\n           * When `true`, calling `select` on an item that is already selected\n           * will deselect the item.\n           */\n          toggle: {\n            type: Boolean,\n            value: false\n          }\n\n        };\n      }\n\n      static get observers() {\n        return ['__updateSelection(multi, items.*)'];\n      }\n\n      constructor() {\n        super();\n        this.__lastItems = null;\n        this.__lastMulti = null;\n        this.__selectedMap = null;\n      }\n\n      __updateSelection(multi, itemsInfo) {\n        let path = itemsInfo.path;\n        if (path == 'items') {\n          // Case 1 - items array changed, so diff against previous array and\n          // deselect any removed items and adjust selected indices\n          let newItems = itemsInfo.base || [];\n          let lastItems = this.__lastItems;\n          let lastMulti = this.__lastMulti;\n          if (multi !== lastMulti) {\n            this.clearSelection();\n          }\n          if (lastItems) {\n            let splices = Polymer.ArraySplice.calculateSplices(newItems, lastItems);\n            this.__applySplices(splices);\n          }\n          this.__lastItems = newItems;\n          this.__lastMulti = multi;\n        } else if (itemsInfo.path == 'items.splices') {\n          // Case 2 - got specific splice information describing the array mutation:\n          // deselect any removed items and adjust selected indices\n          this.__applySplices(itemsInfo.value.indexSplices);\n        } else {\n          // Case 3 - an array element was changed, so deselect the previous\n          // item for that index if it was previously selected\n          let part = path.slice('items.'.length);\n          let idx = parseInt(part, 10);\n          if (part.indexOf('.') < 0 && part == idx) {\n            this.__deselectChangedIdx(idx);\n          }\n        }\n      }\n\n      __applySplices(splices) {\n        let selected = this.__selectedMap;\n        // Adjust selected indices and mark removals\n        for (let i = 0; i < splices.length; i++) {\n          let s = splices[i];\n          selected.forEach((idx, item) => {\n            if (idx < s.index) {\n              // no change\n            } else if (idx >= s.index + s.removed.length) {\n              // adjust index\n              selected.set(item, idx + s.addedCount - s.removed.length);\n            } else {\n              // remove index\n              selected.set(item, -1);\n            }\n          });\n          for (let j = 0; j < s.addedCount; j++) {\n            let idx = s.index + j;\n            if (selected.has(this.items[idx])) {\n              selected.set(this.items[idx], idx);\n            }\n          }\n        }\n        // Update linked paths\n        this.__updateLinks();\n        // Remove selected items that were removed from the items array\n        let sidx = 0;\n        selected.forEach((idx, item) => {\n          if (idx < 0) {\n            if (this.multi) {\n              this.splice('selected', sidx, 1);\n            } else {\n              this.selected = this.selectedItem = null;\n            }\n            selected.delete(item);\n          } else {\n            sidx++;\n          }\n        });\n      }\n\n      __updateLinks() {\n        this.__dataLinkedPaths = {};\n        if (this.multi) {\n          let sidx = 0;\n          this.__selectedMap.forEach(idx => {\n            if (idx >= 0) {\n              this.linkPaths('items.' + idx, 'selected.' + sidx++);\n            }\n          });\n        } else {\n          this.__selectedMap.forEach(idx => {\n            this.linkPaths('selected', 'items.' + idx);\n            this.linkPaths('selectedItem', 'items.' + idx);\n          });\n        }\n      }\n\n      /**\n       * Clears the selection state.\n       *\n       */\n      clearSelection() {\n        // Unbind previous selection\n        this.__dataLinkedPaths = {};\n        // The selected map stores 3 pieces of information:\n        // key: items array object\n        // value: items array index\n        // order: selected array index\n        this.__selectedMap = new Map();\n        // Initialize selection\n        this.selected = this.multi ? [] : null;\n        this.selectedItem = null;\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @param {*} item Item from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n      isSelected(item) {\n        return this.__selectedMap.has(item);\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @param {number} idx Index from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n      isIndexSelected(idx) {\n        return this.isSelected(this.items[idx]);\n      }\n\n      __deselectChangedIdx(idx) {\n        let sidx = this.__selectedIndexForItemIndex(idx);\n        if (sidx >= 0) {\n          let i = 0;\n          this.__selectedMap.forEach((idx, item) => {\n            if (sidx == i++) {\n              this.deselect(item);\n            }\n          });\n        }\n      }\n\n      __selectedIndexForItemIndex(idx) {\n        let selected = this.__dataLinkedPaths['items.' + idx];\n        if (selected) {\n          return parseInt(selected.slice('selected.'.length), 10);\n        }\n      }\n\n      /**\n       * Deselects the given item if it is already selected.\n       *\n       * @param {*} item Item from `items` array to deselect\n       */\n      deselect(item) {\n        let idx = this.__selectedMap.get(item);\n        if (idx >= 0) {\n          this.__selectedMap.delete(item);\n          let sidx;\n          if (this.multi) {\n            sidx = this.__selectedIndexForItemIndex(idx);\n          }\n          this.__updateLinks();\n          if (this.multi) {\n            this.splice('selected', sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n        }\n      }\n\n      /**\n       * Deselects the given index if it is already selected.\n       *\n       * @param {number} idx Index from `items` array to deselect\n       */\n      deselectIndex(idx) {\n        this.deselect(this.items[idx]);\n      }\n\n      /**\n       * Selects the given item.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @param {*} item Item from `items` array to select\n       */\n      select(item) {\n        this.selectIndex(this.items.indexOf(item));\n      }\n\n      /**\n       * Selects the given index.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @param {number} idx Index from `items` array to select\n       */\n      selectIndex(idx) {\n        let item = this.items[idx];\n        if (!this.isSelected(item)) {\n          if (!this.multi) {\n            this.__selectedMap.clear();\n          }\n          this.__selectedMap.set(item, idx);\n          this.__updateLinks();\n          if (this.multi) {\n            this.push('selected', item);\n          } else {\n            this.selected = this.selectedItem = item;\n          }\n        } else if (this.toggle) {\n          this.deselectIndex(idx);\n        }\n      }\n\n    }\n\n    return ArraySelectorMixin;\n  });\n\n  // export mixin\n  Polymer.ArraySelectorMixin = ArraySelectorMixin;\n\n  /**\n   * @constructor\n   * @extends {Polymer.Element}\n   * @implements {Polymer_ArraySelectorMixin}\n   */\n  let baseArraySelector = ArraySelectorMixin(Polymer.Element);\n\n  /**\n   * Element implementing the `Polymer.ArraySelector` mixin, which records\n   * dynamic associations between item paths in a master `items` array and a\n   * `selected` array such that path changes to the master array (at the host)\n   * element or elsewhere via data-binding) are correctly propagated to items\n   * in the selected array and vice-versa.\n   *\n   * The `items` property accepts an array of user data, and via the\n   * `select(item)` and `deselect(item)` API, updates the `selected` property\n   * which may be bound to other parts of the application, and any changes to\n   * sub-fields of `selected` item(s) will be kept in sync with items in the\n   * `items` array.  When `multi` is false, `selected` is a property\n   * representing the last selected item.  When `multi` is true, `selected`\n   * is an array of multiply selected items.\n   *\n   * Example:\n   *\n   * ```html\n   * <dom-module id=\"employee-list\">\n   *\n   *   <template>\n   *\n   *     <div> Employee list: </div>\n   *     <template is=\"dom-repeat\" id=\"employeeList\" items=\"{{employees}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *         <button on-click=\"toggleSelection\">Select</button>\n   *     </template>\n   *\n   *     <array-selector id=\"selector\" items=\"{{employees}}\" selected=\"{{selected}}\" multi toggle></array-selector>\n   *\n   *     <div> Selected employees: </div>\n   *     <template is=\"dom-repeat\" items=\"{{selected}}\">\n   *         <div>First name: <span>{{item.first}}</span></div>\n   *         <div>Last name: <span>{{item.last}}</span></div>\n   *     </template>\n   *\n   *   </template>\n   *\n   * </dom-module>\n   * ```\n   *\n   * ```js\n   * Polymer({\n   *   is: 'employee-list',\n   *   ready() {\n   *     this.employees = [\n   *         {first: 'Bob', last: 'Smith'},\n   *         {first: 'Sally', last: 'Johnson'},\n   *         ...\n   *     ];\n   *   },\n   *   toggleSelection(e) {\n   *     let item = this.$.employeeList.itemForElement(e.target);\n   *     this.$.selector.select(item);\n   *   }\n   * });\n   * ```\n   *\n   * @polymer\n   * @customElement\n   * @extends {baseArraySelector}\n   * @appliesMixin Polymer.ArraySelectorMixin\n   * @memberof Polymer\n   * @summary Custom element that links paths between an input `items` array and\n   *   an output `selected` item or array based on calls to its selection API.\n   */\n  class ArraySelector extends baseArraySelector {\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    static get is() {\n      return 'array-selector';\n    }\n  }\n  customElements.define(ArraySelector.is, ArraySelector);\n  Polymer.ArraySelector = ArraySelector;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(67);\n\n__webpack_require__(29);\n\n(function () {\n  'use strict';\n\n  const attr = 'include';\n\n  const CustomStyleInterface = window.ShadyCSS.CustomStyleInterface;\n\n  /**\n   * Custom element for defining styles in the main document that can take\n   * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims\n   * for style encapsulation, custom properties, and custom mixins.\n   *\n   * - Document styles defined in a `<custom-style>` are shimmed to ensure they\n   *   do not leak into local DOM when running on browsers without native\n   *   Shadow DOM.\n   * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector\n   *   to define custom properties that apply to all custom elements.\n   * - Custom mixins can be defined in a `<custom-style>`, if you import the optional\n   *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)\n   *   (`shadycss/apply-shim.html`).\n   *\n   * To use:\n   *\n   * - Import `custom-style.html`.\n   * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that\n   *   contains the CSS rules you want to shim.\n   *\n   * For example:\n   *\n   * ```\n   * <!-- import apply shim--only required if using mixins -->\n   * <link rel=\"import href=\"bower_components/shadycss/apply-shim.html\">\n   * <!-- import custom-style element -->\n   * <link rel=\"import\" href=\"bower_components/polymer/lib/elements/custom-style.html\">\n   * ...\n   * <custom-style>\n   *   <style>\n   *     html {\n   *       --custom-color: blue;\n   *       --custom-mixin: {\n   *         font-weight: bold;\n   *         color: red;\n   *       };\n   *     }\n   *   </style>\n   * </custom-style>\n   * ```\n   *\n   * @customElement\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element for defining styles in the main document that can\n   *   take advantage of Polymer's style scoping and custom properties shims.\n   */\n  class CustomStyle extends HTMLElement {\n    constructor() {\n      super();\n      this._style = null;\n      CustomStyleInterface.addCustomStyle(this);\n    }\n    /**\n     * Returns the light-DOM `<style>` child this element wraps.  Upon first\n     * call any style modules referenced via the `include` attribute will be\n     * concatenated to this element's `<style>`.\n     *\n     * @return {HTMLStyleElement} This element's light-DOM `<style>`\n     */\n    getStyle() {\n      if (this._style) {\n        return this._style;\n      }\n      const style = /** @type {HTMLStyleElement} */this.querySelector('style');\n      if (!style) {\n        return null;\n      }\n      this._style = style;\n      const include = style.getAttribute(attr);\n      if (include) {\n        style.removeAttribute(attr);\n        style.textContent = Polymer.StyleGather.cssFromModules(include) + style.textContent;\n      }\n      /*\n      HTML Imports styling the main document are deprecated in Chrome\n      https://crbug.com/523952\n       If this element is not in the main document, then it must be in an HTML Import document.\n      In that case, move the custom style to the main document.\n       The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd\n      cases of ordering w.r.t the main document styles.\n      */\n      if (this.ownerDocument !== window.document) {\n        window.document.head.appendChild(this);\n      }\n      return this._style;\n    }\n  }\n\n  window.customElements.define('custom-style', CustomStyle);\n  Polymer.CustomStyle = CustomStyle;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5odG1sPzE3NzIiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi8uLi8uLi9zaGFkeWNzcy9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vdXRpbHMvc3R5bGUtZ2F0aGVyLmh0bWwnKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IGF0dHIgPSAnaW5jbHVkZSc7XG5cbiAgY29uc3QgQ3VzdG9tU3R5bGVJbnRlcmZhY2UgPSB3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2U7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBlbGVtZW50IGZvciBkZWZpbmluZyBzdHlsZXMgaW4gdGhlIG1haW4gZG9jdW1lbnQgdGhhdCBjYW4gdGFrZVxuICAgKiBhZHZhbnRhZ2Ugb2YgW3NoYWR5IERPTV0oaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHljc3MpIHNoaW1zXG4gICAqIGZvciBzdHlsZSBlbmNhcHN1bGF0aW9uLCBjdXN0b20gcHJvcGVydGllcywgYW5kIGN1c3RvbSBtaXhpbnMuXG4gICAqXG4gICAqIC0gRG9jdW1lbnQgc3R5bGVzIGRlZmluZWQgaW4gYSBgPGN1c3RvbS1zdHlsZT5gIGFyZSBzaGltbWVkIHRvIGVuc3VyZSB0aGV5XG4gICAqICAgZG8gbm90IGxlYWsgaW50byBsb2NhbCBET00gd2hlbiBydW5uaW5nIG9uIGJyb3dzZXJzIHdpdGhvdXQgbmF0aXZlXG4gICAqICAgU2hhZG93IERPTS5cbiAgICogLSBDdXN0b20gcHJvcGVydGllcyBjYW4gYmUgZGVmaW5lZCBpbiBhIGA8Y3VzdG9tLXN0eWxlPmAuIFVzZSB0aGUgYGh0bWxgIHNlbGVjdG9yXG4gICAqICAgdG8gZGVmaW5lIGN1c3RvbSBwcm9wZXJ0aWVzIHRoYXQgYXBwbHkgdG8gYWxsIGN1c3RvbSBlbGVtZW50cy5cbiAgICogLSBDdXN0b20gbWl4aW5zIGNhbiBiZSBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YCwgaWYgeW91IGltcG9ydCB0aGUgb3B0aW9uYWxcbiAgICogICBbYXBwbHkgc2hpbV0oaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHljc3MjYWJvdXQtYXBwbHlzaGltKVxuICAgKiAgIChgc2hhZHljc3MvYXBwbHktc2hpbS5odG1sYCkuXG4gICAqXG4gICAqIFRvIHVzZTpcbiAgICpcbiAgICogLSBJbXBvcnQgYGN1c3RvbS1zdHlsZS5odG1sYC5cbiAgICogLSBQbGFjZSBhIGA8Y3VzdG9tLXN0eWxlPmAgZWxlbWVudCBpbiB0aGUgbWFpbiBkb2N1bWVudCwgd3JhcHBpbmcgYW4gaW5saW5lIGA8c3R5bGU+YCB0YWcgdGhhdFxuICAgKiAgIGNvbnRhaW5zIHRoZSBDU1MgcnVsZXMgeW91IHdhbnQgdG8gc2hpbS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGBgYFxuICAgKiA8IS0tIGltcG9ydCBhcHBseSBzaGltLS1vbmx5IHJlcXVpcmVkIGlmIHVzaW5nIG1peGlucyAtLT5cbiAgICogPGxpbmsgcmVsPVwiaW1wb3J0IGhyZWY9XCJib3dlcl9jb21wb25lbnRzL3NoYWR5Y3NzL2FwcGx5LXNoaW0uaHRtbFwiPlxuICAgKiA8IS0tIGltcG9ydCBjdXN0b20tc3R5bGUgZWxlbWVudCAtLT5cbiAgICogPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvZWxlbWVudHMvY3VzdG9tLXN0eWxlLmh0bWxcIj5cbiAgICogLi4uXG4gICAqIDxjdXN0b20tc3R5bGU+XG4gICAqICAgPHN0eWxlPlxuICAgKiAgICAgaHRtbCB7XG4gICAqICAgICAgIC0tY3VzdG9tLWNvbG9yOiBibHVlO1xuICAgKiAgICAgICAtLWN1c3RvbS1taXhpbjoge1xuICAgKiAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgKiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAqICAgICAgIH07XG4gICAqICAgICB9XG4gICAqICAgPC9zdHlsZT5cbiAgICogPC9jdXN0b20tc3R5bGU+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAY3VzdG9tRWxlbWVudFxuICAgKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCBmb3IgZGVmaW5pbmcgc3R5bGVzIGluIHRoZSBtYWluIGRvY3VtZW50IHRoYXQgY2FuXG4gICAqICAgdGFrZSBhZHZhbnRhZ2Ugb2YgUG9seW1lcidzIHN0eWxlIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0aWVzIHNoaW1zLlxuICAgKi9cbiAgY2xhc3MgQ3VzdG9tU3R5bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fc3R5bGUgPSBudWxsO1xuICAgICAgQ3VzdG9tU3R5bGVJbnRlcmZhY2UuYWRkQ3VzdG9tU3R5bGUodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpZ2h0LURPTSBgPHN0eWxlPmAgY2hpbGQgdGhpcyBlbGVtZW50IHdyYXBzLiAgVXBvbiBmaXJzdFxuICAgICAqIGNhbGwgYW55IHN0eWxlIG1vZHVsZXMgcmVmZXJlbmNlZCB2aWEgdGhlIGBpbmNsdWRlYCBhdHRyaWJ1dGUgd2lsbCBiZVxuICAgICAqIGNvbmNhdGVuYXRlZCB0byB0aGlzIGVsZW1lbnQncyBgPHN0eWxlPmAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtIVE1MU3R5bGVFbGVtZW50fSBUaGlzIGVsZW1lbnQncyBsaWdodC1ET00gYDxzdHlsZT5gXG4gICAgICovXG4gICAgZ2V0U3R5bGUoKSB7XG4gICAgICBpZiAodGhpcy5fc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovdGhpcy5xdWVyeVNlbGVjdG9yKCdzdHlsZScpO1xuICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICBjb25zdCBpbmNsdWRlID0gc3R5bGUuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IFBvbHltZXIuU3R5bGVHYXRoZXIuY3NzRnJvbU1vZHVsZXMoaW5jbHVkZSkgKyBzdHlsZS50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIC8qXG4gICAgICBIVE1MIEltcG9ydHMgc3R5bGluZyB0aGUgbWFpbiBkb2N1bWVudCBhcmUgZGVwcmVjYXRlZCBpbiBDaHJvbWVcbiAgICAgIGh0dHBzOi8vY3JidWcuY29tLzUyMzk1MlxuICAgICAgIElmIHRoaXMgZWxlbWVudCBpcyBub3QgaW4gdGhlIG1haW4gZG9jdW1lbnQsIHRoZW4gaXQgbXVzdCBiZSBpbiBhbiBIVE1MIEltcG9ydCBkb2N1bWVudC5cbiAgICAgIEluIHRoYXQgY2FzZSwgbW92ZSB0aGUgY3VzdG9tIHN0eWxlIHRvIHRoZSBtYWluIGRvY3VtZW50LlxuICAgICAgIFRoZSBvcmRlcmluZyBvZiBgPGN1c3RvbS1zdHlsZT5gIHNob3VsZCBzdGF5IHRoZSBzYW1lIGFzIHdoZW4gbG9hZGVkIGJ5IEhUTUwgSW1wb3J0cywgYnV0IHRoZXJlIG1heSBiZSBvZGRcbiAgICAgIGNhc2VzIG9mIG9yZGVyaW5nIHcuci50IHRoZSBtYWluIGRvY3VtZW50IHN0eWxlcy5cbiAgICAgICovXG4gICAgICBpZiAodGhpcy5vd25lckRvY3VtZW50ICE9PSB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc3R5bGU7XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY3VzdG9tLXN0eWxlJywgQ3VzdG9tU3R5bGUpO1xuICBQb2x5bWVyLkN1c3RvbVN0eWxlID0gQ3VzdG9tU3R5bGU7XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(68);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3NoYWR5Y3NzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuaHRtbD8zZTk2Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLm1pbi5qcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9zaGFkeWNzcy9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/***/ (function(module, exports) {

eval("(function () {\n  /*\n  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n  Code distributed by Google as part of the polymer project is also\n  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n  */\n  'use strict';\n  var c = !(window.ShadyDOM && window.ShadyDOM.inUse),\n      f;function g(a) {\n    f = a && a.shimcssproperties ? !1 : c || !(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) || !window.CSS || !CSS.supports || !CSS.supports(\"box-shadow\", \"0 0 0 var(--foo)\"));\n  }window.ShadyCSS && void 0 !== window.ShadyCSS.nativeCss ? f = window.ShadyCSS.nativeCss : window.ShadyCSS ? (g(window.ShadyCSS), window.ShadyCSS = void 0) : g(window.WebComponents && window.WebComponents.flags);var h = f;function k(a, b) {\n    for (var d in b) null === d ? a.style.removeProperty(d) : a.style.setProperty(d, b[d]);\n  };var l = null,\n      m = window.HTMLImports && window.HTMLImports.whenReady || null,\n      n;function p() {\n    var a = q;requestAnimationFrame(function () {\n      m ? m(a) : (l || (l = new Promise(function (a) {\n        n = a;\n      }), \"complete\" === document.readyState ? n() : document.addEventListener(\"readystatechange\", function () {\n        \"complete\" === document.readyState && n();\n      })), l.then(function () {\n        a && a();\n      }));\n    });\n  };var r = null,\n      q = null;function t() {\n    this.customStyles = [];this.enqueued = !1;\n  }function u(a) {\n    !a.enqueued && q && (a.enqueued = !0, p());\n  }t.prototype.c = function (a) {\n    a.__seenByShadyCSS || (a.__seenByShadyCSS = !0, this.customStyles.push(a), u(this));\n  };t.prototype.b = function (a) {\n    if (a.__shadyCSSCachedStyle) return a.__shadyCSSCachedStyle;var b;a.getStyle ? b = a.getStyle() : b = a;return b;\n  };\n  t.prototype.a = function () {\n    for (var a = this.customStyles, b = 0; b < a.length; b++) {\n      var d = a[b];if (!d.__shadyCSSCachedStyle) {\n        var e = this.b(d);e && (e = e.__appliedElement || e, r && r(e), d.__shadyCSSCachedStyle = e);\n      }\n    }return a;\n  };t.prototype.addCustomStyle = t.prototype.c;t.prototype.getStyleForCustomStyle = t.prototype.b;t.prototype.processStyles = t.prototype.a;\n  Object.defineProperties(t.prototype, { transformCallback: { get: function () {\n        return r;\n      }, set: function (a) {\n        r = a;\n      } }, validateCallback: { get: function () {\n        return q;\n      }, set: function (a) {\n        var b = !1;q || (b = !0);q = a;b && u(this);\n      } } });var v = new t();window.ShadyCSS || (window.ShadyCSS = { prepareTemplate: function () {}, styleSubtree: function (a, b) {\n      v.a();k(a, b);\n    }, styleElement: function () {\n      v.a();\n    }, styleDocument: function (a) {\n      v.a();k(document.body, a);\n    }, getComputedStyleValue: function (a, b) {\n      return (a = window.getComputedStyle(a).getPropertyValue(b)) ? a.trim() : \"\";\n    }, nativeCss: h, nativeShadow: c });window.ShadyCSS.CustomStyleInterface = v;\n}).call(this);\n\n//# sourceMappingURL=custom-style-interface.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3NoYWR5Y3NzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UubWluLmpzPzA1Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgLypcbiAgQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAgc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAgKi9cbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgYyA9ICEod2luZG93LlNoYWR5RE9NICYmIHdpbmRvdy5TaGFkeURPTS5pblVzZSksXG4gICAgICBmO2Z1bmN0aW9uIGcoYSkge1xuICAgIGYgPSBhICYmIGEuc2hpbWNzc3Byb3BlcnRpZXMgPyAhMSA6IGMgfHwgIShuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLzYwMXxFZGdlXFwvMTUvKSB8fCAhd2luZG93LkNTUyB8fCAhQ1NTLnN1cHBvcnRzIHx8ICFDU1Muc3VwcG9ydHMoXCJib3gtc2hhZG93XCIsIFwiMCAwIDAgdmFyKC0tZm9vKVwiKSk7XG4gIH13aW5kb3cuU2hhZHlDU1MgJiYgdm9pZCAwICE9PSB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzID8gZiA9IHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3MgOiB3aW5kb3cuU2hhZHlDU1MgPyAoZyh3aW5kb3cuU2hhZHlDU1MpLCB3aW5kb3cuU2hhZHlDU1MgPSB2b2lkIDApIDogZyh3aW5kb3cuV2ViQ29tcG9uZW50cyAmJiB3aW5kb3cuV2ViQ29tcG9uZW50cy5mbGFncyk7dmFyIGggPSBmO2Z1bmN0aW9uIGsoYSwgYikge1xuICAgIGZvciAodmFyIGQgaW4gYikgbnVsbCA9PT0gZCA/IGEuc3R5bGUucmVtb3ZlUHJvcGVydHkoZCkgOiBhLnN0eWxlLnNldFByb3BlcnR5KGQsIGJbZF0pO1xuICB9O3ZhciBsID0gbnVsbCxcbiAgICAgIG0gPSB3aW5kb3cuSFRNTEltcG9ydHMgJiYgd2luZG93LkhUTUxJbXBvcnRzLndoZW5SZWFkeSB8fCBudWxsLFxuICAgICAgbjtmdW5jdGlvbiBwKCkge1xuICAgIHZhciBhID0gcTtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgbSA/IG0oYSkgOiAobCB8fCAobCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIG4gPSBhO1xuICAgICAgfSksIFwiY29tcGxldGVcIiA9PT0gZG9jdW1lbnQucmVhZHlTdGF0ZSA/IG4oKSA6IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgXCJjb21wbGV0ZVwiID09PSBkb2N1bWVudC5yZWFkeVN0YXRlICYmIG4oKTtcbiAgICAgIH0pKSwgbC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYSAmJiBhKCk7XG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07dmFyIHIgPSBudWxsLFxuICAgICAgcSA9IG51bGw7ZnVuY3Rpb24gdCgpIHtcbiAgICB0aGlzLmN1c3RvbVN0eWxlcyA9IFtdO3RoaXMuZW5xdWV1ZWQgPSAhMTtcbiAgfWZ1bmN0aW9uIHUoYSkge1xuICAgICFhLmVucXVldWVkICYmIHEgJiYgKGEuZW5xdWV1ZWQgPSAhMCwgcCgpKTtcbiAgfXQucHJvdG90eXBlLmMgPSBmdW5jdGlvbiAoYSkge1xuICAgIGEuX19zZWVuQnlTaGFkeUNTUyB8fCAoYS5fX3NlZW5CeVNoYWR5Q1NTID0gITAsIHRoaXMuY3VzdG9tU3R5bGVzLnB1c2goYSksIHUodGhpcykpO1xuICB9O3QucHJvdG90eXBlLmIgPSBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChhLl9fc2hhZHlDU1NDYWNoZWRTdHlsZSkgcmV0dXJuIGEuX19zaGFkeUNTU0NhY2hlZFN0eWxlO3ZhciBiO2EuZ2V0U3R5bGUgPyBiID0gYS5nZXRTdHlsZSgpIDogYiA9IGE7cmV0dXJuIGI7XG4gIH07XG4gIHQucHJvdG90eXBlLmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgYSA9IHRoaXMuY3VzdG9tU3R5bGVzLCBiID0gMDsgYiA8IGEubGVuZ3RoOyBiKyspIHtcbiAgICAgIHZhciBkID0gYVtiXTtpZiAoIWQuX19zaGFkeUNTU0NhY2hlZFN0eWxlKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5iKGQpO2UgJiYgKGUgPSBlLl9fYXBwbGllZEVsZW1lbnQgfHwgZSwgciAmJiByKGUpLCBkLl9fc2hhZHlDU1NDYWNoZWRTdHlsZSA9IGUpO1xuICAgICAgfVxuICAgIH1yZXR1cm4gYTtcbiAgfTt0LnByb3RvdHlwZS5hZGRDdXN0b21TdHlsZSA9IHQucHJvdG90eXBlLmM7dC5wcm90b3R5cGUuZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSA9IHQucHJvdG90eXBlLmI7dC5wcm90b3R5cGUucHJvY2Vzc1N0eWxlcyA9IHQucHJvdG90eXBlLmE7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQucHJvdG90eXBlLCB7IHRyYW5zZm9ybUNhbGxiYWNrOiB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcjtcbiAgICAgIH0sIHNldDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgciA9IGE7XG4gICAgICB9IH0sIHZhbGlkYXRlQ2FsbGJhY2s6IHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgICAgfSwgc2V0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgYiA9ICExO3EgfHwgKGIgPSAhMCk7cSA9IGE7YiAmJiB1KHRoaXMpO1xuICAgICAgfSB9IH0pO3ZhciB2ID0gbmV3IHQoKTt3aW5kb3cuU2hhZHlDU1MgfHwgKHdpbmRvdy5TaGFkeUNTUyA9IHsgcHJlcGFyZVRlbXBsYXRlOiBmdW5jdGlvbiAoKSB7fSwgc3R5bGVTdWJ0cmVlOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdi5hKCk7ayhhLCBiKTtcbiAgICB9LCBzdHlsZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHYuYSgpO1xuICAgIH0sIHN0eWxlRG9jdW1lbnQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgICB2LmEoKTtrKGRvY3VtZW50LmJvZHksIGEpO1xuICAgIH0sIGdldENvbXB1dGVkU3R5bGVWYWx1ZTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoYikpID8gYS50cmltKCkgOiBcIlwiO1xuICAgIH0sIG5hdGl2ZUNzczogaCwgbmF0aXZlU2hhZG93OiBjIH0pO3dpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSA9IHY7XG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tc3R5bGUtaW50ZXJmYWNlLm1pbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvc2hhZHljc3MvY3VzdG9tLXN0eWxlLWludGVyZmFjZS5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(12);\n\n(function () {\n  'use strict';\n\n  let mutablePropertyChange;\n  /** @suppress {missingProperties} */\n  (() => {\n    mutablePropertyChange = Polymer.MutableData._mutablePropertyChange;\n  })();\n\n  /**\n   * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n   * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will cause Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * In order to make the dirty check strategy configurable, see\n   * `Polymer.OptionalMutableDataBehavior`.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse as opposed to using strict dirty checking with immutable\n   * patterns or Polymer's path notification API.\n   *\n   * @polymerBehavior\n   * @memberof Polymer\n   * @summary Behavior to skip strict dirty-checking for objects and\n   *   arrays\n   */\n  Polymer.MutableDataBehavior = {\n\n    /**\n     * Overrides `Polymer.PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n  };\n\n  /**\n   * Legacy element behavior to add the optional ability to skip strict\n   * dirty-checking for objects and arrays (always consider them to be\n   * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n   *\n   * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n   * objects, which means that any deep modifications to an object or array will\n   * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n   * references from the root to the mutation were changed).\n   *\n   * Polymer also provides a proprietary data mutation and path notification API\n   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n   * mutation and notification of deep changes in an object graph to all elements\n   * bound to the same object graph.\n   *\n   * In cases where neither immutable patterns nor the data mutation API can be\n   * used, applying this mixin will allow Polymer to skip dirty checking for\n   * objects and arrays (always consider them to be \"dirty\").  This allows a\n   * user to make a deep modification to a bound object graph, and then either\n   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n   * elements that wish to be updated based on deep mutations must apply this\n   * mixin or otherwise skip strict dirty checking for objects/arrays.\n   *\n   * While this behavior adds the ability to forgo Object/Array dirty checking,\n   * the `mutableData` flag defaults to false and must be set on the instance.\n   *\n   * Note, the performance characteristics of propagating large object graphs\n   * will be worse by relying on `mutableData: true` as opposed to using\n   * strict dirty checking with immutable patterns or Polymer's path notification\n   * API.\n   *\n   * @polymerBehavior\n   * @memberof Polymer\n   * @summary Behavior to optionally skip strict dirty-checking for objects and\n   *   arrays\n   */\n  Polymer.OptionalMutableDataBehavior = {\n\n    properties: {\n      /**\n       * Instance-level flag for configuring the dirty-checking strategy\n       * for this element.  When true, Objects and Arrays will skip dirty\n       * checking, otherwise strict equality checking will be used.\n       */\n      mutableData: Boolean\n    },\n\n    /**\n     * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n     * for Objects and Arrays.\n     *\n     * Pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @this {this}\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69\n");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<link rel=stylesheet type=text/css href=\\\"https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic\\\" crossorigin=anonymous>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2ZvbnQtcm9ib3RvL3JvYm90by5odG1sP2Q0NjQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBSZWdpc3Rlckh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJ3BvbHltZXItd2VicGFjay1sb2FkZXIvcmVnaXN0ZXItaHRtbC10ZW1wbGF0ZScpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS50b0JvZHkoXCI8bGluayByZWw9c3R5bGVzaGVldCB0eXBlPXRleHQvY3NzIGhyZWY9XFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8rTW9ubzo0MDAsNzAwfFJvYm90bzo0MDAsMzAwLDMwMGl0YWxpYyw0MDBpdGFsaWMsNTAwLDUwMGl0YWxpYyw3MDAsNzAwaXRhbGljXFxcIiBjcm9zc29yaWdpbj1hbm9ueW1vdXM+XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9mb250LXJvYm90by9yb2JvdG8uaHRtbFxuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70\n");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(20);\n\n__webpack_require__(34);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-pages> <template> <style>:host{display:block}:host>::slotted(:not(slot):not(.iron-selected)){display:none!important}</style> <slot></slot> </template> </dom-module>\");\n\nPolymer({\n\n  is: 'iron-pages',\n\n  behaviors: [Polymer.IronResizableBehavior, Polymer.IronSelectableBehavior],\n\n  properties: {\n\n    // as the selected page is the only one visible, activateEvent\n    // is both non-sensical and problematic; e.g. in cases where a user\n    // handler attempts to change the page and the activateEvent\n    // handler immediately changes it back\n    activateEvent: {\n      type: String,\n      value: null\n    }\n\n  },\n\n  observers: ['_selectedPageChanged(selected)'],\n\n  _selectedPageChanged: function (selected, old) {\n    this.async(this.notifyResize);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tcGFnZXMvaXJvbi1wYWdlcy5odG1sP2I3MzgiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tc2VsZWN0b3IvaXJvbi1zZWxlY3RhYmxlLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pcm9uLXBhZ2VzPiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtkaXNwbGF5OmJsb2NrfTpob3N0Pjo6c2xvdHRlZCg6bm90KHNsb3QpOm5vdCguaXJvbi1zZWxlY3RlZCkpe2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9PC9zdHlsZT4gPHNsb3Q+PC9zbG90PiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG5Qb2x5bWVyKHtcblxuICBpczogJ2lyb24tcGFnZXMnLFxuXG4gIGJlaGF2aW9yczogW1BvbHltZXIuSXJvblJlc2l6YWJsZUJlaGF2aW9yLCBQb2x5bWVyLklyb25TZWxlY3RhYmxlQmVoYXZpb3JdLFxuXG4gIHByb3BlcnRpZXM6IHtcblxuICAgIC8vIGFzIHRoZSBzZWxlY3RlZCBwYWdlIGlzIHRoZSBvbmx5IG9uZSB2aXNpYmxlLCBhY3RpdmF0ZUV2ZW50XG4gICAgLy8gaXMgYm90aCBub24tc2Vuc2ljYWwgYW5kIHByb2JsZW1hdGljOyBlLmcuIGluIGNhc2VzIHdoZXJlIGEgdXNlclxuICAgIC8vIGhhbmRsZXIgYXR0ZW1wdHMgdG8gY2hhbmdlIHRoZSBwYWdlIGFuZCB0aGUgYWN0aXZhdGVFdmVudFxuICAgIC8vIGhhbmRsZXIgaW1tZWRpYXRlbHkgY2hhbmdlcyBpdCBiYWNrXG4gICAgYWN0aXZhdGVFdmVudDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsdWU6IG51bGxcbiAgICB9XG5cbiAgfSxcblxuICBvYnNlcnZlcnM6IFsnX3NlbGVjdGVkUGFnZUNoYW5nZWQoc2VsZWN0ZWQpJ10sXG5cbiAgX3NlbGVjdGVkUGFnZUNoYW5nZWQ6IGZ1bmN0aW9uIChzZWxlY3RlZCwgb2xkKSB7XG4gICAgdGhpcy5hc3luYyh0aGlzLm5vdGlmeVJlc2l6ZSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXBhZ2VzL2lyb24tcGFnZXMuaHRtbFxuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///71\n");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n * @param {!Function} selectCallback\n * @constructor\n * @suppress {missingProvide}\n */\nPolymer.IronSelection = function (selectCallback) {\n  this.selection = [];\n  this.selectCallback = selectCallback;\n};\n\nPolymer.IronSelection.prototype = {\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @method get\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get: function () {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  },\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @method clear\n   * @param {Array} excludes items to be excluded.\n   */\n  clear: function (excludes) {\n    this.selection.slice().forEach(function (item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  },\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @method isSelected\n   * @param {*} item The item whose selection state should be checked.\n   * @returns Returns true if `item` is selected.\n   */\n  isSelected: function (item) {\n    return this.selection.indexOf(item) >= 0;\n  },\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @method setItemSelected\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected: function (item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  },\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @method select\n   * @param {*} item The item to select.\n   */\n  select: function (item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  },\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @method toggle\n   * @param {*} item The item to toggle.\n   */\n  toggle: function (item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tc2VsZWN0b3IvaXJvbi1zZWxlY3Rpb24uaHRtbD9lNmJlIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuLyoqXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gc2VsZWN0Q2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvdmlkZX1cbiAqL1xuUG9seW1lci5Jcm9uU2VsZWN0aW9uID0gZnVuY3Rpb24gKHNlbGVjdENhbGxiYWNrKSB7XG4gIHRoaXMuc2VsZWN0aW9uID0gW107XG4gIHRoaXMuc2VsZWN0Q2FsbGJhY2sgPSBzZWxlY3RDYWxsYmFjaztcbn07XG5cblBvbHltZXIuSXJvblNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgc2VsZWN0ZWQgaXRlbShzKS5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRcbiAgICogQHJldHVybnMgUmV0dXJucyB0aGUgc2VsZWN0ZWQgaXRlbShzKS4gSWYgdGhlIG11bHRpIHByb3BlcnR5IGlzIHRydWUsXG4gICAqIGBnZXRgIHdpbGwgcmV0dXJuIGFuIGFycmF5LCBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm5cbiAgICogdGhlIHNlbGVjdGVkIGl0ZW0gb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIHNlbGVjdGlvbi5cbiAgICovXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm11bHRpID8gdGhpcy5zZWxlY3Rpb24uc2xpY2UoKSA6IHRoaXMuc2VsZWN0aW9uWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIHRoZSBzZWxlY3Rpb24gZXhjZXB0IHRoZSBvbmVzIGluZGljYXRlZC5cbiAgICpcbiAgICogQG1ldGhvZCBjbGVhclxuICAgKiBAcGFyYW0ge0FycmF5fSBleGNsdWRlcyBpdGVtcyB0byBiZSBleGNsdWRlZC5cbiAgICovXG4gIGNsZWFyOiBmdW5jdGlvbiAoZXhjbHVkZXMpIHtcbiAgICB0aGlzLnNlbGVjdGlvbi5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmICghZXhjbHVkZXMgfHwgZXhjbHVkZXMuaW5kZXhPZihpdGVtKSA8IDApIHtcbiAgICAgICAgdGhpcy5zZXRJdGVtU2VsZWN0ZWQoaXRlbSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgYSBnaXZlbiBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAbWV0aG9kIGlzU2VsZWN0ZWRcbiAgICogQHBhcmFtIHsqfSBpdGVtIFRoZSBpdGVtIHdob3NlIHNlbGVjdGlvbiBzdGF0ZSBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICogQHJldHVybnMgUmV0dXJucyB0cnVlIGlmIGBpdGVtYCBpcyBzZWxlY3RlZC5cbiAgICovXG4gIGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmluZGV4T2YoaXRlbSkgPj0gMDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgc2VsZWN0aW9uIHN0YXRlIGZvciBhIGdpdmVuIGl0ZW0gdG8gZWl0aGVyIHNlbGVjdGVkIG9yIGRlc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBtZXRob2Qgc2V0SXRlbVNlbGVjdGVkXG4gICAqIEBwYXJhbSB7Kn0gaXRlbSBUaGUgaXRlbSB0byBzZWxlY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTZWxlY3RlZCBUcnVlIGZvciBzZWxlY3RlZCwgZmFsc2UgZm9yIGRlc2VsZWN0ZWQuXG4gICAqL1xuICBzZXRJdGVtU2VsZWN0ZWQ6IGZ1bmN0aW9uIChpdGVtLCBpc1NlbGVjdGVkKSB7XG4gICAgaWYgKGl0ZW0gIT0gbnVsbCkge1xuICAgICAgaWYgKGlzU2VsZWN0ZWQgIT09IHRoaXMuaXNTZWxlY3RlZChpdGVtKSkge1xuICAgICAgICAvLyBwcm9jZWVkIHRvIHVwZGF0ZSBzZWxlY3Rpb24gb25seSBpZiByZXF1ZXN0ZWQgc3RhdGUgZGlmZmVycyBmcm9tIGN1cnJlbnRcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5wdXNoKGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5zZWxlY3Rpb24uaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdENhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RDYWxsYmFjayhpdGVtLCBpc1NlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgc2VsZWN0aW9uIHN0YXRlIGZvciBhIGdpdmVuIGl0ZW0uIElmIHRoZSBgbXVsdGlgIHByb3BlcnR5XG4gICAqIGlzIHRydWUsIHRoZW4gdGhlIHNlbGVjdGVkIHN0YXRlIG9mIGBpdGVtYCB3aWxsIGJlIHRvZ2dsZWQ7IG90aGVyd2lzZVxuICAgKiB0aGUgYGl0ZW1gIHdpbGwgYmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBtZXRob2Qgc2VsZWN0XG4gICAqIEBwYXJhbSB7Kn0gaXRlbSBUaGUgaXRlbSB0byBzZWxlY3QuXG4gICAqL1xuICBzZWxlY3Q6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgIHRoaXMudG9nZ2xlKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5nZXQoKSAhPT0gaXRlbSkge1xuICAgICAgdGhpcy5zZXRJdGVtU2VsZWN0ZWQodGhpcy5nZXQoKSwgZmFsc2UpO1xuICAgICAgdGhpcy5zZXRJdGVtU2VsZWN0ZWQoaXRlbSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBzZWxlY3Rpb24gc3RhdGUgZm9yIGBpdGVtYC5cbiAgICpcbiAgICogQG1ldGhvZCB0b2dnbGVcbiAgICogQHBhcmFtIHsqfSBpdGVtIFRoZSBpdGVtIHRvIHRvZ2dsZS5cbiAgICovXG4gIHRvZ2dsZTogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLnNldEl0ZW1TZWxlY3RlZChpdGVtLCAhdGhpcy5pc1NlbGVjdGVkKGl0ZW0pKTtcbiAgfVxuXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXNlbGVjdG9yL2lyb24tc2VsZWN0aW9uLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72\n");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(74);\n\n__webpack_require__(75);\n\n__webpack_require__(76);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=app-location> <template> <iron-query-params params-string={{__query}} params-object={{queryParams}}> </iron-query-params> <iron-location path={{__path}} query={{__query}} hash={{__hash}} url-space-regex={{urlSpaceRegex}}> </iron-location> </template> </dom-module>\");\n\n(function () {\n  'use strict';\n\n  Polymer({\n    is: 'app-location',\n\n    properties: {\n      /**\n       * A model representing the deserialized path through the route tree, as\n       * well as the current queryParams.\n       */\n      route: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * In many scenarios, it is convenient to treat the `hash` as a stand-in\n       * alternative to the `path`. For example, if deploying an app to a static\n       * web server (e.g., Github Pages) - where one does not have control over\n       * server-side routing - it is usually a better experience to use the hash\n       * to represent paths through one's app.\n       *\n       * When this property is set to true, the `hash` will be used in place of\n        * the `path` for generating a `route`.\n       */\n      useHashAsPath: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * A regexp that defines the set of URLs that should be considered part\n       * of this web app.\n       *\n       * Clicking on a link that matches this regex won't result in a full page\n       * navigation, but will instead just update the URL state in place.\n       *\n       * This regexp is given everything after the origin in an absolute\n       * URL. So to match just URLs that start with /search/ do:\n       *     url-space-regex=\"^/search/\"\n       *\n       * @type {string|RegExp}\n       */\n      urlSpaceRegex: {\n        type: String,\n        notify: true\n      },\n\n      /**\n       * A set of key/value pairs that are universally accessible to branches\n       * of the route tree.\n       */\n      __queryParams: {\n        type: Object\n      },\n\n      /**\n       * The pathname component of the current URL.\n       */\n      __path: {\n        type: String\n      },\n\n      /**\n       * The query string portion of the current URL.\n       */\n      __query: {\n        type: String\n      },\n\n      /**\n       * The hash portion of the current URL.\n       */\n      __hash: {\n        type: String\n      },\n\n      /**\n       * The route path, which will be either the hash or the path, depending\n       * on useHashAsPath.\n       */\n      path: {\n        type: String,\n        observer: '__onPathChanged'\n      },\n\n      /**\n       * Whether or not the ready function has been called.\n       */\n      _isReady: {\n        type: Boolean\n      }\n    },\n\n    behaviors: [Polymer.AppRouteConverterBehavior],\n\n    observers: ['__computeRoutePath(useHashAsPath, __hash, __path)'],\n\n    ready: function () {\n      this._isReady = true;\n    },\n\n    __computeRoutePath: function () {\n      this.path = this.useHashAsPath ? this.__hash : this.__path;\n    },\n\n    __onPathChanged: function () {\n      if (!this._isReady) {\n        return;\n      }\n\n      if (this.useHashAsPath) {\n        this.__hash = this.path;\n      } else {\n        this.__path = this.path;\n      }\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1yb3V0ZS9hcHAtbG9jYXRpb24uaHRtbD83ZDFiIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1sb2NhdGlvbi9pcm9uLWxvY2F0aW9uLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1sb2NhdGlvbi9pcm9uLXF1ZXJ5LXBhcmFtcy5odG1sJyk7XG5cbnJlcXVpcmUoJy4vYXBwLXJvdXRlLWNvbnZlcnRlci1iZWhhdmlvci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9YXBwLWxvY2F0aW9uPiA8dGVtcGxhdGU+IDxpcm9uLXF1ZXJ5LXBhcmFtcyBwYXJhbXMtc3RyaW5nPXt7X19xdWVyeX19IHBhcmFtcy1vYmplY3Q9e3txdWVyeVBhcmFtc319PiA8L2lyb24tcXVlcnktcGFyYW1zPiA8aXJvbi1sb2NhdGlvbiBwYXRoPXt7X19wYXRofX0gcXVlcnk9e3tfX3F1ZXJ5fX0gaGFzaD17e19faGFzaH19IHVybC1zcGFjZS1yZWdleD17e3VybFNwYWNlUmVnZXh9fT4gPC9pcm9uLWxvY2F0aW9uPiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgUG9seW1lcih7XG4gICAgaXM6ICdhcHAtbG9jYXRpb24nLFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgLyoqXG4gICAgICAgKiBBIG1vZGVsIHJlcHJlc2VudGluZyB0aGUgZGVzZXJpYWxpemVkIHBhdGggdGhyb3VnaCB0aGUgcm91dGUgdHJlZSwgYXNcbiAgICAgICAqIHdlbGwgYXMgdGhlIGN1cnJlbnQgcXVlcnlQYXJhbXMuXG4gICAgICAgKi9cbiAgICAgIHJvdXRlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEluIG1hbnkgc2NlbmFyaW9zLCBpdCBpcyBjb252ZW5pZW50IHRvIHRyZWF0IHRoZSBgaGFzaGAgYXMgYSBzdGFuZC1pblxuICAgICAgICogYWx0ZXJuYXRpdmUgdG8gdGhlIGBwYXRoYC4gRm9yIGV4YW1wbGUsIGlmIGRlcGxveWluZyBhbiBhcHAgdG8gYSBzdGF0aWNcbiAgICAgICAqIHdlYiBzZXJ2ZXIgKGUuZy4sIEdpdGh1YiBQYWdlcykgLSB3aGVyZSBvbmUgZG9lcyBub3QgaGF2ZSBjb250cm9sIG92ZXJcbiAgICAgICAqIHNlcnZlci1zaWRlIHJvdXRpbmcgLSBpdCBpcyB1c3VhbGx5IGEgYmV0dGVyIGV4cGVyaWVuY2UgdG8gdXNlIHRoZSBoYXNoXG4gICAgICAgKiB0byByZXByZXNlbnQgcGF0aHMgdGhyb3VnaCBvbmUncyBhcHAuXG4gICAgICAgKlxuICAgICAgICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0cnVlLCB0aGUgYGhhc2hgIHdpbGwgYmUgdXNlZCBpbiBwbGFjZSBvZlxuICAgICAgICAqIHRoZSBgcGF0aGAgZm9yIGdlbmVyYXRpbmcgYSBgcm91dGVgLlxuICAgICAgICovXG4gICAgICB1c2VIYXNoQXNQYXRoOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBIHJlZ2V4cCB0aGF0IGRlZmluZXMgdGhlIHNldCBvZiBVUkxzIHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgcGFydFxuICAgICAgICogb2YgdGhpcyB3ZWIgYXBwLlxuICAgICAgICpcbiAgICAgICAqIENsaWNraW5nIG9uIGEgbGluayB0aGF0IG1hdGNoZXMgdGhpcyByZWdleCB3b24ndCByZXN1bHQgaW4gYSBmdWxsIHBhZ2VcbiAgICAgICAqIG5hdmlnYXRpb24sIGJ1dCB3aWxsIGluc3RlYWQganVzdCB1cGRhdGUgdGhlIFVSTCBzdGF0ZSBpbiBwbGFjZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIHJlZ2V4cCBpcyBnaXZlbiBldmVyeXRoaW5nIGFmdGVyIHRoZSBvcmlnaW4gaW4gYW4gYWJzb2x1dGVcbiAgICAgICAqIFVSTC4gU28gdG8gbWF0Y2gganVzdCBVUkxzIHRoYXQgc3RhcnQgd2l0aCAvc2VhcmNoLyBkbzpcbiAgICAgICAqICAgICB1cmwtc3BhY2UtcmVnZXg9XCJeL3NlYXJjaC9cIlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd8UmVnRXhwfVxuICAgICAgICovXG4gICAgICB1cmxTcGFjZVJlZ2V4OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgc2V0IG9mIGtleS92YWx1ZSBwYWlycyB0aGF0IGFyZSB1bml2ZXJzYWxseSBhY2Nlc3NpYmxlIHRvIGJyYW5jaGVzXG4gICAgICAgKiBvZiB0aGUgcm91dGUgdHJlZS5cbiAgICAgICAqL1xuICAgICAgX19xdWVyeVBhcmFtczoge1xuICAgICAgICB0eXBlOiBPYmplY3RcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHBhdGhuYW1lIGNvbXBvbmVudCBvZiB0aGUgY3VycmVudCBVUkwuXG4gICAgICAgKi9cbiAgICAgIF9fcGF0aDoge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHF1ZXJ5IHN0cmluZyBwb3J0aW9uIG9mIHRoZSBjdXJyZW50IFVSTC5cbiAgICAgICAqL1xuICAgICAgX19xdWVyeToge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGhhc2ggcG9ydGlvbiBvZiB0aGUgY3VycmVudCBVUkwuXG4gICAgICAgKi9cbiAgICAgIF9faGFzaDoge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJvdXRlIHBhdGgsIHdoaWNoIHdpbGwgYmUgZWl0aGVyIHRoZSBoYXNoIG9yIHRoZSBwYXRoLCBkZXBlbmRpbmdcbiAgICAgICAqIG9uIHVzZUhhc2hBc1BhdGguXG4gICAgICAgKi9cbiAgICAgIHBhdGg6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBvYnNlcnZlcjogJ19fb25QYXRoQ2hhbmdlZCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciBvciBub3QgdGhlIHJlYWR5IGZ1bmN0aW9uIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgICAqL1xuICAgICAgX2lzUmVhZHk6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhblxuICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWhhdmlvcnM6IFtQb2x5bWVyLkFwcFJvdXRlQ29udmVydGVyQmVoYXZpb3JdLFxuXG4gICAgb2JzZXJ2ZXJzOiBbJ19fY29tcHV0ZVJvdXRlUGF0aCh1c2VIYXNoQXNQYXRoLCBfX2hhc2gsIF9fcGF0aCknXSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9pc1JlYWR5ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgX19jb21wdXRlUm91dGVQYXRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBhdGggPSB0aGlzLnVzZUhhc2hBc1BhdGggPyB0aGlzLl9faGFzaCA6IHRoaXMuX19wYXRoO1xuICAgIH0sXG5cbiAgICBfX29uUGF0aENoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5faXNSZWFkeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnVzZUhhc2hBc1BhdGgpIHtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB0aGlzLnBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvYXBwLXJvdXRlL2FwcC1sb2NhdGlvbi5odG1sXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  var workingURL;\n\n  var urlDoc, urlBase, anchor;\n\n  /**\n   * @param {string} path\n   * @param {string=} base\n   * @return {!URL|!HTMLAnchorElement}\n   */\n  function resolveURL(path, base) {\n    if (workingURL === undefined) {\n      workingURL = false;\n      try {\n        var u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        workingURL = u.href === 'http://a/c%20d';\n        workingURL = workingURL && new URL('http://www.google.com/?foo bar').href === 'http://www.google.com/?foo%20bar';\n      } catch (e) {}\n    }\n    if (workingURL) {\n      return new URL(path, base);\n    }\n    if (!urlDoc) {\n      urlDoc = document.implementation.createHTMLDocument('url');\n      urlBase = urlDoc.createElement('base');\n      urlDoc.head.appendChild(urlBase);\n      anchor = /** @type {HTMLAnchorElement}*/urlDoc.createElement('a');\n    }\n    urlBase.href = base;\n    anchor.href = path.replace(/ /g, '%20');\n    return anchor;\n  }\n\n  Polymer({\n    is: 'iron-location',\n\n    properties: {\n      /**\n       * The pathname component of the URL.\n       */\n      path: {\n        type: String,\n        notify: true,\n        value: function () {\n          return window.decodeURIComponent(window.location.pathname);\n        }\n      },\n\n      /**\n       * The query string portion of the URL.\n       */\n      query: {\n        type: String,\n        notify: true,\n        value: function () {\n          return window.location.search.slice(1);\n        }\n      },\n\n      /**\n       * The hash component of the URL.\n       */\n      hash: {\n        type: String,\n        notify: true,\n        value: function () {\n          return window.decodeURIComponent(window.location.hash.slice(1));\n        }\n      },\n\n      /**\n       * If the user was on a URL for less than `dwellTime` milliseconds, it\n       * won't be added to the browser's history, but instead will be replaced\n       * by the next entry.\n       *\n       * This is to prevent large numbers of entries from clogging up the user's\n       * browser history. Disable by setting to a negative number.\n       */\n      dwellTime: {\n        type: Number,\n        value: 2000\n      },\n\n      /**\n       * A regexp that defines the set of URLs that should be considered part\n       * of this web app.\n       *\n       * Clicking on a link that matches this regex won't result in a full page\n       * navigation, but will instead just update the URL state in place.\n       *\n       * This regexp is given everything after the origin in an absolute\n       * URL. So to match just URLs that start with /search/ do:\n       *     url-space-regex=\"^/search/\"\n       *\n       * @type {string|RegExp}\n       */\n      urlSpaceRegex: {\n        type: String,\n        value: ''\n      },\n\n      /**\n       * urlSpaceRegex, but coerced into a regexp.\n       *\n       * @type {RegExp}\n       */\n      _urlSpaceRegExp: {\n        computed: '_makeRegExp(urlSpaceRegex)'\n      },\n\n      _lastChangedAt: {\n        type: Number\n      },\n\n      _initialized: {\n        type: Boolean,\n        value: false\n      }\n    },\n\n    hostAttributes: {\n      hidden: true\n    },\n\n    observers: ['_updateUrl(path, query, hash)'],\n\n    created: function () {\n      this.__location = window.location;\n    },\n\n    attached: function () {\n      this.listen(window, 'hashchange', '_hashChanged');\n      this.listen(window, 'location-changed', '_urlChanged');\n      this.listen(window, 'popstate', '_urlChanged');\n      this.listen( /** @type {!HTMLBodyElement} */document.body, 'click', '_globalOnClick');\n      // Give a 200ms grace period to make initial redirects without any\n      // additions to the user's history.\n      this._lastChangedAt = window.performance.now() - (this.dwellTime - 200);\n      this._initialized = true;\n\n      this._urlChanged();\n    },\n\n    detached: function () {\n      this.unlisten(window, 'hashchange', '_hashChanged');\n      this.unlisten(window, 'location-changed', '_urlChanged');\n      this.unlisten(window, 'popstate', '_urlChanged');\n      this.unlisten( /** @type {!HTMLBodyElement} */document.body, 'click', '_globalOnClick');\n      this._initialized = false;\n    },\n\n    _hashChanged: function () {\n      this.hash = window.decodeURIComponent(this.__location.hash.substring(1));\n    },\n\n    _urlChanged: function () {\n      // We want to extract all info out of the updated URL before we\n      // try to write anything back into it.\n      //\n      // i.e. without _dontUpdateUrl we'd overwrite the new path with the old\n      // one when we set this.hash. Likewise for query.\n      this._dontUpdateUrl = true;\n      this._hashChanged();\n      this.path = window.decodeURIComponent(this.__location.pathname);\n      this.query = this.__location.search.substring(1);\n      this._dontUpdateUrl = false;\n      this._updateUrl();\n    },\n\n    _getUrl: function () {\n      var partiallyEncodedPath = window.encodeURI(this.path).replace(/\\#/g, '%23').replace(/\\?/g, '%3F');\n      var partiallyEncodedQuery = '';\n      if (this.query) {\n        partiallyEncodedQuery = '?' + this.query.replace(/\\#/g, '%23');\n      }\n      var partiallyEncodedHash = '';\n      if (this.hash) {\n        partiallyEncodedHash = '#' + window.encodeURI(this.hash);\n      }\n      return partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash;\n    },\n\n    _updateUrl: function () {\n      if (this._dontUpdateUrl || !this._initialized) {\n        return;\n      }\n\n      if (this.path === window.decodeURIComponent(this.__location.pathname) && this.query === this.__location.search.substring(1) && this.hash === window.decodeURIComponent(this.__location.hash.substring(1))) {\n        // Nothing to do, the current URL is a representation of our properties.\n        return;\n      }\n\n      var newUrl = this._getUrl();\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNewUrl = resolveURL(newUrl, this.__location.protocol + '//' + this.__location.host).href;\n      var now = window.performance.now();\n      var shouldReplace = this._lastChangedAt + this.dwellTime > now;\n      this._lastChangedAt = now;\n\n      if (shouldReplace) {\n        window.history.replaceState({}, '', fullNewUrl);\n      } else {\n        window.history.pushState({}, '', fullNewUrl);\n      }\n\n      this.fire('location-changed', {}, { node: window });\n    },\n\n    /**\n     * A necessary evil so that links work as expected. Does its best to\n     * bail out early if possible.\n     *\n     * @param {MouseEvent} event .\n     */\n    _globalOnClick: function (event) {\n      // If another event handler has stopped this event then there's nothing\n      // for us to do. This can happen e.g. when there are multiple\n      // iron-location elements in a page.\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      var href = this._getSameOriginLinkHref(event);\n\n      if (!href) {\n        return;\n      }\n\n      event.preventDefault();\n\n      // If the navigation is to the current page we shouldn't add a history\n      // entry or fire a change event.\n      if (href === this.__location.href) {\n        return;\n      }\n\n      window.history.pushState({}, '', href);\n      this.fire('location-changed', {}, { node: window });\n    },\n\n    /**\n     * Returns the absolute URL of the link (if any) that this click event\n     * is clicking on, if we can and should override the resulting full\n     * page navigation. Returns null otherwise.\n     *\n     * @param {MouseEvent} event .\n     * @return {string?} .\n     */\n    _getSameOriginLinkHref: function (event) {\n      // We only care about left-clicks.\n      if (event.button !== 0) {\n        return null;\n      }\n\n      // We don't want modified clicks, where the intent is to open the page\n      // in a new tab.\n      if (event.metaKey || event.ctrlKey) {\n        return null;\n      }\n\n      var eventPath = Polymer.dom(event).path;\n      var anchor = null;\n\n      for (var i = 0; i < eventPath.length; i++) {\n        var element = eventPath[i];\n\n        if (element.tagName === 'A' && element.href) {\n          anchor = element;\n          break;\n        }\n      }\n\n      // If there's no link there's nothing to do.\n      if (!anchor) {\n        return null;\n      }\n\n      // Target blank is a new tab, don't intercept.\n      if (anchor.target === '_blank') {\n        return null;\n      }\n\n      // If the link is for an existing parent frame, don't intercept.\n      if ((anchor.target === '_top' || anchor.target === '_parent') && window.top !== window) {\n        return null;\n      }\n\n      var href = anchor.href;\n\n      // It only makes sense for us to intercept same-origin navigations.\n      // pushState/replaceState don't work with cross-origin links.\n      var url;\n\n      if (document.baseURI != null) {\n        url = resolveURL(href, /** @type {string} */document.baseURI);\n      } else {\n        url = resolveURL(href);\n      }\n\n      var origin;\n\n      // IE Polyfill\n      if (this.__location.origin) {\n        origin = this.__location.origin;\n      } else {\n        origin = this.__location.protocol + '//' + this.__location.host;\n      }\n\n      var urlOrigin;\n\n      if (url.origin) {\n        urlOrigin = url.origin;\n      } else {\n        // IE always adds port number on HTTP and HTTPS on <a>.host but not on\n        // window.location.host\n        var urlHost = url.host;\n        var urlPort = url.port;\n        var urlProtocol = url.protocol;\n        var isExtraneousHTTPS = urlProtocol === 'https:' && urlPort === '443';\n        var isExtraneousHTTP = urlProtocol === 'http:' && urlPort === '80';\n\n        if (isExtraneousHTTPS || isExtraneousHTTP) {\n          urlHost = url.hostname;\n        }\n        urlOrigin = urlProtocol + '//' + urlHost;\n      }\n\n      if (urlOrigin !== origin) {\n        return null;\n      }\n\n      var normalizedHref = url.pathname + url.search + url.hash;\n\n      // pathname should start with '/', but may not if `new URL` is not supported\n      if (normalizedHref[0] !== '/') {\n        normalizedHref = '/' + normalizedHref;\n      }\n\n      // If we've been configured not to handle this url... don't handle it!\n      if (this._urlSpaceRegExp && !this._urlSpaceRegExp.test(normalizedHref)) {\n        return null;\n      }\n\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNormalizedHref = resolveURL(normalizedHref, this.__location.href).href;\n      return fullNormalizedHref;\n    },\n\n    _makeRegExp: function (urlSpaceRegex) {\n      return RegExp(urlSpaceRegex);\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n'use strict';\n\nPolymer({\n  is: 'iron-query-params',\n\n  properties: {\n    paramsString: {\n      type: String,\n      notify: true,\n      observer: 'paramsStringChanged'\n    },\n\n    paramsObject: {\n      type: Object,\n      notify: true,\n      value: function () {\n        return {};\n      }\n    },\n\n    _dontReact: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  hostAttributes: {\n    hidden: true\n  },\n\n  observers: ['paramsObjectChanged(paramsObject.*)'],\n\n  paramsStringChanged: function () {\n    this._dontReact = true;\n    this.paramsObject = this._decodeParams(this.paramsString);\n    this._dontReact = false;\n  },\n\n  paramsObjectChanged: function () {\n    if (this._dontReact) {\n      return;\n    }\n    this.paramsString = this._encodeParams(this.paramsObject).replace(/%3F/g, '?').replace(/%2F/g, '/').replace(/'/g, '%27');\n  },\n\n  _encodeParams: function (params) {\n    var encodedParams = [];\n\n    for (var key in params) {\n      var value = params[key];\n\n      if (value === '') {\n        encodedParams.push(encodeURIComponent(key));\n      } else if (value) {\n        encodedParams.push(encodeURIComponent(key) + '=' + encodeURIComponent(value.toString()));\n      }\n    }\n    return encodedParams.join('&');\n  },\n\n  _decodeParams: function (paramString) {\n    var params = {};\n    // Work around a bug in decodeURIComponent where + is not\n    // converted to spaces:\n    paramString = (paramString || '').replace(/\\+/g, '%20');\n    var paramList = paramString.split('&');\n    for (var i = 0; i < paramList.length; i++) {\n      var param = paramList[i].split('=');\n      if (param[0]) {\n        params[decodeURIComponent(param[0])] = decodeURIComponent(param[1] || '');\n      }\n    }\n    return params;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tbG9jYXRpb24vaXJvbi1xdWVyeS1wYXJhbXMuaHRtbD8xMTQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuJ3VzZSBzdHJpY3QnO1xuXG5Qb2x5bWVyKHtcbiAgaXM6ICdpcm9uLXF1ZXJ5LXBhcmFtcycsXG5cbiAgcHJvcGVydGllczoge1xuICAgIHBhcmFtc1N0cmluZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgb2JzZXJ2ZXI6ICdwYXJhbXNTdHJpbmdDaGFuZ2VkJ1xuICAgIH0sXG5cbiAgICBwYXJhbXNPYmplY3Q6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2RvbnRSZWFjdDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH1cbiAgfSxcblxuICBob3N0QXR0cmlidXRlczoge1xuICAgIGhpZGRlbjogdHJ1ZVxuICB9LFxuXG4gIG9ic2VydmVyczogWydwYXJhbXNPYmplY3RDaGFuZ2VkKHBhcmFtc09iamVjdC4qKSddLFxuXG4gIHBhcmFtc1N0cmluZ0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9kb250UmVhY3QgPSB0cnVlO1xuICAgIHRoaXMucGFyYW1zT2JqZWN0ID0gdGhpcy5fZGVjb2RlUGFyYW1zKHRoaXMucGFyYW1zU3RyaW5nKTtcbiAgICB0aGlzLl9kb250UmVhY3QgPSBmYWxzZTtcbiAgfSxcblxuICBwYXJhbXNPYmplY3RDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2RvbnRSZWFjdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnBhcmFtc1N0cmluZyA9IHRoaXMuX2VuY29kZVBhcmFtcyh0aGlzLnBhcmFtc09iamVjdCkucmVwbGFjZSgvJTNGL2csICc/JykucmVwbGFjZSgvJTJGL2csICcvJykucmVwbGFjZSgvJy9nLCAnJTI3Jyk7XG4gIH0sXG5cbiAgX2VuY29kZVBhcmFtczogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBlbmNvZGVkUGFyYW1zID0gW107XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJhbXNba2V5XTtcblxuICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICBlbmNvZGVkUGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICBlbmNvZGVkUGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUudG9TdHJpbmcoKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZFBhcmFtcy5qb2luKCcmJyk7XG4gIH0sXG5cbiAgX2RlY29kZVBhcmFtczogZnVuY3Rpb24gKHBhcmFtU3RyaW5nKSB7XG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgIC8vIFdvcmsgYXJvdW5kIGEgYnVnIGluIGRlY29kZVVSSUNvbXBvbmVudCB3aGVyZSArIGlzIG5vdFxuICAgIC8vIGNvbnZlcnRlZCB0byBzcGFjZXM6XG4gICAgcGFyYW1TdHJpbmcgPSAocGFyYW1TdHJpbmcgfHwgJycpLnJlcGxhY2UoL1xcKy9nLCAnJTIwJyk7XG4gICAgdmFyIHBhcmFtTGlzdCA9IHBhcmFtU3RyaW5nLnNwbGl0KCcmJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJhbSA9IHBhcmFtTGlzdFtpXS5zcGxpdCgnPScpO1xuICAgICAgaWYgKHBhcmFtWzBdKSB7XG4gICAgICAgIHBhcmFtc1tkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSB8fCAnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWxvY2F0aW9uL2lyb24tcXVlcnktcGFyYW1zLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75\n");

/***/ }),
/* 76 */
/***/ (function(module, exports) {

eval("\n\n(function () {\n  'use strict';\n\n  /**\n   * Provides bidirectional mapping between `path` and `queryParams` and a\n   * app-route compatible `route` object.\n   *\n   * For more information, see the docs for `app-route-converter`.\n   *\n   * @polymerBehavior\n   */\n\n  Polymer.AppRouteConverterBehavior = {\n    properties: {\n      /**\n       * A model representing the deserialized path through the route tree, as\n       * well as the current queryParams.\n       *\n       * A route object is the kernel of the routing system. It is intended to\n       * be fed into consuming elements such as `app-route`.\n       *\n       * @type {?Object}\n       */\n      route: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * A set of key/value pairs that are universally accessible to branches of\n       * the route tree.\n       *\n       * @type {?Object}\n       */\n      queryParams: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * The serialized path through the route tree. This corresponds to the\n       * `window.location.pathname` value, and will update to reflect changes\n       * to that value.\n       */\n      path: {\n        type: String,\n        notify: true\n      }\n    },\n\n    observers: ['_locationChanged(path, queryParams)', '_routeChanged(route.prefix, route.path)', '_routeQueryParamsChanged(route.__queryParams)'],\n\n    created: function () {\n      this.linkPaths('route.__queryParams', 'queryParams');\n      this.linkPaths('queryParams', 'route.__queryParams');\n    },\n\n    /**\n     * Handler called when the path or queryParams change.\n     */\n    _locationChanged: function () {\n      if (this.route && this.route.path === this.path && this.queryParams === this.route.__queryParams) {\n        return;\n      }\n      this.route = {\n        prefix: '',\n        path: this.path,\n        __queryParams: this.queryParams\n      };\n    },\n\n    /**\n     * Handler called when the route prefix and route path change.\n     */\n    _routeChanged: function () {\n      if (!this.route) {\n        return;\n      }\n\n      this.path = this.route.prefix + this.route.path;\n    },\n\n    /**\n     * Handler called when the route queryParams change.\n     *\n     * @param  {Object} queryParams A set of key/value pairs that are\n     * universally accessible to branches of the route tree.\n     */\n    _routeQueryParamsChanged: function (queryParams) {\n      if (!this.route) {\n        return;\n      }\n      this.queryParams = queryParams;\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1yb3V0ZS9hcHAtcm91dGUtY29udmVydGVyLWJlaGF2aW9yLmh0bWw/ZjU3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBiaWRpcmVjdGlvbmFsIG1hcHBpbmcgYmV0d2VlbiBgcGF0aGAgYW5kIGBxdWVyeVBhcmFtc2AgYW5kIGFcbiAgICogYXBwLXJvdXRlIGNvbXBhdGlibGUgYHJvdXRlYCBvYmplY3QuXG4gICAqXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIGRvY3MgZm9yIGBhcHAtcm91dGUtY29udmVydGVyYC5cbiAgICpcbiAgICogQHBvbHltZXJCZWhhdmlvclxuICAgKi9cblxuICBQb2x5bWVyLkFwcFJvdXRlQ29udmVydGVyQmVoYXZpb3IgPSB7XG4gICAgcHJvcGVydGllczoge1xuICAgICAgLyoqXG4gICAgICAgKiBBIG1vZGVsIHJlcHJlc2VudGluZyB0aGUgZGVzZXJpYWxpemVkIHBhdGggdGhyb3VnaCB0aGUgcm91dGUgdHJlZSwgYXNcbiAgICAgICAqIHdlbGwgYXMgdGhlIGN1cnJlbnQgcXVlcnlQYXJhbXMuXG4gICAgICAgKlxuICAgICAgICogQSByb3V0ZSBvYmplY3QgaXMgdGhlIGtlcm5lbCBvZiB0aGUgcm91dGluZyBzeXN0ZW0uIEl0IGlzIGludGVuZGVkIHRvXG4gICAgICAgKiBiZSBmZWQgaW50byBjb25zdW1pbmcgZWxlbWVudHMgc3VjaCBhcyBgYXBwLXJvdXRlYC5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7P09iamVjdH1cbiAgICAgICAqL1xuICAgICAgcm91dGU6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBub3RpZnk6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgYXJlIHVuaXZlcnNhbGx5IGFjY2Vzc2libGUgdG8gYnJhbmNoZXMgb2ZcbiAgICAgICAqIHRoZSByb3V0ZSB0cmVlLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHs/T2JqZWN0fVxuICAgICAgICovXG4gICAgICBxdWVyeVBhcmFtczoge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2VyaWFsaXplZCBwYXRoIHRocm91Z2ggdGhlIHJvdXRlIHRyZWUuIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlXG4gICAgICAgKiBgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lYCB2YWx1ZSwgYW5kIHdpbGwgdXBkYXRlIHRvIHJlZmxlY3QgY2hhbmdlc1xuICAgICAgICogdG8gdGhhdCB2YWx1ZS5cbiAgICAgICAqL1xuICAgICAgcGF0aDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvYnNlcnZlcnM6IFsnX2xvY2F0aW9uQ2hhbmdlZChwYXRoLCBxdWVyeVBhcmFtcyknLCAnX3JvdXRlQ2hhbmdlZChyb3V0ZS5wcmVmaXgsIHJvdXRlLnBhdGgpJywgJ19yb3V0ZVF1ZXJ5UGFyYW1zQ2hhbmdlZChyb3V0ZS5fX3F1ZXJ5UGFyYW1zKSddLFxuXG4gICAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5saW5rUGF0aHMoJ3JvdXRlLl9fcXVlcnlQYXJhbXMnLCAncXVlcnlQYXJhbXMnKTtcbiAgICAgIHRoaXMubGlua1BhdGhzKCdxdWVyeVBhcmFtcycsICdyb3V0ZS5fX3F1ZXJ5UGFyYW1zJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgY2FsbGVkIHdoZW4gdGhlIHBhdGggb3IgcXVlcnlQYXJhbXMgY2hhbmdlLlxuICAgICAqL1xuICAgIF9sb2NhdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnJvdXRlICYmIHRoaXMucm91dGUucGF0aCA9PT0gdGhpcy5wYXRoICYmIHRoaXMucXVlcnlQYXJhbXMgPT09IHRoaXMucm91dGUuX19xdWVyeVBhcmFtcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnJvdXRlID0ge1xuICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgIF9fcXVlcnlQYXJhbXM6IHRoaXMucXVlcnlQYXJhbXNcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgY2FsbGVkIHdoZW4gdGhlIHJvdXRlIHByZWZpeCBhbmQgcm91dGUgcGF0aCBjaGFuZ2UuXG4gICAgICovXG4gICAgX3JvdXRlQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLnJvdXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYXRoID0gdGhpcy5yb3V0ZS5wcmVmaXggKyB0aGlzLnJvdXRlLnBhdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgY2FsbGVkIHdoZW4gdGhlIHJvdXRlIHF1ZXJ5UGFyYW1zIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gcXVlcnlQYXJhbXMgQSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgYXJlXG4gICAgICogdW5pdmVyc2FsbHkgYWNjZXNzaWJsZSB0byBicmFuY2hlcyBvZiB0aGUgcm91dGUgdHJlZS5cbiAgICAgKi9cbiAgICBfcm91dGVRdWVyeVBhcmFtc0NoYW5nZWQ6IGZ1bmN0aW9uIChxdWVyeVBhcmFtcykge1xuICAgICAgaWYgKCF0aGlzLnJvdXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcztcbiAgICB9XG4gIH07XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9hcHAtcm91dGUvYXBwLXJvdXRlLWNvbnZlcnRlci1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///76\n");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  Polymer({\n    is: 'app-route',\n\n    properties: {\n      /**\n       * The URL component managed by this element.\n       */\n      route: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * The pattern of slash-separated segments to match `route.path` against.\n       *\n       * For example the pattern \"/foo\" will match \"/foo\" or \"/foo/bar\"\n       * but not \"/foobar\".\n       *\n       * Path segments like `/:named` are mapped to properties on the `data` object.\n       */\n      pattern: {\n        type: String\n      },\n\n      /**\n       * The parameterized values that are extracted from the route as\n       * described by `pattern`.\n       */\n      data: {\n        type: Object,\n        value: function () {\n          return {};\n        },\n        notify: true\n      },\n\n      /**\n       * @type {?Object}\n       */\n      queryParams: {\n        type: Object,\n        value: function () {\n          return {};\n        },\n        notify: true\n      },\n\n      /**\n       * The part of `route.path` NOT consumed by `pattern`.\n       */\n      tail: {\n        type: Object,\n        value: function () {\n          return { path: null, prefix: null, __queryParams: null };\n        },\n        notify: true\n      },\n\n      /**\n       * Whether the current route is active. True if `route.path` matches the\n       * `pattern`, false otherwise.\n       */\n      active: {\n        type: Boolean,\n        notify: true,\n        readOnly: true\n      },\n\n      _queryParamsUpdating: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {?string}\n       */\n      _matched: {\n        type: String,\n        value: ''\n      }\n    },\n\n    observers: ['__tryToMatch(route.path, pattern)', '__updatePathOnDataChange(data.*)', '__tailPathChanged(tail.path)', '__routeQueryParamsChanged(route.__queryParams)', '__tailQueryParamsChanged(tail.__queryParams)', '__queryParamsChanged(queryParams.*)'],\n\n    created: function () {\n      this.linkPaths('route.__queryParams', 'tail.__queryParams');\n      this.linkPaths('tail.__queryParams', 'route.__queryParams');\n    },\n\n    /**\n     * Deal with the query params object being assigned to wholesale.\n     */\n    __routeQueryParamsChanged: function (queryParams) {\n      if (queryParams && this.tail) {\n        if (this.tail.__queryParams !== queryParams) {\n          this.set('tail.__queryParams', queryParams);\n        }\n\n        if (!this.active || this._queryParamsUpdating) {\n          return;\n        }\n\n        // Copy queryParams and track whether there are any differences compared\n        // to the existing query params.\n        var copyOfQueryParams = {};\n        var anythingChanged = false;\n        for (var key in queryParams) {\n          copyOfQueryParams[key] = queryParams[key];\n          if (anythingChanged || !this.queryParams || queryParams[key] !== this.queryParams[key]) {\n            anythingChanged = true;\n          }\n        }\n        // Need to check whether any keys were deleted\n        for (var key in this.queryParams) {\n          if (anythingChanged || !(key in queryParams)) {\n            anythingChanged = true;\n            break;\n          }\n        }\n\n        if (!anythingChanged) {\n          return;\n        }\n        this._queryParamsUpdating = true;\n        this.set('queryParams', copyOfQueryParams);\n        this._queryParamsUpdating = false;\n      }\n    },\n\n    __tailQueryParamsChanged: function (queryParams) {\n      if (queryParams && this.route && this.route.__queryParams != queryParams) {\n        this.set('route.__queryParams', queryParams);\n      }\n    },\n\n    __queryParamsChanged: function (changes) {\n      if (!this.active || this._queryParamsUpdating) {\n        return;\n      }\n\n      this.set('route.__' + changes.path, changes.value);\n    },\n\n    __resetProperties: function () {\n      this._setActive(false);\n      this._matched = null;\n    },\n\n    __tryToMatch: function () {\n      if (!this.route) {\n        return;\n      }\n\n      var path = this.route.path;\n      var pattern = this.pattern;\n\n      if (!pattern) {\n        return;\n      }\n\n      if (!path) {\n        this.__resetProperties();\n        return;\n      }\n\n      var remainingPieces = path.split('/');\n      var patternPieces = pattern.split('/');\n\n      var matched = [];\n      var namedMatches = {};\n\n      for (var i = 0; i < patternPieces.length; i++) {\n        var patternPiece = patternPieces[i];\n        if (!patternPiece && patternPiece !== '') {\n          break;\n        }\n        var pathPiece = remainingPieces.shift();\n\n        // We don't match this path.\n        if (!pathPiece && pathPiece !== '') {\n          this.__resetProperties();\n          return;\n        }\n        matched.push(pathPiece);\n\n        if (patternPiece.charAt(0) == ':') {\n          namedMatches[patternPiece.slice(1)] = pathPiece;\n        } else if (patternPiece !== pathPiece) {\n          this.__resetProperties();\n          return;\n        }\n      }\n\n      this._matched = matched.join('/');\n\n      // Properties that must be updated atomically.\n      var propertyUpdates = {};\n\n      //this.active\n      if (!this.active) {\n        propertyUpdates.active = true;\n      }\n\n      // this.tail\n      var tailPrefix = this.route.prefix + this._matched;\n      var tailPath = remainingPieces.join('/');\n      if (remainingPieces.length > 0) {\n        tailPath = '/' + tailPath;\n      }\n      if (!this.tail || this.tail.prefix !== tailPrefix || this.tail.path !== tailPath) {\n        propertyUpdates.tail = {\n          prefix: tailPrefix,\n          path: tailPath,\n          __queryParams: this.route.__queryParams\n        };\n      }\n\n      // this.data\n      propertyUpdates.data = namedMatches;\n      this._dataInUrl = {};\n      for (var key in namedMatches) {\n        this._dataInUrl[key] = namedMatches[key];\n      }\n\n      if (this.setProperties) {\n        // atomic update\n        this.setProperties(propertyUpdates, true);\n      } else {\n        this.__setMulti(propertyUpdates);\n      }\n    },\n\n    __tailPathChanged: function (path) {\n      if (!this.active) {\n        return;\n      }\n      var tailPath = path;\n      var newPath = this._matched;\n      if (tailPath) {\n        if (tailPath.charAt(0) !== '/') {\n          tailPath = '/' + tailPath;\n        }\n        newPath += tailPath;\n      }\n      this.set('route.path', newPath);\n    },\n\n    __updatePathOnDataChange: function () {\n      if (!this.route || !this.active) {\n        return;\n      }\n      var newPath = this.__getLink({});\n      var oldPath = this.__getLink(this._dataInUrl);\n      if (newPath === oldPath) {\n        return;\n      }\n      this.set('route.path', newPath);\n    },\n\n    __getLink: function (overrideValues) {\n      var values = { tail: null };\n      for (var key in this.data) {\n        values[key] = this.data[key];\n      }\n      for (var key in overrideValues) {\n        values[key] = overrideValues[key];\n      }\n      var patternPieces = this.pattern.split('/');\n      var interp = patternPieces.map(function (value) {\n        if (value[0] == ':') {\n          value = values[value.slice(1)];\n        }\n        return value;\n      }, this);\n      if (values.tail && values.tail.path) {\n        if (interp.length > 0 && values.tail.path.charAt(0) === '/') {\n          interp.push(values.tail.path.slice(1));\n        } else {\n          interp.push(values.tail.path);\n        }\n      }\n      return interp.join('/');\n    },\n\n    __setMulti: function (setObj) {\n      // HACK(rictic): skirting around 1.0's lack of a setMulti by poking at\n      //     internal data structures. I would not advise that you copy this\n      //     example.\n      //\n      //     In the future this will be a feature of Polymer itself.\n      //     See: https://github.com/Polymer/polymer/issues/3640\n      //\n      //     Hacking around with private methods like this is juggling footguns,\n      //     and is likely to have unexpected and unsupported rough edges.\n      //\n      //     Be ye so warned.\n      for (var property in setObj) {\n        this._propertySetter(property, setObj[property]);\n      }\n      //notify in a specific order\n      if (setObj.data !== undefined) {\n        this._pathEffector('data', this.data);\n        this._notifyChange('data');\n      }\n      if (setObj.active !== undefined) {\n        this._pathEffector('active', this.active);\n        this._notifyChange('active');\n      }\n      if (setObj.tail !== undefined) {\n        this._pathEffector('tail', this.tail);\n        this._notifyChange('tail');\n      }\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77\n");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(6);\n\n__webpack_require__(13);\n\n__webpack_require__(79);\n\n__webpack_require__(20);\n\n__webpack_require__(22);\n\n__webpack_require__(8);\n\n__webpack_require__(83);\n\n__webpack_require__(36);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-tabs> <template> <style>:host{@apply --layout;@apply --layout-center;height:48px;font-size:14px;font-weight:500;overflow:hidden;-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:transparent;@apply --paper-tabs;}:host-context([dir=rtl]){@apply --layout-horizontal-reverse;}#tabsContainer{position:relative;height:100%;white-space:nowrap;overflow:hidden;@apply --layout-flex-auto;@apply --paper-tabs-container;}#tabsContent{height:100%;-moz-flex-basis:auto;-ms-flex-basis:auto;flex-basis:auto;@apply --paper-tabs-content;}#tabsContent.scrollable{position:absolute;white-space:nowrap}#tabsContent.scrollable.fit-container,#tabsContent:not(.scrollable){@apply --layout-horizontal;}#tabsContent.scrollable.fit-container{min-width:100%}#tabsContent.scrollable.fit-container>::slotted(*){-ms-flex:1 0 auto;-webkit-flex:1 0 auto;flex:1 0 auto}.hidden{display:none}.not-visible{opacity:0;cursor:default}paper-icon-button{width:48px;height:48px;padding:12px;margin:0 4px}#selectionBar{position:absolute;height:0;bottom:0;left:0;right:0;border-bottom:2px solid var(--paper-tabs-selection-bar-color,var(--paper-yellow-a100));-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:left center;transform-origin:left center;transition:-webkit-transform;transition:transform;@apply --paper-tabs-selection-bar;}#selectionBar.align-bottom{top:0;bottom:auto}#selectionBar.expand{transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,1,1)}#selectionBar.contract{transition-duration:.18s;transition-timing-function:cubic-bezier(0,0,.2,1)}#tabsContent>::slotted(:not(#selectionBar)){height:100%}</style> <paper-icon-button icon=paper-tabs:chevron-left class$=\\\"[[_computeScrollButtonClass(_leftHidden, scrollable, hideScrollButtons)]]\\\" on-up=_onScrollButtonUp on-down=_onLeftScrollButtonDown tabindex=-1></paper-icon-button> <div id=tabsContainer on-track=_scroll on-down=_down> <div id=tabsContent class$=\\\"[[_computeTabsContentClass(scrollable, fitContainer)]]\\\"> <div id=selectionBar class$=\\\"[[_computeSelectionBarClass(noBar, alignBottom)]]\\\" on-transitionend=_onBarTransitionEnd></div> <slot></slot> </div> </div> <paper-icon-button icon=paper-tabs:chevron-right class$=\\\"[[_computeScrollButtonClass(_rightHidden, scrollable, hideScrollButtons)]]\\\" on-up=_onScrollButtonUp on-down=_onRightScrollButtonDown tabindex=-1></paper-icon-button> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-tabs',\n\n  behaviors: [Polymer.IronResizableBehavior, Polymer.IronMenubarBehavior],\n\n  properties: {\n    /**\n     * If true, ink ripple effect is disabled. When this property is changed,\n     * all descendant `<paper-tab>` elements have their `noink` property\n     * changed to the new value as well.\n     */\n    noink: {\n      type: Boolean,\n      value: false,\n      observer: '_noinkChanged'\n    },\n\n    /**\n     * If true, the bottom bar to indicate the selected tab will not be shown.\n     */\n    noBar: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, the slide effect for the bottom bar is disabled.\n     */\n    noSlide: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, tabs are scrollable and the tab width is based on the label width.\n     */\n    scrollable: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, tabs expand to fit their container. This currently only applies when\n     * scrollable is true.\n     */\n    fitContainer: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, dragging on the tabs to scroll is disabled.\n     */\n    disableDrag: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.\n     */\n    hideScrollButtons: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, the tabs are aligned to bottom (the selection bar appears at the top).\n     */\n    alignBottom: {\n      type: Boolean,\n      value: false\n    },\n\n    selectable: {\n      type: String,\n      value: 'paper-tab'\n    },\n\n    /**\n     * If true, tabs are automatically selected when focused using the\n     * keyboard.\n     */\n    autoselect: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The delay (in milliseconds) between when the user stops interacting\n     * with the tabs through the keyboard and when the focused item is\n     * automatically selected (if `autoselect` is true).\n     */\n    autoselectDelay: {\n      type: Number,\n      value: 0\n    },\n\n    _step: {\n      type: Number,\n      value: 10\n    },\n\n    _holdDelay: {\n      type: Number,\n      value: 1\n    },\n\n    _leftHidden: {\n      type: Boolean,\n      value: false\n    },\n\n    _rightHidden: {\n      type: Boolean,\n      value: false\n    },\n\n    _previousTab: {\n      type: Object\n    }\n  },\n\n  hostAttributes: {\n    role: 'tablist'\n  },\n\n  listeners: {\n    'iron-resize': '_onTabSizingChanged',\n    'iron-items-changed': '_onTabSizingChanged',\n    'iron-select': '_onIronSelect',\n    'iron-deselect': '_onIronDeselect'\n  },\n\n  keyBindings: {\n    'left:keyup right:keyup': '_onArrowKeyup'\n  },\n\n  created: function () {\n    this._holdJob = null;\n    this._pendingActivationItem = undefined;\n    this._pendingActivationTimeout = undefined;\n    this._bindDelayedActivationHandler = this._delayedActivationHandler.bind(this);\n    this.addEventListener('blur', this._onBlurCapture.bind(this), true);\n  },\n\n  ready: function () {\n    this.setScrollDirection('y', this.$.tabsContainer);\n  },\n\n  detached: function () {\n    this._cancelPendingActivation();\n  },\n\n  _noinkChanged: function (noink) {\n    var childTabs = Polymer.dom(this).querySelectorAll('paper-tab');\n    childTabs.forEach(noink ? this._setNoinkAttribute : this._removeNoinkAttribute);\n  },\n\n  _setNoinkAttribute: function (element) {\n    element.setAttribute('noink', '');\n  },\n\n  _removeNoinkAttribute: function (element) {\n    element.removeAttribute('noink');\n  },\n\n  _computeScrollButtonClass: function (hideThisButton, scrollable, hideScrollButtons) {\n    if (!scrollable || hideScrollButtons) {\n      return 'hidden';\n    }\n\n    if (hideThisButton) {\n      return 'not-visible';\n    }\n\n    return '';\n  },\n\n  _computeTabsContentClass: function (scrollable, fitContainer) {\n    return scrollable ? 'scrollable' + (fitContainer ? ' fit-container' : '') : ' fit-container';\n  },\n\n  _computeSelectionBarClass: function (noBar, alignBottom) {\n    if (noBar) {\n      return 'hidden';\n    } else if (alignBottom) {\n      return 'align-bottom';\n    }\n\n    return '';\n  },\n\n  // TODO(cdata): Add `track` response back in when gesture lands.\n\n  _onTabSizingChanged: function () {\n    this.debounce('_onTabSizingChanged', function () {\n      this._scroll();\n      this._tabChanged(this.selectedItem);\n    }, 10);\n  },\n\n  _onIronSelect: function (event) {\n    this._tabChanged(event.detail.item, this._previousTab);\n    this._previousTab = event.detail.item;\n    this.cancelDebouncer('tab-changed');\n  },\n\n  _onIronDeselect: function (event) {\n    this.debounce('tab-changed', function () {\n      this._tabChanged(null, this._previousTab);\n      this._previousTab = null;\n      // See polymer/polymer#1305\n    }, 1);\n  },\n\n  _activateHandler: function () {\n    // Cancel item activations scheduled by keyboard events when any other\n    // action causes an item to be activated (e.g. clicks).\n    this._cancelPendingActivation();\n\n    Polymer.IronMenuBehaviorImpl._activateHandler.apply(this, arguments);\n  },\n\n  /**\n   * Activates an item after a delay (in milliseconds).\n   */\n  _scheduleActivation: function (item, delay) {\n    this._pendingActivationItem = item;\n    this._pendingActivationTimeout = this.async(this._bindDelayedActivationHandler, delay);\n  },\n\n  /**\n   * Activates the last item given to `_scheduleActivation`.\n   */\n  _delayedActivationHandler: function () {\n    var item = this._pendingActivationItem;\n    this._pendingActivationItem = undefined;\n    this._pendingActivationTimeout = undefined;\n    item.fire(this.activateEvent, null, {\n      bubbles: true,\n      cancelable: true\n    });\n  },\n\n  /**\n   * Cancels a previously scheduled item activation made with\n   * `_scheduleActivation`.\n   */\n  _cancelPendingActivation: function () {\n    if (this._pendingActivationTimeout !== undefined) {\n      this.cancelAsync(this._pendingActivationTimeout);\n      this._pendingActivationItem = undefined;\n      this._pendingActivationTimeout = undefined;\n    }\n  },\n\n  _onArrowKeyup: function (event) {\n    if (this.autoselect) {\n      this._scheduleActivation(this.focusedItem, this.autoselectDelay);\n    }\n  },\n\n  _onBlurCapture: function (event) {\n    // Cancel a scheduled item activation (if any) when that item is\n    // blurred.\n    if (event.target === this._pendingActivationItem) {\n      this._cancelPendingActivation();\n    }\n  },\n\n  get _tabContainerScrollSize() {\n    return Math.max(0, this.$.tabsContainer.scrollWidth - this.$.tabsContainer.offsetWidth);\n  },\n\n  _scroll: function (e, detail) {\n    if (!this.scrollable) {\n      return;\n    }\n\n    var ddx = detail && -detail.ddx || 0;\n    this._affectScroll(ddx);\n  },\n\n  _down: function (e) {\n    // go one beat async to defeat IronMenuBehavior\n    // autorefocus-on-no-selection timeout\n    this.async(function () {\n      if (this._defaultFocusAsync) {\n        this.cancelAsync(this._defaultFocusAsync);\n        this._defaultFocusAsync = null;\n      }\n    }, 1);\n  },\n\n  _affectScroll: function (dx) {\n    this.$.tabsContainer.scrollLeft += dx;\n\n    var scrollLeft = this.$.tabsContainer.scrollLeft;\n\n    this._leftHidden = scrollLeft === 0;\n    this._rightHidden = scrollLeft === this._tabContainerScrollSize;\n  },\n\n  _onLeftScrollButtonDown: function () {\n    this._scrollToLeft();\n    this._holdJob = setInterval(this._scrollToLeft.bind(this), this._holdDelay);\n  },\n\n  _onRightScrollButtonDown: function () {\n    this._scrollToRight();\n    this._holdJob = setInterval(this._scrollToRight.bind(this), this._holdDelay);\n  },\n\n  _onScrollButtonUp: function () {\n    clearInterval(this._holdJob);\n    this._holdJob = null;\n  },\n\n  _scrollToLeft: function () {\n    this._affectScroll(-this._step);\n  },\n\n  _scrollToRight: function () {\n    this._affectScroll(this._step);\n  },\n\n  _tabChanged: function (tab, old) {\n    if (!tab) {\n      // Remove the bar without animation.\n      this.$.selectionBar.classList.remove('expand');\n      this.$.selectionBar.classList.remove('contract');\n      this._positionBar(0, 0);\n      return;\n    }\n\n    var r = this.$.tabsContent.getBoundingClientRect();\n    var w = r.width;\n    var tabRect = tab.getBoundingClientRect();\n    var tabOffsetLeft = tabRect.left - r.left;\n\n    this._pos = {\n      width: this._calcPercent(tabRect.width, w),\n      left: this._calcPercent(tabOffsetLeft, w)\n    };\n\n    if (this.noSlide || old == null) {\n      // Position the bar without animation.\n      this.$.selectionBar.classList.remove('expand');\n      this.$.selectionBar.classList.remove('contract');\n      this._positionBar(this._pos.width, this._pos.left);\n      return;\n    }\n\n    var oldRect = old.getBoundingClientRect();\n    var oldIndex = this.items.indexOf(old);\n    var index = this.items.indexOf(tab);\n    var m = 5;\n\n    // bar animation: expand\n    this.$.selectionBar.classList.add('expand');\n\n    var moveRight = oldIndex < index;\n    var isRTL = this._isRTL;\n    if (isRTL) {\n      moveRight = !moveRight;\n    }\n\n    if (moveRight) {\n      this._positionBar(this._calcPercent(tabRect.left + tabRect.width - oldRect.left, w) - m, this._left);\n    } else {\n      this._positionBar(this._calcPercent(oldRect.left + oldRect.width - tabRect.left, w) - m, this._calcPercent(tabOffsetLeft, w) + m);\n    }\n\n    if (this.scrollable) {\n      this._scrollToSelectedIfNeeded(tabRect.width, tabOffsetLeft);\n    }\n  },\n\n  _scrollToSelectedIfNeeded: function (tabWidth, tabOffsetLeft) {\n    var l = tabOffsetLeft - this.$.tabsContainer.scrollLeft;\n    if (l < 0) {\n      this.$.tabsContainer.scrollLeft += l;\n    } else {\n      l += tabWidth - this.$.tabsContainer.offsetWidth;\n      if (l > 0) {\n        this.$.tabsContainer.scrollLeft += l;\n      }\n    }\n  },\n\n  _calcPercent: function (w, w0) {\n    return 100 * w / w0;\n  },\n\n  _positionBar: function (width, left) {\n    width = width || 0;\n    left = left || 0;\n\n    this._width = width;\n    this._left = left;\n    this.transform('translateX(' + left + '%) scaleX(' + width / 100 + ')', this.$.selectionBar);\n  },\n\n  _onBarTransitionEnd: function (e) {\n    var cl = this.$.selectionBar.classList;\n    // bar animation: expand -> contract\n    if (cl.contains('expand')) {\n      cl.remove('expand');\n      cl.add('contract');\n      this._positionBar(this._pos.width, this._pos.left);\n      // bar animation done\n    } else if (cl.contains('contract')) {\n      cl.remove('contract');\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78\n");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(80);\n\n/**\n * `Polymer.IronMenubarBehavior` implements accessible menubar behavior.\n *\n * @polymerBehavior Polymer.IronMenubarBehavior\n */\nPolymer.IronMenubarBehaviorImpl = {\n\n  hostAttributes: {\n    'role': 'menubar'\n  },\n\n  keyBindings: {\n    'left': '_onLeftKey',\n    'right': '_onRightKey'\n  },\n\n  _onUpKey: function (event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onDownKey: function (event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  get _isRTL() {\n    return window.getComputedStyle(this)['direction'] === 'rtl';\n  },\n\n  _onLeftKey: function (event) {\n    if (this._isRTL) {\n      this._focusNext();\n    } else {\n      this._focusPrevious();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onRightKey: function (event) {\n    if (this._isRTL) {\n      this._focusPrevious();\n    } else {\n      this._focusNext();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onKeydown: function (event) {\n    if (this.keyboardEventMatchesKeys(event, 'up down left right esc')) {\n      return;\n    }\n\n    // all other keys focus the menu item starting with that character\n    this._focusWithKeyboardEvent(event);\n  }\n\n};\n\n/** @polymerBehavior Polymer.IronMenubarBehavior */\nPolymer.IronMenubarBehavior = [Polymer.IronMenuBehavior, Polymer.IronMenubarBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tbWVudS1iZWhhdmlvci9pcm9uLW1lbnViYXItYmVoYXZpb3IuaHRtbD9lZjBmIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi9pcm9uLW1lbnUtYmVoYXZpb3IuaHRtbCcpO1xuXG4vKipcbiAqIGBQb2x5bWVyLklyb25NZW51YmFyQmVoYXZpb3JgIGltcGxlbWVudHMgYWNjZXNzaWJsZSBtZW51YmFyIGJlaGF2aW9yLlxuICpcbiAqIEBwb2x5bWVyQmVoYXZpb3IgUG9seW1lci5Jcm9uTWVudWJhckJlaGF2aW9yXG4gKi9cblBvbHltZXIuSXJvbk1lbnViYXJCZWhhdmlvckltcGwgPSB7XG5cbiAgaG9zdEF0dHJpYnV0ZXM6IHtcbiAgICAncm9sZSc6ICdtZW51YmFyJ1xuICB9LFxuXG4gIGtleUJpbmRpbmdzOiB7XG4gICAgJ2xlZnQnOiAnX29uTGVmdEtleScsXG4gICAgJ3JpZ2h0JzogJ19vblJpZ2h0S2V5J1xuICB9LFxuXG4gIF9vblVwS2V5OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB0aGlzLmZvY3VzZWRJdGVtLmNsaWNrKCk7XG4gICAgZXZlbnQuZGV0YWlsLmtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBfb25Eb3duS2V5OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB0aGlzLmZvY3VzZWRJdGVtLmNsaWNrKCk7XG4gICAgZXZlbnQuZGV0YWlsLmtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBnZXQgX2lzUlRMKCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKVsnZGlyZWN0aW9uJ10gPT09ICdydGwnO1xuICB9LFxuXG4gIF9vbkxlZnRLZXk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLl9pc1JUTCkge1xuICAgICAgdGhpcy5fZm9jdXNOZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZvY3VzUHJldmlvdXMoKTtcbiAgICB9XG4gICAgZXZlbnQuZGV0YWlsLmtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBfb25SaWdodEtleTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuX2lzUlRMKSB7XG4gICAgICB0aGlzLl9mb2N1c1ByZXZpb3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZvY3VzTmV4dCgpO1xuICAgIH1cbiAgICBldmVudC5kZXRhaWwua2V5Ym9hcmRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9LFxuXG4gIF9vbktleWRvd246IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLmtleWJvYXJkRXZlbnRNYXRjaGVzS2V5cyhldmVudCwgJ3VwIGRvd24gbGVmdCByaWdodCBlc2MnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFsbCBvdGhlciBrZXlzIGZvY3VzIHRoZSBtZW51IGl0ZW0gc3RhcnRpbmcgd2l0aCB0aGF0IGNoYXJhY3RlclxuICAgIHRoaXMuX2ZvY3VzV2l0aEtleWJvYXJkRXZlbnQoZXZlbnQpO1xuICB9XG5cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuSXJvbk1lbnViYXJCZWhhdmlvciAqL1xuUG9seW1lci5Jcm9uTWVudWJhckJlaGF2aW9yID0gW1BvbHltZXIuSXJvbk1lbnVCZWhhdmlvciwgUG9seW1lci5Jcm9uTWVudWJhckJlaGF2aW9ySW1wbF07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2lyb24tbWVudS1iZWhhdmlvci9pcm9uLW1lbnViYXItYmVoYXZpb3IuaHRtbFxuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///79\n");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(81);\n\n__webpack_require__(9);\n\n/**\n * `Polymer.IronMenuBehavior` implements accessible menu behavior.\n *\n * @demo demo/index.html\n * @polymerBehavior Polymer.IronMenuBehavior\n */\nPolymer.IronMenuBehaviorImpl = {\n\n  properties: {\n\n    /**\n     * Returns the currently focused item.\n     * @type {?Object}\n     */\n    focusedItem: {\n      observer: '_focusedItemChanged',\n      readOnly: true,\n      type: Object\n    },\n\n    /**\n     * The attribute to use on menu items to look up the item title. Typing the first\n     * letter of an item when the menu is open focuses that item. If unset, `textContent`\n     * will be used.\n     */\n    attrForItemTitle: {\n      type: String\n    },\n\n    disabled: {\n      type: Boolean,\n      value: false,\n      observer: '_disabledChanged'\n    }\n  },\n\n  // The list of keys has been taken from\n  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n  _MODIFIER_KEYS: ['Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Hyper', 'Meta', 'NumLock', 'OS', 'ScrollLock', 'Shift', 'Super', 'Symbol', 'SymbolLock'],\n\n  _SEARCH_RESET_TIMEOUT_MS: 1000,\n\n  _previousTabIndex: 0,\n\n  hostAttributes: {\n    'role': 'menu'\n  },\n\n  observers: ['_updateMultiselectable(multi)'],\n\n  listeners: {\n    'focus': '_onFocus',\n    'keydown': '_onKeydown',\n    'iron-items-changed': '_onIronItemsChanged'\n  },\n\n  keyBindings: {\n    'up': '_onUpKey',\n    'down': '_onDownKey',\n    'esc': '_onEscKey',\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n\n  attached: function () {\n    this._resetTabindices();\n  },\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected state of the\n   * `value` will be toggled; otherwise the `value` will be selected.\n   *\n   * @param {string|number} value the value to select.\n   */\n  select: function (value) {\n    // Cancel automatically focusing a default item if the menu received focus\n    // through a user action selecting a particular item.\n    if (this._defaultFocusAsync) {\n      this.cancelAsync(this._defaultFocusAsync);\n      this._defaultFocusAsync = null;\n    }\n    var item = this._valueToItem(value);\n    if (item && item.hasAttribute('disabled')) return;\n    this._setFocusedItem(item);\n    Polymer.IronMultiSelectableBehaviorImpl.select.apply(this, arguments);\n  },\n\n  /**\n   * Resets all tabindex attributes to the appropriate value based on the\n   * current selection state. The appropriate value is `0` (focusable) for\n   * the default selected item, and `-1` (not keyboard focusable) for all\n   * other items.\n   */\n  _resetTabindices: function () {\n    var selectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;\n\n    this.items.forEach(function (item) {\n      item.setAttribute('tabindex', item === selectedItem ? '0' : '-1');\n    }, this);\n  },\n\n  /**\n   * Sets appropriate ARIA based on whether or not the menu is meant to be\n   * multi-selectable.\n   *\n   * @param {boolean} multi True if the menu should be multi-selectable.\n   */\n  _updateMultiselectable: function (multi) {\n    if (multi) {\n      this.setAttribute('aria-multiselectable', 'true');\n    } else {\n      this.removeAttribute('aria-multiselectable');\n    }\n  },\n\n  /**\n   * Given a KeyboardEvent, this method will focus the appropriate item in the\n   * menu (if there is a relevant item, and it is possible to focus it).\n   *\n   * @param {KeyboardEvent} event A KeyboardEvent.\n   */\n  _focusWithKeyboardEvent: function (event) {\n    // Make sure that the key pressed is not a modifier key.\n    // getModifierState is not being used, as it is not available in Safari\n    // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)\n    if (this._MODIFIER_KEYS.indexOf(event.key) !== -1) return;\n\n    this.cancelDebouncer('_clearSearchText');\n\n    var searchText = this._searchText || '';\n    var key = event.key && event.key.length == 1 ? event.key : String.fromCharCode(event.keyCode);\n    searchText += key.toLocaleLowerCase();\n\n    var searchLength = searchText.length;\n\n    for (var i = 0, item; item = this.items[i]; i++) {\n      if (item.hasAttribute('disabled')) {\n        continue;\n      }\n\n      var attr = this.attrForItemTitle || 'textContent';\n      var title = (item[attr] || item.getAttribute(attr) || '').trim();\n\n      if (title.length < searchLength) {\n        continue;\n      }\n\n      if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) {\n        this._setFocusedItem(item);\n        break;\n      }\n    }\n\n    this._searchText = searchText;\n    this.debounce('_clearSearchText', this._clearSearchText, this._SEARCH_RESET_TIMEOUT_MS);\n  },\n\n  _clearSearchText: function () {\n    this._searchText = '';\n  },\n\n  /**\n   * Focuses the previous item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusPrevious: function () {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex - i + length) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = Polymer.dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (Polymer.dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Focuses the next item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusNext: function () {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex + i) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = Polymer.dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (Polymer.dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Mutates items in the menu based on provided selection details, so that\n   * all items correctly reflect selection state.\n   *\n   * @param {Element} item An item in the menu.\n   * @param {boolean} isSelected True if the item should be shown in a\n   * selected state, otherwise false.\n   */\n  _applySelection: function (item, isSelected) {\n    if (isSelected) {\n      item.setAttribute('aria-selected', 'true');\n    } else {\n      item.removeAttribute('aria-selected');\n    }\n    Polymer.IronSelectableBehavior._applySelection.apply(this, arguments);\n  },\n\n  /**\n   * Discretely updates tabindex values among menu items as the focused item\n   * changes.\n   *\n   * @param {Element} focusedItem The element that is currently focused.\n   * @param {?Element} old The last element that was considered focused, if\n   * applicable.\n   */\n  _focusedItemChanged: function (focusedItem, old) {\n    old && old.setAttribute('tabindex', '-1');\n    if (focusedItem && !focusedItem.hasAttribute('disabled') && !this.disabled) {\n      focusedItem.setAttribute('tabindex', '0');\n      focusedItem.focus();\n    }\n  },\n\n  /**\n   * A handler that responds to mutation changes related to the list of items\n   * in the menu.\n   *\n   * @param {CustomEvent} event An event containing mutation records as its\n   * detail.\n   */\n  _onIronItemsChanged: function (event) {\n    if (event.detail.addedNodes.length) {\n      this._resetTabindices();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function (event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n\n    Polymer.IronMenuBehaviorImpl._shiftTabPressed = true;\n\n    this._setFocusedItem(null);\n\n    this.setAttribute('tabindex', '-1');\n\n    this.async(function () {\n      this.setAttribute('tabindex', oldTabIndex);\n      Polymer.IronMenuBehaviorImpl._shiftTabPressed = false;\n      // NOTE(cdata): polymer/polymer#1305\n    }, 1);\n  },\n\n  /**\n   * Handler that is called when the menu receives focus.\n   *\n   * @param {FocusEvent} event A focus event.\n   */\n  _onFocus: function (event) {\n    if (Polymer.IronMenuBehaviorImpl._shiftTabPressed) {\n      // do not focus the menu itself\n      return;\n    }\n\n    // Do not focus the selected tab if the deepest target is part of the\n    // menu element's local DOM and is focusable.\n    var rootTarget = /** @type {?HTMLElement} */Polymer.dom(event).rootTarget;\n    if (rootTarget !== this && typeof rootTarget.tabIndex !== \"undefined\" && !this.isLightDescendant(rootTarget)) {\n      return;\n    }\n\n    // clear the cached focus item\n    this._defaultFocusAsync = this.async(function () {\n      // focus the selected item when the menu receives focus, or the first item\n      // if no item is selected\n      var selectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;\n\n      this._setFocusedItem(null);\n\n      if (selectedItem) {\n        this._setFocusedItem(selectedItem);\n      } else if (this.items[0]) {\n        // We find the first none-disabled item (if one exists)\n        this._focusNext();\n      }\n    });\n  },\n\n  /**\n   * Handler that is called when the up key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onUpKey: function (event) {\n    // up and down arrows moves the focus\n    this._focusPrevious();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the down key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onDownKey: function (event) {\n    this._focusNext();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the esc key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onEscKey: function (event) {\n    var focusedItem = this.focusedItem;\n    if (focusedItem) {\n      focusedItem.blur();\n    }\n  },\n\n  /**\n   * Handler that is called when a keydown event is detected.\n   *\n   * @param {KeyboardEvent} event A keyboard event.\n   */\n  _onKeydown: function (event) {\n    if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {\n      // all other keys focus the menu item starting with that character\n      this._focusWithKeyboardEvent(event);\n    }\n    event.stopPropagation();\n  },\n\n  // override _activateHandler\n  _activateHandler: function (event) {\n    Polymer.IronSelectableBehavior._activateHandler.call(this, event);\n    event.stopPropagation();\n  },\n\n  /**\n   * Updates this element's tab index when it's enabled/disabled.\n   * @param {boolean} disabled\n   */\n  _disabledChanged: function (disabled) {\n    if (disabled) {\n      this._previousTabIndex = this.hasAttribute('tabindex') ? this.tabIndex : 0;\n      this.removeAttribute('tabindex'); // No tabindex means not tab-able or select-able.\n    } else if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', this._previousTabIndex);\n    }\n  }\n};\n\nPolymer.IronMenuBehaviorImpl._shiftTabPressed = false;\n\n/** @polymerBehavior Polymer.IronMenuBehavior */\nPolymer.IronMenuBehavior = [Polymer.IronMultiSelectableBehavior, Polymer.IronA11yKeysBehavior, Polymer.IronMenuBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80\n");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(34);\n\n/**\n * @polymerBehavior Polymer.IronMultiSelectableBehavior\n */\nPolymer.IronMultiSelectableBehaviorImpl = {\n  properties: {\n\n    /**\n     * If true, multiple selections are allowed.\n     */\n    multi: {\n      type: Boolean,\n      value: false,\n      observer: 'multiChanged'\n    },\n\n    /**\n     * Gets or sets the selected elements. This is used instead of `selected` when `multi`\n     * is true.\n     */\n    selectedValues: {\n      type: Array,\n      notify: true,\n      value: function () {\n        return [];\n      }\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     */\n    selectedItems: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function () {\n        return [];\n      }\n    }\n\n  },\n\n  observers: ['_updateSelected(selectedValues.splices)'],\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected state of the\n   * `value` will be toggled; otherwise the `value` will be selected.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function (value) {\n    if (this.multi) {\n      this._toggleSelected(value);\n    } else {\n      this.selected = value;\n    }\n  },\n\n  multiChanged: function (multi) {\n    this._selection.multi = multi;\n    this._updateSelected();\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null || this.selectedValues != null && this.selectedValues.length;\n  },\n\n  _updateAttrForSelected: function () {\n    if (!this.multi) {\n      Polymer.IronSelectableBehavior._updateAttrForSelected.apply(this);\n    } else if (this.selectedItems && this.selectedItems.length > 0) {\n      this.selectedValues = this.selectedItems.map(function (selectedItem) {\n        return this._indexToValue(this.indexOf(selectedItem));\n      }, this).filter(function (unfilteredValue) {\n        return unfilteredValue != null;\n      }, this);\n    }\n  },\n\n  _updateSelected: function () {\n    if (this.multi) {\n      this._selectMulti(this.selectedValues);\n    } else {\n      this._selectSelected(this.selected);\n    }\n  },\n\n  _selectMulti: function (values) {\n    values = values || [];\n\n    var selectedItems = (this._valuesToItems(values) || []).filter(function (item) {\n      return item !== null && item !== undefined;\n    });\n\n    // clear all but the current selected items\n    this._selection.clear(selectedItems);\n\n    // select only those not selected yet\n    for (var i = 0; i < selectedItems.length; i++) {\n      this._selection.setItemSelected(selectedItems[i], true);\n    }\n\n    // Check for items, since this array is populated only when attached\n    if (this.fallbackSelection && !this._selection.get().length) {\n      var fallback = this._valueToItem(this.fallbackSelection);\n      if (fallback) {\n        this.select(this.fallbackSelection);\n      }\n    }\n  },\n\n  _selectionChange: function () {\n    var s = this._selection.get();\n    if (this.multi) {\n      this._setSelectedItems(s);\n      this._setSelectedItem(s.length ? s[0] : null);\n    } else {\n      if (s !== null && s !== undefined) {\n        this._setSelectedItems([s]);\n        this._setSelectedItem(s);\n      } else {\n        this._setSelectedItems([]);\n        this._setSelectedItem(null);\n      }\n    }\n  },\n\n  _toggleSelected: function (value) {\n    var i = this.selectedValues.indexOf(value);\n    var unselected = i < 0;\n    if (unselected) {\n      this.push('selectedValues', value);\n    } else {\n      this.splice('selectedValues', i, 1);\n    }\n  },\n\n  _valuesToItems: function (values) {\n    return values == null ? null : values.map(function (value) {\n      return this._valueToItem(value);\n    }, this);\n  }\n};\n\n/** @polymerBehavior */\nPolymer.IronMultiSelectableBehavior = [Polymer.IronSelectableBehavior, Polymer.IronMultiSelectableBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tc2VsZWN0b3IvaXJvbi1tdWx0aS1zZWxlY3RhYmxlLmh0bWw/YjdjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4vaXJvbi1zZWxlY3RhYmxlLmh0bWwnKTtcblxuLyoqXG4gKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9yXG4gKi9cblBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9ySW1wbCA9IHtcbiAgcHJvcGVydGllczoge1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgbXVsdGlwbGUgc2VsZWN0aW9ucyBhcmUgYWxsb3dlZC5cbiAgICAgKi9cbiAgICBtdWx0aToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgIG9ic2VydmVyOiAnbXVsdGlDaGFuZ2VkJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNlbGVjdGVkIGVsZW1lbnRzLiBUaGlzIGlzIHVzZWQgaW5zdGVhZCBvZiBgc2VsZWN0ZWRgIHdoZW4gYG11bHRpYFxuICAgICAqIGlzIHRydWUuXG4gICAgICovXG4gICAgc2VsZWN0ZWRWYWx1ZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtcy5cbiAgICAgKi9cbiAgICBzZWxlY3RlZEl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH1cblxuICB9LFxuXG4gIG9ic2VydmVyczogWydfdXBkYXRlU2VsZWN0ZWQoc2VsZWN0ZWRWYWx1ZXMuc3BsaWNlcyknXSxcblxuICAvKipcbiAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gdmFsdWUuIElmIHRoZSBgbXVsdGlgIHByb3BlcnR5IGlzIHRydWUsIHRoZW4gdGhlIHNlbGVjdGVkIHN0YXRlIG9mIHRoZVxuICAgKiBgdmFsdWVgIHdpbGwgYmUgdG9nZ2xlZDsgb3RoZXJ3aXNlIHRoZSBgdmFsdWVgIHdpbGwgYmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBtZXRob2Qgc2VsZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWUgdGhlIHZhbHVlIHRvIHNlbGVjdC5cbiAgICovXG4gIHNlbGVjdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgIHRoaXMuX3RvZ2dsZVNlbGVjdGVkKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICBtdWx0aUNoYW5nZWQ6IGZ1bmN0aW9uIChtdWx0aSkge1xuICAgIHRoaXMuX3NlbGVjdGlvbi5tdWx0aSA9IG11bHRpO1xuICAgIHRoaXMuX3VwZGF0ZVNlbGVjdGVkKCk7XG4gIH0sXG5cbiAgLy8gVU5VU0VELCBGT1IgQVBJIENPTVBBVElCSUxJVFlcbiAgZ2V0IF9zaG91bGRVcGRhdGVTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWQgIT0gbnVsbCB8fCB0aGlzLnNlbGVjdGVkVmFsdWVzICE9IG51bGwgJiYgdGhpcy5zZWxlY3RlZFZhbHVlcy5sZW5ndGg7XG4gIH0sXG5cbiAgX3VwZGF0ZUF0dHJGb3JTZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5tdWx0aSkge1xuICAgICAgUG9seW1lci5Jcm9uU2VsZWN0YWJsZUJlaGF2aW9yLl91cGRhdGVBdHRyRm9yU2VsZWN0ZWQuYXBwbHkodGhpcyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkSXRlbXMgJiYgdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkSXRlbXMubWFwKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4VG9WYWx1ZSh0aGlzLmluZGV4T2Yoc2VsZWN0ZWRJdGVtKSk7XG4gICAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24gKHVuZmlsdGVyZWRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdW5maWx0ZXJlZFZhbHVlICE9IG51bGw7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgX3VwZGF0ZVNlbGVjdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgIHRoaXMuX3NlbGVjdE11bHRpKHRoaXMuc2VsZWN0ZWRWYWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZWxlY3RTZWxlY3RlZCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgX3NlbGVjdE11bHRpOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzIHx8IFtdO1xuXG4gICAgdmFyIHNlbGVjdGVkSXRlbXMgPSAodGhpcy5fdmFsdWVzVG9JdGVtcyh2YWx1ZXMpIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtICE9PSBudWxsICYmIGl0ZW0gIT09IHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIC8vIGNsZWFyIGFsbCBidXQgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgaXRlbXNcbiAgICB0aGlzLl9zZWxlY3Rpb24uY2xlYXIoc2VsZWN0ZWRJdGVtcyk7XG5cbiAgICAvLyBzZWxlY3Qgb25seSB0aG9zZSBub3Qgc2VsZWN0ZWQgeWV0XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zZWxlY3Rpb24uc2V0SXRlbVNlbGVjdGVkKHNlbGVjdGVkSXRlbXNbaV0sIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBpdGVtcywgc2luY2UgdGhpcyBhcnJheSBpcyBwb3B1bGF0ZWQgb25seSB3aGVuIGF0dGFjaGVkXG4gICAgaWYgKHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24gJiYgIXRoaXMuX3NlbGVjdGlvbi5nZXQoKS5sZW5ndGgpIHtcbiAgICAgIHZhciBmYWxsYmFjayA9IHRoaXMuX3ZhbHVlVG9JdGVtKHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24pO1xuICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0KHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfc2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHMgPSB0aGlzLl9zZWxlY3Rpb24uZ2V0KCk7XG4gICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgIHRoaXMuX3NldFNlbGVjdGVkSXRlbXMocyk7XG4gICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW0ocy5sZW5ndGggPyBzWzBdIDogbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzICE9PSBudWxsICYmIHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW1zKFtzXSk7XG4gICAgICAgIHRoaXMuX3NldFNlbGVjdGVkSXRlbShzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NldFNlbGVjdGVkSXRlbXMoW10pO1xuICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW0obnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF90b2dnbGVTZWxlY3RlZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGkgPSB0aGlzLnNlbGVjdGVkVmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICAgIHZhciB1bnNlbGVjdGVkID0gaSA8IDA7XG4gICAgaWYgKHVuc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMucHVzaCgnc2VsZWN0ZWRWYWx1ZXMnLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3BsaWNlKCdzZWxlY3RlZFZhbHVlcycsIGksIDEpO1xuICAgIH1cbiAgfSxcblxuICBfdmFsdWVzVG9JdGVtczogZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlVG9JdGVtKHZhbHVlKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxufTtcblxuLyoqIEBwb2x5bWVyQmVoYXZpb3IgKi9cblBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9yID0gW1BvbHltZXIuSXJvblNlbGVjdGFibGVCZWhhdmlvciwgUG9seW1lci5Jcm9uTXVsdGlTZWxlY3RhYmxlQmVoYXZpb3JJbXBsXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1zZWxlY3Rvci9pcm9uLW11bHRpLXNlbGVjdGFibGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n");

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(9);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-ripple> <template> <style>:host{display:block;position:absolute;border-radius:inherit;overflow:hidden;top:0;left:0;right:0;bottom:0;pointer-events:none}:host([animating]){-webkit-transform:translate(0,0);transform:translate3d(0,0,0)}#background,#waves,.wave,.wave-container{pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%}#background,.wave{opacity:0}#waves,.wave{overflow:hidden}.wave,.wave-container{border-radius:50%}:host(.circle) #background,:host(.circle) #waves{border-radius:50%}:host(.circle) .wave-container{overflow:hidden}</style> <div id=background></div> <div id=waves></div> </template> </dom-module>\");\n\n(function () {\n  'use strict';\n\n  var Utility = {\n    distance: function (x1, y1, x2, y2) {\n      var xDelta = x1 - x2;\n      var yDelta = y1 - y2;\n\n      return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n    },\n\n    now: window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now\n  };\n\n  /**\n   * @param {HTMLElement} element\n   * @constructor\n   */\n  function ElementMetrics(element) {\n    this.element = element;\n    this.width = this.boundingRect.width;\n    this.height = this.boundingRect.height;\n\n    this.size = Math.max(this.width, this.height);\n  }\n\n  ElementMetrics.prototype = {\n    get boundingRect() {\n      return this.element.getBoundingClientRect();\n    },\n\n    furthestCornerDistanceFrom: function (x, y) {\n      var topLeft = Utility.distance(x, y, 0, 0);\n      var topRight = Utility.distance(x, y, this.width, 0);\n      var bottomLeft = Utility.distance(x, y, 0, this.height);\n      var bottomRight = Utility.distance(x, y, this.width, this.height);\n\n      return Math.max(topLeft, topRight, bottomLeft, bottomRight);\n    }\n  };\n\n  /**\n   * @param {HTMLElement} element\n   * @constructor\n   */\n  function Ripple(element) {\n    this.element = element;\n    this.color = window.getComputedStyle(element).color;\n\n    this.wave = document.createElement('div');\n    this.waveContainer = document.createElement('div');\n    this.wave.style.backgroundColor = this.color;\n    this.wave.classList.add('wave');\n    this.waveContainer.classList.add('wave-container');\n    Polymer.dom(this.waveContainer).appendChild(this.wave);\n\n    this.resetInteractionState();\n  }\n\n  Ripple.MAX_RADIUS = 300;\n\n  Ripple.prototype = {\n    get recenters() {\n      return this.element.recenters;\n    },\n\n    get center() {\n      return this.element.center;\n    },\n\n    get mouseDownElapsed() {\n      var elapsed;\n\n      if (!this.mouseDownStart) {\n        return 0;\n      }\n\n      elapsed = Utility.now() - this.mouseDownStart;\n\n      if (this.mouseUpStart) {\n        elapsed -= this.mouseUpElapsed;\n      }\n\n      return elapsed;\n    },\n\n    get mouseUpElapsed() {\n      return this.mouseUpStart ? Utility.now() - this.mouseUpStart : 0;\n    },\n\n    get mouseDownElapsedSeconds() {\n      return this.mouseDownElapsed / 1000;\n    },\n\n    get mouseUpElapsedSeconds() {\n      return this.mouseUpElapsed / 1000;\n    },\n\n    get mouseInteractionSeconds() {\n      return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds;\n    },\n\n    get initialOpacity() {\n      return this.element.initialOpacity;\n    },\n\n    get opacityDecayVelocity() {\n      return this.element.opacityDecayVelocity;\n    },\n\n    get radius() {\n      var width2 = this.containerMetrics.width * this.containerMetrics.width;\n      var height2 = this.containerMetrics.height * this.containerMetrics.height;\n      var waveRadius = Math.min(Math.sqrt(width2 + height2), Ripple.MAX_RADIUS) * 1.1 + 5;\n\n      var duration = 1.1 - 0.2 * (waveRadius / Ripple.MAX_RADIUS);\n      var timeNow = this.mouseInteractionSeconds / duration;\n      var size = waveRadius * (1 - Math.pow(80, -timeNow));\n\n      return Math.abs(size);\n    },\n\n    get opacity() {\n      if (!this.mouseUpStart) {\n        return this.initialOpacity;\n      }\n\n      return Math.max(0, this.initialOpacity - this.mouseUpElapsedSeconds * this.opacityDecayVelocity);\n    },\n\n    get outerOpacity() {\n      // Linear increase in background opacity, capped at the opacity\n      // of the wavefront (waveOpacity).\n      var outerOpacity = this.mouseUpElapsedSeconds * 0.3;\n      var waveOpacity = this.opacity;\n\n      return Math.max(0, Math.min(outerOpacity, waveOpacity));\n    },\n\n    get isOpacityFullyDecayed() {\n      return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);\n    },\n\n    get isRestingAtMaxRadius() {\n      return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);\n    },\n\n    get isAnimationComplete() {\n      return this.mouseUpStart ? this.isOpacityFullyDecayed : this.isRestingAtMaxRadius;\n    },\n\n    get translationFraction() {\n      return Math.min(1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2));\n    },\n\n    get xNow() {\n      if (this.xEnd) {\n        return this.xStart + this.translationFraction * (this.xEnd - this.xStart);\n      }\n\n      return this.xStart;\n    },\n\n    get yNow() {\n      if (this.yEnd) {\n        return this.yStart + this.translationFraction * (this.yEnd - this.yStart);\n      }\n\n      return this.yStart;\n    },\n\n    get isMouseDown() {\n      return this.mouseDownStart && !this.mouseUpStart;\n    },\n\n    resetInteractionState: function () {\n      this.maxRadius = 0;\n      this.mouseDownStart = 0;\n      this.mouseUpStart = 0;\n\n      this.xStart = 0;\n      this.yStart = 0;\n      this.xEnd = 0;\n      this.yEnd = 0;\n      this.slideDistance = 0;\n\n      this.containerMetrics = new ElementMetrics(this.element);\n    },\n\n    draw: function () {\n      var scale;\n      var translateString;\n      var dx;\n      var dy;\n\n      this.wave.style.opacity = this.opacity;\n\n      scale = this.radius / (this.containerMetrics.size / 2);\n      dx = this.xNow - this.containerMetrics.width / 2;\n      dy = this.yNow - this.containerMetrics.height / 2;\n\n      // 2d transform for safari because of border-radius and overflow:hidden clipping bug.\n      // https://bugs.webkit.org/show_bug.cgi?id=98538\n      this.waveContainer.style.webkitTransform = 'translate(' + dx + 'px, ' + dy + 'px)';\n      this.waveContainer.style.transform = 'translate3d(' + dx + 'px, ' + dy + 'px, 0)';\n      this.wave.style.webkitTransform = 'scale(' + scale + ',' + scale + ')';\n      this.wave.style.transform = 'scale3d(' + scale + ',' + scale + ',1)';\n    },\n\n    /** @param {Event=} event */\n    downAction: function (event) {\n      var xCenter = this.containerMetrics.width / 2;\n      var yCenter = this.containerMetrics.height / 2;\n\n      this.resetInteractionState();\n      this.mouseDownStart = Utility.now();\n\n      if (this.center) {\n        this.xStart = xCenter;\n        this.yStart = yCenter;\n        this.slideDistance = Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);\n      } else {\n        this.xStart = event ? event.detail.x - this.containerMetrics.boundingRect.left : this.containerMetrics.width / 2;\n        this.yStart = event ? event.detail.y - this.containerMetrics.boundingRect.top : this.containerMetrics.height / 2;\n      }\n\n      if (this.recenters) {\n        this.xEnd = xCenter;\n        this.yEnd = yCenter;\n        this.slideDistance = Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);\n      }\n\n      this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(this.xStart, this.yStart);\n\n      this.waveContainer.style.top = (this.containerMetrics.height - this.containerMetrics.size) / 2 + 'px';\n      this.waveContainer.style.left = (this.containerMetrics.width - this.containerMetrics.size) / 2 + 'px';\n\n      this.waveContainer.style.width = this.containerMetrics.size + 'px';\n      this.waveContainer.style.height = this.containerMetrics.size + 'px';\n    },\n\n    /** @param {Event=} event */\n    upAction: function (event) {\n      if (!this.isMouseDown) {\n        return;\n      }\n\n      this.mouseUpStart = Utility.now();\n    },\n\n    remove: function () {\n      Polymer.dom(this.waveContainer.parentNode).removeChild(this.waveContainer);\n    }\n  };\n\n  Polymer({\n    is: 'paper-ripple',\n\n    behaviors: [Polymer.IronA11yKeysBehavior],\n\n    properties: {\n      /**\n       * The initial opacity set on the wave.\n       *\n       * @attribute initialOpacity\n       * @type number\n       * @default 0.25\n       */\n      initialOpacity: {\n        type: Number,\n        value: 0.25\n      },\n\n      /**\n       * How fast (opacity per second) the wave fades out.\n       *\n       * @attribute opacityDecayVelocity\n       * @type number\n       * @default 0.8\n       */\n      opacityDecayVelocity: {\n        type: Number,\n        value: 0.8\n      },\n\n      /**\n       * If true, ripples will exhibit a gravitational pull towards\n       * the center of their container as they fade away.\n       *\n       * @attribute recenters\n       * @type boolean\n       * @default false\n       */\n      recenters: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * If true, ripples will center inside its container\n       *\n       * @attribute recenters\n       * @type boolean\n       * @default false\n       */\n      center: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * A list of the visual ripples.\n       *\n       * @attribute ripples\n       * @type Array\n       * @default []\n       */\n      ripples: {\n        type: Array,\n        value: function () {\n          return [];\n        }\n      },\n\n      /**\n       * True when there are visible ripples animating within the\n       * element.\n       */\n      animating: {\n        type: Boolean,\n        readOnly: true,\n        reflectToAttribute: true,\n        value: false\n      },\n\n      /**\n       * If true, the ripple will remain in the \"down\" state until `holdDown`\n       * is set to false again.\n       */\n      holdDown: {\n        type: Boolean,\n        value: false,\n        observer: '_holdDownChanged'\n      },\n\n      /**\n       * If true, the ripple will not generate a ripple effect\n       * via pointer interaction.\n       * Calling ripple's imperative api like `simulatedRipple` will\n       * still generate the ripple effect.\n       */\n      noink: {\n        type: Boolean,\n        value: false\n      },\n\n      _animating: {\n        type: Boolean\n      },\n\n      _boundAnimate: {\n        type: Function,\n        value: function () {\n          return this.animate.bind(this);\n        }\n      }\n    },\n\n    get target() {\n      return this.keyEventTarget;\n    },\n\n    keyBindings: {\n      'enter:keydown': '_onEnterKeydown',\n      'space:keydown': '_onSpaceKeydown',\n      'space:keyup': '_onSpaceKeyup'\n    },\n\n    attached: function () {\n      // Set up a11yKeysBehavior to listen to key events on the target,\n      // so that space and enter activate the ripple even if the target doesn't\n      // handle key events. The key handlers deal with `noink` themselves.\n      if (this.parentNode.nodeType == 11) {\n        // DOCUMENT_FRAGMENT_NODE\n        this.keyEventTarget = Polymer.dom(this).getOwnerRoot().host;\n      } else {\n        this.keyEventTarget = this.parentNode;\n      }\n      var keyEventTarget = /** @type {!EventTarget} */this.keyEventTarget;\n      this.listen(keyEventTarget, 'up', 'uiUpAction');\n      this.listen(keyEventTarget, 'down', 'uiDownAction');\n    },\n\n    detached: function () {\n      this.unlisten(this.keyEventTarget, 'up', 'uiUpAction');\n      this.unlisten(this.keyEventTarget, 'down', 'uiDownAction');\n      this.keyEventTarget = null;\n    },\n\n    get shouldKeepAnimating() {\n      for (var index = 0; index < this.ripples.length; ++index) {\n        if (!this.ripples[index].isAnimationComplete) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    simulatedRipple: function () {\n      this.downAction(null);\n\n      // Please see polymer/polymer#1305\n      this.async(function () {\n        this.upAction();\n      }, 1);\n    },\n\n    /**\n     * Provokes a ripple down effect via a UI event,\n     * respecting the `noink` property.\n     * @param {Event=} event\n     */\n    uiDownAction: function (event) {\n      if (!this.noink) {\n        this.downAction(event);\n      }\n    },\n\n    /**\n     * Provokes a ripple down effect via a UI event,\n     * *not* respecting the `noink` property.\n     * @param {Event=} event\n     */\n    downAction: function (event) {\n      if (this.holdDown && this.ripples.length > 0) {\n        return;\n      }\n\n      var ripple = this.addRipple();\n\n      ripple.downAction(event);\n\n      if (!this._animating) {\n        this._animating = true;\n        this.animate();\n      }\n    },\n\n    /**\n     * Provokes a ripple up effect via a UI event,\n     * respecting the `noink` property.\n     * @param {Event=} event\n     */\n    uiUpAction: function (event) {\n      if (!this.noink) {\n        this.upAction(event);\n      }\n    },\n\n    /**\n     * Provokes a ripple up effect via a UI event,\n     * *not* respecting the `noink` property.\n     * @param {Event=} event\n     */\n    upAction: function (event) {\n      if (this.holdDown) {\n        return;\n      }\n\n      this.ripples.forEach(function (ripple) {\n        ripple.upAction(event);\n      });\n\n      this._animating = true;\n      this.animate();\n    },\n\n    onAnimationComplete: function () {\n      this._animating = false;\n      this.$.background.style.backgroundColor = null;\n      this.fire('transitionend');\n    },\n\n    addRipple: function () {\n      var ripple = new Ripple(this);\n\n      Polymer.dom(this.$.waves).appendChild(ripple.waveContainer);\n      this.$.background.style.backgroundColor = ripple.color;\n      this.ripples.push(ripple);\n\n      this._setAnimating(true);\n\n      return ripple;\n    },\n\n    removeRipple: function (ripple) {\n      var rippleIndex = this.ripples.indexOf(ripple);\n\n      if (rippleIndex < 0) {\n        return;\n      }\n\n      this.ripples.splice(rippleIndex, 1);\n\n      ripple.remove();\n\n      if (!this.ripples.length) {\n        this._setAnimating(false);\n      }\n    },\n\n    /**\n     * This conflicts with Element#antimate().\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate\n     * @suppress {checkTypes}\n     */\n    animate: function () {\n      if (!this._animating) {\n        return;\n      }\n      var index;\n      var ripple;\n\n      for (index = 0; index < this.ripples.length; ++index) {\n        ripple = this.ripples[index];\n\n        ripple.draw();\n\n        this.$.background.style.opacity = ripple.outerOpacity;\n\n        if (ripple.isOpacityFullyDecayed && !ripple.isRestingAtMaxRadius) {\n          this.removeRipple(ripple);\n        }\n      }\n\n      if (!this.shouldKeepAnimating && this.ripples.length === 0) {\n        this.onAnimationComplete();\n      } else {\n        window.requestAnimationFrame(this._boundAnimate);\n      }\n    },\n\n    _onEnterKeydown: function () {\n      this.uiDownAction();\n      this.async(this.uiUpAction, 1);\n    },\n\n    _onSpaceKeydown: function () {\n      this.uiDownAction();\n    },\n\n    _onSpaceKeyup: function () {\n      this.uiUpAction();\n    },\n\n    // note: holdDown does not respect noink since it can be a focus based\n    // effect.\n    _holdDownChanged: function (newVal, oldVal) {\n      if (oldVal === undefined) {\n        return;\n      }\n      if (newVal) {\n        this.downAction();\n      } else {\n        this.upAction();\n      }\n    }\n\n    /**\n    Fired when the animation finishes.\n    This is useful if you want to wait until\n    the ripple animation finishes to perform some action.\n     @event transitionend\n    @param {{node: Object}} detail Contains the animated node.\n    */\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82\n");

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(25);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<iron-iconset-svg name=paper-tabs size=24> <svg><defs> <g id=chevron-left><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"></path></g> <g id=chevron-right><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"></path></g> </defs></svg> </iron-iconset-svg>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXRhYnMvcGFwZXItdGFicy1pY29ucy5odG1sPzVmNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9pcm9uLWljb25zZXQtc3ZnL2lyb24taWNvbnNldC1zdmcuaHRtbCcpO1xuXG5jb25zdCBSZWdpc3Rlckh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJ3BvbHltZXItd2VicGFjay1sb2FkZXIvcmVnaXN0ZXItaHRtbC10ZW1wbGF0ZScpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS50b0JvZHkoXCI8aXJvbi1pY29uc2V0LXN2ZyBuYW1lPXBhcGVyLXRhYnMgc2l6ZT0yND4gPHN2Zz48ZGVmcz4gPGcgaWQ9Y2hldnJvbi1sZWZ0PjxwYXRoIGQ9XFxcIk0xNS40MSA3LjQxTDE0IDZsLTYgNiA2IDYgMS40MS0xLjQxTDEwLjgzIDEyelxcXCI+PC9wYXRoPjwvZz4gPGcgaWQ9Y2hldnJvbi1yaWdodD48cGF0aCBkPVxcXCJNMTAgNkw4LjU5IDcuNDEgMTMuMTcgMTJsLTQuNTggNC41OUwxMCAxOGw2LTZ6XFxcIj48L3BhdGg+PC9nPiA8L2RlZnM+PC9zdmc+IDwvaXJvbi1pY29uc2V0LXN2Zz5cIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXRhYnMvcGFwZXItdGFicy1pY29ucy5odG1sXG4vLyBtb2R1bGUgaWQgPSA4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///83\n");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(85);\n\n__webpack_require__(87);\n\n__webpack_require__(94);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-dialog> <template> <style include=paper-dialog-shared-styles></style> <slot></slot> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-dialog',\n\n  behaviors: [Polymer.PaperDialogBehavior, Polymer.NeonAnimationRunnerBehavior],\n\n  listeners: {\n    'neon-animation-finish': '_onNeonAnimationFinish'\n  },\n\n  _renderOpened: function () {\n    this.cancelAnimation();\n    this.playAnimation('entry');\n  },\n\n  _renderClosed: function () {\n    this.cancelAnimation();\n    this.playAnimation('exit');\n  },\n\n  _onNeonAnimationFinish: function () {\n    if (this.opened) {\n      this._finishRenderOpened();\n    } else {\n      this._finishRenderClosed();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWRpYWxvZy9wYXBlci1kaWFsb2cuaHRtbD84M2Q5Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vbmVvbi1hbmltYXRpb24vbmVvbi1hbmltYXRpb24tcnVubmVyLWJlaGF2aW9yLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItZGlhbG9nLWJlaGF2aW9yL3BhcGVyLWRpYWxvZy1iZWhhdmlvci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLWRpYWxvZy1iZWhhdmlvci9wYXBlci1kaWFsb2ctc2hhcmVkLXN0eWxlcy5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItZGlhbG9nPiA8dGVtcGxhdGU+IDxzdHlsZSBpbmNsdWRlPXBhcGVyLWRpYWxvZy1zaGFyZWQtc3R5bGVzPjwvc3R5bGU+IDxzbG90Pjwvc2xvdD4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItZGlhbG9nJyxcblxuICBiZWhhdmlvcnM6IFtQb2x5bWVyLlBhcGVyRGlhbG9nQmVoYXZpb3IsIFBvbHltZXIuTmVvbkFuaW1hdGlvblJ1bm5lckJlaGF2aW9yXSxcblxuICBsaXN0ZW5lcnM6IHtcbiAgICAnbmVvbi1hbmltYXRpb24tZmluaXNoJzogJ19vbk5lb25BbmltYXRpb25GaW5pc2gnXG4gIH0sXG5cbiAgX3JlbmRlck9wZW5lZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FuY2VsQW5pbWF0aW9uKCk7XG4gICAgdGhpcy5wbGF5QW5pbWF0aW9uKCdlbnRyeScpO1xuICB9LFxuXG4gIF9yZW5kZXJDbG9zZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbmNlbEFuaW1hdGlvbigpO1xuICAgIHRoaXMucGxheUFuaW1hdGlvbignZXhpdCcpO1xuICB9LFxuXG4gIF9vbk5lb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5vcGVuZWQpIHtcbiAgICAgIHRoaXMuX2ZpbmlzaFJlbmRlck9wZW5lZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maW5pc2hSZW5kZXJDbG9zZWQoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1kaWFsb2cvcGFwZXItZGlhbG9nLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///84\n");

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(86);\n\n/**\n * `Polymer.NeonAnimationRunnerBehavior` adds a method to run animations.\n *\n * @polymerBehavior Polymer.NeonAnimationRunnerBehavior\n */\nPolymer.NeonAnimationRunnerBehaviorImpl = {\n\n  _configureAnimations: function (configs) {\n    var results = [];\n    if (configs.length > 0) {\n      for (var config, index = 0; config = configs[index]; index++) {\n        var neonAnimation = document.createElement(config.name);\n        // is this element actually a neon animation?\n        if (neonAnimation.isNeonAnimation) {\n          var result = null;\n          // configuration or play could fail if polyfills aren't loaded\n          try {\n            result = neonAnimation.configure(config);\n            // Check if we have an Effect rather than an Animation\n            if (typeof result.cancel != 'function') {\n              result = document.timeline.play(result);\n            }\n          } catch (e) {\n            result = null;\n            console.warn('Couldnt play', '(', config.name, ').', e);\n          }\n          if (result) {\n            results.push({\n              neonAnimation: neonAnimation,\n              config: config,\n              animation: result\n            });\n          }\n        } else {\n          console.warn(this.is + ':', config.name, 'not found!');\n        }\n      }\n    }\n    return results;\n  },\n\n  _shouldComplete: function (activeEntries) {\n    var finished = true;\n    for (var i = 0; i < activeEntries.length; i++) {\n      if (activeEntries[i].animation.playState != 'finished') {\n        finished = false;\n        break;\n      }\n    }\n    return finished;\n  },\n\n  _complete: function (activeEntries) {\n    for (var i = 0; i < activeEntries.length; i++) {\n      activeEntries[i].neonAnimation.complete(activeEntries[i].config);\n    }\n    for (var i = 0; i < activeEntries.length; i++) {\n      activeEntries[i].animation.cancel();\n    }\n  },\n\n  /**\n   * Plays an animation with an optional `type`.\n   * @param {string=} type\n   * @param {!Object=} cookie\n   */\n  playAnimation: function (type, cookie) {\n    var configs = this.getAnimationConfig(type);\n    if (!configs) {\n      return;\n    }\n    this._active = this._active || {};\n    if (this._active[type]) {\n      this._complete(this._active[type]);\n      delete this._active[type];\n    }\n\n    var activeEntries = this._configureAnimations(configs);\n\n    if (activeEntries.length == 0) {\n      this.fire('neon-animation-finish', cookie, { bubbles: false });\n      return;\n    }\n\n    this._active[type] = activeEntries;\n\n    for (var i = 0; i < activeEntries.length; i++) {\n      activeEntries[i].animation.onfinish = function () {\n        if (this._shouldComplete(activeEntries)) {\n          this._complete(activeEntries);\n          delete this._active[type];\n          this.fire('neon-animation-finish', cookie, { bubbles: false });\n        }\n      }.bind(this);\n    }\n  },\n\n  /**\n   * Cancels the currently running animations.\n   */\n  cancelAnimation: function () {\n    for (var k in this._animations) {\n      this._animations[k].cancel();\n    }\n    this._animations = {};\n  }\n};\n\n/** @polymerBehavior Polymer.NeonAnimationRunnerBehavior */\nPolymer.NeonAnimationRunnerBehavior = [Polymer.NeonAnimatableBehavior, Polymer.NeonAnimationRunnerBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL25lb24tYW5pbWF0aW9uL25lb24tYW5pbWF0aW9uLXJ1bm5lci1iZWhhdmlvci5odG1sP2QzMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL25lb24tYW5pbWF0YWJsZS1iZWhhdmlvci5odG1sJyk7XG5cbi8qKlxuICogYFBvbHltZXIuTmVvbkFuaW1hdGlvblJ1bm5lckJlaGF2aW9yYCBhZGRzIGEgbWV0aG9kIHRvIHJ1biBhbmltYXRpb25zLlxuICpcbiAqIEBwb2x5bWVyQmVoYXZpb3IgUG9seW1lci5OZW9uQW5pbWF0aW9uUnVubmVyQmVoYXZpb3JcbiAqL1xuUG9seW1lci5OZW9uQW5pbWF0aW9uUnVubmVyQmVoYXZpb3JJbXBsID0ge1xuXG4gIF9jb25maWd1cmVBbmltYXRpb25zOiBmdW5jdGlvbiAoY29uZmlncykge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKGNvbmZpZ3MubGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgY29uZmlnLCBpbmRleCA9IDA7IGNvbmZpZyA9IGNvbmZpZ3NbaW5kZXhdOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBuZW9uQW5pbWF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb25maWcubmFtZSk7XG4gICAgICAgIC8vIGlzIHRoaXMgZWxlbWVudCBhY3R1YWxseSBhIG5lb24gYW5pbWF0aW9uP1xuICAgICAgICBpZiAobmVvbkFuaW1hdGlvbi5pc05lb25BbmltYXRpb24pIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAvLyBjb25maWd1cmF0aW9uIG9yIHBsYXkgY291bGQgZmFpbCBpZiBwb2x5ZmlsbHMgYXJlbid0IGxvYWRlZFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZW9uQW5pbWF0aW9uLmNvbmZpZ3VyZShjb25maWcpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhbiBFZmZlY3QgcmF0aGVyIHRoYW4gYW4gQW5pbWF0aW9uXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5jYW5jZWwgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBkb2N1bWVudC50aW1lbGluZS5wbGF5KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGRudCBwbGF5JywgJygnLCBjb25maWcubmFtZSwgJykuJywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgIG5lb25BbmltYXRpb246IG5lb25BbmltYXRpb24sXG4gICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICBhbmltYXRpb246IHJlc3VsdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLmlzICsgJzonLCBjb25maWcubmFtZSwgJ25vdCBmb3VuZCEnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSxcblxuICBfc2hvdWxkQ29tcGxldGU6IGZ1bmN0aW9uIChhY3RpdmVFbnRyaWVzKSB7XG4gICAgdmFyIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2ZUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhY3RpdmVFbnRyaWVzW2ldLmFuaW1hdGlvbi5wbGF5U3RhdGUgIT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICBmaW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbmlzaGVkO1xuICB9LFxuXG4gIF9jb21wbGV0ZTogZnVuY3Rpb24gKGFjdGl2ZUVudHJpZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2ZUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2ZUVudHJpZXNbaV0ubmVvbkFuaW1hdGlvbi5jb21wbGV0ZShhY3RpdmVFbnRyaWVzW2ldLmNvbmZpZyk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aXZlRW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZlRW50cmllc1tpXS5hbmltYXRpb24uY2FuY2VsKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQbGF5cyBhbiBhbmltYXRpb24gd2l0aCBhbiBvcHRpb25hbCBgdHlwZWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdHlwZVxuICAgKiBAcGFyYW0geyFPYmplY3Q9fSBjb29raWVcbiAgICovXG4gIHBsYXlBbmltYXRpb246IGZ1bmN0aW9uICh0eXBlLCBjb29raWUpIHtcbiAgICB2YXIgY29uZmlncyA9IHRoaXMuZ2V0QW5pbWF0aW9uQ29uZmlnKHR5cGUpO1xuICAgIGlmICghY29uZmlncykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9hY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwge307XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVt0eXBlXSkge1xuICAgICAgdGhpcy5fY29tcGxldGUodGhpcy5fYWN0aXZlW3R5cGVdKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9hY3RpdmVbdHlwZV07XG4gICAgfVxuXG4gICAgdmFyIGFjdGl2ZUVudHJpZXMgPSB0aGlzLl9jb25maWd1cmVBbmltYXRpb25zKGNvbmZpZ3MpO1xuXG4gICAgaWYgKGFjdGl2ZUVudHJpZXMubGVuZ3RoID09IDApIHtcbiAgICAgIHRoaXMuZmlyZSgnbmVvbi1hbmltYXRpb24tZmluaXNoJywgY29va2llLCB7IGJ1YmJsZXM6IGZhbHNlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2ZVt0eXBlXSA9IGFjdGl2ZUVudHJpZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2ZUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2ZUVudHJpZXNbaV0uYW5pbWF0aW9uLm9uZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvdWxkQ29tcGxldGUoYWN0aXZlRW50cmllcykpIHtcbiAgICAgICAgICB0aGlzLl9jb21wbGV0ZShhY3RpdmVFbnRyaWVzKTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fYWN0aXZlW3R5cGVdO1xuICAgICAgICAgIHRoaXMuZmlyZSgnbmVvbi1hbmltYXRpb24tZmluaXNoJywgY29va2llLCB7IGJ1YmJsZXM6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIHRoZSBjdXJyZW50bHkgcnVubmluZyBhbmltYXRpb25zLlxuICAgKi9cbiAgY2FuY2VsQW5pbWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgayBpbiB0aGlzLl9hbmltYXRpb25zKSB7XG4gICAgICB0aGlzLl9hbmltYXRpb25zW2tdLmNhbmNlbCgpO1xuICAgIH1cbiAgICB0aGlzLl9hbmltYXRpb25zID0ge307XG4gIH1cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuTmVvbkFuaW1hdGlvblJ1bm5lckJlaGF2aW9yICovXG5Qb2x5bWVyLk5lb25BbmltYXRpb25SdW5uZXJCZWhhdmlvciA9IFtQb2x5bWVyLk5lb25BbmltYXRhYmxlQmVoYXZpb3IsIFBvbHltZXIuTmVvbkFuaW1hdGlvblJ1bm5lckJlaGF2aW9ySW1wbF07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL25lb24tYW5pbWF0aW9uL25lb24tYW5pbWF0aW9uLXJ1bm5lci1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSA4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85\n");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n * `Polymer.NeonAnimatableBehavior` is implemented by elements containing animations for use with\n * elements implementing `Polymer.NeonAnimationRunnerBehavior`.\n * @polymerBehavior\n */\nPolymer.NeonAnimatableBehavior = {\n\n  properties: {\n\n    /**\n     * Animation configuration. See README for more info.\n     */\n    animationConfig: {\n      type: Object\n    },\n\n    /**\n     * Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\n     * manually if using this. The animated node is set to `this` if using this property.\n     */\n    entryAnimation: {\n      observer: '_entryAnimationChanged',\n      type: String\n    },\n\n    /**\n     * Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\n     * manually if using this. The animated node is set to `this` if using this property.\n     */\n    exitAnimation: {\n      observer: '_exitAnimationChanged',\n      type: String\n    }\n\n  },\n\n  _entryAnimationChanged: function () {\n    this.animationConfig = this.animationConfig || {};\n    this.animationConfig['entry'] = [{\n      name: this.entryAnimation,\n      node: this\n    }];\n  },\n\n  _exitAnimationChanged: function () {\n    this.animationConfig = this.animationConfig || {};\n    this.animationConfig['exit'] = [{\n      name: this.exitAnimation,\n      node: this\n    }];\n  },\n\n  _copyProperties: function (config1, config2) {\n    // shallowly copy properties from config2 to config1\n    for (var property in config2) {\n      config1[property] = config2[property];\n    }\n  },\n\n  _cloneConfig: function (config) {\n    var clone = {\n      isClone: true\n    };\n    this._copyProperties(clone, config);\n    return clone;\n  },\n\n  _getAnimationConfigRecursive: function (type, map, allConfigs) {\n    if (!this.animationConfig) {\n      return;\n    }\n\n    if (this.animationConfig.value && typeof this.animationConfig.value === 'function') {\n      this._warn(this._logf('playAnimation', \"Please put 'animationConfig' inside of your components 'properties' object instead of outside of it.\"));\n      return;\n    }\n\n    // type is optional\n    var thisConfig;\n    if (type) {\n      thisConfig = this.animationConfig[type];\n    } else {\n      thisConfig = this.animationConfig;\n    }\n\n    if (!Array.isArray(thisConfig)) {\n      thisConfig = [thisConfig];\n    }\n\n    // iterate animations and recurse to process configurations from child nodes\n    if (thisConfig) {\n      for (var config, index = 0; config = thisConfig[index]; index++) {\n        if (config.animatable) {\n          config.animatable._getAnimationConfigRecursive(config.type || type, map, allConfigs);\n        } else {\n          if (config.id) {\n            var cachedConfig = map[config.id];\n            if (cachedConfig) {\n              // merge configurations with the same id, making a clone lazily\n              if (!cachedConfig.isClone) {\n                map[config.id] = this._cloneConfig(cachedConfig);\n                cachedConfig = map[config.id];\n              }\n              this._copyProperties(cachedConfig, config);\n            } else {\n              // put any configs with an id into a map\n              map[config.id] = config;\n            }\n          } else {\n            allConfigs.push(config);\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * An element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\n   * an animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\n   * should define the property `animationConfig`, which is either a configuration object\n   * or a map of animation type to array of configuration objects.\n   */\n  getAnimationConfig: function (type) {\n    var map = {};\n    var allConfigs = [];\n    this._getAnimationConfigRecursive(type, map, allConfigs);\n    // append the configurations saved in the map to the array\n    for (var key in map) {\n      allConfigs.push(map[key]);\n    }\n    return allConfigs;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL25lb24tYW5pbWF0aW9uL25lb24tYW5pbWF0YWJsZS1iZWhhdmlvci5odG1sPzIyMGYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG4vKipcbiAqIGBQb2x5bWVyLk5lb25BbmltYXRhYmxlQmVoYXZpb3JgIGlzIGltcGxlbWVudGVkIGJ5IGVsZW1lbnRzIGNvbnRhaW5pbmcgYW5pbWF0aW9ucyBmb3IgdXNlIHdpdGhcbiAqIGVsZW1lbnRzIGltcGxlbWVudGluZyBgUG9seW1lci5OZW9uQW5pbWF0aW9uUnVubmVyQmVoYXZpb3JgLlxuICogQHBvbHltZXJCZWhhdmlvclxuICovXG5Qb2x5bWVyLk5lb25BbmltYXRhYmxlQmVoYXZpb3IgPSB7XG5cbiAgcHJvcGVydGllczoge1xuXG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGNvbmZpZ3VyYXRpb24uIFNlZSBSRUFETUUgZm9yIG1vcmUgaW5mby5cbiAgICAgKi9cbiAgICBhbmltYXRpb25Db25maWc6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSBmb3Igc2V0dGluZyBhbiAnZW50cnknIGFuaW1hdGlvbi4gRG8gbm90IHNldCBgYW5pbWF0aW9uQ29uZmlnLmVudHJ5YFxuICAgICAqIG1hbnVhbGx5IGlmIHVzaW5nIHRoaXMuIFRoZSBhbmltYXRlZCBub2RlIGlzIHNldCB0byBgdGhpc2AgaWYgdXNpbmcgdGhpcyBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBlbnRyeUFuaW1hdGlvbjoge1xuICAgICAgb2JzZXJ2ZXI6ICdfZW50cnlBbmltYXRpb25DaGFuZ2VkJyxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSBmb3Igc2V0dGluZyBhbiAnZXhpdCcgYW5pbWF0aW9uLiBEbyBub3Qgc2V0IGBhbmltYXRpb25Db25maWcuZXhpdGBcbiAgICAgKiBtYW51YWxseSBpZiB1c2luZyB0aGlzLiBUaGUgYW5pbWF0ZWQgbm9kZSBpcyBzZXQgdG8gYHRoaXNgIGlmIHVzaW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICovXG4gICAgZXhpdEFuaW1hdGlvbjoge1xuICAgICAgb2JzZXJ2ZXI6ICdfZXhpdEFuaW1hdGlvbkNoYW5nZWQnLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfVxuXG4gIH0sXG5cbiAgX2VudHJ5QW5pbWF0aW9uQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uQ29uZmlnID0gdGhpcy5hbmltYXRpb25Db25maWcgfHwge307XG4gICAgdGhpcy5hbmltYXRpb25Db25maWdbJ2VudHJ5J10gPSBbe1xuICAgICAgbmFtZTogdGhpcy5lbnRyeUFuaW1hdGlvbixcbiAgICAgIG5vZGU6IHRoaXNcbiAgICB9XTtcbiAgfSxcblxuICBfZXhpdEFuaW1hdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkNvbmZpZyA9IHRoaXMuYW5pbWF0aW9uQ29uZmlnIHx8IHt9O1xuICAgIHRoaXMuYW5pbWF0aW9uQ29uZmlnWydleGl0J10gPSBbe1xuICAgICAgbmFtZTogdGhpcy5leGl0QW5pbWF0aW9uLFxuICAgICAgbm9kZTogdGhpc1xuICAgIH1dO1xuICB9LFxuXG4gIF9jb3B5UHJvcGVydGllczogZnVuY3Rpb24gKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgICAvLyBzaGFsbG93bHkgY29weSBwcm9wZXJ0aWVzIGZyb20gY29uZmlnMiB0byBjb25maWcxXG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnMVtwcm9wZXJ0eV0gPSBjb25maWcyW3Byb3BlcnR5XTtcbiAgICB9XG4gIH0sXG5cbiAgX2Nsb25lQ29uZmlnOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdmFyIGNsb25lID0ge1xuICAgICAgaXNDbG9uZTogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5fY29weVByb3BlcnRpZXMoY2xvbmUsIGNvbmZpZyk7XG4gICAgcmV0dXJuIGNsb25lO1xuICB9LFxuXG4gIF9nZXRBbmltYXRpb25Db25maWdSZWN1cnNpdmU6IGZ1bmN0aW9uICh0eXBlLCBtYXAsIGFsbENvbmZpZ3MpIHtcbiAgICBpZiAoIXRoaXMuYW5pbWF0aW9uQ29uZmlnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uQ29uZmlnLnZhbHVlICYmIHR5cGVvZiB0aGlzLmFuaW1hdGlvbkNvbmZpZy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fd2Fybih0aGlzLl9sb2dmKCdwbGF5QW5pbWF0aW9uJywgXCJQbGVhc2UgcHV0ICdhbmltYXRpb25Db25maWcnIGluc2lkZSBvZiB5b3VyIGNvbXBvbmVudHMgJ3Byb3BlcnRpZXMnIG9iamVjdCBpbnN0ZWFkIG9mIG91dHNpZGUgb2YgaXQuXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB0eXBlIGlzIG9wdGlvbmFsXG4gICAgdmFyIHRoaXNDb25maWc7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHRoaXNDb25maWcgPSB0aGlzLmFuaW1hdGlvbkNvbmZpZ1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc0NvbmZpZyA9IHRoaXMuYW5pbWF0aW9uQ29uZmlnO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzQ29uZmlnKSkge1xuICAgICAgdGhpc0NvbmZpZyA9IFt0aGlzQ29uZmlnXTtcbiAgICB9XG5cbiAgICAvLyBpdGVyYXRlIGFuaW1hdGlvbnMgYW5kIHJlY3Vyc2UgdG8gcHJvY2VzcyBjb25maWd1cmF0aW9ucyBmcm9tIGNoaWxkIG5vZGVzXG4gICAgaWYgKHRoaXNDb25maWcpIHtcbiAgICAgIGZvciAodmFyIGNvbmZpZywgaW5kZXggPSAwOyBjb25maWcgPSB0aGlzQ29uZmlnW2luZGV4XTsgaW5kZXgrKykge1xuICAgICAgICBpZiAoY29uZmlnLmFuaW1hdGFibGUpIHtcbiAgICAgICAgICBjb25maWcuYW5pbWF0YWJsZS5fZ2V0QW5pbWF0aW9uQ29uZmlnUmVjdXJzaXZlKGNvbmZpZy50eXBlIHx8IHR5cGUsIG1hcCwgYWxsQ29uZmlncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5pZCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlZENvbmZpZyA9IG1hcFtjb25maWcuaWRdO1xuICAgICAgICAgICAgaWYgKGNhY2hlZENvbmZpZykge1xuICAgICAgICAgICAgICAvLyBtZXJnZSBjb25maWd1cmF0aW9ucyB3aXRoIHRoZSBzYW1lIGlkLCBtYWtpbmcgYSBjbG9uZSBsYXppbHlcbiAgICAgICAgICAgICAgaWYgKCFjYWNoZWRDb25maWcuaXNDbG9uZSkge1xuICAgICAgICAgICAgICAgIG1hcFtjb25maWcuaWRdID0gdGhpcy5fY2xvbmVDb25maWcoY2FjaGVkQ29uZmlnKTtcbiAgICAgICAgICAgICAgICBjYWNoZWRDb25maWcgPSBtYXBbY29uZmlnLmlkXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLl9jb3B5UHJvcGVydGllcyhjYWNoZWRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBwdXQgYW55IGNvbmZpZ3Mgd2l0aCBhbiBpZCBpbnRvIGEgbWFwXG4gICAgICAgICAgICAgIG1hcFtjb25maWcuaWRdID0gY29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGxDb25maWdzLnB1c2goY29uZmlnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFuIGVsZW1lbnQgaW1wbGVtZW50aW5nIGBQb2x5bWVyLk5lb25BbmltYXRpb25SdW5uZXJCZWhhdmlvcmAgY2FsbHMgdGhpcyBtZXRob2QgdG8gY29uZmlndXJlXG4gICAqIGFuIGFuaW1hdGlvbiB3aXRoIGFuIG9wdGlvbmFsIHR5cGUuIEVsZW1lbnRzIGltcGxlbWVudGluZyBgUG9seW1lci5OZW9uQW5pbWF0YWJsZUJlaGF2aW9yYFxuICAgKiBzaG91bGQgZGVmaW5lIHRoZSBwcm9wZXJ0eSBgYW5pbWF0aW9uQ29uZmlnYCwgd2hpY2ggaXMgZWl0aGVyIGEgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICogb3IgYSBtYXAgb2YgYW5pbWF0aW9uIHR5cGUgdG8gYXJyYXkgb2YgY29uZmlndXJhdGlvbiBvYmplY3RzLlxuICAgKi9cbiAgZ2V0QW5pbWF0aW9uQ29uZmlnOiBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBtYXAgPSB7fTtcbiAgICB2YXIgYWxsQ29uZmlncyA9IFtdO1xuICAgIHRoaXMuX2dldEFuaW1hdGlvbkNvbmZpZ1JlY3Vyc2l2ZSh0eXBlLCBtYXAsIGFsbENvbmZpZ3MpO1xuICAgIC8vIGFwcGVuZCB0aGUgY29uZmlndXJhdGlvbnMgc2F2ZWQgaW4gdGhlIG1hcCB0byB0aGUgYXJyYXlcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgICBhbGxDb25maWdzLnB1c2gobWFwW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gYWxsQ29uZmlncztcbiAgfVxuXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9uZW9uLWFuaW1hdGlvbi9uZW9uLWFuaW1hdGFibGUtYmVoYXZpb3IuaHRtbFxuLy8gbW9kdWxlIGlkID0gODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///86\n");

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(88);\n\n(function () {\n  'use strict';\n\n  /**\n  Use `Polymer.PaperDialogBehavior` and `paper-dialog-shared-styles.html` to implement a Material Design\n  dialog.\n  \n  For example, if `<paper-dialog-impl>` implements this behavior:\n  \n      <paper-dialog-impl>\n          <h2>Header</h2>\n          <div>Dialog body</div>\n          <div class=\"buttons\">\n              <paper-button dialog-dismiss>Cancel</paper-button>\n              <paper-button dialog-confirm>Accept</paper-button>\n          </div>\n      </paper-dialog-impl>\n  \n  `paper-dialog-shared-styles.html` provide styles for a header, content area, and an action area for buttons.\n  Use the `<h2>` tag for the header and the `buttons` class for the action area. You can use the\n  `paper-dialog-scrollable` element (in its own repository) if you need a scrolling content area.\n  \n  Use the `dialog-dismiss` and `dialog-confirm` attributes on interactive controls to close the\n  dialog. If the user dismisses the dialog with `dialog-confirm`, the `closingReason` will update\n  to include `confirmed: true`.\n  \n  ### Accessibility\n  \n  This element has `role=\"dialog\"` by default. Depending on the context, it may be more appropriate\n  to override this attribute with `role=\"alertdialog\"`.\n  \n  If `modal` is set, the element will prevent the focus from exiting the element.\n  It will also ensure that focus remains in the dialog.\n  \n  @hero hero.svg\n  @demo demo/index.html\n  @polymerBehavior Polymer.PaperDialogBehavior\n  */\n\n  Polymer.PaperDialogBehaviorImpl = {\n\n    hostAttributes: {\n      'role': 'dialog',\n      'tabindex': '-1'\n    },\n\n    properties: {\n\n      /**\n       * If `modal` is true, this implies `no-cancel-on-outside-click`, `no-cancel-on-esc-key` and `with-backdrop`.\n       */\n      modal: {\n        type: Boolean,\n        value: false\n      },\n\n      __readied: {\n        type: Boolean,\n        value: false\n      }\n\n    },\n\n    observers: ['_modalChanged(modal, __readied)'],\n\n    listeners: {\n      'tap': '_onDialogClick'\n    },\n\n    ready: function () {\n      // Only now these properties can be read.\n      this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;\n      this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;\n      this.__prevWithBackdrop = this.withBackdrop;\n      this.__readied = true;\n    },\n\n    _modalChanged: function (modal, readied) {\n      // modal implies noCancelOnOutsideClick, noCancelOnEscKey and withBackdrop.\n      // We need to wait for the element to be ready before we can read the\n      // properties values.\n      if (!readied) {\n        return;\n      }\n\n      if (modal) {\n        this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;\n        this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;\n        this.__prevWithBackdrop = this.withBackdrop;\n        this.noCancelOnOutsideClick = true;\n        this.noCancelOnEscKey = true;\n        this.withBackdrop = true;\n      } else {\n        // If the value was changed to false, let it false.\n        this.noCancelOnOutsideClick = this.noCancelOnOutsideClick && this.__prevNoCancelOnOutsideClick;\n        this.noCancelOnEscKey = this.noCancelOnEscKey && this.__prevNoCancelOnEscKey;\n        this.withBackdrop = this.withBackdrop && this.__prevWithBackdrop;\n      }\n    },\n\n    _updateClosingReasonConfirmed: function (confirmed) {\n      this.closingReason = this.closingReason || {};\n      this.closingReason.confirmed = confirmed;\n    },\n\n    /**\n     * Will dismiss the dialog if user clicked on an element with dialog-dismiss\n     * or dialog-confirm attribute.\n     */\n    _onDialogClick: function (event) {\n      // Search for the element with dialog-confirm or dialog-dismiss,\n      // from the root target until this (excluded).\n      var path = Polymer.dom(event).path;\n      for (var i = 0, l = path.indexOf(this); i < l; i++) {\n        var target = path[i];\n        if (target.hasAttribute && (target.hasAttribute('dialog-dismiss') || target.hasAttribute('dialog-confirm'))) {\n          this._updateClosingReasonConfirmed(target.hasAttribute('dialog-confirm'));\n          this.close();\n          event.stopPropagation();\n          break;\n        }\n      }\n    }\n\n  };\n\n  /** @polymerBehavior */\n  Polymer.PaperDialogBehavior = [Polymer.IronOverlayBehavior, Polymer.PaperDialogBehaviorImpl];\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWRpYWxvZy1iZWhhdmlvci9wYXBlci1kaWFsb2ctYmVoYXZpb3IuaHRtbD85ZDA2Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1vdmVybGF5LWJlaGF2aW9yL2lyb24tb3ZlcmxheS1iZWhhdmlvci5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgVXNlIGBQb2x5bWVyLlBhcGVyRGlhbG9nQmVoYXZpb3JgIGFuZCBgcGFwZXItZGlhbG9nLXNoYXJlZC1zdHlsZXMuaHRtbGAgdG8gaW1wbGVtZW50IGEgTWF0ZXJpYWwgRGVzaWduXG4gIGRpYWxvZy5cbiAgXG4gIEZvciBleGFtcGxlLCBpZiBgPHBhcGVyLWRpYWxvZy1pbXBsPmAgaW1wbGVtZW50cyB0aGlzIGJlaGF2aW9yOlxuICBcbiAgICAgIDxwYXBlci1kaWFsb2ctaW1wbD5cbiAgICAgICAgICA8aDI+SGVhZGVyPC9oMj5cbiAgICAgICAgICA8ZGl2PkRpYWxvZyBib2R5PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgPHBhcGVyLWJ1dHRvbiBkaWFsb2ctZGlzbWlzcz5DYW5jZWw8L3BhcGVyLWJ1dHRvbj5cbiAgICAgICAgICAgICAgPHBhcGVyLWJ1dHRvbiBkaWFsb2ctY29uZmlybT5BY2NlcHQ8L3BhcGVyLWJ1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvcGFwZXItZGlhbG9nLWltcGw+XG4gIFxuICBgcGFwZXItZGlhbG9nLXNoYXJlZC1zdHlsZXMuaHRtbGAgcHJvdmlkZSBzdHlsZXMgZm9yIGEgaGVhZGVyLCBjb250ZW50IGFyZWEsIGFuZCBhbiBhY3Rpb24gYXJlYSBmb3IgYnV0dG9ucy5cbiAgVXNlIHRoZSBgPGgyPmAgdGFnIGZvciB0aGUgaGVhZGVyIGFuZCB0aGUgYGJ1dHRvbnNgIGNsYXNzIGZvciB0aGUgYWN0aW9uIGFyZWEuIFlvdSBjYW4gdXNlIHRoZVxuICBgcGFwZXItZGlhbG9nLXNjcm9sbGFibGVgIGVsZW1lbnQgKGluIGl0cyBvd24gcmVwb3NpdG9yeSkgaWYgeW91IG5lZWQgYSBzY3JvbGxpbmcgY29udGVudCBhcmVhLlxuICBcbiAgVXNlIHRoZSBgZGlhbG9nLWRpc21pc3NgIGFuZCBgZGlhbG9nLWNvbmZpcm1gIGF0dHJpYnV0ZXMgb24gaW50ZXJhY3RpdmUgY29udHJvbHMgdG8gY2xvc2UgdGhlXG4gIGRpYWxvZy4gSWYgdGhlIHVzZXIgZGlzbWlzc2VzIHRoZSBkaWFsb2cgd2l0aCBgZGlhbG9nLWNvbmZpcm1gLCB0aGUgYGNsb3NpbmdSZWFzb25gIHdpbGwgdXBkYXRlXG4gIHRvIGluY2x1ZGUgYGNvbmZpcm1lZDogdHJ1ZWAuXG4gIFxuICAjIyMgQWNjZXNzaWJpbGl0eVxuICBcbiAgVGhpcyBlbGVtZW50IGhhcyBgcm9sZT1cImRpYWxvZ1wiYCBieSBkZWZhdWx0LiBEZXBlbmRpbmcgb24gdGhlIGNvbnRleHQsIGl0IG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gIHRvIG92ZXJyaWRlIHRoaXMgYXR0cmlidXRlIHdpdGggYHJvbGU9XCJhbGVydGRpYWxvZ1wiYC5cbiAgXG4gIElmIGBtb2RhbGAgaXMgc2V0LCB0aGUgZWxlbWVudCB3aWxsIHByZXZlbnQgdGhlIGZvY3VzIGZyb20gZXhpdGluZyB0aGUgZWxlbWVudC5cbiAgSXQgd2lsbCBhbHNvIGVuc3VyZSB0aGF0IGZvY3VzIHJlbWFpbnMgaW4gdGhlIGRpYWxvZy5cbiAgXG4gIEBoZXJvIGhlcm8uc3ZnXG4gIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJEaWFsb2dCZWhhdmlvclxuICAqL1xuXG4gIFBvbHltZXIuUGFwZXJEaWFsb2dCZWhhdmlvckltcGwgPSB7XG5cbiAgICBob3N0QXR0cmlidXRlczoge1xuICAgICAgJ3JvbGUnOiAnZGlhbG9nJyxcbiAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIElmIGBtb2RhbGAgaXMgdHJ1ZSwgdGhpcyBpbXBsaWVzIGBuby1jYW5jZWwtb24tb3V0c2lkZS1jbGlja2AsIGBuby1jYW5jZWwtb24tZXNjLWtleWAgYW5kIGB3aXRoLWJhY2tkcm9wYC5cbiAgICAgICAqL1xuICAgICAgbW9kYWw6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICBfX3JlYWRpZWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgb2JzZXJ2ZXJzOiBbJ19tb2RhbENoYW5nZWQobW9kYWwsIF9fcmVhZGllZCknXSxcblxuICAgIGxpc3RlbmVyczoge1xuICAgICAgJ3RhcCc6ICdfb25EaWFsb2dDbGljaydcbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIE9ubHkgbm93IHRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIHJlYWQuXG4gICAgICB0aGlzLl9fcHJldk5vQ2FuY2VsT25PdXRzaWRlQ2xpY2sgPSB0aGlzLm5vQ2FuY2VsT25PdXRzaWRlQ2xpY2s7XG4gICAgICB0aGlzLl9fcHJldk5vQ2FuY2VsT25Fc2NLZXkgPSB0aGlzLm5vQ2FuY2VsT25Fc2NLZXk7XG4gICAgICB0aGlzLl9fcHJldldpdGhCYWNrZHJvcCA9IHRoaXMud2l0aEJhY2tkcm9wO1xuICAgICAgdGhpcy5fX3JlYWRpZWQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBfbW9kYWxDaGFuZ2VkOiBmdW5jdGlvbiAobW9kYWwsIHJlYWRpZWQpIHtcbiAgICAgIC8vIG1vZGFsIGltcGxpZXMgbm9DYW5jZWxPbk91dHNpZGVDbGljaywgbm9DYW5jZWxPbkVzY0tleSBhbmQgd2l0aEJhY2tkcm9wLlxuICAgICAgLy8gV2UgbmVlZCB0byB3YWl0IGZvciB0aGUgZWxlbWVudCB0byBiZSByZWFkeSBiZWZvcmUgd2UgY2FuIHJlYWQgdGhlXG4gICAgICAvLyBwcm9wZXJ0aWVzIHZhbHVlcy5cbiAgICAgIGlmICghcmVhZGllZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICB0aGlzLl9fcHJldk5vQ2FuY2VsT25PdXRzaWRlQ2xpY2sgPSB0aGlzLm5vQ2FuY2VsT25PdXRzaWRlQ2xpY2s7XG4gICAgICAgIHRoaXMuX19wcmV2Tm9DYW5jZWxPbkVzY0tleSA9IHRoaXMubm9DYW5jZWxPbkVzY0tleTtcbiAgICAgICAgdGhpcy5fX3ByZXZXaXRoQmFja2Ryb3AgPSB0aGlzLndpdGhCYWNrZHJvcDtcbiAgICAgICAgdGhpcy5ub0NhbmNlbE9uT3V0c2lkZUNsaWNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ub0NhbmNlbE9uRXNjS2V5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aXRoQmFja2Ryb3AgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIHdhcyBjaGFuZ2VkIHRvIGZhbHNlLCBsZXQgaXQgZmFsc2UuXG4gICAgICAgIHRoaXMubm9DYW5jZWxPbk91dHNpZGVDbGljayA9IHRoaXMubm9DYW5jZWxPbk91dHNpZGVDbGljayAmJiB0aGlzLl9fcHJldk5vQ2FuY2VsT25PdXRzaWRlQ2xpY2s7XG4gICAgICAgIHRoaXMubm9DYW5jZWxPbkVzY0tleSA9IHRoaXMubm9DYW5jZWxPbkVzY0tleSAmJiB0aGlzLl9fcHJldk5vQ2FuY2VsT25Fc2NLZXk7XG4gICAgICAgIHRoaXMud2l0aEJhY2tkcm9wID0gdGhpcy53aXRoQmFja2Ryb3AgJiYgdGhpcy5fX3ByZXZXaXRoQmFja2Ryb3A7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF91cGRhdGVDbG9zaW5nUmVhc29uQ29uZmlybWVkOiBmdW5jdGlvbiAoY29uZmlybWVkKSB7XG4gICAgICB0aGlzLmNsb3NpbmdSZWFzb24gPSB0aGlzLmNsb3NpbmdSZWFzb24gfHwge307XG4gICAgICB0aGlzLmNsb3NpbmdSZWFzb24uY29uZmlybWVkID0gY29uZmlybWVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaWxsIGRpc21pc3MgdGhlIGRpYWxvZyBpZiB1c2VyIGNsaWNrZWQgb24gYW4gZWxlbWVudCB3aXRoIGRpYWxvZy1kaXNtaXNzXG4gICAgICogb3IgZGlhbG9nLWNvbmZpcm0gYXR0cmlidXRlLlxuICAgICAqL1xuICAgIF9vbkRpYWxvZ0NsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFNlYXJjaCBmb3IgdGhlIGVsZW1lbnQgd2l0aCBkaWFsb2ctY29uZmlybSBvciBkaWFsb2ctZGlzbWlzcyxcbiAgICAgIC8vIGZyb20gdGhlIHJvb3QgdGFyZ2V0IHVudGlsIHRoaXMgKGV4Y2x1ZGVkKS5cbiAgICAgIHZhciBwYXRoID0gUG9seW1lci5kb20oZXZlbnQpLnBhdGg7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGguaW5kZXhPZih0aGlzKTsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gcGF0aFtpXTtcbiAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUgJiYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RpYWxvZy1kaXNtaXNzJykgfHwgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlhbG9nLWNvbmZpcm0nKSkpIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVDbG9zaW5nUmVhc29uQ29uZmlybWVkKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RpYWxvZy1jb25maXJtJykpO1xuICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICB9O1xuXG4gIC8qKiBAcG9seW1lckJlaGF2aW9yICovXG4gIFBvbHltZXIuUGFwZXJEaWFsb2dCZWhhdmlvciA9IFtQb2x5bWVyLklyb25PdmVybGF5QmVoYXZpb3IsIFBvbHltZXIuUGFwZXJEaWFsb2dCZWhhdmlvckltcGxdO1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItZGlhbG9nLWJlaGF2aW9yL3BhcGVyLWRpYWxvZy1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSA4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87\n");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(89);\n\n__webpack_require__(20);\n\n__webpack_require__(90);\n\n__webpack_require__(92);\n\n__webpack_require__(93);\n\n(function () {\n  'use strict';\n\n  /** @polymerBehavior */\n\n  Polymer.IronOverlayBehaviorImpl = {\n\n    properties: {\n\n      /**\n       * True if the overlay is currently displayed.\n       */\n      opened: {\n        observer: '_openedChanged',\n        type: Boolean,\n        value: false,\n        notify: true\n      },\n\n      /**\n       * True if the overlay was canceled when it was last closed.\n       */\n      canceled: {\n        observer: '_canceledChanged',\n        readOnly: true,\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to display a backdrop behind the overlay. It traps the focus\n       * within the light DOM of the overlay.\n       */\n      withBackdrop: {\n        observer: '_withBackdropChanged',\n        type: Boolean\n      },\n\n      /**\n       * Set to true to disable auto-focusing the overlay or child nodes with\n       * the `autofocus` attribute` when the overlay is opened.\n       */\n      noAutoFocus: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to disable canceling the overlay with the ESC key.\n       */\n      noCancelOnEscKey: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to disable canceling the overlay by clicking outside it.\n       */\n      noCancelOnOutsideClick: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Contains the reason(s) this overlay was last closed (see `iron-overlay-closed`).\n       * `IronOverlayBehavior` provides the `canceled` reason; implementers of the\n       * behavior can provide other reasons in addition to `canceled`.\n       */\n      closingReason: {\n        // was a getter before, but needs to be a property so other\n        // behaviors can override this.\n        type: Object\n      },\n\n      /**\n       * Set to true to enable restoring of focus when overlay is closed.\n       */\n      restoreFocusOnClose: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to allow clicks to go through overlays. \n       * When the user clicks outside this overlay, the click may\n       * close the overlay below.\n       */\n      allowClickThrough: {\n        type: Boolean\n      },\n\n      /**\n       * Set to true to keep overlay always on top.\n       */\n      alwaysOnTop: {\n        type: Boolean\n      },\n\n      /**\n       * Determines which action to perform when scroll outside an opened overlay happens.\n       * Possible values:\n       * lock - blocks scrolling from happening,\n       * refit - computes the new position on the overlay\n       * cancel - causes the overlay to close\n       */\n      scrollAction: {\n        type: String\n      },\n\n      /**\n       * Shortcut to access to the overlay manager.\n       * @private\n       * @type {Polymer.IronOverlayManagerClass}\n       */\n      _manager: {\n        type: Object,\n        value: Polymer.IronOverlayManager\n      },\n\n      /**\n       * The node being focused.\n       * @type {?Node}\n       */\n      _focusedChild: {\n        type: Object\n      }\n\n    },\n\n    listeners: {\n      'iron-resize': '_onIronResize'\n    },\n\n    observers: ['__updateScrollObservers(isAttached, opened, scrollAction)'],\n\n    /**\n     * The backdrop element.\n     * @type {Element}\n     */\n    get backdropElement() {\n      return this._manager.backdropElement;\n    },\n\n    /**\n     * Returns the node to give focus to.\n     * @type {Node}\n     */\n    get _focusNode() {\n      return this._focusedChild || Polymer.dom(this).querySelector('[autofocus]') || this;\n    },\n\n    /**\n     * Array of nodes that can receive focus (overlay included), ordered by `tabindex`.\n     * This is used to retrieve which is the first and last focusable nodes in order\n     * to wrap the focus for overlays `with-backdrop`.\n     *\n     * If you know what is your content (specifically the first and last focusable children),\n     * you can override this method to return only `[firstFocusable, lastFocusable];`\n     * @type {Array<Node>}\n     * @protected\n     */\n    get _focusableNodes() {\n      return Polymer.IronFocusablesHelper.getTabbableNodes(this);\n    },\n\n    ready: function () {\n      // Used to skip calls to notifyResize and refit while the overlay is animating.\n      this.__isAnimating = false;\n      // with-backdrop needs tabindex to be set in order to trap the focus.\n      // If it is not set, IronOverlayBehavior will set it, and remove it if with-backdrop = false.\n      this.__shouldRemoveTabIndex = false;\n      // Used for wrapping the focus on TAB / Shift+TAB.\n      this.__firstFocusableNode = this.__lastFocusableNode = null;\n      // Used by to keep track of the RAF callbacks.\n      this.__rafs = {};\n      // Focused node before overlay gets opened. Can be restored on close.\n      this.__restoreFocusNode = null;\n      // Scroll info to be restored.\n      this.__scrollTop = this.__scrollLeft = null;\n      this.__onCaptureScroll = this.__onCaptureScroll.bind(this);\n      // Root nodes hosting the overlay, used to listen for scroll events on them.\n      this.__rootNodes = null;\n      this._ensureSetup();\n    },\n\n    attached: function () {\n      // Call _openedChanged here so that position can be computed correctly.\n      if (this.opened) {\n        this._openedChanged(this.opened);\n      }\n      this._observer = Polymer.dom(this).observeNodes(this._onNodesChange);\n    },\n\n    detached: function () {\n      Polymer.dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n      for (var cb in this.__rafs) {\n        if (this.__rafs[cb] !== null) {\n          cancelAnimationFrame(this.__rafs[cb]);\n        }\n      }\n      this.__rafs = {};\n      this._manager.removeOverlay(this);\n\n      // We got detached while animating, ensure we show/hide the overlay\n      // and fire iron-overlay-opened/closed event!\n      if (this.__isAnimating) {\n        if (this.opened) {\n          this._finishRenderOpened();\n        } else {\n          // Restore the focus if necessary.\n          this._applyFocus();\n          this._finishRenderClosed();\n        }\n      }\n    },\n\n    /**\n     * Toggle the opened state of the overlay.\n     */\n    toggle: function () {\n      this._setCanceled(false);\n      this.opened = !this.opened;\n    },\n\n    /**\n     * Open the overlay.\n     */\n    open: function () {\n      this._setCanceled(false);\n      this.opened = true;\n    },\n\n    /**\n     * Close the overlay.\n     */\n    close: function () {\n      this._setCanceled(false);\n      this.opened = false;\n    },\n\n    /**\n     * Cancels the overlay.\n     * @param {Event=} event The original event\n     */\n    cancel: function (event) {\n      var cancelEvent = this.fire('iron-overlay-canceled', event, { cancelable: true });\n      if (cancelEvent.defaultPrevented) {\n        return;\n      }\n\n      this._setCanceled(true);\n      this.opened = false;\n    },\n\n    /**\n     * Invalidates the cached tabbable nodes. To be called when any of the focusable\n     * content changes (e.g. a button is disabled).\n     */\n    invalidateTabbables: function () {\n      this.__firstFocusableNode = this.__lastFocusableNode = null;\n    },\n\n    _ensureSetup: function () {\n      if (this._overlaySetup) {\n        return;\n      }\n      this._overlaySetup = true;\n      this.style.outline = 'none';\n      this.style.display = 'none';\n    },\n\n    /**\n     * Called when `opened` changes.\n     * @param {boolean=} opened\n     * @protected\n     */\n    _openedChanged: function (opened) {\n      if (opened) {\n        this.removeAttribute('aria-hidden');\n      } else {\n        this.setAttribute('aria-hidden', 'true');\n      }\n\n      // Defer any animation-related code on attached\n      // (_openedChanged gets called again on attached).\n      if (!this.isAttached) {\n        return;\n      }\n\n      this.__isAnimating = true;\n\n      // Deraf for non-blocking rendering.\n      this.__deraf('__openedChanged', this.__openedChanged);\n    },\n\n    _canceledChanged: function () {\n      this.closingReason = this.closingReason || {};\n      this.closingReason.canceled = this.canceled;\n    },\n\n    _withBackdropChanged: function () {\n      // If tabindex is already set, no need to override it.\n      if (this.withBackdrop && !this.hasAttribute('tabindex')) {\n        this.setAttribute('tabindex', '-1');\n        this.__shouldRemoveTabIndex = true;\n      } else if (this.__shouldRemoveTabIndex) {\n        this.removeAttribute('tabindex');\n        this.__shouldRemoveTabIndex = false;\n      }\n      if (this.opened && this.isAttached) {\n        this._manager.trackBackdrop();\n      }\n    },\n\n    /**\n     * tasks which must occur before opening; e.g. making the element visible.\n     * @protected\n     */\n    _prepareRenderOpened: function () {\n      // Store focused node.\n      this.__restoreFocusNode = this._manager.deepActiveElement;\n\n      // Needed to calculate the size of the overlay so that transitions on its size\n      // will have the correct starting points.\n      this._preparePositioning();\n      this.refit();\n      this._finishPositioning();\n\n      // Safari will apply the focus to the autofocus element when displayed\n      // for the first time, so we make sure to return the focus where it was.\n      if (this.noAutoFocus && document.activeElement === this._focusNode) {\n        this._focusNode.blur();\n        this.__restoreFocusNode.focus();\n      }\n    },\n\n    /**\n     * Tasks which cause the overlay to actually open; typically play an animation.\n     * @protected\n     */\n    _renderOpened: function () {\n      this._finishRenderOpened();\n    },\n\n    /**\n     * Tasks which cause the overlay to actually close; typically play an animation.\n     * @protected\n     */\n    _renderClosed: function () {\n      this._finishRenderClosed();\n    },\n\n    /**\n     * Tasks to be performed at the end of open action. Will fire `iron-overlay-opened`.\n     * @protected\n     */\n    _finishRenderOpened: function () {\n      this.notifyResize();\n      this.__isAnimating = false;\n\n      this.fire('iron-overlay-opened');\n    },\n\n    /**\n     * Tasks to be performed at the end of close action. Will fire `iron-overlay-closed`.\n     * @protected\n     */\n    _finishRenderClosed: function () {\n      // Hide the overlay.\n      this.style.display = 'none';\n      // Reset z-index only at the end of the animation.\n      this.style.zIndex = '';\n      this.notifyResize();\n      this.__isAnimating = false;\n      this.fire('iron-overlay-closed', this.closingReason);\n    },\n\n    _preparePositioning: function () {\n      this.style.transition = this.style.webkitTransition = 'none';\n      this.style.transform = this.style.webkitTransform = 'none';\n      this.style.display = '';\n    },\n\n    _finishPositioning: function () {\n      // First, make it invisible & reactivate animations.\n      this.style.display = 'none';\n      // Force reflow before re-enabling animations so that they don't start.\n      // Set scrollTop to itself so that Closure Compiler doesn't remove this.\n      this.scrollTop = this.scrollTop;\n      this.style.transition = this.style.webkitTransition = '';\n      this.style.transform = this.style.webkitTransform = '';\n      // Now that animations are enabled, make it visible again\n      this.style.display = '';\n      // Force reflow, so that following animations are properly started.\n      // Set scrollTop to itself so that Closure Compiler doesn't remove this.\n      this.scrollTop = this.scrollTop;\n    },\n\n    /**\n     * Applies focus according to the opened state.\n     * @protected\n     */\n    _applyFocus: function () {\n      if (this.opened) {\n        if (!this.noAutoFocus) {\n          this._focusNode.focus();\n        }\n      } else {\n        this._focusNode.blur();\n        this._focusedChild = null;\n        // Restore focus.\n        if (this.restoreFocusOnClose && this.__restoreFocusNode) {\n          // If the activeElement is `<body>` or inside the overlay,\n          // we are allowed to restore the focus. In all the other\n          // cases focus might have been moved elsewhere by another\n          // component or by an user interaction (e.g. click on a\n          // button outside the overlay).\n          var activeElement = this._manager.deepActiveElement;\n          if (activeElement === document.body || Polymer.dom(this).deepContains(activeElement)) {\n            this.__restoreFocusNode.focus();\n          }\n        }\n        this.__restoreFocusNode = null;\n        // If many overlays get closed at the same time, one of them would still\n        // be the currentOverlay even if already closed, and would call _applyFocus\n        // infinitely, so we check for this not to be the current overlay.\n        var currentOverlay = this._manager.currentOverlay();\n        if (currentOverlay && this !== currentOverlay) {\n          currentOverlay._applyFocus();\n        }\n      }\n    },\n\n    /**\n     * Cancels (closes) the overlay. Call when click happens outside the overlay.\n     * @param {!Event} event\n     * @protected\n     */\n    _onCaptureClick: function (event) {\n      if (!this.noCancelOnOutsideClick) {\n        this.cancel(event);\n      }\n    },\n\n    /**\n     * Keeps track of the focused child. If withBackdrop, traps focus within overlay.\n     * @param {!Event} event\n     * @protected\n     */\n    _onCaptureFocus: function (event) {\n      if (!this.withBackdrop) {\n        return;\n      }\n      var path = Polymer.dom(event).path;\n      if (path.indexOf(this) === -1) {\n        event.stopPropagation();\n        this._applyFocus();\n      } else {\n        this._focusedChild = path[0];\n      }\n    },\n\n    /**\n     * Handles the ESC key event and cancels (closes) the overlay.\n     * @param {!Event} event\n     * @protected\n     */\n    _onCaptureEsc: function (event) {\n      if (!this.noCancelOnEscKey) {\n        this.cancel(event);\n      }\n    },\n\n    /**\n     * Handles TAB key events to track focus changes.\n     * Will wrap focus for overlays withBackdrop.\n     * @param {!Event} event\n     * @protected\n     */\n    _onCaptureTab: function (event) {\n      if (!this.withBackdrop) {\n        return;\n      }\n      this.__ensureFirstLastFocusables();\n      // TAB wraps from last to first focusable.\n      // Shift + TAB wraps from first to last focusable.\n      var shift = event.shiftKey;\n      var nodeToCheck = shift ? this.__firstFocusableNode : this.__lastFocusableNode;\n      var nodeToSet = shift ? this.__lastFocusableNode : this.__firstFocusableNode;\n      var shouldWrap = false;\n      if (nodeToCheck === nodeToSet) {\n        // If nodeToCheck is the same as nodeToSet, it means we have an overlay\n        // with 0 or 1 focusables; in either case we still need to trap the\n        // focus within the overlay.\n        shouldWrap = true;\n      } else {\n        // In dom=shadow, the manager will receive focus changes on the main\n        // root but not the ones within other shadow roots, so we can't rely on\n        // _focusedChild, but we should check the deepest active element.\n        var focusedNode = this._manager.deepActiveElement;\n        // If the active element is not the nodeToCheck but the overlay itself,\n        // it means the focus is about to go outside the overlay, hence we\n        // should prevent that (e.g. user opens the overlay and hit Shift+TAB).\n        shouldWrap = focusedNode === nodeToCheck || focusedNode === this;\n      }\n\n      if (shouldWrap) {\n        // When the overlay contains the last focusable element of the document\n        // and it's already focused, pressing TAB would move the focus outside\n        // the document (e.g. to the browser search bar). Similarly, when the\n        // overlay contains the first focusable element of the document and it's\n        // already focused, pressing Shift+TAB would move the focus outside the\n        // document (e.g. to the browser search bar).\n        // In both cases, we would not receive a focus event, but only a blur.\n        // In order to achieve focus wrapping, we prevent this TAB event and\n        // force the focus. This will also prevent the focus to temporarily move\n        // outside the overlay, which might cause scrolling.\n        event.preventDefault();\n        this._focusedChild = nodeToSet;\n        this._applyFocus();\n      }\n    },\n\n    /**\n     * Refits if the overlay is opened and not animating.\n     * @protected\n     */\n    _onIronResize: function () {\n      if (this.opened && !this.__isAnimating) {\n        this.__deraf('refit', this.refit);\n      }\n    },\n\n    /**\n     * Will call notifyResize if overlay is opened.\n     * Can be overridden in order to avoid multiple observers on the same node.\n     * @protected\n     */\n    _onNodesChange: function () {\n      if (this.opened && !this.__isAnimating) {\n        // It might have added focusable nodes, so invalidate cached values.\n        this.invalidateTabbables();\n        this.notifyResize();\n      }\n    },\n\n    /**\n     * Will set first and last focusable nodes if any of them is not set.\n     * @private\n     */\n    __ensureFirstLastFocusables: function () {\n      if (!this.__firstFocusableNode || !this.__lastFocusableNode) {\n        var focusableNodes = this._focusableNodes;\n        this.__firstFocusableNode = focusableNodes[0];\n        this.__lastFocusableNode = focusableNodes[focusableNodes.length - 1];\n      }\n    },\n\n    /**\n     * Tasks executed when opened changes: prepare for the opening, move the\n     * focus, update the manager, render opened/closed.\n     * @private\n     */\n    __openedChanged: function () {\n      if (this.opened) {\n        // Make overlay visible, then add it to the manager.\n        this._prepareRenderOpened();\n        this._manager.addOverlay(this);\n        // Move the focus to the child node with [autofocus].\n        this._applyFocus();\n\n        this._renderOpened();\n      } else {\n        // Remove overlay, then restore the focus before actually closing.\n        this._manager.removeOverlay(this);\n        this._applyFocus();\n\n        this._renderClosed();\n      }\n    },\n\n    /**\n     * Debounces the execution of a callback to the next animation frame.\n     * @param {!string} jobname\n     * @param {!Function} callback Always bound to `this`\n     * @private\n     */\n    __deraf: function (jobname, callback) {\n      var rafs = this.__rafs;\n      if (rafs[jobname] !== null) {\n        cancelAnimationFrame(rafs[jobname]);\n      }\n      rafs[jobname] = requestAnimationFrame(function nextAnimationFrame() {\n        rafs[jobname] = null;\n        callback.call(this);\n      }.bind(this));\n    },\n\n    /**\n     * @param {boolean} isAttached\n     * @param {boolean} opened\n     * @param {string=} scrollAction\n     * @private\n     */\n    __updateScrollObservers: function (isAttached, opened, scrollAction) {\n      if (!isAttached || !opened || !this.__isValidScrollAction(scrollAction)) {\n        Polymer.IronScrollManager.removeScrollLock(this);\n        this.__removeScrollListeners();\n      } else {\n        if (scrollAction === 'lock') {\n          this.__saveScrollPosition();\n          Polymer.IronScrollManager.pushScrollLock(this);\n        }\n        this.__addScrollListeners();\n      }\n    },\n\n    /**\n     * @private\n     */\n    __addScrollListeners: function () {\n      if (!this.__rootNodes) {\n        this.__rootNodes = [];\n        // Listen for scroll events in all shadowRoots hosting this overlay only\n        // when in native ShadowDOM.\n        if ('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) {\n          var node = this;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && node.host) {\n              this.__rootNodes.push(node);\n            }\n            node = node.host || node.assignedSlot || node.parentNode;\n          }\n        }\n        this.__rootNodes.push(document);\n      }\n      this.__rootNodes.forEach(function (el) {\n        el.addEventListener('scroll', this.__onCaptureScroll, {\n          capture: true,\n          passive: true\n        });\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    __removeScrollListeners: function () {\n      if (this.__rootNodes) {\n        this.__rootNodes.forEach(function (el) {\n          el.removeEventListener('scroll', this.__onCaptureScroll, {\n            capture: true,\n            passive: true\n          });\n        }, this);\n      }\n      if (!this.isAttached) {\n        this.__rootNodes = null;\n      }\n    },\n\n    /**\n     * @param {string=} scrollAction\n     * @return {boolean}\n     * @private\n     */\n    __isValidScrollAction: function (scrollAction) {\n      return scrollAction === 'lock' || scrollAction === 'refit' || scrollAction === 'cancel';\n    },\n\n    /**\n     * @private\n     */\n    __onCaptureScroll: function (event) {\n      if (this.__isAnimating) {\n        return;\n      }\n      // Check if scroll outside the overlay.\n      if (Polymer.dom(event).path.indexOf(this) >= 0) {\n        return;\n      }\n      switch (this.scrollAction) {\n        case 'lock':\n          // NOTE: scrolling might happen if a scroll event is not cancellable, or if\n          // user pressed keys that cause scrolling (they're not prevented in order not to\n          // break a11y features like navigate with arrow keys).\n          this.__restoreScrollPosition();\n          break;\n        case 'refit':\n          this.__deraf('refit', this.refit);\n          break;\n        case 'cancel':\n          this.cancel(event);\n          break;\n      }\n    },\n\n    /**\n     * Memoizes the scroll position of the outside scrolling element.\n     * @private\n     */\n    __saveScrollPosition: function () {\n      if (document.scrollingElement) {\n        this.__scrollTop = document.scrollingElement.scrollTop;\n        this.__scrollLeft = document.scrollingElement.scrollLeft;\n      } else {\n        // Since we don't know if is the body or html, get max.\n        this.__scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        this.__scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);\n      }\n    },\n\n    /**\n     * Resets the scroll position of the outside scrolling element.\n     * @private\n     */\n    __restoreScrollPosition: function () {\n      if (document.scrollingElement) {\n        document.scrollingElement.scrollTop = this.__scrollTop;\n        document.scrollingElement.scrollLeft = this.__scrollLeft;\n      } else {\n        // Since we don't know if is the body or html, set both.\n        document.documentElement.scrollTop = document.body.scrollTop = this.__scrollTop;\n        document.documentElement.scrollLeft = document.body.scrollLeft = this.__scrollLeft;\n      }\n    }\n\n  };\n\n  /**\n  Use `Polymer.IronOverlayBehavior` to implement an element that can be hidden or shown, and displays\n  on top of other content. It includes an optional backdrop, and can be used to implement a variety\n  of UI controls including dialogs and drop downs. Multiple overlays may be displayed at once.\n   See the [demo source code](https://github.com/PolymerElements/iron-overlay-behavior/blob/master/demo/simple-overlay.html)\n  for an example.\n   ### Closing and canceling\n   An overlay may be hidden by closing or canceling. The difference between close and cancel is user\n  intent. Closing generally implies that the user acknowledged the content on the overlay. By default,\n  it will cancel whenever the user taps outside it or presses the escape key. This behavior is\n  configurable with the `no-cancel-on-esc-key` and the `no-cancel-on-outside-click` properties.\n  `close()` should be called explicitly by the implementer when the user interacts with a control\n  in the overlay element. When the dialog is canceled, the overlay fires an 'iron-overlay-canceled'\n  event. Call `preventDefault` on this event to prevent the overlay from closing.\n   ### Positioning\n   By default the element is sized and positioned to fit and centered inside the window. You can\n  position and size it manually using CSS. See `Polymer.IronFitBehavior`.\n   ### Backdrop\n   Set the `with-backdrop` attribute to display a backdrop behind the overlay. The backdrop is\n  appended to `<body>` and is of type `<iron-overlay-backdrop>`. See its doc page for styling\n  options.\n   In addition, `with-backdrop` will wrap the focus within the content in the light DOM.\n  Override the [`_focusableNodes` getter](#Polymer.IronOverlayBehavior:property-_focusableNodes)\n  to achieve a different behavior.\n   ### Limitations\n   The element is styled to appear on top of other content by setting its `z-index` property. You\n  must ensure no element has a stacking context with a higher `z-index` than its parent stacking\n  context. You should place this element as a child of `<body>` whenever possible.\n   @demo demo/index.html\n  @polymerBehavior\n  */\n  Polymer.IronOverlayBehavior = [Polymer.IronFitBehavior, Polymer.IronResizableBehavior, Polymer.IronOverlayBehaviorImpl];\n\n  /**\n   * Fired after the overlay opens.\n   * @event iron-overlay-opened\n   */\n\n  /**\n   * Fired when the overlay is canceled, but before it is closed.\n   * @event iron-overlay-canceled\n   * @param {Event} event The closing of the overlay can be prevented\n   * by calling `event.preventDefault()`. The `event.detail` is the original event that\n   * originated the canceling (e.g. ESC keyboard event or click event outside the overlay).\n   */\n\n  /**\n   * Fired after the overlay closes.\n   * @event iron-overlay-closed\n   * @param {Event} event The `event.detail` is the `closingReason` property\n   * (contains `canceled`, whether the overlay was canceled).\n   */\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///88\n");

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/**\n`Polymer.IronFitBehavior` fits an element in another element using `max-height` and `max-width`, and\noptionally centers it in the window or another element.\n\nThe element will only be sized and/or positioned if it has not already been sized and/or positioned\nby CSS.\n\nCSS properties               | Action\n-----------------------------|-------------------------------------------\n`position` set               | Element is not centered horizontally or vertically\n`top` or `bottom` set        | Element is not vertically centered\n`left` or `right` set        | Element is not horizontally centered\n`max-height` set             | Element respects `max-height`\n`max-width` set              | Element respects `max-width`\n\n`Polymer.IronFitBehavior` can position an element into another element using\n`verticalAlign` and `horizontalAlign`. This will override the element's css position.\n\n      <div class=\"container\">\n        <iron-fit-impl vertical-align=\"top\" horizontal-align=\"auto\">\n          Positioned into the container\n        </iron-fit-impl>\n      </div>\n\nUse `noOverlap` to position the element around another element without overlapping it.\n\n      <div class=\"container\">\n        <iron-fit-impl no-overlap vertical-align=\"auto\" horizontal-align=\"auto\">\n          Positioned around the container\n        </iron-fit-impl>\n      </div>\n\nUse `horizontalOffset, verticalOffset` to offset the element from its `positionTarget`;\n`Polymer.IronFitBehavior` will collapse these in order to keep the element\nwithin `fitInto` boundaries, while preserving the element's CSS margin values.\n\n      <div class=\"container\">\n        <iron-fit-impl vertical-align=\"top\" vertical-offset=\"20\">\n          With vertical offset\n        </iron-fit-impl>\n      </div>\n\n\n@demo demo/index.html\n@polymerBehavior\n*/\nPolymer.IronFitBehavior = {\n\n  properties: {\n\n    /**\n     * The element that will receive a `max-height`/`width`. By default it is the same as `this`,\n     * but it can be set to a child element. This is useful, for example, for implementing a\n     * scrolling region inside the element.\n     * @type {!Element}\n     */\n    sizingTarget: {\n      type: Object,\n      value: function () {\n        return this;\n      }\n    },\n\n    /**\n     * The element to fit `this` into.\n     */\n    fitInto: {\n      type: Object,\n      value: window\n    },\n\n    /**\n     * Will position the element around the positionTarget without overlapping it.\n     */\n    noOverlap: {\n      type: Boolean\n    },\n\n    /**\n     * The element that should be used to position the element. If not set, it will\n     * default to the parent node.\n     * @type {!Element}\n     */\n    positionTarget: {\n      type: Element\n    },\n\n    /**\n     * The orientation against which to align the element horizontally\n     * relative to the `positionTarget`. Possible values are \"left\", \"right\", \"center\", \"auto\".\n     */\n    horizontalAlign: {\n      type: String\n    },\n\n    /**\n     * The orientation against which to align the element vertically\n     * relative to the `positionTarget`. Possible values are \"top\", \"bottom\", \"middle\", \"auto\".\n     */\n    verticalAlign: {\n      type: String\n    },\n\n    /**\n     * If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\n     * and if there's not enough space, it will pick the values which minimize the cropping.\n     */\n    dynamicAlign: {\n      type: Boolean\n    },\n\n    /**\n     * A pixel value that will be added to the position calculated for the\n     * given `horizontalAlign`, in the direction of alignment. You can think\n     * of it as increasing or decreasing the distance to the side of the\n     * screen given by `horizontalAlign`.\n     *\n     * If `horizontalAlign` is \"left\" or \"center\", this offset will increase or\n     * decrease the distance to the left side of the screen: a negative offset will\n     * move the dropdown to the left; a positive one, to the right.\n     *\n     * Conversely if `horizontalAlign` is \"right\", this offset will increase\n     * or decrease the distance to the right side of the screen: a negative\n     * offset will move the dropdown to the right; a positive one, to the left.\n     */\n    horizontalOffset: {\n      type: Number,\n      value: 0,\n      notify: true\n    },\n\n    /**\n     * A pixel value that will be added to the position calculated for the\n     * given `verticalAlign`, in the direction of alignment. You can think\n     * of it as increasing or decreasing the distance to the side of the\n     * screen given by `verticalAlign`.\n     *\n     * If `verticalAlign` is \"top\" or \"middle\", this offset will increase or\n     * decrease the distance to the top side of the screen: a negative offset will\n     * move the dropdown upwards; a positive one, downwards.\n     *\n     * Conversely if `verticalAlign` is \"bottom\", this offset will increase\n     * or decrease the distance to the bottom side of the screen: a negative\n     * offset will move the dropdown downwards; a positive one, upwards.\n     */\n    verticalOffset: {\n      type: Number,\n      value: 0,\n      notify: true\n    },\n\n    /**\n     * Set to true to auto-fit on attach.\n     */\n    autoFitOnAttach: {\n      type: Boolean,\n      value: false\n    },\n\n    /** @type {?Object} */\n    _fitInfo: {\n      type: Object\n    }\n  },\n\n  get _fitWidth() {\n    var fitWidth;\n    if (this.fitInto === window) {\n      fitWidth = this.fitInto.innerWidth;\n    } else {\n      fitWidth = this.fitInto.getBoundingClientRect().width;\n    }\n    return fitWidth;\n  },\n\n  get _fitHeight() {\n    var fitHeight;\n    if (this.fitInto === window) {\n      fitHeight = this.fitInto.innerHeight;\n    } else {\n      fitHeight = this.fitInto.getBoundingClientRect().height;\n    }\n    return fitHeight;\n  },\n\n  get _fitLeft() {\n    var fitLeft;\n    if (this.fitInto === window) {\n      fitLeft = 0;\n    } else {\n      fitLeft = this.fitInto.getBoundingClientRect().left;\n    }\n    return fitLeft;\n  },\n\n  get _fitTop() {\n    var fitTop;\n    if (this.fitInto === window) {\n      fitTop = 0;\n    } else {\n      fitTop = this.fitInto.getBoundingClientRect().top;\n    }\n    return fitTop;\n  },\n\n  /**\n   * The element that should be used to position the element,\n   * if no position target is configured.\n   */\n  get _defaultPositionTarget() {\n    var parent = Polymer.dom(this).parentNode;\n\n    if (parent && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      parent = parent.host;\n    }\n\n    return parent;\n  },\n\n  /**\n   * The horizontal align value, accounting for the RTL/LTR text direction.\n   */\n  get _localeHorizontalAlign() {\n    if (this._isRTL) {\n      // In RTL, \"left\" becomes \"right\".\n      if (this.horizontalAlign === 'right') {\n        return 'left';\n      }\n      if (this.horizontalAlign === 'left') {\n        return 'right';\n      }\n    }\n    return this.horizontalAlign;\n  },\n\n  /**\n   * True if the element should be positioned instead of centered.\n   * @private\n   */\n  get __shouldPosition() {\n    return (this.horizontalAlign || this.verticalAlign) && (this.horizontalAlign !== 'center' || this.verticalAlign !== 'middle');\n  },\n\n  attached: function () {\n    // Memoize this to avoid expensive calculations & relayouts.\n    // Make sure we do it only once\n    if (typeof this._isRTL === 'undefined') {\n      this._isRTL = window.getComputedStyle(this).direction == 'rtl';\n    }\n    this.positionTarget = this.positionTarget || this._defaultPositionTarget;\n    if (this.autoFitOnAttach) {\n      if (window.getComputedStyle(this).display === 'none') {\n        setTimeout(function () {\n          this.fit();\n        }.bind(this));\n      } else {\n        // NOTE: shadydom applies distribution asynchronously\n        // for performance reasons webcomponents/shadydom#120\n        // Flush to get correct layout info.\n        window.ShadyDOM && ShadyDOM.flush();\n        this.fit();\n      }\n    }\n  },\n\n  detached: function () {\n    if (this.__deferredFit) {\n      clearTimeout(this.__deferredFit);\n      this.__deferredFit = null;\n    }\n  },\n\n  /**\n   * Positions and fits the element into the `fitInto` element.\n   */\n  fit: function () {\n    this.position();\n    this.constrain();\n    this.center();\n  },\n\n  /**\n   * Memoize information needed to position and size the target element.\n   * @suppress {deprecated}\n   */\n  _discoverInfo: function () {\n    if (this._fitInfo) {\n      return;\n    }\n    var target = window.getComputedStyle(this);\n    var sizer = window.getComputedStyle(this.sizingTarget);\n\n    this._fitInfo = {\n      inlineStyle: {\n        top: this.style.top || '',\n        left: this.style.left || '',\n        position: this.style.position || ''\n      },\n      sizerInlineStyle: {\n        maxWidth: this.sizingTarget.style.maxWidth || '',\n        maxHeight: this.sizingTarget.style.maxHeight || '',\n        boxSizing: this.sizingTarget.style.boxSizing || ''\n      },\n      positionedBy: {\n        vertically: target.top !== 'auto' ? 'top' : target.bottom !== 'auto' ? 'bottom' : null,\n        horizontally: target.left !== 'auto' ? 'left' : target.right !== 'auto' ? 'right' : null\n      },\n      sizedBy: {\n        height: sizer.maxHeight !== 'none',\n        width: sizer.maxWidth !== 'none',\n        minWidth: parseInt(sizer.minWidth, 10) || 0,\n        minHeight: parseInt(sizer.minHeight, 10) || 0\n      },\n      margin: {\n        top: parseInt(target.marginTop, 10) || 0,\n        right: parseInt(target.marginRight, 10) || 0,\n        bottom: parseInt(target.marginBottom, 10) || 0,\n        left: parseInt(target.marginLeft, 10) || 0\n      }\n    };\n  },\n\n  /**\n   * Resets the target element's position and size constraints, and clear\n   * the memoized data.\n   */\n  resetFit: function () {\n    var info = this._fitInfo || {};\n    for (var property in info.sizerInlineStyle) {\n      this.sizingTarget.style[property] = info.sizerInlineStyle[property];\n    }\n    for (var property in info.inlineStyle) {\n      this.style[property] = info.inlineStyle[property];\n    }\n\n    this._fitInfo = null;\n  },\n\n  /**\n   * Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\n   * the element or the `fitInto` element has been resized, or if any of the\n   * positioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\n   * It preserves the scroll position of the sizingTarget.\n   */\n  refit: function () {\n    var scrollLeft = this.sizingTarget.scrollLeft;\n    var scrollTop = this.sizingTarget.scrollTop;\n    this.resetFit();\n    this.fit();\n    this.sizingTarget.scrollLeft = scrollLeft;\n    this.sizingTarget.scrollTop = scrollTop;\n  },\n\n  /**\n   * Positions the element according to `horizontalAlign, verticalAlign`.\n   */\n  position: function () {\n    if (!this.__shouldPosition) {\n      // needs to be centered, and it is done after constrain.\n      return;\n    }\n    this._discoverInfo();\n\n    this.style.position = 'fixed';\n    // Need border-box for margin/padding.\n    this.sizingTarget.style.boxSizing = 'border-box';\n    // Set to 0, 0 in order to discover any offset caused by parent stacking contexts.\n    this.style.left = '0px';\n    this.style.top = '0px';\n\n    var rect = this.getBoundingClientRect();\n    var positionRect = this.__getNormalizedRect(this.positionTarget);\n    var fitRect = this.__getNormalizedRect(this.fitInto);\n\n    var margin = this._fitInfo.margin;\n\n    // Consider the margin as part of the size for position calculations.\n    var size = {\n      width: rect.width + margin.left + margin.right,\n      height: rect.height + margin.top + margin.bottom\n    };\n\n    var position = this.__getPosition(this._localeHorizontalAlign, this.verticalAlign, size, rect, positionRect, fitRect);\n\n    var left = position.left + margin.left;\n    var top = position.top + margin.top;\n\n    // We first limit right/bottom within fitInto respecting the margin,\n    // then use those values to limit top/left.\n    var right = Math.min(fitRect.right - margin.right, left + rect.width);\n    var bottom = Math.min(fitRect.bottom - margin.bottom, top + rect.height);\n\n    // Keep left/top within fitInto respecting the margin.\n    left = Math.max(fitRect.left + margin.left, Math.min(left, right - this._fitInfo.sizedBy.minWidth));\n    top = Math.max(fitRect.top + margin.top, Math.min(top, bottom - this._fitInfo.sizedBy.minHeight));\n\n    // Use right/bottom to set maxWidth/maxHeight, and respect minWidth/minHeight.\n    this.sizingTarget.style.maxWidth = Math.max(right - left, this._fitInfo.sizedBy.minWidth) + 'px';\n    this.sizingTarget.style.maxHeight = Math.max(bottom - top, this._fitInfo.sizedBy.minHeight) + 'px';\n\n    // Remove the offset caused by any stacking context.\n    this.style.left = left - rect.left + 'px';\n    this.style.top = top - rect.top + 'px';\n  },\n\n  /**\n   * Constrains the size of the element to `fitInto` by setting `max-height`\n   * and/or `max-width`.\n   */\n  constrain: function () {\n    if (this.__shouldPosition) {\n      return;\n    }\n    this._discoverInfo();\n\n    var info = this._fitInfo;\n    // position at (0px, 0px) if not already positioned, so we can measure the natural size.\n    if (!info.positionedBy.vertically) {\n      this.style.position = 'fixed';\n      this.style.top = '0px';\n    }\n    if (!info.positionedBy.horizontally) {\n      this.style.position = 'fixed';\n      this.style.left = '0px';\n    }\n\n    // need border-box for margin/padding\n    this.sizingTarget.style.boxSizing = 'border-box';\n    // constrain the width and height if not already set\n    var rect = this.getBoundingClientRect();\n    if (!info.sizedBy.height) {\n      this.__sizeDimension(rect, info.positionedBy.vertically, 'top', 'bottom', 'Height');\n    }\n    if (!info.sizedBy.width) {\n      this.__sizeDimension(rect, info.positionedBy.horizontally, 'left', 'right', 'Width');\n    }\n  },\n\n  /**\n   * @protected\n   * @deprecated\n   */\n  _sizeDimension: function (rect, positionedBy, start, end, extent) {\n    this.__sizeDimension(rect, positionedBy, start, end, extent);\n  },\n\n  /**\n   * @private\n   */\n  __sizeDimension: function (rect, positionedBy, start, end, extent) {\n    var info = this._fitInfo;\n    var fitRect = this.__getNormalizedRect(this.fitInto);\n    var max = extent === 'Width' ? fitRect.width : fitRect.height;\n    var flip = positionedBy === end;\n    var offset = flip ? max - rect[end] : rect[start];\n    var margin = info.margin[flip ? start : end];\n    var offsetExtent = 'offset' + extent;\n    var sizingOffset = this[offsetExtent] - this.sizingTarget[offsetExtent];\n    this.sizingTarget.style['max' + extent] = max - margin - offset - sizingOffset + 'px';\n  },\n\n  /**\n   * Centers horizontally and vertically if not already positioned. This also sets\n   * `position:fixed`.\n   */\n  center: function () {\n    if (this.__shouldPosition) {\n      return;\n    }\n    this._discoverInfo();\n\n    var positionedBy = this._fitInfo.positionedBy;\n    if (positionedBy.vertically && positionedBy.horizontally) {\n      // Already positioned.\n      return;\n    }\n    // Need position:fixed to center\n    this.style.position = 'fixed';\n    // Take into account the offset caused by parents that create stacking\n    // contexts (e.g. with transform: translate3d). Translate to 0,0 and\n    // measure the bounding rect.\n    if (!positionedBy.vertically) {\n      this.style.top = '0px';\n    }\n    if (!positionedBy.horizontally) {\n      this.style.left = '0px';\n    }\n    // It will take in consideration margins and transforms\n    var rect = this.getBoundingClientRect();\n    var fitRect = this.__getNormalizedRect(this.fitInto);\n    if (!positionedBy.vertically) {\n      var top = fitRect.top - rect.top + (fitRect.height - rect.height) / 2;\n      this.style.top = top + 'px';\n    }\n    if (!positionedBy.horizontally) {\n      var left = fitRect.left - rect.left + (fitRect.width - rect.width) / 2;\n      this.style.left = left + 'px';\n    }\n  },\n\n  __getNormalizedRect: function (target) {\n    if (target === document.documentElement || target === window) {\n      return {\n        top: 0,\n        left: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      };\n    }\n    return target.getBoundingClientRect();\n  },\n\n  __getOffscreenArea: function (position, size, fitRect) {\n    var verticalCrop = Math.min(0, position.top) + Math.min(0, fitRect.bottom - (position.top + size.height));\n    var horizontalCrop = Math.min(0, position.left) + Math.min(0, fitRect.right - (position.left + size.width));\n    return Math.abs(verticalCrop) * size.width + Math.abs(horizontalCrop) * size.height;\n  },\n\n  __getPosition: function (hAlign, vAlign, size, sizeNoMargins, positionRect, fitRect) {\n    // All the possible configurations.\n    // Ordered as top-left, top-right, bottom-left, bottom-right.\n    var positions = [{\n      verticalAlign: 'top',\n      horizontalAlign: 'left',\n      top: positionRect.top + this.verticalOffset,\n      left: positionRect.left + this.horizontalOffset\n    }, {\n      verticalAlign: 'top',\n      horizontalAlign: 'right',\n      top: positionRect.top + this.verticalOffset,\n      left: positionRect.right - size.width - this.horizontalOffset\n    }, {\n      verticalAlign: 'bottom',\n      horizontalAlign: 'left',\n      top: positionRect.bottom - size.height - this.verticalOffset,\n      left: positionRect.left + this.horizontalOffset\n    }, {\n      verticalAlign: 'bottom',\n      horizontalAlign: 'right',\n      top: positionRect.bottom - size.height - this.verticalOffset,\n      left: positionRect.right - size.width - this.horizontalOffset\n    }];\n\n    if (this.noOverlap) {\n      // Duplicate.\n      for (var i = 0, l = positions.length; i < l; i++) {\n        var copy = {};\n        for (var key in positions[i]) {\n          copy[key] = positions[i][key];\n        }\n        positions.push(copy);\n      }\n      // Horizontal overlap only.\n      positions[0].top = positions[1].top += positionRect.height;\n      positions[2].top = positions[3].top -= positionRect.height;\n      // Vertical overlap only.\n      positions[4].left = positions[6].left += positionRect.width;\n      positions[5].left = positions[7].left -= positionRect.width;\n    }\n\n    // Consider auto as null for coding convenience.\n    vAlign = vAlign === 'auto' ? null : vAlign;\n    hAlign = hAlign === 'auto' ? null : hAlign;\n\n    if (!hAlign || hAlign === 'center') {\n      positions.push({\n        verticalAlign: 'top',\n        horizontalAlign: 'center',\n        top: positionRect.top + this.verticalOffset + (this.noOverlap ? positionRect.height : 0),\n        left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset\n      });\n      positions.push({\n        verticalAlign: 'bottom',\n        horizontalAlign: 'center',\n        top: positionRect.bottom - size.height - this.verticalOffset - (this.noOverlap ? positionRect.height : 0),\n        left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset\n      });\n    }\n\n    if (!vAlign || vAlign === 'middle') {\n      positions.push({\n        verticalAlign: 'middle',\n        horizontalAlign: 'left',\n        top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset,\n        left: positionRect.left + this.horizontalOffset + (this.noOverlap ? positionRect.width : 0)\n      });\n      positions.push({\n        verticalAlign: 'middle',\n        horizontalAlign: 'right',\n        top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset,\n        left: positionRect.right - size.width - this.horizontalOffset - (this.noOverlap ? positionRect.width : 0)\n      });\n    }\n\n    var position;\n    for (var i = 0; i < positions.length; i++) {\n      var candidate = positions[i];\n      var vAlignOk = candidate.verticalAlign === vAlign;\n      var hAlignOk = candidate.horizontalAlign === hAlign;\n\n      // If both vAlign and hAlign are defined, return exact match.\n      // For dynamicAlign and noOverlap we'll have more than one candidate, so\n      // we'll have to check the offscreenArea to make the best choice.\n      if (!this.dynamicAlign && !this.noOverlap && vAlignOk && hAlignOk) {\n        position = candidate;\n        break;\n      }\n\n      // Align is ok if alignment preferences are respected. If no preferences,\n      // it is considered ok.\n      var alignOk = (!vAlign || vAlignOk) && (!hAlign || hAlignOk);\n\n      // Filter out elements that don't match the alignment (if defined).\n      // With dynamicAlign, we need to consider all the positions to find the\n      // one that minimizes the cropped area.\n      if (!this.dynamicAlign && !alignOk) {\n        continue;\n      }\n\n      candidate.offscreenArea = this.__getOffscreenArea(candidate, size, fitRect);\n      // If not cropped and respects the align requirements, keep it.\n      // This allows to prefer positions overlapping horizontally over the\n      // ones overlapping vertically.\n      if (candidate.offscreenArea === 0 && alignOk) {\n        position = candidate;\n        break;\n      }\n      position = position || candidate;\n      var diff = candidate.offscreenArea - position.offscreenArea;\n      // Check which crops less. If it crops equally, check if at least one\n      // align setting is ok.\n      if (diff < 0 || diff === 0 && (vAlignOk || hAlignOk)) {\n        position = candidate;\n      }\n    }\n\n    return position;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(9);\n\n__webpack_require__(91);\n\n/**\n * @struct\n * @constructor\n * @private\n */\nPolymer.IronOverlayManagerClass = function () {\n  /**\n   * Used to keep track of the opened overlays.\n   * @private {Array<Element>}\n   */\n  this._overlays = [];\n\n  /**\n   * iframes have a default z-index of 100,\n   * so this default should be at least that.\n   * @private {number}\n   */\n  this._minimumZ = 101;\n\n  /**\n   * Memoized backdrop element.\n   * @private {Element|null}\n   */\n  this._backdropElement = null;\n\n  // Enable document-wide tap recognizer.\n  // NOTE: Use useCapture=true to avoid accidentally prevention of the closing\n  // of an overlay via event.stopPropagation(). The only way to prevent\n  // closing of an overlay should be through its APIs.\n  // NOTE: enable tap on <html> to workaround Polymer/polymer#4459\n  // Pass no-op function because MSEdge 15 doesn't handle null as 2nd argument\n  // https://github.com/Microsoft/ChakraCore/issues/3863\n  Polymer.Gestures.add(document.documentElement, 'tap', function () {});\n  document.addEventListener('tap', this._onCaptureClick.bind(this), true);\n  document.addEventListener('focus', this._onCaptureFocus.bind(this), true);\n  document.addEventListener('keydown', this._onCaptureKeyDown.bind(this), true);\n};\n\nPolymer.IronOverlayManagerClass.prototype = {\n\n  constructor: Polymer.IronOverlayManagerClass,\n\n  /**\n   * The shared backdrop element.\n   * @type {!Element} backdropElement\n   */\n  get backdropElement() {\n    if (!this._backdropElement) {\n      this._backdropElement = document.createElement('iron-overlay-backdrop');\n    }\n    return this._backdropElement;\n  },\n\n  /**\n   * The deepest active element.\n   * @type {!Element} activeElement the active element\n   */\n  get deepActiveElement() {\n    var active = document.activeElement;\n    // document.activeElement can be null\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\n    // In IE 11, it can also be an object when operating in iframes.\n    // In these cases, default it to document.body.\n    if (!active || active instanceof Element === false) {\n      active = document.body;\n    }\n    while (active.root && Polymer.dom(active.root).activeElement) {\n      active = Polymer.dom(active.root).activeElement;\n    }\n    return active;\n  },\n\n  /**\n   * Brings the overlay at the specified index to the front.\n   * @param {number} i\n   * @private\n   */\n  _bringOverlayAtIndexToFront: function (i) {\n    var overlay = this._overlays[i];\n    if (!overlay) {\n      return;\n    }\n    var lastI = this._overlays.length - 1;\n    var currentOverlay = this._overlays[lastI];\n    // Ensure always-on-top overlay stays on top.\n    if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) {\n      lastI--;\n    }\n    // If already the top element, return.\n    if (i >= lastI) {\n      return;\n    }\n    // Update z-index to be on top.\n    var minimumZ = Math.max(this.currentOverlayZ(), this._minimumZ);\n    if (this._getZ(overlay) <= minimumZ) {\n      this._applyOverlayZ(overlay, minimumZ);\n    }\n\n    // Shift other overlays behind the new on top.\n    while (i < lastI) {\n      this._overlays[i] = this._overlays[i + 1];\n      i++;\n    }\n    this._overlays[lastI] = overlay;\n  },\n\n  /**\n   * Adds the overlay and updates its z-index if it's opened, or removes it if it's closed.\n   * Also updates the backdrop z-index.\n   * @param {!Element} overlay\n   */\n  addOrRemoveOverlay: function (overlay) {\n    if (overlay.opened) {\n      this.addOverlay(overlay);\n    } else {\n      this.removeOverlay(overlay);\n    }\n  },\n\n  /**\n   * Tracks overlays for z-index and focus management.\n   * Ensures the last added overlay with always-on-top remains on top.\n   * @param {!Element} overlay\n   */\n  addOverlay: function (overlay) {\n    var i = this._overlays.indexOf(overlay);\n    if (i >= 0) {\n      this._bringOverlayAtIndexToFront(i);\n      this.trackBackdrop();\n      return;\n    }\n    var insertionIndex = this._overlays.length;\n    var currentOverlay = this._overlays[insertionIndex - 1];\n    var minimumZ = Math.max(this._getZ(currentOverlay), this._minimumZ);\n    var newZ = this._getZ(overlay);\n\n    // Ensure always-on-top overlay stays on top.\n    if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) {\n      // This bumps the z-index of +2.\n      this._applyOverlayZ(currentOverlay, minimumZ);\n      insertionIndex--;\n      // Update minimumZ to match previous overlay's z-index.\n      var previousOverlay = this._overlays[insertionIndex - 1];\n      minimumZ = Math.max(this._getZ(previousOverlay), this._minimumZ);\n    }\n\n    // Update z-index and insert overlay.\n    if (newZ <= minimumZ) {\n      this._applyOverlayZ(overlay, minimumZ);\n    }\n    this._overlays.splice(insertionIndex, 0, overlay);\n\n    this.trackBackdrop();\n  },\n\n  /**\n   * @param {!Element} overlay\n   */\n  removeOverlay: function (overlay) {\n    var i = this._overlays.indexOf(overlay);\n    if (i === -1) {\n      return;\n    }\n    this._overlays.splice(i, 1);\n\n    this.trackBackdrop();\n  },\n\n  /**\n   * Returns the current overlay.\n   * @return {Element|undefined}\n   */\n  currentOverlay: function () {\n    var i = this._overlays.length - 1;\n    return this._overlays[i];\n  },\n\n  /**\n   * Returns the current overlay z-index.\n   * @return {number}\n   */\n  currentOverlayZ: function () {\n    return this._getZ(this.currentOverlay());\n  },\n\n  /**\n   * Ensures that the minimum z-index of new overlays is at least `minimumZ`.\n   * This does not effect the z-index of any existing overlays.\n   * @param {number} minimumZ\n   */\n  ensureMinimumZ: function (minimumZ) {\n    this._minimumZ = Math.max(this._minimumZ, minimumZ);\n  },\n\n  focusOverlay: function () {\n    var current = /** @type {?} */this.currentOverlay();\n    if (current) {\n      current._applyFocus();\n    }\n  },\n\n  /**\n   * Updates the backdrop z-index.\n   */\n  trackBackdrop: function () {\n    var overlay = this._overlayWithBackdrop();\n    // Avoid creating the backdrop if there is no overlay with backdrop.\n    if (!overlay && !this._backdropElement) {\n      return;\n    }\n    this.backdropElement.style.zIndex = this._getZ(overlay) - 1;\n    this.backdropElement.opened = !!overlay;\n    // Property observers are not fired until element is attached\n    // in Polymer 2.x, so we ensure element is attached if needed.\n    // https://github.com/Polymer/polymer/issues/4526\n    this.backdropElement.prepare();\n  },\n\n  /**\n   * @return {Array<Element>}\n   */\n  getBackdrops: function () {\n    var backdrops = [];\n    for (var i = 0; i < this._overlays.length; i++) {\n      if (this._overlays[i].withBackdrop) {\n        backdrops.push(this._overlays[i]);\n      }\n    }\n    return backdrops;\n  },\n\n  /**\n   * Returns the z-index for the backdrop.\n   * @return {number}\n   */\n  backdropZ: function () {\n    return this._getZ(this._overlayWithBackdrop()) - 1;\n  },\n\n  /**\n   * Returns the first opened overlay that has a backdrop.\n   * @return {Element|undefined}\n   * @private\n   */\n  _overlayWithBackdrop: function () {\n    for (var i = 0; i < this._overlays.length; i++) {\n      if (this._overlays[i].withBackdrop) {\n        return this._overlays[i];\n      }\n    }\n  },\n\n  /**\n   * Calculates the minimum z-index for the overlay.\n   * @param {Element=} overlay\n   * @private\n   */\n  _getZ: function (overlay) {\n    var z = this._minimumZ;\n    if (overlay) {\n      var z1 = Number(overlay.style.zIndex || window.getComputedStyle(overlay).zIndex);\n      // Check if is a number\n      // Number.isNaN not supported in IE 10+\n      if (z1 === z1) {\n        z = z1;\n      }\n    }\n    return z;\n  },\n\n  /**\n   * @param {!Element} element\n   * @param {number|string} z\n   * @private\n   */\n  _setZ: function (element, z) {\n    element.style.zIndex = z;\n  },\n\n  /**\n   * @param {!Element} overlay\n   * @param {number} aboveZ\n   * @private\n   */\n  _applyOverlayZ: function (overlay, aboveZ) {\n    this._setZ(overlay, aboveZ + 2);\n  },\n\n  /**\n   * Returns the deepest overlay in the path.\n   * @param {Array<Element>=} path\n   * @return {Element|undefined}\n   * @suppress {missingProperties}\n   * @private\n   */\n  _overlayInPath: function (path) {\n    path = path || [];\n    for (var i = 0; i < path.length; i++) {\n      if (path[i]._manager === this) {\n        return path[i];\n      }\n    }\n  },\n\n  /**\n   * Ensures the click event is delegated to the right overlay.\n   * @param {!Event} event\n   * @private\n   */\n  _onCaptureClick: function (event) {\n    var i = this._overlays.length - 1;\n    if (i === -1) return;\n    var path = Polymer.dom(event).path;\n    var overlay;\n    // Check if clicked outside of overlay.\n    while ((overlay = /** @type {?} */this._overlays[i]) && this._overlayInPath(path) !== overlay) {\n      overlay._onCaptureClick(event);\n      if (overlay.allowClickThrough) {\n        i--;\n      } else {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Ensures the focus event is delegated to the right overlay.\n   * @param {!Event} event\n   * @private\n   */\n  _onCaptureFocus: function (event) {\n    var overlay = /** @type {?} */this.currentOverlay();\n    if (overlay) {\n      overlay._onCaptureFocus(event);\n    }\n  },\n\n  /**\n   * Ensures TAB and ESC keyboard events are delegated to the right overlay.\n   * @param {!Event} event\n   * @private\n   */\n  _onCaptureKeyDown: function (event) {\n    var overlay = /** @type {?} */this.currentOverlay();\n    if (overlay) {\n      if (Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(event, 'esc')) {\n        overlay._onCaptureEsc(event);\n      } else if (Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(event, 'tab')) {\n        overlay._onCaptureTab(event);\n      }\n    }\n  },\n\n  /**\n   * Returns if the overlay1 should be behind overlay2.\n   * @param {!Element} overlay1\n   * @param {!Element} overlay2\n   * @return {boolean}\n   * @suppress {missingProperties}\n   * @private\n   */\n  _shouldBeBehindOverlay: function (overlay1, overlay2) {\n    return !overlay1.alwaysOnTop && overlay2.alwaysOnTop;\n  }\n};\n\nPolymer.IronOverlayManager = new Polymer.IronOverlayManagerClass();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n");

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-overlay-backdrop> <template> <style>:host{position:fixed;top:0;left:0;width:100%;height:100%;background-color:var(--iron-overlay-backdrop-background-color,#000);opacity:0;transition:opacity .2s;pointer-events:none;@apply --iron-overlay-backdrop;}:host(.opened){opacity:var(--iron-overlay-backdrop-opacity,.6);pointer-events:auto;@apply --iron-overlay-backdrop-opened;}</style> <slot></slot> </template> </dom-module>\");\n\n(function () {\n  'use strict';\n\n  Polymer({\n\n    is: 'iron-overlay-backdrop',\n\n    properties: {\n\n      /**\n       * Returns true if the backdrop is opened.\n       */\n      opened: {\n        reflectToAttribute: true,\n        type: Boolean,\n        value: false,\n        observer: '_openedChanged'\n      }\n\n    },\n\n    listeners: {\n      'transitionend': '_onTransitionend'\n    },\n\n    created: function () {\n      // Used to cancel previous requestAnimationFrame calls when opened changes.\n      this.__openedRaf = null;\n    },\n\n    attached: function () {\n      this.opened && this._openedChanged(this.opened);\n    },\n\n    /**\n     * Appends the backdrop to document body if needed.\n     */\n    prepare: function () {\n      if (this.opened && !this.parentNode) {\n        Polymer.dom(document.body).appendChild(this);\n      }\n    },\n\n    /**\n     * Shows the backdrop.\n     */\n    open: function () {\n      this.opened = true;\n    },\n\n    /**\n     * Hides the backdrop.\n     */\n    close: function () {\n      this.opened = false;\n    },\n\n    /**\n     * Removes the backdrop from document body if needed.\n     */\n    complete: function () {\n      if (!this.opened && this.parentNode === document.body) {\n        Polymer.dom(this.parentNode).removeChild(this);\n      }\n    },\n\n    _onTransitionend: function (event) {\n      if (event && event.target === this) {\n        this.complete();\n      }\n    },\n\n    /**\n     * @param {boolean} opened\n     * @private\n     */\n    _openedChanged: function (opened) {\n      if (opened) {\n        // Auto-attach.\n        this.prepare();\n      } else {\n        // Animation might be disabled via the mixin or opacity custom property.\n        // If it is disabled in other ways, it's up to the user to call complete.\n        var cs = window.getComputedStyle(this);\n        if (cs.transitionDuration === '0s' || cs.opacity == 0) {\n          this.complete();\n        }\n      }\n\n      if (!this.isAttached) {\n        return;\n      }\n\n      // Always cancel previous requestAnimationFrame.\n      if (this.__openedRaf) {\n        window.cancelAnimationFrame(this.__openedRaf);\n        this.__openedRaf = null;\n      }\n      // Force relayout to ensure proper transitions.\n      this.scrollTop = this.scrollTop;\n      this.__openedRaf = window.requestAnimationFrame(function () {\n        this.__openedRaf = null;\n        this.toggleClass('opened', this.opened);\n      }.bind(this));\n    }\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tb3ZlcmxheS1iZWhhdmlvci9pcm9uLW92ZXJsYXktYmFja2Ryb3AuaHRtbD9iNDJhIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pcm9uLW92ZXJsYXktYmFja2Ryb3A+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0e3Bvc2l0aW9uOmZpeGVkO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQtY29sb3I6dmFyKC0taXJvbi1vdmVybGF5LWJhY2tkcm9wLWJhY2tncm91bmQtY29sb3IsIzAwMCk7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuMnM7cG9pbnRlci1ldmVudHM6bm9uZTtAYXBwbHkgLS1pcm9uLW92ZXJsYXktYmFja2Ryb3A7fTpob3N0KC5vcGVuZWQpe29wYWNpdHk6dmFyKC0taXJvbi1vdmVybGF5LWJhY2tkcm9wLW9wYWNpdHksLjYpO3BvaW50ZXItZXZlbnRzOmF1dG87QGFwcGx5IC0taXJvbi1vdmVybGF5LWJhY2tkcm9wLW9wZW5lZDt9PC9zdHlsZT4gPHNsb3Q+PC9zbG90PiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgUG9seW1lcih7XG5cbiAgICBpczogJ2lyb24tb3ZlcmxheS1iYWNrZHJvcCcsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBiYWNrZHJvcCBpcyBvcGVuZWQuXG4gICAgICAgKi9cbiAgICAgIG9wZW5lZDoge1xuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfb3BlbmVkQ2hhbmdlZCdcbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICd0cmFuc2l0aW9uZW5kJzogJ19vblRyYW5zaXRpb25lbmQnXG4gICAgfSxcblxuICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFVzZWQgdG8gY2FuY2VsIHByZXZpb3VzIHJlcXVlc3RBbmltYXRpb25GcmFtZSBjYWxscyB3aGVuIG9wZW5lZCBjaGFuZ2VzLlxuICAgICAgdGhpcy5fX29wZW5lZFJhZiA9IG51bGw7XG4gICAgfSxcblxuICAgIGF0dGFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm9wZW5lZCAmJiB0aGlzLl9vcGVuZWRDaGFuZ2VkKHRoaXMub3BlbmVkKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgYmFja2Ryb3AgdG8gZG9jdW1lbnQgYm9keSBpZiBuZWVkZWQuXG4gICAgICovXG4gICAgcHJlcGFyZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMub3BlbmVkICYmICF0aGlzLnBhcmVudE5vZGUpIHtcbiAgICAgICAgUG9seW1lci5kb20oZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBiYWNrZHJvcC5cbiAgICAgKi9cbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm9wZW5lZCA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBiYWNrZHJvcC5cbiAgICAgKi9cbiAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5vcGVuZWQgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgYmFja2Ryb3AgZnJvbSBkb2N1bWVudCBib2R5IGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLm9wZW5lZCAmJiB0aGlzLnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgUG9seW1lci5kb20odGhpcy5wYXJlbnROb2RlKS5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uVHJhbnNpdGlvbmVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcGVuZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9vcGVuZWRDaGFuZ2VkOiBmdW5jdGlvbiAob3BlbmVkKSB7XG4gICAgICBpZiAob3BlbmVkKSB7XG4gICAgICAgIC8vIEF1dG8tYXR0YWNoLlxuICAgICAgICB0aGlzLnByZXBhcmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFuaW1hdGlvbiBtaWdodCBiZSBkaXNhYmxlZCB2aWEgdGhlIG1peGluIG9yIG9wYWNpdHkgY3VzdG9tIHByb3BlcnR5LlxuICAgICAgICAvLyBJZiBpdCBpcyBkaXNhYmxlZCBpbiBvdGhlciB3YXlzLCBpdCdzIHVwIHRvIHRoZSB1c2VyIHRvIGNhbGwgY29tcGxldGUuXG4gICAgICAgIHZhciBjcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpO1xuICAgICAgICBpZiAoY3MudHJhbnNpdGlvbkR1cmF0aW9uID09PSAnMHMnIHx8IGNzLm9wYWNpdHkgPT0gMCkge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEFsd2F5cyBjYW5jZWwgcHJldmlvdXMgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLlxuICAgICAgaWYgKHRoaXMuX19vcGVuZWRSYWYpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX19vcGVuZWRSYWYpO1xuICAgICAgICB0aGlzLl9fb3BlbmVkUmFmID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIEZvcmNlIHJlbGF5b3V0IHRvIGVuc3VyZSBwcm9wZXIgdHJhbnNpdGlvbnMuXG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5fX29wZW5lZFJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9fb3BlbmVkUmFmID0gbnVsbDtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcygnb3BlbmVkJywgdGhpcy5vcGVuZWQpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1vdmVybGF5LWJlaGF2aW9yL2lyb24tb3ZlcmxheS1iYWNrZHJvcC5odG1sXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///91\n");

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n  /**\n   * Used to calculate the scroll direction during touch events.\n   * @type {!Object}\n   */\n\n  var lastTouchPosition = {\n    pageX: 0,\n    pageY: 0\n  };\n  /**\n   * Used to avoid computing event.path and filter scrollable nodes (better perf).\n   * @type {?EventTarget}\n   */\n  var lastRootTarget = null;\n  /**\n   * @type {!Array<Node>}\n   */\n  var lastScrollableNodes = [];\n  /**\n   * @type {!Array<string>}\n   */\n  var scrollEvents = [\n  // Modern `wheel` event for mouse wheel scrolling:\n  'wheel',\n  // Older, non-standard `mousewheel` event for some FF:\n  'mousewheel',\n  // IE:\n  'DOMMouseScroll',\n  // Touch enabled devices\n  'touchstart', 'touchmove'];\n\n  /**\n   * The IronScrollManager is intended to provide a central source\n   * of authority and control over which elements in a document are currently\n   * allowed to scroll.\n   */\n\n  Polymer.IronScrollManager = {\n\n    /**\n     * The current element that defines the DOM boundaries of the\n     * scroll lock. This is always the most recently locking element.\n     */\n    get currentLockingElement() {\n      return this._lockingElements[this._lockingElements.length - 1];\n    },\n\n    /**\n     * Returns true if the provided element is \"scroll locked\", which is to\n     * say that it cannot be scrolled via pointer or keyboard interactions.\n     *\n     * @param {HTMLElement} element An HTML element instance which may or may\n     * not be scroll locked.\n     */\n    elementIsScrollLocked: function (element) {\n      var currentLockingElement = this.currentLockingElement;\n\n      if (currentLockingElement === undefined) return false;\n\n      var scrollLocked;\n\n      if (this._hasCachedLockedElement(element)) {\n        return true;\n      }\n\n      if (this._hasCachedUnlockedElement(element)) {\n        return false;\n      }\n\n      scrollLocked = !!currentLockingElement && currentLockingElement !== element && !this._composedTreeContains(currentLockingElement, element);\n\n      if (scrollLocked) {\n        this._lockedElementCache.push(element);\n      } else {\n        this._unlockedElementCache.push(element);\n      }\n\n      return scrollLocked;\n    },\n\n    /**\n     * Push an element onto the current scroll lock stack. The most recently\n     * pushed element and its children will be considered scrollable. All\n     * other elements will not be scrollable.\n     *\n     * Scroll locking is implemented as a stack so that cases such as\n     * dropdowns within dropdowns are handled well.\n     *\n     * @param {HTMLElement} element The element that should lock scroll.\n     */\n    pushScrollLock: function (element) {\n      // Prevent pushing the same element twice\n      if (this._lockingElements.indexOf(element) >= 0) {\n        return;\n      }\n\n      if (this._lockingElements.length === 0) {\n        this._lockScrollInteractions();\n      }\n\n      this._lockingElements.push(element);\n\n      this._lockedElementCache = [];\n      this._unlockedElementCache = [];\n    },\n\n    /**\n     * Remove an element from the scroll lock stack. The element being\n     * removed does not need to be the most recently pushed element. However,\n     * the scroll lock constraints only change when the most recently pushed\n     * element is removed.\n     *\n     * @param {HTMLElement} element The element to remove from the scroll\n     * lock stack.\n     */\n    removeScrollLock: function (element) {\n      var index = this._lockingElements.indexOf(element);\n\n      if (index === -1) {\n        return;\n      }\n\n      this._lockingElements.splice(index, 1);\n\n      this._lockedElementCache = [];\n      this._unlockedElementCache = [];\n\n      if (this._lockingElements.length === 0) {\n        this._unlockScrollInteractions();\n      }\n    },\n\n    _lockingElements: [],\n\n    _lockedElementCache: null,\n\n    _unlockedElementCache: null,\n\n    _hasCachedLockedElement: function (element) {\n      return this._lockedElementCache.indexOf(element) > -1;\n    },\n\n    _hasCachedUnlockedElement: function (element) {\n      return this._unlockedElementCache.indexOf(element) > -1;\n    },\n\n    _composedTreeContains: function (element, child) {\n      // NOTE(cdata): This method iterates over content elements and their\n      // corresponding distributed nodes to implement a contains-like method\n      // that pierces through the composed tree of the ShadowDOM. Results of\n      // this operation are cached (elsewhere) on a per-scroll-lock basis, to\n      // guard against potentially expensive lookups happening repeatedly as\n      // a user scrolls / touchmoves.\n      var contentElements;\n      var distributedNodes;\n      var contentIndex;\n      var nodeIndex;\n\n      if (element.contains(child)) {\n        return true;\n      }\n\n      contentElements = Polymer.dom(element).querySelectorAll('content,slot');\n\n      for (contentIndex = 0; contentIndex < contentElements.length; ++contentIndex) {\n\n        distributedNodes = Polymer.dom(contentElements[contentIndex]).getDistributedNodes();\n\n        for (nodeIndex = 0; nodeIndex < distributedNodes.length; ++nodeIndex) {\n          // Polymer 2.x returns slot.assignedNodes which can contain text nodes.\n          if (distributedNodes[nodeIndex].nodeType !== Node.ELEMENT_NODE) continue;\n\n          if (this._composedTreeContains(distributedNodes[nodeIndex], child)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    _scrollInteractionHandler: function (event) {\n      // Avoid canceling an event with cancelable=false, e.g. scrolling is in\n      // progress and cannot be interrupted.\n      if (event.cancelable && this._shouldPreventScrolling(event)) {\n        event.preventDefault();\n      }\n      // If event has targetTouches (touch event), update last touch position.\n      if (event.targetTouches) {\n        var touch = event.targetTouches[0];\n        lastTouchPosition.pageX = touch.pageX;\n        lastTouchPosition.pageY = touch.pageY;\n      }\n    },\n\n    _lockScrollInteractions: function () {\n      this._boundScrollHandler = this._boundScrollHandler || this._scrollInteractionHandler.bind(this);\n      for (var i = 0, l = scrollEvents.length; i < l; i++) {\n        // NOTE: browsers that don't support objects as third arg will\n        // interpret it as boolean, hence useCapture = true in this case. \n        document.addEventListener(scrollEvents[i], this._boundScrollHandler, {\n          capture: true,\n          passive: false\n        });\n      }\n    },\n\n    _unlockScrollInteractions: function () {\n      for (var i = 0, l = scrollEvents.length; i < l; i++) {\n        // NOTE: browsers that don't support objects as third arg will\n        // interpret it as boolean, hence useCapture = true in this case.\n        document.removeEventListener(scrollEvents[i], this._boundScrollHandler, {\n          capture: true,\n          passive: false\n        });\n      }\n    },\n\n    /**\n     * Returns true if the event causes scroll outside the current locking\n     * element, e.g. pointer/keyboard interactions, or scroll \"leaking\"\n     * outside the locking element when it is already at its scroll boundaries.\n     * @param {!Event} event\n     * @return {boolean}\n     * @private\n     */\n    _shouldPreventScrolling: function (event) {\n\n      // Update if root target changed. For touch events, ensure we don't\n      // update during touchmove.\n      var target = Polymer.dom(event).rootTarget;\n      if (event.type !== 'touchmove' && lastRootTarget !== target) {\n        lastRootTarget = target;\n        lastScrollableNodes = this._getScrollableNodes(Polymer.dom(event).path);\n      }\n\n      // Prevent event if no scrollable nodes.\n      if (!lastScrollableNodes.length) {\n        return true;\n      }\n      // Don't prevent touchstart event inside the locking element when it has\n      // scrollable nodes.\n      if (event.type === 'touchstart') {\n        return false;\n      }\n      // Get deltaX/Y.\n      var info = this._getScrollInfo(event);\n      // Prevent if there is no child that can scroll.\n      return !this._getScrollingNode(lastScrollableNodes, info.deltaX, info.deltaY);\n    },\n\n    /**\n     * Returns an array of scrollable nodes up to the current locking element,\n     * which is included too if scrollable.\n     * @param {!Array<Node>} nodes\n     * @return {Array<Node>} scrollables\n     * @private\n     */\n    _getScrollableNodes: function (nodes) {\n      var scrollables = [];\n      var lockingIndex = nodes.indexOf(this.currentLockingElement);\n      // Loop from root target to locking element (included).\n      for (var i = 0; i <= lockingIndex; i++) {\n        // Skip non-Element nodes.\n        if (nodes[i].nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n        var node = /** @type {!Element} */nodes[i];\n        // Check inline style before checking computed style.\n        var style = node.style;\n        if (style.overflow !== 'scroll' && style.overflow !== 'auto') {\n          style = window.getComputedStyle(node);\n        }\n        if (style.overflow === 'scroll' || style.overflow === 'auto') {\n          scrollables.push(node);\n        }\n      }\n      return scrollables;\n    },\n\n    /**\n     * Returns the node that is scrolling. If there is no scrolling,\n     * returns undefined.\n     * @param {!Array<Node>} nodes\n     * @param {number} deltaX Scroll delta on the x-axis\n     * @param {number} deltaY Scroll delta on the y-axis\n     * @return {Node|undefined}\n     * @private\n     */\n    _getScrollingNode: function (nodes, deltaX, deltaY) {\n      // No scroll.\n      if (!deltaX && !deltaY) {\n        return;\n      }\n      // Check only one axis according to where there is more scroll.\n      // Prefer vertical to horizontal.\n      var verticalScroll = Math.abs(deltaY) >= Math.abs(deltaX);\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var canScroll = false;\n        if (verticalScroll) {\n          // delta < 0 is scroll up, delta > 0 is scroll down.\n          canScroll = deltaY < 0 ? node.scrollTop > 0 : node.scrollTop < node.scrollHeight - node.clientHeight;\n        } else {\n          // delta < 0 is scroll left, delta > 0 is scroll right.\n          canScroll = deltaX < 0 ? node.scrollLeft > 0 : node.scrollLeft < node.scrollWidth - node.clientWidth;\n        }\n        if (canScroll) {\n          return node;\n        }\n      }\n    },\n\n    /**\n     * Returns scroll `deltaX` and `deltaY`.\n     * @param {!Event} event The scroll event\n     * @return {{deltaX: number, deltaY: number}} Object containing the\n     * x-axis scroll delta (positive: scroll right, negative: scroll left,\n     * 0: no scroll), and the y-axis scroll delta (positive: scroll down,\n     * negative: scroll up, 0: no scroll).\n     * @private\n     */\n    _getScrollInfo: function (event) {\n      var info = {\n        deltaX: event.deltaX,\n        deltaY: event.deltaY\n      };\n      // Already available.\n      if ('deltaX' in event) {}\n      // do nothing, values are already good.\n\n      // Safari has scroll info in `wheelDeltaX/Y`.\n      else if ('wheelDeltaX' in event && 'wheelDeltaY' in event) {\n          info.deltaX = -event.wheelDeltaX;\n          info.deltaY = -event.wheelDeltaY;\n        }\n        // IE10 has only vertical scroll info in `wheelDelta`.\n        else if ('wheelDelta' in event) {\n            info.deltaX = 0;\n            info.deltaY = -event.wheelDelta;\n          }\n          // Firefox has scroll info in `detail` and `axis`.\n          else if ('axis' in event) {\n              info.deltaX = event.axis === 1 ? event.detail : 0;\n              info.deltaY = event.axis === 2 ? event.detail : 0;\n            }\n            // On mobile devices, calculate scroll direction.\n            else if (event.targetTouches) {\n                var touch = event.targetTouches[0];\n                // Touch moves from right to left => scrolling goes right.\n                info.deltaX = lastTouchPosition.pageX - touch.pageX;\n                // Touch moves from down to up => scrolling goes down.\n                info.deltaY = lastTouchPosition.pageY - touch.pageY;\n              }\n      return info;\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92\n");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  var p = Element.prototype;\n  var matches = p.matches || p.matchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector || p.webkitMatchesSelector;\n\n  Polymer.IronFocusablesHelper = {\n\n    /**\n     * Returns a sorted array of tabbable nodes, including the root node.\n     * It searches the tabbable nodes in the light and shadow dom of the chidren,\n     * sorting the result by tabindex.\n     * @param {!Node} node\n     * @return {Array<HTMLElement>}\n     */\n    getTabbableNodes: function (node) {\n      var result = [];\n      // If there is at least one element with tabindex > 0, we need to sort\n      // the final array by tabindex.\n      var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n      if (needsSortByTabIndex) {\n        return this._sortByTabIndex(result);\n      }\n      return result;\n    },\n\n    /**\n     * Returns if a element is focusable.\n     * @param {!HTMLElement} element\n     * @return {boolean}\n     */\n    isFocusable: function (element) {\n      // From http://stackoverflow.com/a/1600194/4228703:\n      // There isn't a definite list, it's up to the browser. The only\n      // standard we have is DOM Level 2 HTML https://www.w3.org/TR/DOM-Level-2-HTML/html.html,\n      // according to which the only elements that have a focus() method are\n      // HTMLInputElement,  HTMLSelectElement, HTMLTextAreaElement and\n      // HTMLAnchorElement. This notably omits HTMLButtonElement and\n      // HTMLAreaElement.\n      // Referring to these tests with tabbables in different browsers\n      // http://allyjs.io/data-tables/focusable.html\n\n      // Elements that cannot be focused if they have [disabled] attribute.\n      if (matches.call(element, 'input, select, textarea, button, object')) {\n        return matches.call(element, ':not([disabled])');\n      }\n      // Elements that can be focused even if they have [disabled] attribute.\n      return matches.call(element, 'a[href], area[href], iframe, [tabindex], [contentEditable]');\n    },\n\n    /**\n     * Returns if a element is tabbable. To be tabbable, a element must be\n     * focusable, visible, and with a tabindex !== -1.\n     * @param {!HTMLElement} element\n     * @return {boolean}\n     */\n    isTabbable: function (element) {\n      return this.isFocusable(element) && matches.call(element, ':not([tabindex=\"-1\"])') && this._isVisible(element);\n    },\n\n    /**\n     * Returns the normalized element tabindex. If not focusable, returns -1.\n     * It checks for the attribute \"tabindex\" instead of the element property\n     * `tabIndex` since browsers assign different values to it.\n     * e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`\n     * @param {!HTMLElement} element\n     * @return {!number}\n     * @private\n     */\n    _normalizedTabIndex: function (element) {\n      if (this.isFocusable(element)) {\n        var tabIndex = element.getAttribute('tabindex') || 0;\n        return Number(tabIndex);\n      }\n      return -1;\n    },\n\n    /**\n     * Searches for nodes that are tabbable and adds them to the `result` array.\n     * Returns if the `result` array needs to be sorted by tabindex.\n     * @param {!Node} node The starting point for the search; added to `result`\n     * if tabbable.\n     * @param {!Array<HTMLElement>} result\n     * @return {boolean}\n     * @private\n     */\n    _collectTabbableNodes: function (node, result) {\n      // If not an element or not visible, no need to explore children.\n      if (node.nodeType !== Node.ELEMENT_NODE || !this._isVisible(node)) {\n        return false;\n      }\n      var element = /** @type {HTMLElement} */node;\n      var tabIndex = this._normalizedTabIndex(element);\n      var needsSort = tabIndex > 0;\n      if (tabIndex >= 0) {\n        result.push(element);\n      }\n\n      // In ShadowDOM v1, tab order is affected by the order of distrubution.\n      // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n      // in ShadowDOM v0 tab order is not affected by the distrubution order,\n      // in fact getTabbableNodes(#root) returns [#B, #A].\n      //  <div id=\"root\">\n      //   <!-- shadow -->\n      //     <slot name=\"a\">\n      //     <slot name=\"b\">\n      //   <!-- /shadow -->\n      //   <input id=\"A\" slot=\"a\">\n      //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n      //  </div>\n      // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n      var children;\n      if (element.localName === 'content' || element.localName === 'slot') {\n        children = Polymer.dom(element).getDistributedNodes();\n      } else {\n        // Use shadow root if possible, will check for distributed nodes.\n        children = Polymer.dom(element.root || element).children;\n      }\n      for (var i = 0; i < children.length; i++) {\n        // Ensure method is always invoked to collect tabbable children.\n        needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n      }\n      return needsSort;\n    },\n\n    /**\n     * Returns false if the element has `visibility: hidden` or `display: none`\n     * @param {!HTMLElement} element\n     * @return {boolean}\n     * @private\n     */\n    _isVisible: function (element) {\n      // Check inline style first to save a re-flow. If looks good, check also\n      // computed style.\n      var style = element.style;\n      if (style.visibility !== 'hidden' && style.display !== 'none') {\n        style = window.getComputedStyle(element);\n        return style.visibility !== 'hidden' && style.display !== 'none';\n      }\n      return false;\n    },\n\n    /**\n     * Sorts an array of tabbable elements by tabindex. Returns a new array.\n     * @param {!Array<HTMLElement>} tabbables\n     * @return {Array<HTMLElement>}\n     * @private\n     */\n    _sortByTabIndex: function (tabbables) {\n      // Implement a merge sort as Array.prototype.sort does a non-stable sort\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n      var len = tabbables.length;\n      if (len < 2) {\n        return tabbables;\n      }\n      var pivot = Math.ceil(len / 2);\n      var left = this._sortByTabIndex(tabbables.slice(0, pivot));\n      var right = this._sortByTabIndex(tabbables.slice(pivot));\n      return this._mergeSortByTabIndex(left, right);\n    },\n\n    /**\n     * Merge sort iterator, merges the two arrays into one, sorted by tab index.\n     * @param {!Array<HTMLElement>} left\n     * @param {!Array<HTMLElement>} right\n     * @return {Array<HTMLElement>}\n     * @private\n     */\n    _mergeSortByTabIndex: function (left, right) {\n      var result = [];\n      while (left.length > 0 && right.length > 0) {\n        if (this._hasLowerTabOrder(left[0], right[0])) {\n          result.push(right.shift());\n        } else {\n          result.push(left.shift());\n        }\n      }\n\n      return result.concat(left, right);\n    },\n\n    /**\n     * Returns if element `a` has lower tab order compared to element `b`\n     * (both elements are assumed to be focusable and tabbable).\n     * Elements with tabindex = 0 have lower tab order compared to elements\n     * with tabindex > 0.\n     * If both have same tabindex, it returns false.\n     * @param {!HTMLElement} a\n     * @param {!HTMLElement} b\n     * @return {boolean}\n     * @private\n     */\n    _hasLowerTabOrder: function (a, b) {\n      // Normalize tabIndexes\n      // e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`\n      var ati = Math.max(a.tabIndex, 0);\n      var bti = Math.max(b.tabIndex, 0);\n      return ati === 0 || bti === 0 ? bti > ati : ati > bti;\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tb3ZlcmxheS1iZWhhdmlvci9pcm9uLWZvY3VzYWJsZXMtaGVscGVyLmh0bWw/YTM0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuICB2YXIgbWF0Y2hlcyA9IHAubWF0Y2hlcyB8fCBwLm1hdGNoZXNTZWxlY3RvciB8fCBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IHAub01hdGNoZXNTZWxlY3RvciB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuICBQb2x5bWVyLklyb25Gb2N1c2FibGVzSGVscGVyID0ge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNvcnRlZCBhcnJheSBvZiB0YWJiYWJsZSBub2RlcywgaW5jbHVkaW5nIHRoZSByb290IG5vZGUuXG4gICAgICogSXQgc2VhcmNoZXMgdGhlIHRhYmJhYmxlIG5vZGVzIGluIHRoZSBsaWdodCBhbmQgc2hhZG93IGRvbSBvZiB0aGUgY2hpZHJlbixcbiAgICAgKiBzb3J0aW5nIHRoZSByZXN1bHQgYnkgdGFiaW5kZXguXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAqIEByZXR1cm4ge0FycmF5PEhUTUxFbGVtZW50Pn1cbiAgICAgKi9cbiAgICBnZXRUYWJiYWJsZU5vZGVzOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgLy8gSWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGVsZW1lbnQgd2l0aCB0YWJpbmRleCA+IDAsIHdlIG5lZWQgdG8gc29ydFxuICAgICAgLy8gdGhlIGZpbmFsIGFycmF5IGJ5IHRhYmluZGV4LlxuICAgICAgdmFyIG5lZWRzU29ydEJ5VGFiSW5kZXggPSB0aGlzLl9jb2xsZWN0VGFiYmFibGVOb2Rlcyhub2RlLCByZXN1bHQpO1xuICAgICAgaWYgKG5lZWRzU29ydEJ5VGFiSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRCeVRhYkluZGV4KHJlc3VsdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIGEgZWxlbWVudCBpcyBmb2N1c2FibGUuXG4gICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzRm9jdXNhYmxlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjAwMTk0LzQyMjg3MDM6XG4gICAgICAvLyBUaGVyZSBpc24ndCBhIGRlZmluaXRlIGxpc3QsIGl0J3MgdXAgdG8gdGhlIGJyb3dzZXIuIFRoZSBvbmx5XG4gICAgICAvLyBzdGFuZGFyZCB3ZSBoYXZlIGlzIERPTSBMZXZlbCAyIEhUTUwgaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sLFxuICAgICAgLy8gYWNjb3JkaW5nIHRvIHdoaWNoIHRoZSBvbmx5IGVsZW1lbnRzIHRoYXQgaGF2ZSBhIGZvY3VzKCkgbWV0aG9kIGFyZVxuICAgICAgLy8gSFRNTElucHV0RWxlbWVudCwgIEhUTUxTZWxlY3RFbGVtZW50LCBIVE1MVGV4dEFyZWFFbGVtZW50IGFuZFxuICAgICAgLy8gSFRNTEFuY2hvckVsZW1lbnQuIFRoaXMgbm90YWJseSBvbWl0cyBIVE1MQnV0dG9uRWxlbWVudCBhbmRcbiAgICAgIC8vIEhUTUxBcmVhRWxlbWVudC5cbiAgICAgIC8vIFJlZmVycmluZyB0byB0aGVzZSB0ZXN0cyB3aXRoIHRhYmJhYmxlcyBpbiBkaWZmZXJlbnQgYnJvd3NlcnNcbiAgICAgIC8vIGh0dHA6Ly9hbGx5anMuaW8vZGF0YS10YWJsZXMvZm9jdXNhYmxlLmh0bWxcblxuICAgICAgLy8gRWxlbWVudHMgdGhhdCBjYW5ub3QgYmUgZm9jdXNlZCBpZiB0aGV5IGhhdmUgW2Rpc2FibGVkXSBhdHRyaWJ1dGUuXG4gICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsICdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYnV0dG9uLCBvYmplY3QnKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlcy5jYWxsKGVsZW1lbnQsICc6bm90KFtkaXNhYmxlZF0pJyk7XG4gICAgICB9XG4gICAgICAvLyBFbGVtZW50cyB0aGF0IGNhbiBiZSBmb2N1c2VkIGV2ZW4gaWYgdGhleSBoYXZlIFtkaXNhYmxlZF0gYXR0cmlidXRlLlxuICAgICAgcmV0dXJuIG1hdGNoZXMuY2FsbChlbGVtZW50LCAnYVtocmVmXSwgYXJlYVtocmVmXSwgaWZyYW1lLCBbdGFiaW5kZXhdLCBbY29udGVudEVkaXRhYmxlXScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIGEgZWxlbWVudCBpcyB0YWJiYWJsZS4gVG8gYmUgdGFiYmFibGUsIGEgZWxlbWVudCBtdXN0IGJlXG4gICAgICogZm9jdXNhYmxlLCB2aXNpYmxlLCBhbmQgd2l0aCBhIHRhYmluZGV4ICE9PSAtMS5cbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNUYWJiYWJsZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzRm9jdXNhYmxlKGVsZW1lbnQpICYmIG1hdGNoZXMuY2FsbChlbGVtZW50LCAnOm5vdChbdGFiaW5kZXg9XCItMVwiXSknKSAmJiB0aGlzLl9pc1Zpc2libGUoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgZWxlbWVudCB0YWJpbmRleC4gSWYgbm90IGZvY3VzYWJsZSwgcmV0dXJucyAtMS5cbiAgICAgKiBJdCBjaGVja3MgZm9yIHRoZSBhdHRyaWJ1dGUgXCJ0YWJpbmRleFwiIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgcHJvcGVydHlcbiAgICAgKiBgdGFiSW5kZXhgIHNpbmNlIGJyb3dzZXJzIGFzc2lnbiBkaWZmZXJlbnQgdmFsdWVzIHRvIGl0LlxuICAgICAqIGUuZy4gaW4gRmlyZWZveCBgPGRpdiBjb250ZW50ZWRpdGFibGU+YCBoYXMgYHRhYkluZGV4ID0gLTFgXG4gICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHshbnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX25vcm1hbGl6ZWRUYWJJbmRleDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLmlzRm9jdXNhYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgIHZhciB0YWJJbmRleCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpIHx8IDA7XG4gICAgICAgIHJldHVybiBOdW1iZXIodGFiSW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3Igbm9kZXMgdGhhdCBhcmUgdGFiYmFibGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgYHJlc3VsdGAgYXJyYXkuXG4gICAgICogUmV0dXJucyBpZiB0aGUgYHJlc3VsdGAgYXJyYXkgbmVlZHMgdG8gYmUgc29ydGVkIGJ5IHRhYmluZGV4LlxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIHN0YXJ0aW5nIHBvaW50IGZvciB0aGUgc2VhcmNoOyBhZGRlZCB0byBgcmVzdWx0YFxuICAgICAqIGlmIHRhYmJhYmxlLlxuICAgICAqIEBwYXJhbSB7IUFycmF5PEhUTUxFbGVtZW50Pn0gcmVzdWx0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jb2xsZWN0VGFiYmFibGVOb2RlczogZnVuY3Rpb24gKG5vZGUsIHJlc3VsdCkge1xuICAgICAgLy8gSWYgbm90IGFuIGVsZW1lbnQgb3Igbm90IHZpc2libGUsIG5vIG5lZWQgdG8gZXhwbG9yZSBjaGlsZHJlbi5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSB8fCAhdGhpcy5faXNWaXNpYmxlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBlbGVtZW50ID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9ub2RlO1xuICAgICAgdmFyIHRhYkluZGV4ID0gdGhpcy5fbm9ybWFsaXplZFRhYkluZGV4KGVsZW1lbnQpO1xuICAgICAgdmFyIG5lZWRzU29ydCA9IHRhYkluZGV4ID4gMDtcbiAgICAgIGlmICh0YWJJbmRleCA+PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbiBTaGFkb3dET00gdjEsIHRhYiBvcmRlciBpcyBhZmZlY3RlZCBieSB0aGUgb3JkZXIgb2YgZGlzdHJ1YnV0aW9uLlxuICAgICAgLy8gRS5nLiBnZXRUYWJiYWJsZU5vZGVzKCNyb290KSBpbiBTaGFkb3dET00gdjEgc2hvdWxkIHJldHVybiBbI0EsICNCXTtcbiAgICAgIC8vIGluIFNoYWRvd0RPTSB2MCB0YWIgb3JkZXIgaXMgbm90IGFmZmVjdGVkIGJ5IHRoZSBkaXN0cnVidXRpb24gb3JkZXIsXG4gICAgICAvLyBpbiBmYWN0IGdldFRhYmJhYmxlTm9kZXMoI3Jvb3QpIHJldHVybnMgWyNCLCAjQV0uXG4gICAgICAvLyAgPGRpdiBpZD1cInJvb3RcIj5cbiAgICAgIC8vICAgPCEtLSBzaGFkb3cgLS0+XG4gICAgICAvLyAgICAgPHNsb3QgbmFtZT1cImFcIj5cbiAgICAgIC8vICAgICA8c2xvdCBuYW1lPVwiYlwiPlxuICAgICAgLy8gICA8IS0tIC9zaGFkb3cgLS0+XG4gICAgICAvLyAgIDxpbnB1dCBpZD1cIkFcIiBzbG90PVwiYVwiPlxuICAgICAgLy8gICA8aW5wdXQgaWQ9XCJCXCIgc2xvdD1cImJcIiB0YWJpbmRleD1cIjFcIj5cbiAgICAgIC8vICA8L2Rpdj5cbiAgICAgIC8vIFRPRE8odmFsZHJpbikgc3VwcG9ydCBTaGFkb3dET00gdjEgd2hlbiB1cGdyYWRpbmcgdG8gUG9seW1lciB2Mi4wLlxuICAgICAgdmFyIGNoaWxkcmVuO1xuICAgICAgaWYgKGVsZW1lbnQubG9jYWxOYW1lID09PSAnY29udGVudCcgfHwgZWxlbWVudC5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgICAgICBjaGlsZHJlbiA9IFBvbHltZXIuZG9tKGVsZW1lbnQpLmdldERpc3RyaWJ1dGVkTm9kZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVzZSBzaGFkb3cgcm9vdCBpZiBwb3NzaWJsZSwgd2lsbCBjaGVjayBmb3IgZGlzdHJpYnV0ZWQgbm9kZXMuXG4gICAgICAgIGNoaWxkcmVuID0gUG9seW1lci5kb20oZWxlbWVudC5yb290IHx8IGVsZW1lbnQpLmNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBFbnN1cmUgbWV0aG9kIGlzIGFsd2F5cyBpbnZva2VkIHRvIGNvbGxlY3QgdGFiYmFibGUgY2hpbGRyZW4uXG4gICAgICAgIG5lZWRzU29ydCA9IHRoaXMuX2NvbGxlY3RUYWJiYWJsZU5vZGVzKGNoaWxkcmVuW2ldLCByZXN1bHQpIHx8IG5lZWRzU29ydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZWVkc1NvcnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZmFsc2UgaWYgdGhlIGVsZW1lbnQgaGFzIGB2aXNpYmlsaXR5OiBoaWRkZW5gIG9yIGBkaXNwbGF5OiBub25lYFxuICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pc1Zpc2libGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAvLyBDaGVjayBpbmxpbmUgc3R5bGUgZmlyc3QgdG8gc2F2ZSBhIHJlLWZsb3cuIElmIGxvb2tzIGdvb2QsIGNoZWNrIGFsc29cbiAgICAgIC8vIGNvbXB1dGVkIHN0eWxlLlxuICAgICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZTtcbiAgICAgIGlmIChzdHlsZS52aXNpYmlsaXR5ICE9PSAnaGlkZGVuJyAmJiBzdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHN0eWxlLnZpc2liaWxpdHkgIT09ICdoaWRkZW4nICYmIHN0eWxlLmRpc3BsYXkgIT09ICdub25lJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU29ydHMgYW4gYXJyYXkgb2YgdGFiYmFibGUgZWxlbWVudHMgYnkgdGFiaW5kZXguIFJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICogQHBhcmFtIHshQXJyYXk8SFRNTEVsZW1lbnQ+fSB0YWJiYWJsZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheTxIVE1MRWxlbWVudD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc29ydEJ5VGFiSW5kZXg6IGZ1bmN0aW9uICh0YWJiYWJsZXMpIHtcbiAgICAgIC8vIEltcGxlbWVudCBhIG1lcmdlIHNvcnQgYXMgQXJyYXkucHJvdG90eXBlLnNvcnQgZG9lcyBhIG5vbi1zdGFibGUgc29ydFxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29ydFxuICAgICAgdmFyIGxlbiA9IHRhYmJhYmxlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuIDwgMikge1xuICAgICAgICByZXR1cm4gdGFiYmFibGVzO1xuICAgICAgfVxuICAgICAgdmFyIHBpdm90ID0gTWF0aC5jZWlsKGxlbiAvIDIpO1xuICAgICAgdmFyIGxlZnQgPSB0aGlzLl9zb3J0QnlUYWJJbmRleCh0YWJiYWJsZXMuc2xpY2UoMCwgcGl2b3QpKTtcbiAgICAgIHZhciByaWdodCA9IHRoaXMuX3NvcnRCeVRhYkluZGV4KHRhYmJhYmxlcy5zbGljZShwaXZvdCkpO1xuICAgICAgcmV0dXJuIHRoaXMuX21lcmdlU29ydEJ5VGFiSW5kZXgobGVmdCwgcmlnaHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBzb3J0IGl0ZXJhdG9yLCBtZXJnZXMgdGhlIHR3byBhcnJheXMgaW50byBvbmUsIHNvcnRlZCBieSB0YWIgaW5kZXguXG4gICAgICogQHBhcmFtIHshQXJyYXk8SFRNTEVsZW1lbnQ+fSBsZWZ0XG4gICAgICogQHBhcmFtIHshQXJyYXk8SFRNTEVsZW1lbnQ+fSByaWdodFxuICAgICAqIEByZXR1cm4ge0FycmF5PEhUTUxFbGVtZW50Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tZXJnZVNvcnRCeVRhYkluZGV4OiBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChsZWZ0Lmxlbmd0aCA+IDAgJiYgcmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAodGhpcy5faGFzTG93ZXJUYWJPcmRlcihsZWZ0WzBdLCByaWdodFswXSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChyaWdodC5zaGlmdCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChsZWZ0LnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KGxlZnQsIHJpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiBlbGVtZW50IGBhYCBoYXMgbG93ZXIgdGFiIG9yZGVyIGNvbXBhcmVkIHRvIGVsZW1lbnQgYGJgXG4gICAgICogKGJvdGggZWxlbWVudHMgYXJlIGFzc3VtZWQgdG8gYmUgZm9jdXNhYmxlIGFuZCB0YWJiYWJsZSkuXG4gICAgICogRWxlbWVudHMgd2l0aCB0YWJpbmRleCA9IDAgaGF2ZSBsb3dlciB0YWIgb3JkZXIgY29tcGFyZWQgdG8gZWxlbWVudHNcbiAgICAgKiB3aXRoIHRhYmluZGV4ID4gMC5cbiAgICAgKiBJZiBib3RoIGhhdmUgc2FtZSB0YWJpbmRleCwgaXQgcmV0dXJucyBmYWxzZS5cbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gYVxuICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBiXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oYXNMb3dlclRhYk9yZGVyOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gTm9ybWFsaXplIHRhYkluZGV4ZXNcbiAgICAgIC8vIGUuZy4gaW4gRmlyZWZveCBgPGRpdiBjb250ZW50ZWRpdGFibGU+YCBoYXMgYHRhYkluZGV4ID0gLTFgXG4gICAgICB2YXIgYXRpID0gTWF0aC5tYXgoYS50YWJJbmRleCwgMCk7XG4gICAgICB2YXIgYnRpID0gTWF0aC5tYXgoYi50YWJJbmRleCwgMCk7XG4gICAgICByZXR1cm4gYXRpID09PSAwIHx8IGJ0aSA9PT0gMCA/IGJ0aSA+IGF0aSA6IGF0aSA+IGJ0aTtcbiAgICB9XG4gIH07XG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLW92ZXJsYXktYmVoYXZpb3IvaXJvbi1mb2N1c2FibGVzLWhlbHBlci5odG1sXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93\n");

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(6);\n\n__webpack_require__(7);\n\n__webpack_require__(5);\n\n__webpack_require__(37);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-dialog-shared-styles> <template> <style>:host{display:block;margin:24px 40px;background:var(--paper-dialog-background-color,var(--primary-background-color));color:var(--paper-dialog-color,var(--primary-text-color));@apply --paper-font-body1;@apply --shadow-elevation-16dp;@apply --paper-dialog;}:host>::slotted(*){margin-top:20px;padding:0 24px}:host>::slotted(.no-padding){padding:0}:host>::slotted(h2){position:relative;margin:0;@apply --paper-font-title;@apply --paper-dialog-title;}:host>::slotted(:first-child){margin-top:24px}:host>::slotted(:last-child){margin-bottom:24px}:host>::slotted(.buttons){position:relative;padding:8px 8px 8px 24px;margin:0;color:var(--paper-dialog-button-color,var(--primary-color));@apply --layout-horizontal;@apply --layout-end-justified;}</style> </template> </dom-module>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWRpYWxvZy1iZWhhdmlvci9wYXBlci1kaWFsb2ctc2hhcmVkLXN0eWxlcy5odG1sP2QyYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLWZsZXgtbGF5b3V0L2lyb24tZmxleC1sYXlvdXQuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1zdHlsZXMvZGVmYXVsdC10aGVtZS5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLXN0eWxlcy90eXBvZ3JhcGh5Lmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItc3R5bGVzL3NoYWRvdy5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItZGlhbG9nLXNoYXJlZC1zdHlsZXM+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0e2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjI0cHggNDBweDtiYWNrZ3JvdW5kOnZhcigtLXBhcGVyLWRpYWxvZy1iYWNrZ3JvdW5kLWNvbG9yLHZhcigtLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcikpO2NvbG9yOnZhcigtLXBhcGVyLWRpYWxvZy1jb2xvcix2YXIoLS1wcmltYXJ5LXRleHQtY29sb3IpKTtAYXBwbHkgLS1wYXBlci1mb250LWJvZHkxO0BhcHBseSAtLXNoYWRvdy1lbGV2YXRpb24tMTZkcDtAYXBwbHkgLS1wYXBlci1kaWFsb2c7fTpob3N0Pjo6c2xvdHRlZCgqKXttYXJnaW4tdG9wOjIwcHg7cGFkZGluZzowIDI0cHh9Omhvc3Q+OjpzbG90dGVkKC5uby1wYWRkaW5nKXtwYWRkaW5nOjB9Omhvc3Q+OjpzbG90dGVkKGgyKXtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW46MDtAYXBwbHkgLS1wYXBlci1mb250LXRpdGxlO0BhcHBseSAtLXBhcGVyLWRpYWxvZy10aXRsZTt9Omhvc3Q+OjpzbG90dGVkKDpmaXJzdC1jaGlsZCl7bWFyZ2luLXRvcDoyNHB4fTpob3N0Pjo6c2xvdHRlZCg6bGFzdC1jaGlsZCl7bWFyZ2luLWJvdHRvbToyNHB4fTpob3N0Pjo6c2xvdHRlZCguYnV0dG9ucyl7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzo4cHggOHB4IDhweCAyNHB4O21hcmdpbjowO2NvbG9yOnZhcigtLXBhcGVyLWRpYWxvZy1idXR0b24tY29sb3IsdmFyKC0tcHJpbWFyeS1jb2xvcikpO0BhcHBseSAtLWxheW91dC1ob3Jpem9udGFsO0BhcHBseSAtLWxheW91dC1lbmQtanVzdGlmaWVkO308L3N0eWxlPiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1kaWFsb2ctYmVoYXZpb3IvcGFwZXItZGlhbG9nLXNoYXJlZC1zdHlsZXMuaHRtbFxuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94\n");

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(5);\n\n__webpack_require__(96);\n\n__webpack_require__(99);\n\n__webpack_require__(102);\n\n__webpack_require__(41);\n\n__webpack_require__(22);\n\n__webpack_require__(26);\n\n__webpack_require__(26);\n\n__webpack_require__(110);\n\n__webpack_require__(111);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=image-input-view> <template> <style>@keyframes fadeIn{from{opacity:0}to{opacity:1}}:host{width:100%}.card-content{display:flex;align-items:center;justify-content:center}.form{width:100%}.spinner-overlay{animation:fadeIn .2s linear 1;pointer-events:all}.spinner-overlay[hidden]{display:none;pointer-events:none}.spinner-overlay{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;background:rgba(255,255,255,.9)}paper-card{width:100%}paper-icon-button{color:var(--theme-primary)}paper-input{--paper-input-container-focus-color:var(--theme-primary)}@media (max-width:760px){:host{justify-content:space-between}paper-card{box-shadow:none}}</style> <paper-card> <div class=card-content> <div class=form> <iron-form id=iron-form> <form on-submit=_loadImage> <paper-input value={{imageUrl}} on-keydown=_checkForEnter label=\\\"Image URL\\\"> <paper-icon-button icon=send slot=suffix on-tap=_submitForm type=submit></paper-icon-button> </paper-input> </form> </iron-form> <div> <paper-icon-button icon=image:photo-library></paper-icon-button> </div> </div> <div class=spinner-overlay hidden={{!imageLoading}}> <paper-spinner alt=loading... active={{imageLoading}}></paper-spinner> </div> </div> </paper-card> </template> </dom-module>\");\n\nconst emoji = __webpack_require__(43);\n/**\n * @customElement\n * @polymer\n */\nclass ImageInputView extends Polymer.Element {\n  constructor(...args) {\n    var _temp;\n\n    return _temp = super(...args), this._loadImage = e => {\n      e.preventDefault();\n\n      this.dispatchEvent(new CustomEvent('imageUrlSubmitted', {\n        detail: {\n          url: this.imageUrl\n        }\n      }));\n    }, _temp;\n  }\n\n  static get is() {\n    return 'image-input-view';\n  }\n  static get properties() {\n    return {\n      imageUrl: {\n        type: String,\n        notify: true\n      },\n      imageLoading: {\n        type: Boolean,\n        notify: true\n      }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.$['iron-form'].addEventListener('iron-form-presubmit', this._loadImage);\n  }\n\n  _submitForm() {\n    this.$['iron-form'].submit();\n  }\n\n  _checkForEnter(e) {\n    if (e.keyCode === 13) {\n      this._submitForm();\n    }\n  }\n}\n\nwindow.customElements.define(ImageInputView.is, ImageInputView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvaW1hZ2UtaW5wdXQtdmlldy5odG1sP2RhYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCd+L3BvbHltZXIvcG9seW1lci1lbGVtZW50Lmh0bWwnKTtcblxucmVxdWlyZSgnfi9wYXBlci1zdHlsZXMvdHlwb2dyYXBoeS5odG1sJyk7XG5cbnJlcXVpcmUoJ34vaXJvbi1mb3JtL2lyb24tZm9ybS5odG1sJyk7XG5cbnJlcXVpcmUoJ34vcGFwZXItY2hlY2tib3gvcGFwZXItY2hlY2tib3guaHRtbCcpO1xuXG5yZXF1aXJlKCd+L3BhcGVyLWlucHV0L3BhcGVyLWlucHV0Lmh0bWwnKTtcblxucmVxdWlyZSgnfi9wYXBlci1jYXJkL3BhcGVyLWNhcmQuaHRtbCcpO1xuXG5yZXF1aXJlKCd+L3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWwnKTtcblxucmVxdWlyZSgnfi9pcm9uLWljb25zL2lyb24taWNvbnMuaHRtbCcpO1xuXG5yZXF1aXJlKCd+L2lyb24taWNvbnMvaXJvbi1pY29ucy5odG1sJyk7XG5cbnJlcXVpcmUoJ34vaXJvbi1pY29ucy9pbWFnZS1pY29ucy5odG1sJyk7XG5cbnJlcXVpcmUoJ34vcGFwZXItc3Bpbm5lci9wYXBlci1zcGlubmVyLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pbWFnZS1pbnB1dC12aWV3PiA8dGVtcGxhdGU+IDxzdHlsZT5Aa2V5ZnJhbWVzIGZhZGVJbntmcm9te29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fTpob3N0e3dpZHRoOjEwMCV9LmNhcmQtY29udGVudHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmZvcm17d2lkdGg6MTAwJX0uc3Bpbm5lci1vdmVybGF5e2FuaW1hdGlvbjpmYWRlSW4gLjJzIGxpbmVhciAxO3BvaW50ZXItZXZlbnRzOmFsbH0uc3Bpbm5lci1vdmVybGF5W2hpZGRlbl17ZGlzcGxheTpub25lO3BvaW50ZXItZXZlbnRzOm5vbmV9LnNwaW5uZXItb3ZlcmxheXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LC45KX1wYXBlci1jYXJke3dpZHRoOjEwMCV9cGFwZXItaWNvbi1idXR0b257Y29sb3I6dmFyKC0tdGhlbWUtcHJpbWFyeSl9cGFwZXItaW5wdXR7LS1wYXBlci1pbnB1dC1jb250YWluZXItZm9jdXMtY29sb3I6dmFyKC0tdGhlbWUtcHJpbWFyeSl9QG1lZGlhIChtYXgtd2lkdGg6NzYwcHgpezpob3N0e2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufXBhcGVyLWNhcmR7Ym94LXNoYWRvdzpub25lfX08L3N0eWxlPiA8cGFwZXItY2FyZD4gPGRpdiBjbGFzcz1jYXJkLWNvbnRlbnQ+IDxkaXYgY2xhc3M9Zm9ybT4gPGlyb24tZm9ybSBpZD1pcm9uLWZvcm0+IDxmb3JtIG9uLXN1Ym1pdD1fbG9hZEltYWdlPiA8cGFwZXItaW5wdXQgdmFsdWU9e3tpbWFnZVVybH19IG9uLWtleWRvd249X2NoZWNrRm9yRW50ZXIgbGFiZWw9XFxcIkltYWdlIFVSTFxcXCI+IDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPXNlbmQgc2xvdD1zdWZmaXggb24tdGFwPV9zdWJtaXRGb3JtIHR5cGU9c3VibWl0PjwvcGFwZXItaWNvbi1idXR0b24+IDwvcGFwZXItaW5wdXQ+IDwvZm9ybT4gPC9pcm9uLWZvcm0+IDxkaXY+IDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPWltYWdlOnBob3RvLWxpYnJhcnk+PC9wYXBlci1pY29uLWJ1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPXNwaW5uZXItb3ZlcmxheSBoaWRkZW49e3shaW1hZ2VMb2FkaW5nfX0+IDxwYXBlci1zcGlubmVyIGFsdD1sb2FkaW5nLi4uIGFjdGl2ZT17e2ltYWdlTG9hZGluZ319PjwvcGFwZXItc3Bpbm5lcj4gPC9kaXY+IDwvZGl2PiA8L3BhcGVyLWNhcmQ+IDwvdGVtcGxhdGU+IDwvZG9tLW1vZHVsZT5cIik7XG5cbmNvbnN0IGVtb2ppID0gcmVxdWlyZShcImVtb2ppbGliXCIpO1xuLyoqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqL1xuY2xhc3MgSW1hZ2VJbnB1dFZpZXcgZXh0ZW5kcyBQb2x5bWVyLkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdmFyIF90ZW1wO1xuXG4gICAgcmV0dXJuIF90ZW1wID0gc3VwZXIoLi4uYXJncyksIHRoaXMuX2xvYWRJbWFnZSA9IGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdpbWFnZVVybFN1Ym1pdHRlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdXJsOiB0aGlzLmltYWdlVXJsXG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9LCBfdGVtcDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXMoKSB7XG4gICAgcmV0dXJuICdpbWFnZS1pbnB1dC12aWV3JztcbiAgfVxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltYWdlVXJsOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuICAgICAgaW1hZ2VMb2FkaW5nOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgdGhpcy4kWydpcm9uLWZvcm0nXS5hZGRFdmVudExpc3RlbmVyKCdpcm9uLWZvcm0tcHJlc3VibWl0JywgdGhpcy5fbG9hZEltYWdlKTtcbiAgfVxuXG4gIF9zdWJtaXRGb3JtKCkge1xuICAgIHRoaXMuJFsnaXJvbi1mb3JtJ10uc3VibWl0KCk7XG4gIH1cblxuICBfY2hlY2tGb3JFbnRlcihlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEZvcm0oKTtcbiAgICB9XG4gIH1cbn1cblxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShJbWFnZUlucHV0Vmlldy5pcywgSW1hZ2VJbnB1dFZpZXcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3ZpZXdzL2ltYWdlLWlucHV0LXZpZXcuaHRtbFxuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95\n");

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(97);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-form> <template> <style>:host{display:block}</style> <slot></slot> <form id=helper action$=[[action]] method$=[[method]] enctype$=[[enctype]]></form> </template> </dom-module>\");\n\nPolymer({\n  is: 'iron-form',\n\n  properties: {\n    /*\n     * Set this to true if you don't want the form to be submitted through an\n     * ajax request, and you want the page to redirect to the action URL\n     * after the form has been submitted.\n     */\n    allowRedirect: {\n      type: Boolean,\n      value: false\n    },\n    /**\n    * HTTP request headers to send. See PolymerElements/iron-ajax for\n    * more details. Only works when `allowRedirect` is false.\n    */\n    headers: {\n      type: Object,\n      value: function () {\n        return {};\n      }\n    },\n    /**\n    * Set the `withCredentials` flag on the request. See PolymerElements/iron-ajax for\n    * more details. Only works when `allowRedirect` is false.\n    */\n    withCredentials: {\n      type: Boolean,\n      value: false\n    }\n  },\n  /**\n   * Fired if the form cannot be submitted because it's invalid.\n   *\n   * @event iron-form-invalid\n   */\n\n  /**\n   * Fired after the form is submitted.\n   *\n   * @event iron-form-submit\n   */\n\n  /**\n   * Fired before the form is submitted.\n   *\n   * @event iron-form-presubmit\n   */\n\n  /**\n   * Fired after the form is submitted and a response is received. An\n   * IronRequestElement is included as the event.detail object.\n   *\n   * @event iron-form-response\n  */\n\n  /**\n   * Fired after the form is submitted and an error is received. An\n   * error message is included in event.detail.error and an\n   * IronRequestElement is included in event.detail.request.\n   *\n   * @event iron-form-error\n  */\n\n  attached: function () {\n    this._nodeObserver = Polymer.dom(this).observeNodes(function (mutations) {\n      for (var i = 0; i < mutations.addedNodes.length; i++) {\n        if (mutations.addedNodes[i].tagName === 'FORM' && !this._alreadyCalledInit) {\n          this._alreadyCalledInit = true;\n          this._form = mutations.addedNodes[i];\n          this._init();\n        }\n      }\n    }.bind(this));\n  },\n\n  detached: function () {\n    if (this._nodeObserver) {\n      Polymer.dom(this).unobserveNodes(this._nodeObserver);\n      this._nodeObserver = null;\n    }\n  },\n\n  _init: function () {\n    this._form.addEventListener('submit', this.submit.bind(this));\n    this._form.addEventListener('reset', this.reset.bind(this));\n\n    // Save the initial values.\n    this._defaults = this._defaults || new WeakMap();\n    var nodes = this._getSubmittableElements();\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!this._defaults.has(node)) {\n        this._defaults.set(node, {\n          checked: node.checked,\n          value: node.value\n        });\n      }\n    }\n  },\n\n  /**\n   * Validates all the required elements (custom and native) in the form.\n   * @return {boolean} True if all the elements are valid.\n   */\n  validate: function () {\n    if (this._form.getAttribute('novalidate') === '') return true;\n\n    // Start by making the form check the native elements it knows about.\n    var valid = this._form.checkValidity();\n    var elements = this._getValidatableElements();\n\n    // Go through all the elements, and validate the custom ones.\n    for (var el, i = 0; el = elements[i], i < elements.length; i++) {\n      // This is weird to appease the compiler. We assume the custom element\n      // has a validate() method, otherwise we can't check it.\n      var validatable = /** @type {{validate: (function() : boolean)}} */el;\n      if (validatable.validate) {\n        valid = !!validatable.validate() && valid;\n      }\n    }\n    return valid;\n  },\n\n  /**\n   * Submits the form.\n   */\n  submit: function (event) {\n    // We are not using this form for submission, so always cancel its event.\n    if (event) {\n      event.preventDefault();\n    }\n\n    // If you've called this before distribution happened, bail out.\n    if (!this._form) {\n      return;\n    }\n\n    if (!this.validate()) {\n      this.fire('iron-form-invalid');\n      return;\n    }\n\n    // Remove any existing children in the submission form (from a previous submit).\n    this.$.helper.textContent = '';\n\n    var json = this.serializeForm();\n\n    // If we want a redirect, submit the form natively.\n    if (this.allowRedirect) {\n      // If we're submitting the form natively, then create a hidden element for\n      // each of the values.\n      for (var element in json) {\n        this.$.helper.appendChild(this._createHiddenElement(element, json[element]));\n      }\n\n      // Copy the original form attributes.\n      this.$.helper.action = this._form.getAttribute('action');\n      this.$.helper.method = this._form.getAttribute('method') || 'GET';\n      this.$.helper.contentType = this._form.getAttribute('enctype') || 'application/x-www-form-urlencoded';\n\n      this.$.helper.submit();\n      this.fire('iron-form-submit');\n    } else {\n      this._makeAjaxRequest(json);\n    }\n  },\n\n  /**\n   * Resets the form to the default values.\n   */\n  reset: function (event) {\n    // We are not using this form for submission, so always cancel its event.\n    if (event) event.preventDefault();\n\n    // If you've called this before distribution happened, bail out.\n    if (!this._form) {\n      return;\n    }\n\n    // Load the initial values.\n    var nodes = this._getSubmittableElements();\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (this._defaults.has(node)) {\n        var defaults = this._defaults.get(node);\n        node.value = defaults.value;\n        node.checked = defaults.checked;\n      }\n    }\n  },\n\n  /**\n   * Serializes the form as will be used in submission. Note that `serialize`\n   * is a Polymer reserved keyword, so calling `someIronForm`.serialize()`\n   * will give you unexpected results.\n   * @return {Object} An object containing name-value pairs for elements that\n   *                  would be submitted.\n   */\n  serializeForm: function () {\n    // Only elements that have a `name` and are not disabled are submittable.\n    var elements = this._getSubmittableElements();\n    var json = {};\n    for (var i = 0; i < elements.length; i++) {\n      var values = this._serializeElementValues(elements[i]);\n      for (var v = 0; v < values.length; v++) {\n        this._addSerializedElement(json, elements[i].name, values[v]);\n      }\n    }\n    return json;\n  },\n\n  _handleFormResponse: function (event) {\n    this.fire('iron-form-response', event.detail);\n  },\n\n  _handleFormError: function (event) {\n    this.fire('iron-form-error', event.detail);\n  },\n\n  _makeAjaxRequest: function (json) {\n    // Initialize the iron-ajax element if we haven't already.\n    if (!this.request) {\n      this.request = document.createElement('iron-ajax');\n      this.request.addEventListener('response', this._handleFormResponse.bind(this));\n      this.request.addEventListener('error', this._handleFormError.bind(this));\n    }\n\n    // Native forms can also index elements magically by their name (can't make\n    // this up if I tried) so we need to get the correct attributes, not the\n    // elements with those names.\n    this.request.url = this._form.getAttribute('action');\n    this.request.method = this._form.getAttribute('method') || 'GET';\n    this.request.contentType = this._form.getAttribute('enctype') || 'application/x-www-form-urlencoded';\n    this.request.withCredentials = this.withCredentials;\n    this.request.headers = this.headers;\n\n    if (this._form.method.toUpperCase() === 'POST') {\n      this.request.body = json;\n    } else {\n      this.request.params = json;\n    }\n\n    // Allow for a presubmit hook\n    var event = this.fire('iron-form-presubmit', {}, { cancelable: true });\n    if (!event.defaultPrevented) {\n      this.request.generateRequest();\n      this.fire('iron-form-submit', json);\n    }\n  },\n\n  _getValidatableElements: function () {\n    return this._findElements(this._form, true);\n  },\n\n  _getSubmittableElements: function () {\n    return this._findElements(this._form, false);\n  },\n\n  _findElements: function (parent, ignoreName) {\n    var nodes = Polymer.dom(parent).querySelectorAll('*');\n    var submittable = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      // An element is submittable if it is not disabled, and if it has a\n      // 'name' attribute.\n      if (!node.disabled && (ignoreName || node.name)) {\n        submittable.push(node);\n      } else {\n        // This element has a root which could contain more submittable elements.\n        if (node.root) {\n          Array.prototype.push.apply(submittable, this._findElements(node.root, ignoreName));\n        }\n      }\n    }\n    return submittable;\n  },\n\n  _serializeElementValues: function (element) {\n    // We will assume that every custom element that needs to be serialized\n    // has a `value` property, and it contains the correct value.\n    // The only weird one is an element that implements IronCheckedElementBehaviour,\n    // in which case like the native checkbox/radio button, it's only used\n    // when checked.\n    // For native elements, from https://www.w3.org/TR/html5/forms.html#the-form-element.\n    // Native submittable elements: button, input, keygen, object, select, textarea;\n    // 1. We will skip `keygen and `object` for this iteration, and deal with\n    // them if they're actually required.\n    // 2. <button> and <textarea> have a `value` property, so they behave like\n    //    the custom elements.\n    // 3. <select> can have multiple options selected, in which case its\n    //    `value` is incorrect, and we must use the values of each of its\n    //    `selectedOptions`\n    // 4. <input> can have a whole bunch of behaviours, so it's handled separately.\n    // 5. Buttons are hard. The button that was clicked to submit the form\n    //    is the one who's name/value gets sent to the server.\n    var tag = element.tagName.toLowerCase();\n    if (tag === 'button' || tag === 'input' && (element.type === 'submit' || element.type === 'reset')) {\n      return [];\n    }\n\n    if (tag === 'select') {\n      return this._serializeSelectValues(element);\n    } else if (tag === 'input') {\n      return this._serializeInputValues(element);\n    } else {\n      if (element['_hasIronCheckedElementBehavior'] && !element.checked) return [];\n      return [element.value];\n    }\n  },\n\n  _serializeSelectValues: function (element) {\n    var values = [];\n\n    // A <select multiple> has an array of options, some of which can be selected.\n    for (var i = 0; i < element.options.length; i++) {\n      if (element.options[i].selected) {\n        values.push(element.options[i].value);\n      }\n    }\n    return values;\n  },\n\n  _serializeInputValues: function (element) {\n    // Most of the inputs use their 'value' attribute, with the exception\n    // of radio buttons, checkboxes and file.\n    var type = element.type.toLowerCase();\n\n    // Don't do anything for unchecked checkboxes/radio buttons.\n    // Don't do anything for file, since that requires a different request.\n    if ((type === 'checkbox' || type === 'radio') && !element.checked || type === 'file') {\n      return [];\n    }\n    return [element.value];\n  },\n\n  _createHiddenElement: function (name, value) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", name);\n    input.setAttribute(\"value\", value);\n    return input;\n  },\n\n  _addSerializedElement: function (json, name, value) {\n    // If the name doesn't exist, add it. Otherwise, serialize it to\n    // an array,\n    if (json[name] === undefined) {\n      json[name] = value;\n    } else {\n      if (!Array.isArray(json[name])) {\n        json[name] = [json[name]];\n      }\n      json[name].push(value);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96\n");

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(98);\n\n'use strict';\n\nPolymer({\n\n  is: 'iron-ajax',\n\n  /**\n   * Fired before a request is sent.\n   *\n   * @event iron-ajax-presend\n   */\n\n  /**\n   * Fired when a request is sent.\n   *\n   * @event request\n   * @event iron-ajax-request\n   */\n\n  /**\n   * Fired when a response is received.\n   *\n   * @event response\n   * @event iron-ajax-response\n   */\n\n  /**\n   * Fired when an error is received.\n   *\n   * @event error\n   * @event iron-ajax-error\n   */\n\n  hostAttributes: {\n    hidden: true\n  },\n\n  properties: {\n    /**\n     * The URL target of the request.\n     */\n    url: {\n      type: String\n    },\n\n    /**\n     * An object that contains query parameters to be appended to the\n     * specified `url` when generating a request. If you wish to set the body\n     * content when making a POST request, you should use the `body` property\n     * instead.\n     */\n    params: {\n      type: Object,\n      value: function () {\n        return {};\n      }\n    },\n\n    /**\n     * The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\n     * Default is 'GET'.\n     */\n    method: {\n      type: String,\n      value: 'GET'\n    },\n\n    /**\n     * HTTP request headers to send.\n     *\n     * Example:\n     *\n     *     <iron-ajax\n     *         auto\n     *         url=\"http://somesite.com\"\n     *         headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n     *         handle-as=\"json\"></iron-ajax>\n     *\n     * Note: setting a `Content-Type` header here will override the value\n     * specified by the `contentType` property of this element.\n     */\n    headers: {\n      type: Object,\n      value: function () {\n        return {};\n      }\n    },\n\n    /**\n     * Content type to use when sending data. If the `contentType` property\n     * is set and a `Content-Type` header is specified in the `headers`\n     * property, the `headers` property value will take precedence.\n     *\n     * Varies the handling of the `body` param.\n     */\n    contentType: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * Body content to send with the request, typically used with \"POST\"\n     * requests.\n     *\n     * If body is a string it will be sent unmodified.\n     *\n     * If Content-Type is set to a value listed below, then\n     * the body will be encoded accordingly.\n     *\n     *    * `content-type=\"application/json\"`\n     *      * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n     *    * `content-type=\"application/x-www-form-urlencoded\"`\n     *      * body is encoded like `foo=bar+baz&x=1`\n     *\n     * Otherwise the body will be passed to the browser unmodified, and it\n     * will handle any encoding (e.g. for FormData, Blob, ArrayBuffer).\n     *\n     * @type (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object)\n     */\n    body: {\n      type: Object,\n      value: null\n    },\n\n    /**\n     * Toggle whether XHR is synchronous or asynchronous. Don't change this\n     * to true unless You Know What You Are Doing™.\n     */\n    sync: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Specifies what data to store in the `response` property, and\n     * to deliver as `event.detail.response` in `response` events.\n     *\n     * One of:\n     *\n     *    `text`: uses `XHR.responseText`.\n     *\n     *    `xml`: uses `XHR.responseXML`.\n     *\n     *    `json`: uses `XHR.responseText` parsed as JSON.\n     *\n     *    `arraybuffer`: uses `XHR.response`.\n     *\n     *    `blob`: uses `XHR.response`.\n     *\n     *    `document`: uses `XHR.response`.\n     */\n    handleAs: {\n      type: String,\n      value: 'json'\n    },\n\n    /**\n     * Set the withCredentials flag on the request.\n     */\n    withCredentials: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set the timeout flag on the request.\n     */\n    timeout: {\n      type: Number,\n      value: 0\n    },\n\n    /**\n     * If true, automatically performs an Ajax request when either `url` or\n     * `params` changes.\n     */\n    auto: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If true, error messages will automatically be logged to the console.\n     */\n    verbose: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The most recent request made by this iron-ajax element.\n     */\n    lastRequest: {\n      type: Object,\n      notify: true,\n      readOnly: true\n    },\n\n    /**\n     * True while lastRequest is in flight.\n     */\n    loading: {\n      type: Boolean,\n      notify: true,\n      readOnly: true\n    },\n\n    /**\n     * lastRequest's response.\n     *\n     * Note that lastResponse and lastError are set when lastRequest finishes,\n     * so if loading is true, then lastResponse and lastError will correspond\n     * to the result of the previous request.\n     *\n     * The type of the response is determined by the value of `handleAs` at\n     * the time that the request was generated.\n     *\n     * @type {Object}\n     */\n    lastResponse: {\n      type: Object,\n      notify: true,\n      readOnly: true\n    },\n\n    /**\n     * lastRequest's error, if any.\n     *\n     * @type {Object}\n     */\n    lastError: {\n      type: Object,\n      notify: true,\n      readOnly: true\n    },\n\n    /**\n     * An Array of all in-flight requests originating from this iron-ajax\n     * element.\n     */\n    activeRequests: {\n      type: Array,\n      notify: true,\n      readOnly: true,\n      value: function () {\n        return [];\n      }\n    },\n\n    /**\n     * Length of time in milliseconds to debounce multiple automatically generated requests.\n     */\n    debounceDuration: {\n      type: Number,\n      value: 0,\n      notify: true\n    },\n\n    /**\n     * Prefix to be stripped from a JSON response before parsing it.\n     *\n     * In order to prevent an attack using CSRF with Array responses\n     * (http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\n     * many backends will mitigate this by prefixing all JSON response bodies\n     * with a string that would be nonsensical to a JavaScript parser.\n     *\n     */\n    jsonPrefix: {\n      type: String,\n      value: ''\n    },\n\n    /**\n     * By default, iron-ajax's events do not bubble. Setting this attribute will cause its\n     * request and response events as well as its iron-ajax-request, -response,  and -error\n     * events to bubble to the window object. The vanilla error event never bubbles when\n     * using shadow dom even if this.bubbles is true because a scoped flag is not passed with\n     * it (first link) and because the shadow dom spec did not used to allow certain events,\n     * including events named error, to leak outside of shadow trees (second link).\n     * https://www.w3.org/TR/shadow-dom/#scoped-flag\n     * https://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees\n     */\n    bubbles: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Changes the [`completes`](iron-request#property-completes) promise chain \n     * from `generateRequest` to reject with an object\n     * containing the original request, as well an error message.\n     * If false (default), the promise rejects with an error message only.\n     */\n    rejectWithRequest: {\n      type: Boolean,\n      value: false\n    },\n\n    _boundHandleResponse: {\n      type: Function,\n      value: function () {\n        return this._handleResponse.bind(this);\n      }\n    }\n  },\n\n  observers: ['_requestOptionsChanged(url, method, params.*, headers, contentType, ' + 'body, sync, handleAs, jsonPrefix, withCredentials, timeout, auto)'],\n\n  /**\n   * The query string that should be appended to the `url`, serialized from\n   * the current value of `params`.\n   *\n   * @return {string}\n   */\n  get queryString() {\n    var queryParts = [];\n    var param;\n    var value;\n\n    for (param in this.params) {\n      value = this.params[param];\n      param = window.encodeURIComponent(param);\n\n      if (Array.isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          queryParts.push(param + '=' + window.encodeURIComponent(value[i]));\n        }\n      } else if (value !== null) {\n        queryParts.push(param + '=' + window.encodeURIComponent(value));\n      } else {\n        queryParts.push(param);\n      }\n    }\n\n    return queryParts.join('&');\n  },\n\n  /**\n   * The `url` with query string (if `params` are specified), suitable for\n   * providing to an `iron-request` instance.\n   *\n   * @return {string}\n   */\n  get requestUrl() {\n    var queryString = this.queryString;\n    var url = this.url || '';\n\n    if (queryString) {\n      var bindingChar = url.indexOf('?') >= 0 ? '&' : '?';\n      return url + bindingChar + queryString;\n    }\n\n    return url;\n  },\n\n  /**\n   * An object that maps header names to header values, first applying the\n   * the value of `Content-Type` and then overlaying the headers specified\n   * in the `headers` property.\n   *\n   * @return {Object}\n   */\n  get requestHeaders() {\n    var headers = {};\n    var contentType = this.contentType;\n    if (contentType == null && typeof this.body === 'string') {\n      contentType = 'application/x-www-form-urlencoded';\n    }\n    if (contentType) {\n      headers['content-type'] = contentType;\n    }\n    var header;\n\n    if (typeof this.headers === 'object') {\n      for (header in this.headers) {\n        headers[header] = this.headers[header].toString();\n      }\n    }\n\n    return headers;\n  },\n\n  /**\n   * Request options suitable for generating an `iron-request` instance based\n   * on the current state of the `iron-ajax` instance's properties.\n   *\n   * @return {{\n   *   url: string,\n   *   method: (string|undefined),\n   *   async: (boolean|undefined),\n   *   body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),\n   *   headers: (Object|undefined),\n   *   handleAs: (string|undefined),\n   *   jsonPrefix: (string|undefined),\n   *   withCredentials: (boolean|undefined)}}\n   */\n  toRequestOptions: function () {\n    return {\n      url: this.requestUrl || '',\n      method: this.method,\n      headers: this.requestHeaders,\n      body: this.body,\n      async: !this.sync,\n      handleAs: this.handleAs,\n      jsonPrefix: this.jsonPrefix,\n      withCredentials: this.withCredentials,\n      timeout: this.timeout,\n      rejectWithRequest: this.rejectWithRequest\n    };\n  },\n\n  /**\n   * Performs an AJAX request to the specified URL.\n   *\n   * @return {!IronRequestElement}\n   */\n  generateRequest: function () {\n    var request = /** @type {!IronRequestElement} */document.createElement('iron-request');\n    var requestOptions = this.toRequestOptions();\n\n    this.push('activeRequests', request);\n\n    request.completes.then(this._boundHandleResponse).catch(this._handleError.bind(this, request)).then(this._discardRequest.bind(this, request));\n\n    var evt = this.fire('iron-ajax-presend', {\n      request: request,\n      options: requestOptions\n    }, { bubbles: this.bubbles, cancelable: true });\n\n    if (evt.defaultPrevented) {\n      request.abort();\n      request.rejectCompletes(request);\n      return request;\n    }\n\n    request.send(requestOptions);\n\n    this._setLastRequest(request);\n    this._setLoading(true);\n\n    this.fire('request', {\n      request: request,\n      options: requestOptions\n    }, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n\n    this.fire('iron-ajax-request', {\n      request: request,\n      options: requestOptions\n    }, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n\n    return request;\n  },\n\n  _handleResponse: function (request) {\n    if (request === this.lastRequest) {\n      this._setLastResponse(request.response);\n      this._setLastError(null);\n      this._setLoading(false);\n    }\n    this.fire('response', request, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n    this.fire('iron-ajax-response', request, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n  },\n\n  _handleError: function (request, error) {\n    if (this.verbose) {\n      Polymer.Base._error(error);\n    }\n\n    if (request === this.lastRequest) {\n      this._setLastError({\n        request: request,\n        error: error,\n        status: request.xhr.status,\n        statusText: request.xhr.statusText,\n        response: request.xhr.response\n      });\n      this._setLastResponse(null);\n      this._setLoading(false);\n    }\n\n    // Tests fail if this goes after the normal this.fire('error', ...)\n    this.fire('iron-ajax-error', {\n      request: request,\n      error: error\n    }, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n\n    this.fire('error', {\n      request: request,\n      error: error\n    }, {\n      bubbles: this.bubbles,\n      composed: true\n    });\n  },\n\n  _discardRequest: function (request) {\n    var requestIndex = this.activeRequests.indexOf(request);\n\n    if (requestIndex > -1) {\n      this.splice('activeRequests', requestIndex, 1);\n    }\n  },\n\n  _requestOptionsChanged: function () {\n    this.debounce('generate-request', function () {\n      if (this.url == null) {\n        return;\n      }\n\n      if (this.auto) {\n        this.generateRequest();\n      }\n    }, this.debounceDuration);\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97\n");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n'use strict';\n\nPolymer({\n  is: 'iron-request',\n\n  hostAttributes: {\n    hidden: true\n  },\n\n  properties: {\n\n    /**\n     * A reference to the XMLHttpRequest instance used to generate the\n     * network request.\n     *\n     * @type {XMLHttpRequest}\n     */\n    xhr: {\n      type: Object,\n      notify: true,\n      readOnly: true,\n      value: function () {\n        return new XMLHttpRequest();\n      }\n    },\n\n    /**\n     * A reference to the parsed response body, if the `xhr` has completely\n     * resolved.\n     *\n     * @type {*}\n     * @default null\n     */\n    response: {\n      type: Object,\n      notify: true,\n      readOnly: true,\n      value: function () {\n        return null;\n      }\n    },\n\n    /**\n     * A reference to the status code, if the `xhr` has completely resolved.\n     */\n    status: {\n      type: Number,\n      notify: true,\n      readOnly: true,\n      value: 0\n    },\n\n    /**\n     * A reference to the status text, if the `xhr` has completely resolved.\n     */\n    statusText: {\n      type: String,\n      notify: true,\n      readOnly: true,\n      value: ''\n    },\n\n    /**\n     * A promise that resolves when the `xhr` response comes back, or rejects\n     * if there is an error before the `xhr` completes.\n     * The resolve callback is called with the original request as an argument.\n     * By default, the reject callback is called with an `Error` as an argument.\n     * If `rejectWithRequest` is true, the reject callback is called with an\n     * object with two keys: `request`, the original request, and `error`, the\n     * error object.\n     *\n     * @type {Promise}\n     */\n    completes: {\n      type: Object,\n      readOnly: true,\n      notify: true,\n      value: function () {\n        return new Promise(function (resolve, reject) {\n          this.resolveCompletes = resolve;\n          this.rejectCompletes = reject;\n        }.bind(this));\n      }\n    },\n\n    /**\n     * An object that contains progress information emitted by the XHR if\n     * available.\n     *\n     * @default {}\n     */\n    progress: {\n      type: Object,\n      notify: true,\n      readOnly: true,\n      value: function () {\n        return {};\n      }\n    },\n\n    /**\n     * Aborted will be true if an abort of the request is attempted.\n     */\n    aborted: {\n      type: Boolean,\n      notify: true,\n      readOnly: true,\n      value: false\n    },\n\n    /**\n     * Errored will be true if the browser fired an error event from the\n     * XHR object (mainly network errors).\n     */\n    errored: {\n      type: Boolean,\n      notify: true,\n      readOnly: true,\n      value: false\n    },\n\n    /**\n     * TimedOut will be true if the XHR threw a timeout event.\n     */\n    timedOut: {\n      type: Boolean,\n      notify: true,\n      readOnly: true,\n      value: false\n    }\n  },\n\n  /**\n   * Succeeded is true if the request succeeded. The request succeeded if it\n   * loaded without error, wasn't aborted, and the status code is ≥ 200, and\n   * < 300, or if the status code is 0.\n   *\n   * The status code 0 is accepted as a success because some schemes - e.g.\n   * file:// - don't provide status codes.\n   *\n   * @return {boolean}\n   */\n  get succeeded() {\n    if (this.errored || this.aborted || this.timedOut) {\n      return false;\n    }\n    var status = this.xhr.status || 0;\n\n    // Note: if we are using the file:// protocol, the status code will be 0\n    // for all outcomes (successful or otherwise).\n    return status === 0 || status >= 200 && status < 300;\n  },\n\n  /**\n   * Sends an HTTP request to the server and returns a promise (see the `completes`\n   * property for details).\n   *\n   * The handling of the `body` parameter will vary based on the Content-Type\n   * header. See the docs for iron-ajax's `body` property for details.\n   *\n   * @param {{\n   *   url: string,\n   *   method: (string|undefined),\n   *   async: (boolean|undefined),\n   *   body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),\n   *   headers: (Object|undefined),\n   *   handleAs: (string|undefined),\n   *   jsonPrefix: (string|undefined),\n   *   withCredentials: (boolean|undefined),\n   *   timeout: (Number|undefined),\n   *   rejectWithRequest: (boolean|undefined)}} options -\n   *   - url The url to which the request is sent.\n   *   - method The HTTP method to use, default is GET.\n   *   - async By default, all requests are sent asynchronously. To send synchronous requests,\n   *         set to false.\n   *   -  body The content for the request body for POST method.\n   *   -  headers HTTP request headers.\n   *   -  handleAs The response type. Default is 'text'.\n   *   -  withCredentials Whether or not to send credentials on the request. Default is false.\n   *   -  timeout - Timeout for request, in milliseconds.\n   *   -  rejectWithRequest Set to true to include the request object with promise rejections.\n   * @return {Promise}\n   */\n  send: function (options) {\n    var xhr = this.xhr;\n\n    if (xhr.readyState > 0) {\n      return null;\n    }\n\n    xhr.addEventListener('progress', function (progress) {\n      this._setProgress({\n        lengthComputable: progress.lengthComputable,\n        loaded: progress.loaded,\n        total: progress.total\n      });\n    }.bind(this));\n\n    xhr.addEventListener('error', function (error) {\n      this._setErrored(true);\n      this._updateStatus();\n      var response = options.rejectWithRequest ? {\n        error: error,\n        request: this\n      } : error;\n      this.rejectCompletes(response);\n    }.bind(this));\n\n    xhr.addEventListener('timeout', function (error) {\n      this._setTimedOut(true);\n      this._updateStatus();\n      var response = options.rejectWithRequest ? {\n        error: error,\n        request: this\n      } : error;\n      this.rejectCompletes(response);\n    }.bind(this));\n\n    xhr.addEventListener('abort', function () {\n      this._setAborted(true);\n      this._updateStatus();\n      var error = new Error('Request aborted.');\n      var response = options.rejectWithRequest ? {\n        error: error,\n        request: this\n      } : error;\n      this.rejectCompletes(response);\n    }.bind(this));\n\n    // Called after all of the above.\n    xhr.addEventListener('loadend', function () {\n      this._updateStatus();\n      this._setResponse(this.parseResponse());\n\n      if (!this.succeeded) {\n        var error = new Error('The request failed with status code: ' + this.xhr.status);\n        var response = options.rejectWithRequest ? {\n          error: error,\n          request: this\n        } : error;\n        this.rejectCompletes(response);\n        return;\n      }\n\n      this.resolveCompletes(this);\n    }.bind(this));\n\n    this.url = options.url;\n    var isXHRAsync = options.async !== false;\n    xhr.open(options.method || 'GET', options.url, isXHRAsync);\n\n    var acceptType = {\n      'json': 'application/json',\n      'text': 'text/plain',\n      'html': 'text/html',\n      'xml': 'application/xml',\n      'arraybuffer': 'application/octet-stream'\n    }[options.handleAs];\n    var headers = options.headers || Object.create(null);\n    var newHeaders = Object.create(null);\n    for (var key in headers) {\n      newHeaders[key.toLowerCase()] = headers[key];\n    }\n    headers = newHeaders;\n\n    if (acceptType && !headers['accept']) {\n      headers['accept'] = acceptType;\n    }\n    Object.keys(headers).forEach(function (requestHeader) {\n      if (/[A-Z]/.test(requestHeader)) {\n        Polymer.Base._error('Headers must be lower case, got', requestHeader);\n      }\n      xhr.setRequestHeader(requestHeader, headers[requestHeader]);\n    }, this);\n\n    if (isXHRAsync) {\n      xhr.timeout = options.timeout;\n\n      var handleAs = options.handleAs;\n\n      // If a JSON prefix is present, the responseType must be 'text' or the\n      // browser won’t be able to parse the response.\n      if (!!options.jsonPrefix || !handleAs) {\n        handleAs = 'text';\n      }\n\n      // In IE, `xhr.responseType` is an empty string when the response\n      // returns. Hence, caching it as `xhr._responseType`.\n      xhr.responseType = xhr._responseType = handleAs;\n\n      // Cache the JSON prefix, if it exists.\n      if (!!options.jsonPrefix) {\n        xhr._jsonPrefix = options.jsonPrefix;\n      }\n    }\n\n    xhr.withCredentials = !!options.withCredentials;\n\n    var body = this._encodeBodyObject(options.body, headers['content-type']);\n\n    xhr.send(\n    /** @type {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|\n               null|string|undefined} */\n    body);\n\n    return this.completes;\n  },\n\n  /**\n   * Attempts to parse the response body of the XHR. If parsing succeeds,\n   * the value returned will be deserialized based on the `responseType`\n   * set on the XHR.\n   *\n   * @return {*} The parsed response,\n   * or undefined if there was an empty response or parsing failed.\n   */\n  parseResponse: function () {\n    var xhr = this.xhr;\n    var responseType = xhr.responseType || xhr._responseType;\n    var preferResponseText = !this.xhr.responseType;\n    var prefixLen = xhr._jsonPrefix && xhr._jsonPrefix.length || 0;\n\n    try {\n      switch (responseType) {\n        case 'json':\n          // If the xhr object doesn't have a natural `xhr.responseType`,\n          // we can assume that the browser hasn't parsed the response for us,\n          // and so parsing is our responsibility. Likewise if response is\n          // undefined, as there's no way to encode undefined in JSON.\n          if (preferResponseText || xhr.response === undefined) {\n            // Try to emulate the JSON section of the response body section of\n            // the spec: https://xhr.spec.whatwg.org/#response-body\n            // That is to say, we try to parse as JSON, but if anything goes\n            // wrong return null.\n            try {\n              return JSON.parse(xhr.responseText);\n            } catch (_) {\n              return null;\n            }\n          }\n\n          return xhr.response;\n        case 'xml':\n          return xhr.responseXML;\n        case 'blob':\n        case 'document':\n        case 'arraybuffer':\n          return xhr.response;\n        case 'text':\n        default:\n          {\n            // If `prefixLen` is set, it implies the response should be parsed\n            // as JSON once the prefix of length `prefixLen` is stripped from\n            // it. Emulate the behavior above where null is returned on failure\n            // to parse.\n            if (prefixLen) {\n              try {\n                return JSON.parse(xhr.responseText.substring(prefixLen));\n              } catch (_) {\n                return null;\n              }\n            }\n            return xhr.responseText;\n          }\n      }\n    } catch (e) {\n      this.rejectCompletes(new Error('Could not parse response. ' + e.message));\n    }\n  },\n\n  /**\n   * Aborts the request.\n   */\n  abort: function () {\n    this._setAborted(true);\n    this.xhr.abort();\n  },\n\n  /**\n   * @param {*} body The given body of the request to try and encode.\n   * @param {?string} contentType The given content type, to infer an encoding\n   *     from.\n   * @return {*} Either the encoded body as a string, if successful,\n   *     or the unaltered body object if no encoding could be inferred.\n   */\n  _encodeBodyObject: function (body, contentType) {\n    if (typeof body == 'string') {\n      return body; // Already encoded.\n    }\n    var bodyObj = /** @type {Object} */body;\n    switch (contentType) {\n      case 'application/json':\n        return JSON.stringify(bodyObj);\n      case 'application/x-www-form-urlencoded':\n        return this._wwwFormUrlEncode(bodyObj);\n    }\n    return body;\n  },\n\n  /**\n   * @param {Object} object The object to encode as x-www-form-urlencoded.\n   * @return {string} .\n   */\n  _wwwFormUrlEncode: function (object) {\n    if (!object) {\n      return '';\n    }\n    var pieces = [];\n    Object.keys(object).forEach(function (key) {\n      // TODO(rictic): handle array values here, in a consistent way with\n      //   iron-ajax params.\n      pieces.push(this._wwwFormUrlEncodePiece(key) + '=' + this._wwwFormUrlEncodePiece(object[key]));\n    }, this);\n    return pieces.join('&');\n  },\n\n  /**\n   * @param {*} str A key or value to encode as x-www-form-urlencoded.\n   * @return {string} .\n   */\n  _wwwFormUrlEncodePiece: function (str) {\n    // Spec says to normalize newlines to \\r\\n and replace %20 spaces with +.\n    // jQuery does this as well, so this is likely to be widely compatible.\n    if (str === null || str === undefined || !str.toString) {\n      return '';\n    }\n\n    return encodeURIComponent(str.toString().replace(/\\r?\\n/g, '\\r\\n')).replace(/%20/g, '+');\n  },\n\n  /**\n   * Updates the status code and status text.\n   */\n  _updateStatus: function () {\n    this._setStatus(this.xhr.status);\n    this._setStatusText(this.xhr.statusText === undefined ? '' : this.xhr.statusText);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98\n");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(7);\n\n__webpack_require__(100);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-checkbox> <template strip-whitespace=\\\"\\\"> <style>:host{display:inline-block;white-space:nowrap;cursor:pointer;--calculated-paper-checkbox-size:var(--paper-checkbox-size, 18px);--calculated-paper-checkbox-ink-size:var(--paper-checkbox-ink-size, -1px);@apply --paper-font-common-base;line-height:0;-webkit-tap-highlight-color:transparent}:host([hidden]){display:none!important}:host(:focus){outline:0}.hidden{display:none}#checkboxContainer{display:inline-block;position:relative;width:var(--calculated-paper-checkbox-size);height:var(--calculated-paper-checkbox-size);min-width:var(--calculated-paper-checkbox-size);margin:var(--paper-checkbox-margin,initial);vertical-align:var(--paper-checkbox-vertical-align,middle);background-color:var(--paper-checkbox-unchecked-background-color,transparent)}#ink{position:absolute;top:calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size))/ 2);left:calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size))/ 2);width:var(--calculated-paper-checkbox-ink-size);height:var(--calculated-paper-checkbox-ink-size);color:var(--paper-checkbox-unchecked-ink-color,var(--primary-text-color));opacity:.6;pointer-events:none}:host-context([dir=rtl]) #ink{right:calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size))/ 2);left:auto}#ink[checked]{color:var(--paper-checkbox-checked-ink-color,var(--primary-color))}#checkbox{position:relative;box-sizing:border-box;height:100%;border:solid 2px;border-color:var(--paper-checkbox-unchecked-color,var(--primary-text-color));border-radius:2px;pointer-events:none;-webkit-transition:background-color 140ms,border-color 140ms;transition:background-color 140ms,border-color 140ms}#checkbox.checked #checkmark{-webkit-animation:checkmark-expand 140ms ease-out forwards;animation:checkmark-expand 140ms ease-out forwards}@-webkit-keyframes checkmark-expand{0%{-webkit-transform:scale(0,0) rotate(45deg)}100%{-webkit-transform:scale(1,1) rotate(45deg)}}@keyframes checkmark-expand{0%{transform:scale(0,0) rotate(45deg)}100%{transform:scale(1,1) rotate(45deg)}}#checkbox.checked{background-color:var(--paper-checkbox-checked-color,var(--primary-color));border-color:var(--paper-checkbox-checked-color,var(--primary-color))}#checkmark{position:absolute;width:36%;height:70%;border-style:solid;border-top:none;border-left:none;border-right-width:calc(2/15 * var(--calculated-paper-checkbox-size));border-bottom-width:calc(2/15 * var(--calculated-paper-checkbox-size));border-color:var(--paper-checkbox-checkmark-color,#fff);-webkit-transform-origin:97% 86%;transform-origin:97% 86%;box-sizing:content-box}:host-context([dir=rtl]) #checkmark{-webkit-transform-origin:50% 14%;transform-origin:50% 14%}#checkboxLabel{position:relative;display:inline-block;vertical-align:middle;padding-left:var(--paper-checkbox-label-spacing,8px);white-space:normal;line-height:normal;color:var(--paper-checkbox-label-color,var(--primary-text-color));@apply --paper-checkbox-label;}:host([checked]) #checkboxLabel{color:var(--paper-checkbox-label-checked-color,var(--paper-checkbox-label-color,var(--primary-text-color)));@apply --paper-checkbox-label-checked;}:host-context([dir=rtl]) #checkboxLabel{padding-right:var(--paper-checkbox-label-spacing,8px);padding-left:0}#checkboxLabel[hidden]{display:none}:host([disabled]) #checkbox{opacity:.5;border-color:var(--paper-checkbox-unchecked-color,var(--primary-text-color))}:host([disabled][checked]) #checkbox{background-color:var(--paper-checkbox-unchecked-color,var(--primary-text-color));opacity:.5}:host([disabled]) #checkboxLabel{opacity:.65}#checkbox.invalid:not(.checked){border-color:var(--paper-checkbox-error-color,var(--error-color))}</style> <div id=checkboxContainer> <div id=checkbox class$=\\\"[[_computeCheckboxClass(checked, invalid)]]\\\"> <div id=checkmark class$=[[_computeCheckmarkClass(checked)]]></div> </div> </div> <div id=checkboxLabel><slot></slot></div> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-checkbox',\n\n  behaviors: [Polymer.PaperCheckedElementBehavior],\n\n  hostAttributes: {\n    role: 'checkbox',\n    'aria-checked': false,\n    tabindex: 0\n  },\n\n  properties: {\n    /**\n     * Fired when the checked state changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-checked'\n    }\n  },\n\n  attached: function () {\n    // Wait until styles have resolved to check for the default sentinel.\n    // See polymer#4009 for more details.\n    Polymer.RenderStatus.afterNextRender(this, function () {\n      var inkSize = this.getComputedStyleValue('--calculated-paper-checkbox-ink-size').trim();\n      // If unset, compute and set the default `--paper-checkbox-ink-size`.\n      if (inkSize === '-1px') {\n        var checkboxSizeText = this.getComputedStyleValue('--calculated-paper-checkbox-size').trim();\n\n        var units = checkboxSizeText.match(/[A-Za-z]+$/)[0] || 'px';\n        var checkboxSize = parseFloat(checkboxSizeText, 10);\n        var defaultInkSize = 8 / 3 * checkboxSize;\n\n        if (units === 'px') {\n          defaultInkSize = Math.floor(defaultInkSize);\n\n          // The checkbox and ripple need to have the same parity so that their\n          // centers align.\n          if (defaultInkSize % 2 !== checkboxSize % 2) {\n            defaultInkSize++;\n          }\n        }\n\n        this.updateStyles({\n          '--paper-checkbox-ink-size': defaultInkSize + units\n        });\n      }\n    });\n  },\n\n  _computeCheckboxClass: function (checked, invalid) {\n    var className = '';\n    if (checked) {\n      className += 'checked ';\n    }\n    if (invalid) {\n      className += 'invalid';\n    }\n    return className;\n  },\n\n  _computeCheckmarkClass: function (checked) {\n    return checked ? '' : 'hidden';\n  },\n\n  // create ripple inside the checkboxContainer\n  _createRipple: function () {\n    this._rippleContainer = this.$.checkboxContainer;\n    return Polymer.PaperInkyFocusBehaviorImpl._createRipple.call(this);\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWNoZWNrYm94L3BhcGVyLWNoZWNrYm94Lmh0bWw/OTI3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLXN0eWxlcy9kZWZhdWx0LXRoZW1lLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItYmVoYXZpb3JzL3BhcGVyLWNoZWNrZWQtZWxlbWVudC1iZWhhdmlvci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItY2hlY2tib3g+IDx0ZW1wbGF0ZSBzdHJpcC13aGl0ZXNwYWNlPVxcXCJcXFwiPiA8c3R5bGU+Omhvc3R7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2hpdGUtc3BhY2U6bm93cmFwO2N1cnNvcjpwb2ludGVyOy0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplOnZhcigtLXBhcGVyLWNoZWNrYm94LXNpemUsIDE4cHgpOy0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1pbmstc2l6ZTp2YXIoLS1wYXBlci1jaGVja2JveC1pbmstc2l6ZSwgLTFweCk7QGFwcGx5IC0tcGFwZXItZm9udC1jb21tb24tYmFzZTtsaW5lLWhlaWdodDowOy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH06aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lIWltcG9ydGFudH06aG9zdCg6Zm9jdXMpe291dGxpbmU6MH0uaGlkZGVue2Rpc3BsYXk6bm9uZX0jY2hlY2tib3hDb250YWluZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6dmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplKTtoZWlnaHQ6dmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplKTttaW4td2lkdGg6dmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplKTttYXJnaW46dmFyKC0tcGFwZXItY2hlY2tib3gtbWFyZ2luLGluaXRpYWwpO3ZlcnRpY2FsLWFsaWduOnZhcigtLXBhcGVyLWNoZWNrYm94LXZlcnRpY2FsLWFsaWduLG1pZGRsZSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wYXBlci1jaGVja2JveC11bmNoZWNrZWQtYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCl9I2lua3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6Y2FsYygwcHggLSAodmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1pbmstc2l6ZSkgLSB2YXIoLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LXNpemUpKS8gMik7bGVmdDpjYWxjKDBweCAtICh2YXIoLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LWluay1zaXplKSAtIHZhcigtLWNhbGN1bGF0ZWQtcGFwZXItY2hlY2tib3gtc2l6ZSkpLyAyKTt3aWR0aDp2YXIoLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LWluay1zaXplKTtoZWlnaHQ6dmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1pbmstc2l6ZSk7Y29sb3I6dmFyKC0tcGFwZXItY2hlY2tib3gtdW5jaGVja2VkLWluay1jb2xvcix2YXIoLS1wcmltYXJ5LXRleHQtY29sb3IpKTtvcGFjaXR5Oi42O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pICNpbmt7cmlnaHQ6Y2FsYygwcHggLSAodmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1pbmstc2l6ZSkgLSB2YXIoLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LXNpemUpKS8gMik7bGVmdDphdXRvfSNpbmtbY2hlY2tlZF17Y29sb3I6dmFyKC0tcGFwZXItY2hlY2tib3gtY2hlY2tlZC1pbmstY29sb3IsdmFyKC0tcHJpbWFyeS1jb2xvcikpfSNjaGVja2JveHtwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjEwMCU7Ym9yZGVyOnNvbGlkIDJweDtib3JkZXItY29sb3I6dmFyKC0tcGFwZXItY2hlY2tib3gtdW5jaGVja2VkLWNvbG9yLHZhcigtLXByaW1hcnktdGV4dC1jb2xvcikpO2JvcmRlci1yYWRpdXM6MnB4O3BvaW50ZXItZXZlbnRzOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMTQwbXMsYm9yZGVyLWNvbG9yIDE0MG1zO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAxNDBtcyxib3JkZXItY29sb3IgMTQwbXN9I2NoZWNrYm94LmNoZWNrZWQgI2NoZWNrbWFya3std2Via2l0LWFuaW1hdGlvbjpjaGVja21hcmstZXhwYW5kIDE0MG1zIGVhc2Utb3V0IGZvcndhcmRzO2FuaW1hdGlvbjpjaGVja21hcmstZXhwYW5kIDE0MG1zIGVhc2Utb3V0IGZvcndhcmRzfUAtd2Via2l0LWtleWZyYW1lcyBjaGVja21hcmstZXhwYW5kezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAsMCkgcm90YXRlKDQ1ZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEsMSkgcm90YXRlKDQ1ZGVnKX19QGtleWZyYW1lcyBjaGVja21hcmstZXhwYW5kezAle3RyYW5zZm9ybTpzY2FsZSgwLDApIHJvdGF0ZSg0NWRlZyl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSwxKSByb3RhdGUoNDVkZWcpfX0jY2hlY2tib3guY2hlY2tlZHtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXBhcGVyLWNoZWNrYm94LWNoZWNrZWQtY29sb3IsdmFyKC0tcHJpbWFyeS1jb2xvcikpO2JvcmRlci1jb2xvcjp2YXIoLS1wYXBlci1jaGVja2JveC1jaGVja2VkLWNvbG9yLHZhcigtLXByaW1hcnktY29sb3IpKX0jY2hlY2ttYXJre3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjM2JTtoZWlnaHQ6NzAlO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItdG9wOm5vbmU7Ym9yZGVyLWxlZnQ6bm9uZTtib3JkZXItcmlnaHQtd2lkdGg6Y2FsYygyLzE1ICogdmFyKC0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplKSk7Ym9yZGVyLWJvdHRvbS13aWR0aDpjYWxjKDIvMTUgKiB2YXIoLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LXNpemUpKTtib3JkZXItY29sb3I6dmFyKC0tcGFwZXItY2hlY2tib3gtY2hlY2ttYXJrLWNvbG9yLCNmZmYpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo5NyUgODYlO3RyYW5zZm9ybS1vcmlnaW46OTclIDg2JTtib3gtc2l6aW5nOmNvbnRlbnQtYm94fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSAjY2hlY2ttYXJrey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTQlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDE0JX0jY2hlY2tib3hMYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7cGFkZGluZy1sZWZ0OnZhcigtLXBhcGVyLWNoZWNrYm94LWxhYmVsLXNwYWNpbmcsOHB4KTt3aGl0ZS1zcGFjZTpub3JtYWw7bGluZS1oZWlnaHQ6bm9ybWFsO2NvbG9yOnZhcigtLXBhcGVyLWNoZWNrYm94LWxhYmVsLWNvbG9yLHZhcigtLXByaW1hcnktdGV4dC1jb2xvcikpO0BhcHBseSAtLXBhcGVyLWNoZWNrYm94LWxhYmVsO306aG9zdChbY2hlY2tlZF0pICNjaGVja2JveExhYmVse2NvbG9yOnZhcigtLXBhcGVyLWNoZWNrYm94LWxhYmVsLWNoZWNrZWQtY29sb3IsdmFyKC0tcGFwZXItY2hlY2tib3gtbGFiZWwtY29sb3IsdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKSkpO0BhcHBseSAtLXBhcGVyLWNoZWNrYm94LWxhYmVsLWNoZWNrZWQ7fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSAjY2hlY2tib3hMYWJlbHtwYWRkaW5nLXJpZ2h0OnZhcigtLXBhcGVyLWNoZWNrYm94LWxhYmVsLXNwYWNpbmcsOHB4KTtwYWRkaW5nLWxlZnQ6MH0jY2hlY2tib3hMYWJlbFtoaWRkZW5de2Rpc3BsYXk6bm9uZX06aG9zdChbZGlzYWJsZWRdKSAjY2hlY2tib3h7b3BhY2l0eTouNTtib3JkZXItY29sb3I6dmFyKC0tcGFwZXItY2hlY2tib3gtdW5jaGVja2VkLWNvbG9yLHZhcigtLXByaW1hcnktdGV4dC1jb2xvcikpfTpob3N0KFtkaXNhYmxlZF1bY2hlY2tlZF0pICNjaGVja2JveHtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXBhcGVyLWNoZWNrYm94LXVuY2hlY2tlZC1jb2xvcix2YXIoLS1wcmltYXJ5LXRleHQtY29sb3IpKTtvcGFjaXR5Oi41fTpob3N0KFtkaXNhYmxlZF0pICNjaGVja2JveExhYmVse29wYWNpdHk6LjY1fSNjaGVja2JveC5pbnZhbGlkOm5vdCguY2hlY2tlZCl7Ym9yZGVyLWNvbG9yOnZhcigtLXBhcGVyLWNoZWNrYm94LWVycm9yLWNvbG9yLHZhcigtLWVycm9yLWNvbG9yKSl9PC9zdHlsZT4gPGRpdiBpZD1jaGVja2JveENvbnRhaW5lcj4gPGRpdiBpZD1jaGVja2JveCBjbGFzcyQ9XFxcIltbX2NvbXB1dGVDaGVja2JveENsYXNzKGNoZWNrZWQsIGludmFsaWQpXV1cXFwiPiA8ZGl2IGlkPWNoZWNrbWFyayBjbGFzcyQ9W1tfY29tcHV0ZUNoZWNrbWFya0NsYXNzKGNoZWNrZWQpXV0+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBpZD1jaGVja2JveExhYmVsPjxzbG90Pjwvc2xvdD48L2Rpdj4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItY2hlY2tib3gnLFxuXG4gIGJlaGF2aW9yczogW1BvbHltZXIuUGFwZXJDaGVja2VkRWxlbWVudEJlaGF2aW9yXSxcblxuICBob3N0QXR0cmlidXRlczoge1xuICAgIHJvbGU6ICdjaGVja2JveCcsXG4gICAgJ2FyaWEtY2hlY2tlZCc6IGZhbHNlLFxuICAgIHRhYmluZGV4OiAwXG4gIH0sXG5cbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIGNoZWNrZWQgc3RhdGUgY2hhbmdlcyBkdWUgdG8gdXNlciBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBjaGFuZ2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIGNoZWNrZWQgc3RhdGUgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBldmVudCBpcm9uLWNoYW5nZVxuICAgICAqL1xuICAgIGFyaWFBY3RpdmVBdHRyaWJ1dGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnYXJpYS1jaGVja2VkJ1xuICAgIH1cbiAgfSxcblxuICBhdHRhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgIC8vIFdhaXQgdW50aWwgc3R5bGVzIGhhdmUgcmVzb2x2ZWQgdG8gY2hlY2sgZm9yIHRoZSBkZWZhdWx0IHNlbnRpbmVsLlxuICAgIC8vIFNlZSBwb2x5bWVyIzQwMDkgZm9yIG1vcmUgZGV0YWlscy5cbiAgICBQb2x5bWVyLlJlbmRlclN0YXR1cy5hZnRlck5leHRSZW5kZXIodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlua1NpemUgPSB0aGlzLmdldENvbXB1dGVkU3R5bGVWYWx1ZSgnLS1jYWxjdWxhdGVkLXBhcGVyLWNoZWNrYm94LWluay1zaXplJykudHJpbSgpO1xuICAgICAgLy8gSWYgdW5zZXQsIGNvbXB1dGUgYW5kIHNldCB0aGUgZGVmYXVsdCBgLS1wYXBlci1jaGVja2JveC1pbmstc2l6ZWAuXG4gICAgICBpZiAoaW5rU2l6ZSA9PT0gJy0xcHgnKSB7XG4gICAgICAgIHZhciBjaGVja2JveFNpemVUZXh0ID0gdGhpcy5nZXRDb21wdXRlZFN0eWxlVmFsdWUoJy0tY2FsY3VsYXRlZC1wYXBlci1jaGVja2JveC1zaXplJykudHJpbSgpO1xuXG4gICAgICAgIHZhciB1bml0cyA9IGNoZWNrYm94U2l6ZVRleHQubWF0Y2goL1tBLVphLXpdKyQvKVswXSB8fCAncHgnO1xuICAgICAgICB2YXIgY2hlY2tib3hTaXplID0gcGFyc2VGbG9hdChjaGVja2JveFNpemVUZXh0LCAxMCk7XG4gICAgICAgIHZhciBkZWZhdWx0SW5rU2l6ZSA9IDggLyAzICogY2hlY2tib3hTaXplO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3B4Jykge1xuICAgICAgICAgIGRlZmF1bHRJbmtTaXplID0gTWF0aC5mbG9vcihkZWZhdWx0SW5rU2l6ZSk7XG5cbiAgICAgICAgICAvLyBUaGUgY2hlY2tib3ggYW5kIHJpcHBsZSBuZWVkIHRvIGhhdmUgdGhlIHNhbWUgcGFyaXR5IHNvIHRoYXQgdGhlaXJcbiAgICAgICAgICAvLyBjZW50ZXJzIGFsaWduLlxuICAgICAgICAgIGlmIChkZWZhdWx0SW5rU2l6ZSAlIDIgIT09IGNoZWNrYm94U2l6ZSAlIDIpIHtcbiAgICAgICAgICAgIGRlZmF1bHRJbmtTaXplKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZXMoe1xuICAgICAgICAgICctLXBhcGVyLWNoZWNrYm94LWluay1zaXplJzogZGVmYXVsdElua1NpemUgKyB1bml0c1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBfY29tcHV0ZUNoZWNrYm94Q2xhc3M6IGZ1bmN0aW9uIChjaGVja2VkLCBpbnZhbGlkKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgIGlmIChjaGVja2VkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gJ2NoZWNrZWQgJztcbiAgICB9XG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSAnaW52YWxpZCc7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH0sXG5cbiAgX2NvbXB1dGVDaGVja21hcmtDbGFzczogZnVuY3Rpb24gKGNoZWNrZWQpIHtcbiAgICByZXR1cm4gY2hlY2tlZCA/ICcnIDogJ2hpZGRlbic7XG4gIH0sXG5cbiAgLy8gY3JlYXRlIHJpcHBsZSBpbnNpZGUgdGhlIGNoZWNrYm94Q29udGFpbmVyXG4gIF9jcmVhdGVSaXBwbGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yaXBwbGVDb250YWluZXIgPSB0aGlzLiQuY2hlY2tib3hDb250YWluZXI7XG4gICAgcmV0dXJuIFBvbHltZXIuUGFwZXJJbmt5Rm9jdXNCZWhhdmlvckltcGwuX2NyZWF0ZVJpcHBsZS5jYWxsKHRoaXMpO1xuICB9XG5cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1jaGVja2JveC9wYXBlci1jaGVja2JveC5odG1sXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///99\n");

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(101);\n\n__webpack_require__(35);\n\n/**\n * Use `Polymer.PaperCheckedElementBehavior` to implement a custom element\n * that has a `checked` property similar to `Polymer.IronCheckedElementBehavior`\n * and is compatible with having a ripple effect.\n * @polymerBehavior Polymer.PaperCheckedElementBehavior\n */\nPolymer.PaperCheckedElementBehaviorImpl = {\n  /**\n   * Synchronizes the element's checked state with its ripple effect.\n   */\n  _checkedChanged: function () {\n    Polymer.IronCheckedElementBehaviorImpl._checkedChanged.call(this);\n    if (this.hasRipple()) {\n      if (this.checked) {\n        this._ripple.setAttribute('checked', '');\n      } else {\n        this._ripple.removeAttribute('checked');\n      }\n    }\n  },\n\n  /**\n   * Synchronizes the element's `active` and `checked` state.\n   */\n  _buttonStateChanged: function () {\n    Polymer.PaperRippleBehavior._buttonStateChanged.call(this);\n    if (this.disabled) {\n      return;\n    }\n    if (this.isAttached) {\n      this.checked = this.active;\n    }\n  }\n};\n\n/** @polymerBehavior Polymer.PaperCheckedElementBehavior */\nPolymer.PaperCheckedElementBehavior = [Polymer.PaperInkyFocusBehavior, Polymer.IronCheckedElementBehavior, Polymer.PaperCheckedElementBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1iZWhhdmlvcnMvcGFwZXItY2hlY2tlZC1lbGVtZW50LWJlaGF2aW9yLmh0bWw/OGI4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tY2hlY2tlZC1lbGVtZW50LWJlaGF2aW9yL2lyb24tY2hlY2tlZC1lbGVtZW50LWJlaGF2aW9yLmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1pbmt5LWZvY3VzLWJlaGF2aW9yLmh0bWwnKTtcblxuLyoqXG4gKiBVc2UgYFBvbHltZXIuUGFwZXJDaGVja2VkRWxlbWVudEJlaGF2aW9yYCB0byBpbXBsZW1lbnQgYSBjdXN0b20gZWxlbWVudFxuICogdGhhdCBoYXMgYSBgY2hlY2tlZGAgcHJvcGVydHkgc2ltaWxhciB0byBgUG9seW1lci5Jcm9uQ2hlY2tlZEVsZW1lbnRCZWhhdmlvcmBcbiAqIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggaGF2aW5nIGEgcmlwcGxlIGVmZmVjdC5cbiAqIEBwb2x5bWVyQmVoYXZpb3IgUG9seW1lci5QYXBlckNoZWNrZWRFbGVtZW50QmVoYXZpb3JcbiAqL1xuUG9seW1lci5QYXBlckNoZWNrZWRFbGVtZW50QmVoYXZpb3JJbXBsID0ge1xuICAvKipcbiAgICogU3luY2hyb25pemVzIHRoZSBlbGVtZW50J3MgY2hlY2tlZCBzdGF0ZSB3aXRoIGl0cyByaXBwbGUgZWZmZWN0LlxuICAgKi9cbiAgX2NoZWNrZWRDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgUG9seW1lci5Jcm9uQ2hlY2tlZEVsZW1lbnRCZWhhdmlvckltcGwuX2NoZWNrZWRDaGFuZ2VkLmNhbGwodGhpcyk7XG4gICAgaWYgKHRoaXMuaGFzUmlwcGxlKCkpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcbiAgICAgICAgdGhpcy5fcmlwcGxlLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JpcHBsZS5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN5bmNocm9uaXplcyB0aGUgZWxlbWVudCdzIGBhY3RpdmVgIGFuZCBgY2hlY2tlZGAgc3RhdGUuXG4gICAqL1xuICBfYnV0dG9uU3RhdGVDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yLl9idXR0b25TdGF0ZUNoYW5nZWQuY2FsbCh0aGlzKTtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmFjdGl2ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJDaGVja2VkRWxlbWVudEJlaGF2aW9yICovXG5Qb2x5bWVyLlBhcGVyQ2hlY2tlZEVsZW1lbnRCZWhhdmlvciA9IFtQb2x5bWVyLlBhcGVySW5reUZvY3VzQmVoYXZpb3IsIFBvbHltZXIuSXJvbkNoZWNrZWRFbGVtZW50QmVoYXZpb3IsIFBvbHltZXIuUGFwZXJDaGVja2VkRWxlbWVudEJlaGF2aW9ySW1wbF07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1jaGVja2VkLWVsZW1lbnQtYmVoYXZpb3IuaHRtbFxuLy8gbW9kdWxlIGlkID0gMTAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n");

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(38);\n\n__webpack_require__(39);\n\n/**\n * Use `Polymer.IronCheckedElementBehavior` to implement a custom element\n * that has a `checked` property, which can be used for validation if the\n * element is also `required`. Element instances implementing this behavior\n * will also be registered for use in an `iron-form` element.\n *\n * @demo demo/index.html\n * @polymerBehavior Polymer.IronCheckedElementBehavior\n */\nPolymer.IronCheckedElementBehaviorImpl = {\n\n  properties: {\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n\n    /**\n     * Gets or sets the state, `true` is checked and `false` is unchecked.\n     */\n    checked: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      notify: true,\n      observer: '_checkedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {\n      type: Boolean,\n      value: true,\n      reflectToAttribute: true\n    },\n\n    /* Overriden from Polymer.IronFormElementBehavior */\n    value: {\n      type: String,\n      value: 'on',\n      observer: '_valueChanged'\n    }\n  },\n\n  observers: ['_requiredChanged(required)'],\n\n  created: function () {\n    // Used by `iron-form` to handle the case that an element with this behavior\n    // doesn't have a role of 'checkbox' or 'radio', but should still only be\n    // included when the form is serialized if `this.checked === true`.\n    this._hasIronCheckedElementBehavior = true;\n  },\n\n  /**\n   * Returns false if the element is required and not checked, and true otherwise.\n   * @param {*=} _value Ignored.\n   * @return {boolean} true if `required` is false or if `checked` is true.\n   */\n  _getValidity: function (_value) {\n    return this.disabled || !this.required || this.checked;\n  },\n\n  /**\n   * Update the aria-required label when `required` is changed.\n   */\n  _requiredChanged: function () {\n    if (this.required) {\n      this.setAttribute('aria-required', 'true');\n    } else {\n      this.removeAttribute('aria-required');\n    }\n  },\n\n  /**\n   * Fire `iron-changed` when the checked state changes.\n   */\n  _checkedChanged: function () {\n    this.active = this.checked;\n    this.fire('iron-change');\n  },\n\n  /**\n   * Reset value to 'on' if it is set to `undefined`.\n   */\n  _valueChanged: function () {\n    if (this.value === undefined || this.value === null) {\n      this.value = 'on';\n    }\n  }\n};\n\n/** @polymerBehavior Polymer.IronCheckedElementBehavior */\nPolymer.IronCheckedElementBehavior = [Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior, Polymer.IronCheckedElementBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWNoZWNrZWQtZWxlbWVudC1iZWhhdmlvci9pcm9uLWNoZWNrZWQtZWxlbWVudC1iZWhhdmlvci5odG1sP2NjYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLXZhbGlkYXRhYmxlLWJlaGF2aW9yL2lyb24tdmFsaWRhdGFibGUtYmVoYXZpb3IuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9pcm9uLWZvcm0tZWxlbWVudC1iZWhhdmlvci9pcm9uLWZvcm0tZWxlbWVudC1iZWhhdmlvci5odG1sJyk7XG5cbi8qKlxuICogVXNlIGBQb2x5bWVyLklyb25DaGVja2VkRWxlbWVudEJlaGF2aW9yYCB0byBpbXBsZW1lbnQgYSBjdXN0b20gZWxlbWVudFxuICogdGhhdCBoYXMgYSBgY2hlY2tlZGAgcHJvcGVydHksIHdoaWNoIGNhbiBiZSB1c2VkIGZvciB2YWxpZGF0aW9uIGlmIHRoZVxuICogZWxlbWVudCBpcyBhbHNvIGByZXF1aXJlZGAuIEVsZW1lbnQgaW5zdGFuY2VzIGltcGxlbWVudGluZyB0aGlzIGJlaGF2aW9yXG4gKiB3aWxsIGFsc28gYmUgcmVnaXN0ZXJlZCBmb3IgdXNlIGluIGFuIGBpcm9uLWZvcm1gIGVsZW1lbnQuXG4gKlxuICogQGRlbW8gZGVtby9pbmRleC5odG1sXG4gKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuSXJvbkNoZWNrZWRFbGVtZW50QmVoYXZpb3JcbiAqL1xuUG9seW1lci5Jcm9uQ2hlY2tlZEVsZW1lbnRCZWhhdmlvckltcGwgPSB7XG5cbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIGNoZWNrZWQgc3RhdGUgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBldmVudCBpcm9uLWNoYW5nZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzdGF0ZSwgYHRydWVgIGlzIGNoZWNrZWQgYW5kIGBmYWxzZWAgaXMgdW5jaGVja2VkLlxuICAgICAqL1xuICAgIGNoZWNrZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICBub3RpZnk6IHRydWUsXG4gICAgICBvYnNlcnZlcjogJ19jaGVja2VkQ2hhbmdlZCdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiB0b2dnbGVzIHRoZSBhY3RpdmUgc3RhdGUgd2l0aCBlYWNoIHRhcCBvciBwcmVzc1xuICAgICAqIG9mIHRoZSBzcGFjZWJhci5cbiAgICAgKi9cbiAgICB0b2dnbGVzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IHRydWUsXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICB9LFxuXG4gICAgLyogT3ZlcnJpZGVuIGZyb20gUG9seW1lci5Jcm9uRm9ybUVsZW1lbnRCZWhhdmlvciAqL1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogJ29uJyxcbiAgICAgIG9ic2VydmVyOiAnX3ZhbHVlQ2hhbmdlZCdcbiAgICB9XG4gIH0sXG5cbiAgb2JzZXJ2ZXJzOiBbJ19yZXF1aXJlZENoYW5nZWQocmVxdWlyZWQpJ10sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgIC8vIFVzZWQgYnkgYGlyb24tZm9ybWAgdG8gaGFuZGxlIHRoZSBjYXNlIHRoYXQgYW4gZWxlbWVudCB3aXRoIHRoaXMgYmVoYXZpb3JcbiAgICAvLyBkb2Vzbid0IGhhdmUgYSByb2xlIG9mICdjaGVja2JveCcgb3IgJ3JhZGlvJywgYnV0IHNob3VsZCBzdGlsbCBvbmx5IGJlXG4gICAgLy8gaW5jbHVkZWQgd2hlbiB0aGUgZm9ybSBpcyBzZXJpYWxpemVkIGlmIGB0aGlzLmNoZWNrZWQgPT09IHRydWVgLlxuICAgIHRoaXMuX2hhc0lyb25DaGVja2VkRWxlbWVudEJlaGF2aW9yID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBmYWxzZSBpZiB0aGUgZWxlbWVudCBpcyByZXF1aXJlZCBhbmQgbm90IGNoZWNrZWQsIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAgICogQHBhcmFtIHsqPX0gX3ZhbHVlIElnbm9yZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYHJlcXVpcmVkYCBpcyBmYWxzZSBvciBpZiBgY2hlY2tlZGAgaXMgdHJ1ZS5cbiAgICovXG4gIF9nZXRWYWxpZGl0eTogZnVuY3Rpb24gKF92YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkIHx8ICF0aGlzLnJlcXVpcmVkIHx8IHRoaXMuY2hlY2tlZDtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBhcmlhLXJlcXVpcmVkIGxhYmVsIHdoZW4gYHJlcXVpcmVkYCBpcyBjaGFuZ2VkLlxuICAgKi9cbiAgX3JlcXVpcmVkQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1yZXF1aXJlZCcsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdhcmlhLXJlcXVpcmVkJyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaXJlIGBpcm9uLWNoYW5nZWRgIHdoZW4gdGhlIGNoZWNrZWQgc3RhdGUgY2hhbmdlcy5cbiAgICovXG4gIF9jaGVja2VkQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWN0aXZlID0gdGhpcy5jaGVja2VkO1xuICAgIHRoaXMuZmlyZSgnaXJvbi1jaGFuZ2UnKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVzZXQgdmFsdWUgdG8gJ29uJyBpZiBpdCBpcyBzZXQgdG8gYHVuZGVmaW5lZGAuXG4gICAqL1xuICBfdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnZhbHVlID09PSBudWxsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gJ29uJztcbiAgICB9XG4gIH1cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuSXJvbkNoZWNrZWRFbGVtZW50QmVoYXZpb3IgKi9cblBvbHltZXIuSXJvbkNoZWNrZWRFbGVtZW50QmVoYXZpb3IgPSBbUG9seW1lci5Jcm9uRm9ybUVsZW1lbnRCZWhhdmlvciwgUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvciwgUG9seW1lci5Jcm9uQ2hlY2tlZEVsZW1lbnRCZWhhdmlvckltcGxdO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWNoZWNrZWQtZWxlbWVudC1iZWhhdmlvci9pcm9uLWNoZWNrZWQtZWxlbWVudC1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n");

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(39);\n\n__webpack_require__(103);\n\n__webpack_require__(105);\n\n__webpack_require__(106);\n\n__webpack_require__(107);\n\n__webpack_require__(108);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-input> <template> <style>:host{display:block}:host([focused]){outline:0}:host([hidden]){display:none!important}input{position:relative;outline:0;box-shadow:none;margin:0;padding:0;width:100%;max-width:100%;background:0 0;border:none;color:var(--paper-input-container-input-color,var(--primary-text-color));-webkit-appearance:none;text-align:inherit;vertical-align:bottom;min-width:0;@apply --paper-font-subhead;@apply --paper-input-container-input;}input:disabled{@apply --paper-input-container-input-disabled;}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{@apply --paper-input-container-input-webkit-spinner;}input::-webkit-clear-button{@apply --paper-input-container-input-webkit-clear;}input::-webkit-input-placeholder{color:var(--paper-input-container-color,var(--secondary-text-color))}input:-moz-placeholder{color:var(--paper-input-container-color,var(--secondary-text-color))}input::-moz-placeholder{color:var(--paper-input-container-color,var(--secondary-text-color))}input::-ms-clear{@apply --paper-input-container-ms-clear;}input::-ms-reveal{@apply --paper-input-container-ms-reveal;}input:-ms-input-placeholder{color:var(--paper-input-container-color,var(--secondary-text-color))}label{pointer-events:none}</style> <paper-input-container id=container no-label-float=[[noLabelFloat]] always-float-label=[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]] auto-validate$=[[autoValidate]] disabled$=[[disabled]] invalid=[[invalid]]> <slot name=prefix slot=prefix></slot> <label hidden$=[[!label]] aria-hidden=true for=input slot=label>[[label]]</label> <span id=template-placeholder></span> <slot name=suffix slot=suffix></slot> <template is=dom-if if=[[errorMessage]]> <paper-input-error aria-live=assertive slot=add-on>[[errorMessage]]</paper-input-error> </template> <template is=dom-if if=[[charCounter]]> <paper-input-char-counter slot=add-on></paper-input-char-counter> </template> </paper-input-container> </template> <template id=v0> <input is=iron-input id=input slot=input aria-labelledby$=[[_ariaLabelledBy]] aria-describedby$=[[_ariaDescribedBy]] disabled$=[[disabled]] title$=[[title]] bind-value={{value}} invalid={{invalid}} prevent-invalid-input=[[preventInvalidInput]] allowed-pattern=[[allowedPattern]] validator=[[validator]] type$=[[type]] pattern$=[[pattern]] required$=[[required]] autocomplete$=[[autocomplete]] autofocus$=[[autofocus]] inputmode$=[[inputmode]] minlength$=[[minlength]] maxlength$=[[maxlength]] min$=[[min]] max$=[[max]] step$=[[step]] name$=[[name]] placeholder$=[[placeholder]] readonly$=[[readonly]] list$=[[list]] size$=[[size]] autocapitalize$=[[autocapitalize]] autocorrect$=[[autocorrect]] on-change=_onChange tabindex$=[[tabIndex]] autosave$=[[autosave]] results$=[[results]] accept$=[[accept]] multiple$=[[multiple]]> </template> <template id=v1> <iron-input bind-value={{value}} id=input slot=input maxlength$=[[maxlength]] allowed-pattern=[[allowedPattern]] invalid={{invalid}} validator=[[validator]]> <input id=nativeInput aria-labelledby$=[[_ariaLabelledBy]] aria-describedby$=[[_ariaDescribedBy]] disabled$=[[disabled]] title$=[[title]] type$=[[type]] pattern$=[[pattern]] required$=[[required]] autocomplete$=[[autocomplete]] autofocus$=[[autofocus]] inputmode$=[[inputmode]] minlength$=[[minlength]] maxlength$=[[maxlength]] min$=[[min]] max$=[[max]] step$=[[step]] name$=[[name]] placeholder$=[[placeholder]] readonly$=[[readonly]] list$=[[list]] size$=[[size]] autocapitalize$=[[autocapitalize]] autocorrect$=[[autocorrect]] on-change=_onChange tabindex$=[[tabIndex]] autosave$=[[autosave]] results$=[[results]] accept$=[[accept]] multiple$=[[multiple]]> </iron-input> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-input',\n\n  behaviors: [Polymer.PaperInputBehavior, Polymer.IronFormElementBehavior],\n\n  beforeRegister: function () {\n    // We need to tell which kind of of template to stamp based on\n    // what kind of `iron-input` we got, but because of polyfills and\n    // custom elements differences between v0 and v1, the safest bet is\n    // to check a particular method we know the iron-input#2.x can have.\n    // If it doesn't have it, then it's an iron-input#1.x.\n    var ironInput = document.createElement('iron-input');\n    var version = typeof ironInput._initSlottedInput == 'function' ? 'v1' : 'v0';\n    var template = Polymer.DomModule.import('paper-input', 'template');\n    var inputTemplate = Polymer.DomModule.import('paper-input', 'template#' + version);\n    var inputPlaceholder = template.content.querySelector('#template-placeholder');\n    if (inputPlaceholder) {\n      inputPlaceholder.parentNode.replaceChild(inputTemplate.content, inputPlaceholder);\n    }\n    // else it's already been processed, probably in superclass\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from PaperInputBehavior\n   * to correctly focus the native input.\n   */\n  get _focusableElement() {\n    return Polymer.Element ? this.inputElement._inputElement : this.inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {\n    'iron-input-ready': '_onIronInputReady'\n  },\n\n  _onIronInputReady: function () {\n    if (this.inputElement && this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///102\n");

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(104);\n\n__webpack_require__(38);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-input> <template> <style>:host{display:inline-block}</style> <slot id=content></slot> </template> </dom-module>\");\n\nPolymer({\n  is: 'iron-input',\n\n  behaviors: [Polymer.IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {\n      type: String\n    },\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {\n      computed: '_computeValue(bindValue)'\n    },\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the list\n     * will be rejected. The recommended format should be a list of allowed characters,\n     * for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user inputs text,\n     * each individual character will be checked against the pattern (rather than checking\n     * the entire value as a whole). If a character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any character\n     * doesn't match `allowedPattern`, the entire pasted string will be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {\n      type: String\n    },\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n\n  listeners: {\n    'input': '_onInput',\n    'keypress': '_onKeypress'\n  },\n\n  created: function () {\n    Polymer.IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function () {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = Polymer.dom(this).observeNodes(function (info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function () {\n    if (this._observer) {\n      Polymer.dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed <input> element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function () {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function (bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually initialized\n    // this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', { value: bindValue });\n  },\n\n  _onInput: function () {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter('Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function (event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress` event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = event.keyCode == 8 || // backspace\n    event.keyCode == 9 || // tab\n    event.keyCode == 13 || // enter\n    event.keyCode == 27; // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = event.keyCode == 19 || // pause\n    event.keyCode == 20 || // caps lock\n    event.keyCode == 45 || // insert\n    event.keyCode == 46 || // delete\n    event.keyCode == 144 || // num lock\n    event.keyCode == 145 || // scroll lock\n    event.keyCode > 32 && event.keyCode < 41 || // page up/down, end, home, arrows\n    event.keyCode > 111 && event.keyCode < 124; // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function (event) {\n    if (!this.allowedPattern && this.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter('Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function () {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator` will be used first,\n   * then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function () {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = Polymer.IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function (message) {\n    this.fire('iron-announce', { text: message });\n  },\n\n  _computeValue: function (bindValue) {\n    return bindValue;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWlucHV0L2lyb24taW5wdXQuaHRtbD9mNGFjIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1hMTF5LWFubm91bmNlci9pcm9uLWExMXktYW5ub3VuY2VyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi12YWxpZGF0YWJsZS1iZWhhdmlvci9pcm9uLXZhbGlkYXRhYmxlLWJlaGF2aW9yLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pcm9uLWlucHV0PiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtkaXNwbGF5OmlubGluZS1ibG9ja308L3N0eWxlPiA8c2xvdCBpZD1jb250ZW50Pjwvc2xvdD4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAnaXJvbi1pbnB1dCcsXG5cbiAgYmVoYXZpb3JzOiBbUG9seW1lci5Jcm9uVmFsaWRhdGFibGVCZWhhdmlvcl0sXG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW5ldmVyIGB2YWxpZGF0ZSgpYCBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEBldmVudCBpcm9uLWlucHV0LXZhbGlkYXRlXG4gICAqL1xuXG4gIHByb3BlcnRpZXM6IHtcblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIHByb3BlcnR5IGluc3RlYWQgb2YgYHZhbHVlYCBmb3IgdHdvLXdheSBkYXRhIGJpbmRpbmcsIG9yIHRvXG4gICAgICogc2V0IGEgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGlucHV0LiAqKkRvIG5vdCoqIHVzZSB0aGUgZGlzdHJpYnV0ZWRcbiAgICAgKiBpbnB1dCdzIGB2YWx1ZWAgcHJvcGVydHkgdG8gc2V0IGEgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKi9cbiAgICBiaW5kVmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlZCBwcm9wZXJ0eSB0aGF0IGVjaG9lcyBgYmluZFZhbHVlYCAobW9zdGx5IHVzZWQgZm9yIFBvbHltZXIgMS4wXG4gICAgICogYmFja2NvbXBhdGliaWxpdHksIGlmIHlvdSB3ZXJlIG9uZS13YXkgYmluZGluZyB0byB0aGUgUG9seW1lciAxLjBcbiAgICAgKiBgaW5wdXQgaXM9XCJpcm9uLWlucHV0XCJgIHZhbHVlIGF0dHJpYnV0ZSkuXG4gICAgICovXG4gICAgdmFsdWU6IHtcbiAgICAgIGNvbXB1dGVkOiAnX2NvbXB1dGVWYWx1ZShiaW5kVmFsdWUpJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWdleC1saWtlIGxpc3Qgb2YgY2hhcmFjdGVycyBhbGxvd2VkIGFzIGlucHV0OyBhbGwgY2hhcmFjdGVycyBub3QgaW4gdGhlIGxpc3RcbiAgICAgKiB3aWxsIGJlIHJlamVjdGVkLiBUaGUgcmVjb21tZW5kZWQgZm9ybWF0IHNob3VsZCBiZSBhIGxpc3Qgb2YgYWxsb3dlZCBjaGFyYWN0ZXJzLFxuICAgICAqIGZvciBleGFtcGxlLCBgW2EtekEtWjAtOS4rLSE7Ol1gLlxuICAgICAqXG4gICAgICogVGhpcyBwYXR0ZXJuIHJlcHJlc2VudHMgdGhlIGFsbG93ZWQgY2hhcmFjdGVycyBmb3IgdGhlIGZpZWxkOyBhcyB0aGUgdXNlciBpbnB1dHMgdGV4dCxcbiAgICAgKiBlYWNoIGluZGl2aWR1YWwgY2hhcmFjdGVyIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSBwYXR0ZXJuIChyYXRoZXIgdGhhbiBjaGVja2luZ1xuICAgICAqIHRoZSBlbnRpcmUgdmFsdWUgYXMgYSB3aG9sZSkuIElmIGEgY2hhcmFjdGVyIGlzIG5vdCBhIG1hdGNoLCBpdCB3aWxsIGJlIHJlamVjdGVkLlxuICAgICAqXG4gICAgICogUGFzdGVkIGlucHV0IHdpbGwgaGF2ZSBlYWNoIGNoYXJhY3RlciBjaGVja2VkIGluZGl2aWR1YWxseTsgaWYgYW55IGNoYXJhY3RlclxuICAgICAqIGRvZXNuJ3QgbWF0Y2ggYGFsbG93ZWRQYXR0ZXJuYCwgdGhlIGVudGlyZSBwYXN0ZWQgc3RyaW5nIHdpbGwgYmUgcmVqZWN0ZWQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBpZiB5b3Ugd2VyZSB1c2luZyBgaXJvbi1pbnB1dGAgaW4gMS4wLCB5b3Ugd2VyZSBhbHNvIHJlcXVpcmVkIHRvXG4gICAgICogc2V0IGBwcmV2ZW50LWludmFsaWQtaW5wdXRgLiBUaGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgYXMgb2YgUG9seW1lciAyLjAsXG4gICAgICogYW5kIHdpbGwgYmUgc2V0IGF1dG9tYXRpY2FsbHkgZm9yIHlvdSBpZiBhbiBgYWxsb3dlZFBhdHRlcm5gIGlzIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICovXG4gICAgYWxsb3dlZFBhdHRlcm46IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSB0byBhdXRvLXZhbGlkYXRlIHRoZSBpbnB1dCB2YWx1ZSBhcyB5b3UgdHlwZS5cbiAgICAgKi9cbiAgICBhdXRvVmFsaWRhdGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2VcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIG5hdGl2ZSBpbnB1dCBlbGVtZW50LlxuICAgICAqL1xuICAgIF9pbnB1dEVsZW1lbnQ6IE9iamVjdFxuICB9LFxuXG4gIG9ic2VydmVyczogWydfYmluZFZhbHVlQ2hhbmdlZChiaW5kVmFsdWUsIF9pbnB1dEVsZW1lbnQpJ10sXG5cbiAgbGlzdGVuZXJzOiB7XG4gICAgJ2lucHV0JzogJ19vbklucHV0JyxcbiAgICAna2V5cHJlc3MnOiAnX29uS2V5cHJlc3MnXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgIFBvbHltZXIuSXJvbkExMXlBbm5vdW5jZXIucmVxdWVzdEF2YWlsYWJpbGl0eSgpO1xuICAgIHRoaXMuX3ByZXZpb3VzVmFsaWRJbnB1dCA9ICcnO1xuICAgIHRoaXMuX3BhdHRlcm5BbHJlYWR5Q2hlY2tlZCA9IGZhbHNlO1xuICB9LFxuXG4gIGF0dGFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSWYgdGhlIGlucHV0IGlzIGFkZGVkIGF0IGEgbGF0ZXIgdGltZSwgdXBkYXRlIHRoZSBpbnRlcm5hbCByZWZlcmVuY2UuXG4gICAgdGhpcy5fb2JzZXJ2ZXIgPSBQb2x5bWVyLmRvbSh0aGlzKS5vYnNlcnZlTm9kZXMoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgIHRoaXMuX2luaXRTbG90dGVkSW5wdXQoKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9LFxuXG4gIGRldGFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX29ic2VydmVyKSB7XG4gICAgICBQb2x5bWVyLmRvbSh0aGlzKS51bm9ic2VydmVOb2Rlcyh0aGlzLl9vYnNlcnZlcik7XG4gICAgICB0aGlzLl9vYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXN0cmlidXRlZCA8aW5wdXQ+IGVsZW1lbnQuXG4gICAqL1xuICBnZXQgaW5wdXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnQ7XG4gIH0sXG5cbiAgX2luaXRTbG90dGVkSW5wdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnQgPSB0aGlzLmdldEVmZmVjdGl2ZUNoaWxkcmVuKClbMF07XG5cbiAgICBpZiAodGhpcy5pbnB1dEVsZW1lbnQgJiYgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUpIHtcbiAgICAgIHRoaXMuYmluZFZhbHVlID0gdGhpcy5pbnB1dEVsZW1lbnQudmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5maXJlKCdpcm9uLWlucHV0LXJlYWR5Jyk7XG4gIH0sXG5cbiAgZ2V0IF9wYXR0ZXJuUmVnRXhwKCkge1xuICAgIHZhciBwYXR0ZXJuO1xuICAgIGlmICh0aGlzLmFsbG93ZWRQYXR0ZXJuKSB7XG4gICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cCh0aGlzLmFsbG93ZWRQYXR0ZXJuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICBwYXR0ZXJuID0gL1swLTkuLGUtXS87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9XG4gICAqL1xuICBfYmluZFZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKGJpbmRWYWx1ZSwgaW5wdXRFbGVtZW50KSB7XG4gICAgLy8gVGhlIG9ic2VydmVyIGNvdWxkIGhhdmUgcnVuIGJlZm9yZSBhdHRhY2hlZCgpIHdoZW4gd2UgaGF2ZSBhY3R1YWxseSBpbml0aWFsaXplZFxuICAgIC8vIHRoaXMgcHJvcGVydHkuXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYmluZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChiaW5kVmFsdWUgIT09IGlucHV0RWxlbWVudC52YWx1ZSkge1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSBiaW5kVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXV0b1ZhbGlkYXRlKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gbWFudWFsbHkgbm90aWZ5IGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBub3RpZnkgdW50aWwgYWZ0ZXIgc2V0dGluZyB2YWx1ZVxuICAgIHRoaXMuZmlyZSgnYmluZC12YWx1ZS1jaGFuZ2VkJywgeyB2YWx1ZTogYmluZFZhbHVlIH0pO1xuICB9LFxuXG4gIF9vbklucHV0OiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gTmVlZCB0byB2YWxpZGF0ZSBlYWNoIG9mIHRoZSBjaGFyYWN0ZXJzIHBhc3RlZCBpZiB0aGV5IGhhdmVuJ3RcbiAgICAvLyBiZWVuIHZhbGlkYXRlZCBpbnNpZGUgYF9vbktleXByZXNzYCBhbHJlYWR5LlxuICAgIGlmICh0aGlzLmFsbG93ZWRQYXR0ZXJuICYmICF0aGlzLl9wYXR0ZXJuQWxyZWFkeUNoZWNrZWQpIHtcbiAgICAgIHZhciB2YWxpZCA9IHRoaXMuX2NoZWNrUGF0dGVyblZhbGlkaXR5KCk7XG4gICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIHRoaXMuX2Fubm91bmNlSW52YWxpZENoYXJhY3RlcignSW52YWxpZCBzdHJpbmcgb2YgY2hhcmFjdGVycyBub3QgZW50ZXJlZC4nKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSB0aGlzLl9wcmV2aW91c1ZhbGlkSW5wdXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYmluZFZhbHVlID0gdGhpcy5fcHJldmlvdXNWYWxpZElucHV0ID0gdGhpcy5pbnB1dEVsZW1lbnQudmFsdWU7XG4gICAgdGhpcy5fcGF0dGVybkFscmVhZHlDaGVja2VkID0gZmFsc2U7XG4gIH0sXG5cbiAgX2lzUHJpbnRhYmxlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBXaGF0IGEgY29udHJvbC9wcmludGFibGUgY2hhcmFjdGVyIGlzIHZhcmllcyB3aWxkbHkgYmFzZWQgb24gdGhlIGJyb3dzZXIuXG4gICAgLy8gLSBtb3N0IGNvbnRyb2wgY2hhcmFjdGVycyAoYXJyb3dzLCBiYWNrc3BhY2UpIGRvIG5vdCBzZW5kIGEgYGtleXByZXNzYCBldmVudFxuICAgIC8vICAgaW4gQ2hyb21lLCBidXQgdGhlICpkbyogb24gRmlyZWZveFxuICAgIC8vIC0gaW4gRmlyZWZveCwgd2hlbiB0aGV5IGRvIHNlbmQgYSBga2V5cHJlc3NgIGV2ZW50LCBjb250cm9sIGNoYXJzIGhhdmVcbiAgICAvLyAgIGEgY2hhckNvZGUgPSAwLCBrZXlDb2RlID0geHggKGZvciBleC4gNDAgZm9yIGRvd24gYXJyb3cpXG4gICAgLy8gLSBwcmludGFibGUgY2hhcmFjdGVycyBhbHdheXMgc2VuZCBhIGtleXByZXNzIGV2ZW50LlxuICAgIC8vIC0gaW4gRmlyZWZveCwgcHJpbnRhYmxlIGNoYXJzIGFsd2F5cyBoYXZlIGEga2V5Q29kZSA9IDAuIEluIENocm9tZSwgdGhlIGtleUNvZGVcbiAgICAvLyAgIGFsd2F5cyBtYXRjaGVzIHRoZSBjaGFyQ29kZS5cbiAgICAvLyBOb25lIG9mIHRoaXMgbWFrZXMgYW55IHNlbnNlLlxuXG4gICAgLy8gRm9yIHRoZXNlIGtleXMsIEFTQ0lJIGNvZGUgPT0gYnJvd3NlciBrZXljb2RlLlxuICAgIHZhciBhbnlOb25QcmludGFibGUgPSBldmVudC5rZXlDb2RlID09IDggfHwgLy8gYmFja3NwYWNlXG4gICAgZXZlbnQua2V5Q29kZSA9PSA5IHx8IC8vIHRhYlxuICAgIGV2ZW50LmtleUNvZGUgPT0gMTMgfHwgLy8gZW50ZXJcbiAgICBldmVudC5rZXlDb2RlID09IDI3OyAvLyBlc2NhcGVcblxuICAgIC8vIEZvciB0aGVzZSBrZXlzLCBtYWtlIHN1cmUgaXQncyBhIGJyb3dzZXIga2V5Y29kZSBhbmQgbm90IGFuIEFTQ0lJIGNvZGUuXG4gICAgdmFyIG1vek5vblByaW50YWJsZSA9IGV2ZW50LmtleUNvZGUgPT0gMTkgfHwgLy8gcGF1c2VcbiAgICBldmVudC5rZXlDb2RlID09IDIwIHx8IC8vIGNhcHMgbG9ja1xuICAgIGV2ZW50LmtleUNvZGUgPT0gNDUgfHwgLy8gaW5zZXJ0XG4gICAgZXZlbnQua2V5Q29kZSA9PSA0NiB8fCAvLyBkZWxldGVcbiAgICBldmVudC5rZXlDb2RlID09IDE0NCB8fCAvLyBudW0gbG9ja1xuICAgIGV2ZW50LmtleUNvZGUgPT0gMTQ1IHx8IC8vIHNjcm9sbCBsb2NrXG4gICAgZXZlbnQua2V5Q29kZSA+IDMyICYmIGV2ZW50LmtleUNvZGUgPCA0MSB8fCAvLyBwYWdlIHVwL2Rvd24sIGVuZCwgaG9tZSwgYXJyb3dzXG4gICAgZXZlbnQua2V5Q29kZSA+IDExMSAmJiBldmVudC5rZXlDb2RlIDwgMTI0OyAvLyBmbiBrZXlzXG5cbiAgICByZXR1cm4gIWFueU5vblByaW50YWJsZSAmJiAhKGV2ZW50LmNoYXJDb2RlID09IDAgJiYgbW96Tm9uUHJpbnRhYmxlKTtcbiAgfSxcblxuICBfb25LZXlwcmVzczogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRQYXR0ZXJuICYmIHRoaXMudHlwZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZ2V4cCA9IHRoaXMuX3BhdHRlcm5SZWdFeHA7XG4gICAgaWYgKCFyZWdleHApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgc3BlY2lhbCBrZXlzIGFuZCBiYWNrc3BhY2VcbiAgICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRoZSBwYXR0ZXJuIGVpdGhlciBoZXJlIG9yIGluIGBfb25JbnB1dGAsIGJ1dCBub3QgaW4gYm90aC5cbiAgICB0aGlzLl9wYXR0ZXJuQWxyZWFkeUNoZWNrZWQgPSB0cnVlO1xuXG4gICAgdmFyIHRoaXNDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC5jaGFyQ29kZSk7XG4gICAgaWYgKHRoaXMuX2lzUHJpbnRhYmxlKGV2ZW50KSAmJiAhcmVnZXhwLnRlc3QodGhpc0NoYXIpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5fYW5ub3VuY2VJbnZhbGlkQ2hhcmFjdGVyKCdJbnZhbGlkIGNoYXJhY3RlciAnICsgdGhpc0NoYXIgKyAnIG5vdCBlbnRlcmVkLicpO1xuICAgIH1cbiAgfSxcblxuICBfY2hlY2tQYXR0ZXJuVmFsaWRpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVnZXhwID0gdGhpcy5fcGF0dGVyblJlZ0V4cDtcbiAgICBpZiAoIXJlZ2V4cCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghcmVnZXhwLnRlc3QodGhpcy5pbnB1dEVsZW1lbnQudmFsdWVbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIHZhbGlkLiBUaGUgdmFsaWRhdG9yIHByb3ZpZGVkIGluIGB2YWxpZGF0b3JgIHdpbGwgYmUgdXNlZCBmaXJzdCxcbiAgICogdGhlbiBhbnkgY29uc3RyYWludHMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHZhbGlkLlxuICAgKi9cbiAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmludmFsaWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFVzZSB0aGUgbmVzdGVkIGlucHV0J3MgbmF0aXZlIHZhbGlkaXR5LlxuICAgIHZhciB2YWxpZCA9IHRoaXMuaW5wdXRFbGVtZW50LmNoZWNrVmFsaWRpdHkoKTtcblxuICAgIC8vIE9ubHkgZG8gZXh0cmEgY2hlY2tpbmcgaWYgdGhlIGJyb3dzZXIgdGhvdWdodCB0aGlzIHdhcyB2YWxpZC5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIC8vIEVtcHR5LCByZXF1aXJlZCBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICBpZiAodGhpcy5yZXF1aXJlZCAmJiB0aGlzLmJpbmRWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNWYWxpZGF0b3IoKSkge1xuICAgICAgICB2YWxpZCA9IFBvbHltZXIuSXJvblZhbGlkYXRhYmxlQmVoYXZpb3IudmFsaWRhdGUuY2FsbCh0aGlzLCB0aGlzLmJpbmRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pbnZhbGlkID0gIXZhbGlkO1xuICAgIHRoaXMuZmlyZSgnaXJvbi1pbnB1dC12YWxpZGF0ZScpO1xuICAgIHJldHVybiB2YWxpZDtcbiAgfSxcblxuICBfYW5ub3VuY2VJbnZhbGlkQ2hhcmFjdGVyOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHRoaXMuZmlyZSgnaXJvbi1hbm5vdW5jZScsIHsgdGV4dDogbWVzc2FnZSB9KTtcbiAgfSxcblxuICBfY29tcHV0ZVZhbHVlOiBmdW5jdGlvbiAoYmluZFZhbHVlKSB7XG4gICAgcmV0dXJuIGJpbmRWYWx1ZTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2lyb24taW5wdXQvaXJvbi1pbnB1dC5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///103\n");

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-a11y-announcer> <template> <style>:host{display:inline-block;position:fixed;clip:rect(0,0,0,0)}</style> <div aria-live$=[[mode]]>[[_text]]</div> </template> </dom-module>\");\n\n(function () {\n  'use strict';\n\n  Polymer.IronA11yAnnouncer = Polymer({\n    is: 'iron-a11y-announcer',\n\n    properties: {\n\n      /**\n       * The value of mode is used to set the `aria-live` attribute\n       * for the element that will be announced. Valid values are: `off`,\n       * `polite` and `assertive`.\n       */\n      mode: {\n        type: String,\n        value: 'polite'\n      },\n\n      _text: {\n        type: String,\n        value: ''\n      }\n    },\n\n    created: function () {\n      if (!Polymer.IronA11yAnnouncer.instance) {\n        Polymer.IronA11yAnnouncer.instance = this;\n      }\n\n      document.body.addEventListener('iron-announce', this._onIronAnnounce.bind(this));\n    },\n\n    /**\n     * Cause a text string to be announced by screen readers.\n     *\n     * @param {string} text The text that should be announced.\n     */\n    announce: function (text) {\n      this._text = '';\n      this.async(function () {\n        this._text = text;\n      }, 100);\n    },\n\n    _onIronAnnounce: function (event) {\n      if (event.detail && event.detail.text) {\n        this.announce(event.detail.text);\n      }\n    }\n  });\n\n  Polymer.IronA11yAnnouncer.instance = null;\n\n  Polymer.IronA11yAnnouncer.requestAvailability = function () {\n    if (!Polymer.IronA11yAnnouncer.instance) {\n      Polymer.IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n    }\n\n    document.body.appendChild(Polymer.IronA11yAnnouncer.instance);\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLWExMXktYW5ub3VuY2VyL2lyb24tYTExeS1hbm5vdW5jZXIuaHRtbD85ZjkyIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pcm9uLWExMXktYW5ub3VuY2VyPiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpmaXhlZDtjbGlwOnJlY3QoMCwwLDAsMCl9PC9zdHlsZT4gPGRpdiBhcmlhLWxpdmUkPVtbbW9kZV1dPltbX3RleHRdXTwvZGl2PiA8L3RlbXBsYXRlPiA8L2RvbS1tb2R1bGU+XCIpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgUG9seW1lci5Jcm9uQTExeUFubm91bmNlciA9IFBvbHltZXIoe1xuICAgIGlzOiAnaXJvbi1hMTF5LWFubm91bmNlcicsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHZhbHVlIG9mIG1vZGUgaXMgdXNlZCB0byBzZXQgdGhlIGBhcmlhLWxpdmVgIGF0dHJpYnV0ZVxuICAgICAgICogZm9yIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhbm5vdW5jZWQuIFZhbGlkIHZhbHVlcyBhcmU6IGBvZmZgLFxuICAgICAgICogYHBvbGl0ZWAgYW5kIGBhc3NlcnRpdmVgLlxuICAgICAgICovXG4gICAgICBtb2RlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6ICdwb2xpdGUnXG4gICAgICB9LFxuXG4gICAgICBfdGV4dDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIVBvbHltZXIuSXJvbkExMXlBbm5vdW5jZXIuaW5zdGFuY2UpIHtcbiAgICAgICAgUG9seW1lci5Jcm9uQTExeUFubm91bmNlci5pbnN0YW5jZSA9IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignaXJvbi1hbm5vdW5jZScsIHRoaXMuX29uSXJvbkFubm91bmNlLmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYXVzZSBhIHRleHQgc3RyaW5nIHRvIGJlIGFubm91bmNlZCBieSBzY3JlZW4gcmVhZGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGJlIGFubm91bmNlZC5cbiAgICAgKi9cbiAgICBhbm5vdW5jZTogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHRoaXMuX3RleHQgPSAnJztcbiAgICAgIHRoaXMuYXN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dDtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSxcblxuICAgIF9vbklyb25Bbm5vdW5jZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50ZXh0KSB7XG4gICAgICAgIHRoaXMuYW5ub3VuY2UoZXZlbnQuZGV0YWlsLnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgUG9seW1lci5Jcm9uQTExeUFubm91bmNlci5pbnN0YW5jZSA9IG51bGw7XG5cbiAgUG9seW1lci5Jcm9uQTExeUFubm91bmNlci5yZXF1ZXN0QXZhaWxhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghUG9seW1lci5Jcm9uQTExeUFubm91bmNlci5pbnN0YW5jZSkge1xuICAgICAgUG9seW1lci5Jcm9uQTExeUFubm91bmNlci5pbnN0YW5jZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lyb24tYTExeS1hbm5vdW5jZXInKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKFBvbHltZXIuSXJvbkExMXlBbm5vdW5jZXIuaW5zdGFuY2UpO1xuICB9O1xufSkoKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1hMTF5LWFubm91bmNlci9pcm9uLWExMXktYW5ub3VuY2VyLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///104\n");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(9);\n\n__webpack_require__(23);\n\n// Generate unique, monotonically increasing IDs for labels (needed by\n// aria-labelledby) and add-ons.\nPolymer.PaperInputHelper = {};\nPolymer.PaperInputHelper.NextLabelID = 1;\nPolymer.PaperInputHelper.NextAddonID = 1;\n\n/**\n * Use `Polymer.PaperInputBehavior` to implement inputs with `<paper-input-container>`. This\n * behavior is implemented by `<paper-input>`. It exposes a number of properties from\n * `<paper-input-container>` and `<input is=\"iron-input\">` and they should be bound in your\n * template.\n *\n * The input element can be accessed by the `inputElement` property if you need to access\n * properties or methods that are not exposed.\n * @polymerBehavior Polymer.PaperInputBehavior\n */\nPolymer.PaperInputBehaviorImpl = {\n\n  properties: {\n    /**\n     * Fired when the input changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * The label for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * `<label>`'s content and `hidden` property, e.g.\n     * `<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`\n     */\n    label: {\n      type: String\n    },\n\n    /**\n     * The value for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<iron-input>`'s `bindValue`\n     * property, or the value property of your input that is `notify:true`.\n     */\n    value: {\n      notify: true,\n      type: String\n    },\n\n    /**\n     * Set to true to disable this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * both the `<paper-input-container>`'s and the input's `disabled` property.\n     */\n    disabled: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Returns true if the value is invalid. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to both the\n     * `<paper-input-container>`'s and the input's `invalid` property.\n     *\n     * If `autoValidate` is true, the `invalid` attribute is managed automatically,\n     * which can clobber attempts to manage it manually.\n     */\n    invalid: {\n      type: Boolean,\n      value: false,\n      notify: true\n    },\n\n    /**\n     * Set this to specify the pattern allowed by `preventInvalidInput`. If\n     * you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\n     * property.\n     */\n    allowedPattern: {\n      type: String\n    },\n\n    /**\n     * The type of the input. The supported types are the\n     * [native input's types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\n     * If you're using PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or (Polymer 2)\n     * `<iron-input>`'s `type` property.\n     */\n    type: {\n      type: String\n    },\n\n    /**\n     * The datalist of the input (if any). This should match the id of an existing `<datalist>`.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `list` property.\n     */\n    list: {\n      type: String\n    },\n\n    /**\n     * A pattern to validate the `input` with. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `pattern` property.\n     */\n    pattern: {\n      type: String\n    },\n\n    /**\n     * Set to true to mark the input as required. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `required` property.\n     */\n    required: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The error message to display when the input is invalid. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the `<paper-input-error>`'s content, if using.\n     */\n    errorMessage: {\n      type: String\n    },\n\n    /**\n     * Set to true to show a character counter.\n     */\n    charCounter: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to disable the floating label. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to always float the label. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to auto-validate the input value. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<paper-input-container>`'s `autoValidate` property.\n     */\n    autoValidate: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Name of the validator to use. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `validator` property.\n     */\n    validator: {\n      type: String\n    },\n\n    // HTMLInputElement attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n     */\n    autocomplete: {\n      type: String,\n      value: 'off'\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n     */\n    autofocus: {\n      type: Boolean,\n      observer: '_autofocusChanged'\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n     */\n    inputmode: {\n      type: String\n    },\n\n    /**\n     * The minimum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `minlength` property.\n     */\n    minlength: {\n      type: Number\n    },\n\n    /**\n     * The maximum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.\n     */\n    maxlength: {\n      type: Number\n    },\n\n    /**\n     * The minimum (numeric or date-time) input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `min` property.\n     */\n    min: {\n      type: String\n    },\n\n    /**\n     * The maximum (numeric or date-time) input value.\n     * Can be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `max` property.\n     */\n    max: {\n      type: String\n    },\n\n    /**\n     * Limits the numeric or date-time increments.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `step` property.\n     */\n    step: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `name` property.\n     */\n    name: {\n      type: String\n    },\n\n    /**\n     * A placeholder string in addition to the label. If this is set, the label will always float.\n     */\n    placeholder: {\n      type: String,\n      // need to set a default so _computeAlwaysFloatLabel is run\n      value: ''\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `readonly` property.\n     */\n    readonly: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `size` property.\n     */\n    size: {\n      type: Number\n    },\n\n    // Nonstandard attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.\n     */\n    autocapitalize: {\n      type: String,\n      value: 'none'\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.\n     */\n    autocorrect: {\n      type: String,\n      value: 'off'\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\n     * used with type=search.\n     */\n    autosave: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `results` property,\n     * used with type=search.\n     */\n    results: {\n      type: Number\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `accept` property,\n     * used with type=file.\n     */\n    accept: {\n      type: String\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\n     * used with type=file.\n     */\n    multiple: {\n      type: Boolean\n    },\n\n    _ariaDescribedBy: {\n      type: String,\n      value: ''\n    },\n\n    _ariaLabelledBy: {\n      type: String,\n      value: ''\n    }\n\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached'\n  },\n\n  keyBindings: {\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n\n  hostAttributes: {\n    tabindex: 0\n  },\n\n  /**\n   * Returns a reference to the input element.\n   */\n  get inputElement() {\n    return this.$.input;\n  },\n\n  /**\n   * Returns a reference to the focusable element.\n   */\n  get _focusableElement() {\n    return this.inputElement;\n  },\n\n  created: function () {\n    // These types have some default placeholder text; overlapping\n    // the label on top of it looks terrible. Auto-float the label in this case.\n    this._typesThatHaveText = [\"date\", \"datetime\", \"datetime-local\", \"month\", \"time\", \"week\", \"file\"];\n  },\n\n  attached: function () {\n    this._updateAriaLabelledBy();\n\n    // In the 2.0 version of the element, this is handled in `onIronInputReady`,\n    // i.e. after the native input has finished distributing. In the 1.0 version,\n    // the input is in the shadow tree, so it's already available.\n    if (!Polymer.Element && this.inputElement && this._typesThatHaveText.indexOf(this.inputElement.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n  },\n\n  _appendStringWithSpace: function (str, more) {\n    if (str) {\n      str = str + ' ' + more;\n    } else {\n      str = more;\n    }\n    return str;\n  },\n\n  _onAddonAttached: function (event) {\n    var target = Polymer.dom(event).rootTarget;\n    if (target.id) {\n      this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, target.id);\n    } else {\n      var id = 'paper-input-add-on-' + Polymer.PaperInputHelper.NextAddonID++;\n      target.id = id;\n      this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, id);\n    }\n  },\n\n  /**\n   * Validates the input element and sets an error style if needed.\n   *\n   * @return {boolean}\n   */\n  validate: function () {\n    return this.inputElement.validate();\n  },\n\n  /**\n   * Forward focus to inputElement. Overriden from IronControlState.\n   */\n  _focusBlurHandler: function (event) {\n    Polymer.IronControlState._focusBlurHandler.call(this, event);\n\n    // Forward the focus to the nested input.\n    if (this.focused && !this._shiftTabPressed && this._focusableElement) {\n      this._focusableElement.focus();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function (event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n    this._shiftTabPressed = true;\n    this.setAttribute('tabindex', '-1');\n    this.async(function () {\n      this.setAttribute('tabindex', oldTabIndex);\n      this._shiftTabPressed = false;\n    }, 1);\n  },\n\n  /**\n   * If `autoValidate` is true, then validates the element.\n   */\n  _handleAutoValidate: function () {\n    if (this.autoValidate) this.validate();\n  },\n\n  /**\n   * Restores the cursor to its original position after updating the value.\n   * @param {string} newValue The value that should be saved.\n   */\n  updateValueAndPreserveCaret: function (newValue) {\n    // Not all elements might have selection, and even if they have the\n    // right properties, accessing them might throw an exception (like for\n    // <input type=number>)\n    try {\n      var start = this.inputElement.selectionStart;\n      this.value = newValue;\n\n      // The cursor automatically jumps to the end after re-setting the value,\n      // so restore it to its original position.\n      this.inputElement.selectionStart = start;\n      this.inputElement.selectionEnd = start;\n    } catch (e) {\n      // Just set the value and give up on the caret.\n      this.value = newValue;\n    }\n  },\n\n  _computeAlwaysFloatLabel: function (alwaysFloatLabel, placeholder) {\n    return placeholder || alwaysFloatLabel;\n  },\n\n  _updateAriaLabelledBy: function () {\n    var label = Polymer.dom(this.root).querySelector('label');\n    if (!label) {\n      this._ariaLabelledBy = '';\n      return;\n    }\n    var labelledBy;\n    if (label.id) {\n      labelledBy = label.id;\n    } else {\n      labelledBy = 'paper-input-label-' + Polymer.PaperInputHelper.NextLabelID++;\n      label.id = labelledBy;\n    }\n    this._ariaLabelledBy = labelledBy;\n  },\n\n  _onChange: function (event) {\n    // In the Shadow DOM, the `change` event is not leaked into the\n    // ancestor tree, so we must do this manually.\n    // See https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.\n    if (this.shadowRoot) {\n      this.fire(event.type, { sourceEvent: event }, {\n        node: this,\n        bubbles: event.bubbles,\n        cancelable: event.cancelable\n      });\n    }\n  },\n\n  _autofocusChanged: function () {\n    // Firefox doesn't respect the autofocus attribute if it's applied after\n    // the page is loaded (Chrome/WebKit do respect it), preventing an\n    // autofocus attribute specified in markup from taking effect when the\n    // element is upgraded. As a workaround, if the autofocus property is set,\n    // and the focus hasn't already been moved elsewhere, we take focus.\n    if (this.autofocus && this._focusableElement) {\n\n      // In IE 11, the default document.activeElement can be the page's\n      // outermost html element, but there are also cases (under the\n      // polyfill?) in which the activeElement is not a real HTMLElement, but\n      // just a plain object. We identify the latter case as having no valid\n      // activeElement.\n      var activeElement = document.activeElement;\n      var isActiveElementValid = activeElement instanceof HTMLElement;\n\n      // Has some other element has already taken the focus?\n      var isSomeElementActive = isActiveElementValid && activeElement !== document.body && activeElement !== document.documentElement; /* IE 11 */\n      if (!isSomeElementActive) {\n        // No specific element has taken the focus yet, so we can take it.\n        this._focusableElement.focus();\n      }\n    }\n  }\n};\n\n/** @polymerBehavior */\nPolymer.PaperInputBehavior = [Polymer.IronControlState, Polymer.IronA11yKeysBehavior, Polymer.PaperInputBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///105\n");

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(5);\n\n__webpack_require__(40);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-input-char-counter> <template> <style>:host{display:inline-block;float:right;@apply --paper-font-caption;@apply --paper-input-char-counter;}:host([hidden]){display:none!important}:host(:dir(rtl)),:host-context([dir=rtl]){float:left}</style> <span>[[_charCounterStr]]</span> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-input-char-counter',\n\n  behaviors: [Polymer.PaperInputAddonBehavior],\n\n  properties: {\n    _charCounterStr: {\n      type: String,\n      value: '0'\n    }\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function (state) {\n    if (!state.inputElement) {\n      return;\n    }\n\n    state.value = state.value || '';\n\n    var counter = state.value.toString().length.toString();\n\n    if (state.inputElement.hasAttribute('maxlength')) {\n      counter += '/' + state.inputElement.getAttribute('maxlength');\n    }\n\n    this._charCounterStr = counter;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1pbnB1dC9wYXBlci1pbnB1dC1jaGFyLWNvdW50ZXIuaHRtbD83ODI4Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItc3R5bGVzL3R5cG9ncmFwaHkuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL3BhcGVyLWlucHV0LWFkZG9uLWJlaGF2aW9yLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1wYXBlci1pbnB1dC1jaGFyLWNvdW50ZXI+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2Zsb2F0OnJpZ2h0O0BhcHBseSAtLXBhcGVyLWZvbnQtY2FwdGlvbjtAYXBwbHkgLS1wYXBlci1pbnB1dC1jaGFyLWNvdW50ZXI7fTpob3N0KFtoaWRkZW5dKXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fTpob3N0KDpkaXIocnRsKSksOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pe2Zsb2F0OmxlZnR9PC9zdHlsZT4gPHNwYW4+W1tfY2hhckNvdW50ZXJTdHJdXTwvc3Bhbj4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItaW5wdXQtY2hhci1jb3VudGVyJyxcblxuICBiZWhhdmlvcnM6IFtQb2x5bWVyLlBhcGVySW5wdXRBZGRvbkJlaGF2aW9yXSxcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgX2NoYXJDb3VudGVyU3RyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogJzAnXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG92ZXJyaWRlcyB0aGUgdXBkYXRlIGZ1bmN0aW9uIGluIFBhcGVySW5wdXRBZGRvbkJlaGF2aW9yLlxuICAgKiBAcGFyYW0ge3tcbiAgICogICBpbnB1dEVsZW1lbnQ6IChFbGVtZW50fHVuZGVmaW5lZCksXG4gICAqICAgdmFsdWU6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAgICogICBpbnZhbGlkOiBib29sZWFuXG4gICAqIH19IHN0YXRlIC1cbiAgICogICAgIGlucHV0RWxlbWVudDogVGhlIGlucHV0IGVsZW1lbnQuXG4gICAqICAgICB2YWx1ZTogVGhlIGlucHV0IHZhbHVlLlxuICAgKiAgICAgaW52YWxpZDogVHJ1ZSBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgaW52YWxpZC5cbiAgICovXG4gIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgaWYgKCFzdGF0ZS5pbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZS52YWx1ZSA9IHN0YXRlLnZhbHVlIHx8ICcnO1xuXG4gICAgdmFyIGNvdW50ZXIgPSBzdGF0ZS52YWx1ZS50b1N0cmluZygpLmxlbmd0aC50b1N0cmluZygpO1xuXG4gICAgaWYgKHN0YXRlLmlucHV0RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ21heGxlbmd0aCcpKSB7XG4gICAgICBjb3VudGVyICs9ICcvJyArIHN0YXRlLmlucHV0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21heGxlbmd0aCcpO1xuICAgIH1cblxuICAgIHRoaXMuX2NoYXJDb3VudGVyU3RyID0gY291bnRlcjtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWlucHV0L3BhcGVyLWlucHV0LWNoYXItY291bnRlci5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///106\n");

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(6);\n\n__webpack_require__(7);\n\n__webpack_require__(5);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-input-container> <template> <style>:host{display:block;padding:8px 0;overflow:hidden;--paper-input-container-shared-input-style:{position:relative;outline:0;box-shadow:none;padding:0;width:100%;max-width:100%;background:0 0;border:none;color:var(--paper-input-container-input-color,var(--primary-text-color));-webkit-appearance:none;text-align:inherit;vertical-align:bottom;@apply --paper-font-subhead;};@apply --paper-input-container;}:host([inline]){display:inline-block}:host([disabled]){pointer-events:none;opacity:.33;@apply --paper-input-container-disabled;}:host([hidden]){display:none!important}[hidden]{display:none!important}.floated-label-placeholder{@apply --paper-font-caption;}.underline{height:2px;position:relative}.focused-line{@apply --layout-fit;border-bottom:2px solid var(--paper-input-container-focus-color,var(--primary-color));-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:scale3d(0,1,1);transform:scale3d(0,1,1);@apply --paper-input-container-underline-focus;}.underline.is-highlighted .focused-line{-webkit-transform:none;transform:none;-webkit-transition:-webkit-transform .25s;transition:transform .25s;@apply --paper-transition-easing;}.underline.is-invalid .focused-line{border-color:var(--paper-input-container-invalid-color,var(--error-color));-webkit-transform:none;transform:none;-webkit-transition:-webkit-transform .25s;transition:transform .25s;@apply --paper-transition-easing;}.unfocused-line{@apply --layout-fit;border-bottom:1px solid var(--paper-input-container-color,var(--secondary-text-color));@apply --paper-input-container-underline;}:host([disabled]) .unfocused-line{border-bottom:1px dashed;border-color:var(--paper-input-container-color,var(--secondary-text-color));@apply --paper-input-container-underline-disabled;}.input-wrapper{@apply --layout-horizontal;@apply --layout-center;position:relative}.input-content{@apply --layout-flex-auto;@apply --layout-relative;max-width:100%}.input-content ::slotted(.paper-input-label),.input-content ::slotted(label){position:absolute;top:0;right:0;left:0;width:100%;font:inherit;color:var(--paper-input-container-color,var(--secondary-text-color));-webkit-transition:-webkit-transform .25s,width .25s;transition:transform .25s,width .25s;-webkit-transform-origin:left top;transform-origin:left top;min-height:1px;@apply --paper-font-common-nowrap;@apply --paper-font-subhead;@apply --paper-input-container-label;@apply --paper-transition-easing;}.input-content.label-is-floating ::slotted(.paper-input-label),.input-content.label-is-floating ::slotted(label){-webkit-transform:translateY(-75%) scale(.75);transform:translateY(-75%) scale(.75);width:133%;@apply --paper-input-container-label-floating;}:host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label),:host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),:host-context([dir=rtl]) .input-content.label-is-floating ::slotted(.paper-input-label),:host-context([dir=rtl]) .input-content.label-is-floating ::slotted(label){-webkit-transform-origin:right top;transform-origin:right top}.input-content.label-is-highlighted ::slotted(.paper-input-label),.input-content.label-is-highlighted ::slotted(label){color:var(--paper-input-container-focus-color,var(--primary-color));@apply --paper-input-container-label-focus;}.input-content.is-invalid ::slotted(.paper-input-label),.input-content.is-invalid ::slotted(label){color:var(--paper-input-container-invalid-color,var(--error-color))}.input-content.label-is-hidden ::slotted(.paper-input-label),.input-content.label-is-hidden ::slotted(label){visibility:hidden}.input-content ::slotted(iron-input){@apply --paper-input-container-shared-input-style;}.input-content ::slotted(.paper-input-input),.input-content ::slotted(input),.input-content ::slotted(iron-autogrow-textarea),.input-content ::slotted(textarea){@apply --paper-input-container-shared-input-style;@apply --paper-input-container-input;}.input-content ::slotted(input)::-webkit-inner-spin-button,.input-content ::slotted(input)::-webkit-outer-spin-button{@apply --paper-input-container-input-webkit-spinner;}.input-content.focused ::slotted(.paper-input-input),.input-content.focused ::slotted(input),.input-content.focused ::slotted(iron-autogrow-textarea),.input-content.focused ::slotted(textarea){@apply --paper-input-container-input-focus;}.input-content.is-invalid ::slotted(.paper-input-input),.input-content.is-invalid ::slotted(input),.input-content.is-invalid ::slotted(iron-autogrow-textarea),.input-content.is-invalid ::slotted(textarea){@apply --paper-input-container-input-invalid;}.prefix ::slotted(*){display:inline-block;@apply --paper-font-subhead;@apply --layout-flex-none;@apply --paper-input-prefix;}.suffix ::slotted(*){display:inline-block;@apply --paper-font-subhead;@apply --layout-flex-none;@apply --paper-input-suffix;}.input-content ::slotted(input){min-width:0}.input-content ::slotted(textarea){resize:none}.add-on-content{position:relative}.add-on-content.is-invalid ::slotted(*){color:var(--paper-input-container-invalid-color,var(--error-color))}.add-on-content.is-highlighted ::slotted(*){color:var(--paper-input-container-focus-color,var(--primary-color))}</style> <div class=floated-label-placeholder aria-hidden=true hidden=[[noLabelFloat]]>&nbsp;</div> <div class=input-wrapper> <span class=prefix><slot name=prefix></slot></span> <div class$=[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]] id=labelAndInputContainer> <slot name=label></slot> <slot name=input></slot> </div> <span class=suffix><slot name=suffix></slot></span> </div> <div class$=[[_computeUnderlineClass(focused,invalid)]]> <div class=unfocused-line></div> <div class=focused-line></div> </div> <div class$=[[_computeAddOnContentClass(focused,invalid)]]> <slot name=add-on></slot> </div> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-input-container',\n\n  properties: {\n    /**\n     * Set to true to disable the floating label. The label disappears when the input value is\n     * not null.\n     */\n    noLabelFloat: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Set to true to always float the floating label.\n     */\n    alwaysFloatLabel: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * The attribute to listen for value changes on.\n     */\n    attrForValue: {\n      type: String,\n      value: 'bind-value'\n    },\n\n    /**\n     * Set to true to auto-validate the input value when it changes.\n     */\n    autoValidate: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * True if the input is invalid. This property is set automatically when the input value\n     * changes if auto-validating, or when the `iron-input-validate` event is heard from a child.\n     */\n    invalid: {\n      observer: '_invalidChanged',\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * True if the input has focus.\n     */\n    focused: {\n      readOnly: true,\n      type: Boolean,\n      value: false,\n      notify: true\n    },\n\n    _addons: {\n      type: Array\n      // do not set a default value here intentionally - it will be initialized lazily when a\n      // distributed child is attached, which may occur before configuration for this element\n      // in polyfill.\n    },\n\n    _inputHasContent: {\n      type: Boolean,\n      value: false\n    },\n\n    _inputSelector: {\n      type: String,\n      value: 'input,iron-input,textarea,.paper-input-input'\n    },\n\n    _boundOnFocus: {\n      type: Function,\n      value: function () {\n        return this._onFocus.bind(this);\n      }\n    },\n\n    _boundOnBlur: {\n      type: Function,\n      value: function () {\n        return this._onBlur.bind(this);\n      }\n    },\n\n    _boundOnInput: {\n      type: Function,\n      value: function () {\n        return this._onInput.bind(this);\n      }\n    },\n\n    _boundValueChanged: {\n      type: Function,\n      value: function () {\n        return this._onValueChanged.bind(this);\n      }\n    }\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached',\n    'iron-input-validate': '_onIronInputValidate'\n  },\n\n  get _valueChangedEvent() {\n    return this.attrForValue + '-changed';\n  },\n\n  get _propertyForValue() {\n    return Polymer.CaseMap.dashToCamelCase(this.attrForValue);\n  },\n\n  get _inputElement() {\n    return Polymer.dom(this).querySelector(this._inputSelector);\n  },\n\n  get _inputElementValue() {\n    return this._inputElement[this._propertyForValue] || this._inputElement.value;\n  },\n\n  ready: function () {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    this.addEventListener('focus', this._boundOnFocus, true);\n    this.addEventListener('blur', this._boundOnBlur, true);\n  },\n\n  attached: function () {\n    if (this.attrForValue) {\n      this._inputElement.addEventListener(this._valueChangedEvent, this._boundValueChanged);\n    } else {\n      this.addEventListener('input', this._onInput);\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (this._inputElementValue && this._inputElementValue != '') {\n      this._handleValueAndAutoValidate(this._inputElement);\n    } else {\n      this._handleValue(this._inputElement);\n    }\n  },\n\n  _onAddonAttached: function (event) {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    var target = event.target;\n    if (this._addons.indexOf(target) === -1) {\n      this._addons.push(target);\n      if (this.isAttached) {\n        this._handleValue(this._inputElement);\n      }\n    }\n  },\n\n  _onFocus: function () {\n    this._setFocused(true);\n  },\n\n  _onBlur: function () {\n    this._setFocused(false);\n    this._handleValueAndAutoValidate(this._inputElement);\n  },\n\n  _onInput: function (event) {\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  _onValueChanged: function (event) {\n    var input = event.target;\n\n    // Problem: if the input is required but has no text entered, we should\n    // only validate it on blur (so that an empty form doesn't come up red\n    // immediately; however, in this handler, we don't know whether this is\n    // the booting up value or a value in the future. I am assuming that the\n    // case  we care about manifests itself when the value is undefined.\n    // If this causes future problems, we need to do something like track whether\n    // the iron-input-ready event has fired, and this handler came before that.\n\n    if (input.value === undefined) {\n      return;\n    }\n\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  _handleValue: function (inputElement) {\n    var value = this._inputElementValue;\n\n    // type=\"number\" hack needed because this.value is empty until it's valid\n    if (value || value === 0 || inputElement.type === 'number' && !inputElement.checkValidity()) {\n      this._inputHasContent = true;\n    } else {\n      this._inputHasContent = false;\n    }\n\n    this.updateAddons({\n      inputElement: inputElement,\n      value: value,\n      invalid: this.invalid\n    });\n  },\n\n  _handleValueAndAutoValidate: function (inputElement) {\n    if (this.autoValidate && inputElement) {\n      var valid;\n\n      if (inputElement.validate) {\n        valid = inputElement.validate(this._inputElementValue);\n      } else {\n        valid = inputElement.checkValidity();\n      }\n      this.invalid = !valid;\n    }\n\n    // Call this last to notify the add-ons.\n    this._handleValue(inputElement);\n  },\n\n  _onIronInputValidate: function (event) {\n    this.invalid = this._inputElement.invalid;\n  },\n\n  _invalidChanged: function () {\n    if (this._addons) {\n      this.updateAddons({ invalid: this.invalid });\n    }\n  },\n\n  /**\n   * Call this to update the state of add-ons.\n   * @param {Object} state Add-on state.\n   */\n  updateAddons: function (state) {\n    for (var addon, index = 0; addon = this._addons[index]; index++) {\n      addon.update(state);\n    }\n  },\n\n  _computeInputContentClass: function (noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {\n    var cls = 'input-content';\n    if (!noLabelFloat) {\n      var label = this.querySelector('label');\n\n      if (alwaysFloatLabel || _inputHasContent) {\n        cls += ' label-is-floating';\n        // If the label is floating, ignore any offsets that may have been\n        // applied from a prefix element.\n        this.$.labelAndInputContainer.style.position = 'static';\n\n        if (invalid) {\n          cls += ' is-invalid';\n        } else if (focused) {\n          cls += \" label-is-highlighted\";\n        }\n      } else {\n        // When the label is not floating, it should overlap the input element.\n        if (label) {\n          this.$.labelAndInputContainer.style.position = 'relative';\n        }\n        if (invalid) {\n          cls += ' is-invalid';\n        }\n      }\n    } else {\n      if (_inputHasContent) {\n        cls += ' label-is-hidden';\n      }\n      if (invalid) {\n        cls += ' is-invalid';\n      }\n    }\n    if (focused) {\n      cls += ' focused';\n    }\n    return cls;\n  },\n\n  _computeUnderlineClass: function (focused, invalid) {\n    var cls = 'underline';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted';\n    }\n    return cls;\n  },\n\n  _computeAddOnContentClass: function (focused, invalid) {\n    var cls = 'add-on-content';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted';\n    }\n    return cls;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1pbnB1dC9wYXBlci1pbnB1dC1jb250YWluZXIuaHRtbD8xZjM5Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItc3R5bGVzL2RlZmF1bHQtdGhlbWUuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1zdHlsZXMvdHlwb2dyYXBoeS5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItaW5wdXQtY29udGFpbmVyPiA8dGVtcGxhdGU+IDxzdHlsZT46aG9zdHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6OHB4IDA7b3ZlcmZsb3c6aGlkZGVuOy0tcGFwZXItaW5wdXQtY29udGFpbmVyLXNoYXJlZC1pbnB1dC1zdHlsZTp7cG9zaXRpb246cmVsYXRpdmU7b3V0bGluZTowO2JveC1zaGFkb3c6bm9uZTtwYWRkaW5nOjA7d2lkdGg6MTAwJTttYXgtd2lkdGg6MTAwJTtiYWNrZ3JvdW5kOjAgMDtib3JkZXI6bm9uZTtjb2xvcjp2YXIoLS1wYXBlci1pbnB1dC1jb250YWluZXItaW5wdXQtY29sb3IsdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKSk7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7dGV4dC1hbGlnbjppbmhlcml0O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtAYXBwbHkgLS1wYXBlci1mb250LXN1YmhlYWQ7fTtAYXBwbHkgLS1wYXBlci1pbnB1dC1jb250YWluZXI7fTpob3N0KFtpbmxpbmVdKXtkaXNwbGF5OmlubGluZS1ibG9ja306aG9zdChbZGlzYWJsZWRdKXtwb2ludGVyLWV2ZW50czpub25lO29wYWNpdHk6LjMzO0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1kaXNhYmxlZDt9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9W2hpZGRlbl17ZGlzcGxheTpub25lIWltcG9ydGFudH0uZmxvYXRlZC1sYWJlbC1wbGFjZWhvbGRlcntAYXBwbHkgLS1wYXBlci1mb250LWNhcHRpb247fS51bmRlcmxpbmV7aGVpZ2h0OjJweDtwb3NpdGlvbjpyZWxhdGl2ZX0uZm9jdXNlZC1saW5le0BhcHBseSAtLWxheW91dC1maXQ7Ym9yZGVyLWJvdHRvbToycHggc29saWQgdmFyKC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWZvY3VzLWNvbG9yLHZhcigtLXByaW1hcnktY29sb3IpKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgwLDEsMSk7dHJhbnNmb3JtOnNjYWxlM2QoMCwxLDEpO0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci11bmRlcmxpbmUtZm9jdXM7fS51bmRlcmxpbmUuaXMtaGlnaGxpZ2h0ZWQgLmZvY3VzZWQtbGluZXstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXM7QGFwcGx5IC0tcGFwZXItdHJhbnNpdGlvbi1lYXNpbmc7fS51bmRlcmxpbmUuaXMtaW52YWxpZCAuZm9jdXNlZC1saW5le2JvcmRlci1jb2xvcjp2YXIoLS1wYXBlci1pbnB1dC1jb250YWluZXItaW52YWxpZC1jb2xvcix2YXIoLS1lcnJvci1jb2xvcikpOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cztAYXBwbHkgLS1wYXBlci10cmFuc2l0aW9uLWVhc2luZzt9LnVuZm9jdXNlZC1saW5le0BhcHBseSAtLWxheW91dC1maXQ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWNvbG9yLHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKSk7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLXVuZGVybGluZTt9Omhvc3QoW2Rpc2FibGVkXSkgLnVuZm9jdXNlZC1saW5le2JvcmRlci1ib3R0b206MXB4IGRhc2hlZDtib3JkZXItY29sb3I6dmFyKC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWNvbG9yLHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKSk7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLXVuZGVybGluZS1kaXNhYmxlZDt9LmlucHV0LXdyYXBwZXJ7QGFwcGx5IC0tbGF5b3V0LWhvcml6b250YWw7QGFwcGx5IC0tbGF5b3V0LWNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZX0uaW5wdXQtY29udGVudHtAYXBwbHkgLS1sYXlvdXQtZmxleC1hdXRvO0BhcHBseSAtLWxheW91dC1yZWxhdGl2ZTttYXgtd2lkdGg6MTAwJX0uaW5wdXQtY29udGVudCA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWxhYmVsKSwuaW5wdXQtY29udGVudCA6OnNsb3R0ZWQobGFiZWwpe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7bGVmdDowO3dpZHRoOjEwMCU7Zm9udDppbmhlcml0O2NvbG9yOnZhcigtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1jb2xvcix2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcikpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzLHdpZHRoIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyx3aWR0aCAuMjVzOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wO21pbi1oZWlnaHQ6MXB4O0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLW5vd3JhcDtAYXBwbHkgLS1wYXBlci1mb250LXN1YmhlYWQ7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWxhYmVsO0BhcHBseSAtLXBhcGVyLXRyYW5zaXRpb24tZWFzaW5nO30uaW5wdXQtY29udGVudC5sYWJlbC1pcy1mbG9hdGluZyA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWxhYmVsKSwuaW5wdXQtY29udGVudC5sYWJlbC1pcy1mbG9hdGluZyA6OnNsb3R0ZWQobGFiZWwpey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTc1JSkgc2NhbGUoLjc1KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNzUlKSBzY2FsZSguNzUpO3dpZHRoOjEzMyU7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWxhYmVsLWZsb2F0aW5nO306aG9zdCg6ZGlyKHJ0bCkpIC5pbnB1dC1jb250ZW50LmxhYmVsLWlzLWZsb2F0aW5nIDo6c2xvdHRlZCgucGFwZXItaW5wdXQtbGFiZWwpLDpob3N0KDpkaXIocnRsKSkgLmlucHV0LWNvbnRlbnQubGFiZWwtaXMtZmxvYXRpbmcgOjpzbG90dGVkKGxhYmVsKSw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLmlucHV0LWNvbnRlbnQubGFiZWwtaXMtZmxvYXRpbmcgOjpzbG90dGVkKC5wYXBlci1pbnB1dC1sYWJlbCksOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIC5pbnB1dC1jb250ZW50LmxhYmVsLWlzLWZsb2F0aW5nIDo6c2xvdHRlZChsYWJlbCl7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcH0uaW5wdXQtY29udGVudC5sYWJlbC1pcy1oaWdobGlnaHRlZCA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWxhYmVsKSwuaW5wdXQtY29udGVudC5sYWJlbC1pcy1oaWdobGlnaHRlZCA6OnNsb3R0ZWQobGFiZWwpe2NvbG9yOnZhcigtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1mb2N1cy1jb2xvcix2YXIoLS1wcmltYXJ5LWNvbG9yKSk7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWxhYmVsLWZvY3VzO30uaW5wdXQtY29udGVudC5pcy1pbnZhbGlkIDo6c2xvdHRlZCgucGFwZXItaW5wdXQtbGFiZWwpLC5pbnB1dC1jb250ZW50LmlzLWludmFsaWQgOjpzbG90dGVkKGxhYmVsKXtjb2xvcjp2YXIoLS1wYXBlci1pbnB1dC1jb250YWluZXItaW52YWxpZC1jb2xvcix2YXIoLS1lcnJvci1jb2xvcikpfS5pbnB1dC1jb250ZW50LmxhYmVsLWlzLWhpZGRlbiA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWxhYmVsKSwuaW5wdXQtY29udGVudC5sYWJlbC1pcy1oaWRkZW4gOjpzbG90dGVkKGxhYmVsKXt2aXNpYmlsaXR5OmhpZGRlbn0uaW5wdXQtY29udGVudCA6OnNsb3R0ZWQoaXJvbi1pbnB1dCl7QGFwcGx5IC0tcGFwZXItaW5wdXQtY29udGFpbmVyLXNoYXJlZC1pbnB1dC1zdHlsZTt9LmlucHV0LWNvbnRlbnQgOjpzbG90dGVkKC5wYXBlci1pbnB1dC1pbnB1dCksLmlucHV0LWNvbnRlbnQgOjpzbG90dGVkKGlucHV0KSwuaW5wdXQtY29udGVudCA6OnNsb3R0ZWQoaXJvbi1hdXRvZ3Jvdy10ZXh0YXJlYSksLmlucHV0LWNvbnRlbnQgOjpzbG90dGVkKHRleHRhcmVhKXtAYXBwbHkgLS1wYXBlci1pbnB1dC1jb250YWluZXItc2hhcmVkLWlucHV0LXN0eWxlO0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1pbnB1dDt9LmlucHV0LWNvbnRlbnQgOjpzbG90dGVkKGlucHV0KTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiwuaW5wdXQtY29udGVudCA6OnNsb3R0ZWQoaW5wdXQpOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9ue0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1pbnB1dC13ZWJraXQtc3Bpbm5lcjt9LmlucHV0LWNvbnRlbnQuZm9jdXNlZCA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWlucHV0KSwuaW5wdXQtY29udGVudC5mb2N1c2VkIDo6c2xvdHRlZChpbnB1dCksLmlucHV0LWNvbnRlbnQuZm9jdXNlZCA6OnNsb3R0ZWQoaXJvbi1hdXRvZ3Jvdy10ZXh0YXJlYSksLmlucHV0LWNvbnRlbnQuZm9jdXNlZCA6OnNsb3R0ZWQodGV4dGFyZWEpe0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1pbnB1dC1mb2N1czt9LmlucHV0LWNvbnRlbnQuaXMtaW52YWxpZCA6OnNsb3R0ZWQoLnBhcGVyLWlucHV0LWlucHV0KSwuaW5wdXQtY29udGVudC5pcy1pbnZhbGlkIDo6c2xvdHRlZChpbnB1dCksLmlucHV0LWNvbnRlbnQuaXMtaW52YWxpZCA6OnNsb3R0ZWQoaXJvbi1hdXRvZ3Jvdy10ZXh0YXJlYSksLmlucHV0LWNvbnRlbnQuaXMtaW52YWxpZCA6OnNsb3R0ZWQodGV4dGFyZWEpe0BhcHBseSAtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1pbnB1dC1pbnZhbGlkO30ucHJlZml4IDo6c2xvdHRlZCgqKXtkaXNwbGF5OmlubGluZS1ibG9jaztAYXBwbHkgLS1wYXBlci1mb250LXN1YmhlYWQ7QGFwcGx5IC0tbGF5b3V0LWZsZXgtbm9uZTtAYXBwbHkgLS1wYXBlci1pbnB1dC1wcmVmaXg7fS5zdWZmaXggOjpzbG90dGVkKCope2Rpc3BsYXk6aW5saW5lLWJsb2NrO0BhcHBseSAtLXBhcGVyLWZvbnQtc3ViaGVhZDtAYXBwbHkgLS1sYXlvdXQtZmxleC1ub25lO0BhcHBseSAtLXBhcGVyLWlucHV0LXN1ZmZpeDt9LmlucHV0LWNvbnRlbnQgOjpzbG90dGVkKGlucHV0KXttaW4td2lkdGg6MH0uaW5wdXQtY29udGVudCA6OnNsb3R0ZWQodGV4dGFyZWEpe3Jlc2l6ZTpub25lfS5hZGQtb24tY29udGVudHtwb3NpdGlvbjpyZWxhdGl2ZX0uYWRkLW9uLWNvbnRlbnQuaXMtaW52YWxpZCA6OnNsb3R0ZWQoKil7Y29sb3I6dmFyKC0tcGFwZXItaW5wdXQtY29udGFpbmVyLWludmFsaWQtY29sb3IsdmFyKC0tZXJyb3ItY29sb3IpKX0uYWRkLW9uLWNvbnRlbnQuaXMtaGlnaGxpZ2h0ZWQgOjpzbG90dGVkKCope2NvbG9yOnZhcigtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1mb2N1cy1jb2xvcix2YXIoLS1wcmltYXJ5LWNvbG9yKSl9PC9zdHlsZT4gPGRpdiBjbGFzcz1mbG9hdGVkLWxhYmVsLXBsYWNlaG9sZGVyIGFyaWEtaGlkZGVuPXRydWUgaGlkZGVuPVtbbm9MYWJlbEZsb2F0XV0+Jm5ic3A7PC9kaXY+IDxkaXYgY2xhc3M9aW5wdXQtd3JhcHBlcj4gPHNwYW4gY2xhc3M9cHJlZml4PjxzbG90IG5hbWU9cHJlZml4Pjwvc2xvdD48L3NwYW4+IDxkaXYgY2xhc3MkPVtbX2NvbXB1dGVJbnB1dENvbnRlbnRDbGFzcyhub0xhYmVsRmxvYXQsYWx3YXlzRmxvYXRMYWJlbCxmb2N1c2VkLGludmFsaWQsX2lucHV0SGFzQ29udGVudCldXSBpZD1sYWJlbEFuZElucHV0Q29udGFpbmVyPiA8c2xvdCBuYW1lPWxhYmVsPjwvc2xvdD4gPHNsb3QgbmFtZT1pbnB1dD48L3Nsb3Q+IDwvZGl2PiA8c3BhbiBjbGFzcz1zdWZmaXg+PHNsb3QgbmFtZT1zdWZmaXg+PC9zbG90Pjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3MkPVtbX2NvbXB1dGVVbmRlcmxpbmVDbGFzcyhmb2N1c2VkLGludmFsaWQpXV0+IDxkaXYgY2xhc3M9dW5mb2N1c2VkLWxpbmU+PC9kaXY+IDxkaXYgY2xhc3M9Zm9jdXNlZC1saW5lPjwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcyQ9W1tfY29tcHV0ZUFkZE9uQ29udGVudENsYXNzKGZvY3VzZWQsaW52YWxpZCldXT4gPHNsb3QgbmFtZT1hZGQtb24+PC9zbG90PiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItaW5wdXQtY29udGFpbmVyJyxcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogU2V0IHRvIHRydWUgdG8gZGlzYWJsZSB0aGUgZmxvYXRpbmcgbGFiZWwuIFRoZSBsYWJlbCBkaXNhcHBlYXJzIHdoZW4gdGhlIGlucHV0IHZhbHVlIGlzXG4gICAgICogbm90IG51bGwuXG4gICAgICovXG4gICAgbm9MYWJlbEZsb2F0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0byB0cnVlIHRvIGFsd2F5cyBmbG9hdCB0aGUgZmxvYXRpbmcgbGFiZWwuXG4gICAgICovXG4gICAgYWx3YXlzRmxvYXRMYWJlbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXR0cmlidXRlIHRvIGxpc3RlbiBmb3IgdmFsdWUgY2hhbmdlcyBvbi5cbiAgICAgKi9cbiAgICBhdHRyRm9yVmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnYmluZC12YWx1ZSdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRvIHRydWUgdG8gYXV0by12YWxpZGF0ZSB0aGUgaW5wdXQgdmFsdWUgd2hlbiBpdCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGF1dG9WYWxpZGF0ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBpbnB1dCBpcyBpbnZhbGlkLiBUaGlzIHByb3BlcnR5IGlzIHNldCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGlucHV0IHZhbHVlXG4gICAgICogY2hhbmdlcyBpZiBhdXRvLXZhbGlkYXRpbmcsIG9yIHdoZW4gdGhlIGBpcm9uLWlucHV0LXZhbGlkYXRlYCBldmVudCBpcyBoZWFyZCBmcm9tIGEgY2hpbGQuXG4gICAgICovXG4gICAgaW52YWxpZDoge1xuICAgICAgb2JzZXJ2ZXI6ICdfaW52YWxpZENoYW5nZWQnLFxuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBpbnB1dCBoYXMgZm9jdXMuXG4gICAgICovXG4gICAgZm9jdXNlZDoge1xuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgbm90aWZ5OiB0cnVlXG4gICAgfSxcblxuICAgIF9hZGRvbnM6IHtcbiAgICAgIHR5cGU6IEFycmF5XG4gICAgICAvLyBkbyBub3Qgc2V0IGEgZGVmYXVsdCB2YWx1ZSBoZXJlIGludGVudGlvbmFsbHkgLSBpdCB3aWxsIGJlIGluaXRpYWxpemVkIGxhemlseSB3aGVuIGFcbiAgICAgIC8vIGRpc3RyaWJ1dGVkIGNoaWxkIGlzIGF0dGFjaGVkLCB3aGljaCBtYXkgb2NjdXIgYmVmb3JlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgZWxlbWVudFxuICAgICAgLy8gaW4gcG9seWZpbGwuXG4gICAgfSxcblxuICAgIF9pbnB1dEhhc0NvbnRlbnQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2VcbiAgICB9LFxuXG4gICAgX2lucHV0U2VsZWN0b3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnaW5wdXQsaXJvbi1pbnB1dCx0ZXh0YXJlYSwucGFwZXItaW5wdXQtaW5wdXQnXG4gICAgfSxcblxuICAgIF9ib3VuZE9uRm9jdXM6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRm9jdXMuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2JvdW5kT25CbHVyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbkJsdXIuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2JvdW5kT25JbnB1dDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25JbnB1dC5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfYm91bmRWYWx1ZUNoYW5nZWQ6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uVmFsdWVDaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGxpc3RlbmVyczoge1xuICAgICdhZGRvbi1hdHRhY2hlZCc6ICdfb25BZGRvbkF0dGFjaGVkJyxcbiAgICAnaXJvbi1pbnB1dC12YWxpZGF0ZSc6ICdfb25Jcm9uSW5wdXRWYWxpZGF0ZSdcbiAgfSxcblxuICBnZXQgX3ZhbHVlQ2hhbmdlZEV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJGb3JWYWx1ZSArICctY2hhbmdlZCc7XG4gIH0sXG5cbiAgZ2V0IF9wcm9wZXJ0eUZvclZhbHVlKCkge1xuICAgIHJldHVybiBQb2x5bWVyLkNhc2VNYXAuZGFzaFRvQ2FtZWxDYXNlKHRoaXMuYXR0ckZvclZhbHVlKTtcbiAgfSxcblxuICBnZXQgX2lucHV0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20odGhpcykucXVlcnlTZWxlY3Rvcih0aGlzLl9pbnB1dFNlbGVjdG9yKTtcbiAgfSxcblxuICBnZXQgX2lucHV0RWxlbWVudFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnRbdGhpcy5fcHJvcGVydHlGb3JWYWx1ZV0gfHwgdGhpcy5faW5wdXRFbGVtZW50LnZhbHVlO1xuICB9LFxuXG4gIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9hZGRvbnMpIHtcbiAgICAgIHRoaXMuX2FkZG9ucyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm91bmRPbkZvY3VzLCB0cnVlKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9ib3VuZE9uQmx1ciwgdHJ1ZSk7XG4gIH0sXG5cbiAgYXR0YWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5hdHRyRm9yVmFsdWUpIHtcbiAgICAgIHRoaXMuX2lucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuX3ZhbHVlQ2hhbmdlZEV2ZW50LCB0aGlzLl9ib3VuZFZhbHVlQ2hhbmdlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbklucHV0KTtcbiAgICB9XG5cbiAgICAvLyBPbmx5IHZhbGlkYXRlIHdoZW4gYXR0YWNoZWQgaWYgdGhlIGlucHV0IGFscmVhZHkgaGFzIGEgdmFsdWUuXG4gICAgaWYgKHRoaXMuX2lucHV0RWxlbWVudFZhbHVlICYmIHRoaXMuX2lucHV0RWxlbWVudFZhbHVlICE9ICcnKSB7XG4gICAgICB0aGlzLl9oYW5kbGVWYWx1ZUFuZEF1dG9WYWxpZGF0ZSh0aGlzLl9pbnB1dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVWYWx1ZSh0aGlzLl9pbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgfSxcblxuICBfb25BZGRvbkF0dGFjaGVkOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuX2FkZG9ucykge1xuICAgICAgdGhpcy5fYWRkb25zID0gW107XG4gICAgfVxuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKHRoaXMuX2FkZG9ucy5pbmRleE9mKHRhcmdldCkgPT09IC0xKSB7XG4gICAgICB0aGlzLl9hZGRvbnMucHVzaCh0YXJnZXQpO1xuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVWYWx1ZSh0aGlzLl9pbnB1dEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfb25Gb2N1czogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3NldEZvY3VzZWQodHJ1ZSk7XG4gIH0sXG5cbiAgX29uQmx1cjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3NldEZvY3VzZWQoZmFsc2UpO1xuICAgIHRoaXMuX2hhbmRsZVZhbHVlQW5kQXV0b1ZhbGlkYXRlKHRoaXMuX2lucHV0RWxlbWVudCk7XG4gIH0sXG5cbiAgX29uSW5wdXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMuX2hhbmRsZVZhbHVlQW5kQXV0b1ZhbGlkYXRlKGV2ZW50LnRhcmdldCk7XG4gIH0sXG5cbiAgX29uVmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgaW5wdXQgPSBldmVudC50YXJnZXQ7XG5cbiAgICAvLyBQcm9ibGVtOiBpZiB0aGUgaW5wdXQgaXMgcmVxdWlyZWQgYnV0IGhhcyBubyB0ZXh0IGVudGVyZWQsIHdlIHNob3VsZFxuICAgIC8vIG9ubHkgdmFsaWRhdGUgaXQgb24gYmx1ciAoc28gdGhhdCBhbiBlbXB0eSBmb3JtIGRvZXNuJ3QgY29tZSB1cCByZWRcbiAgICAvLyBpbW1lZGlhdGVseTsgaG93ZXZlciwgaW4gdGhpcyBoYW5kbGVyLCB3ZSBkb24ndCBrbm93IHdoZXRoZXIgdGhpcyBpc1xuICAgIC8vIHRoZSBib290aW5nIHVwIHZhbHVlIG9yIGEgdmFsdWUgaW4gdGhlIGZ1dHVyZS4gSSBhbSBhc3N1bWluZyB0aGF0IHRoZVxuICAgIC8vIGNhc2UgIHdlIGNhcmUgYWJvdXQgbWFuaWZlc3RzIGl0c2VsZiB3aGVuIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQuXG4gICAgLy8gSWYgdGhpcyBjYXVzZXMgZnV0dXJlIHByb2JsZW1zLCB3ZSBuZWVkIHRvIGRvIHNvbWV0aGluZyBsaWtlIHRyYWNrIHdoZXRoZXJcbiAgICAvLyB0aGUgaXJvbi1pbnB1dC1yZWFkeSBldmVudCBoYXMgZmlyZWQsIGFuZCB0aGlzIGhhbmRsZXIgY2FtZSBiZWZvcmUgdGhhdC5cblxuICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlVmFsdWVBbmRBdXRvVmFsaWRhdGUoZXZlbnQudGFyZ2V0KTtcbiAgfSxcblxuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uIChpbnB1dEVsZW1lbnQpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLl9pbnB1dEVsZW1lbnRWYWx1ZTtcblxuICAgIC8vIHR5cGU9XCJudW1iZXJcIiBoYWNrIG5lZWRlZCBiZWNhdXNlIHRoaXMudmFsdWUgaXMgZW1wdHkgdW50aWwgaXQncyB2YWxpZFxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCB8fCBpbnB1dEVsZW1lbnQudHlwZSA9PT0gJ251bWJlcicgJiYgIWlucHV0RWxlbWVudC5jaGVja1ZhbGlkaXR5KCkpIHtcbiAgICAgIHRoaXMuX2lucHV0SGFzQ29udGVudCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2lucHV0SGFzQ29udGVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlQWRkb25zKHtcbiAgICAgIGlucHV0RWxlbWVudDogaW5wdXRFbGVtZW50LFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgaW52YWxpZDogdGhpcy5pbnZhbGlkXG4gICAgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVZhbHVlQW5kQXV0b1ZhbGlkYXRlOiBmdW5jdGlvbiAoaW5wdXRFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuYXV0b1ZhbGlkYXRlICYmIGlucHV0RWxlbWVudCkge1xuICAgICAgdmFyIHZhbGlkO1xuXG4gICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbGlkYXRlKSB7XG4gICAgICAgIHZhbGlkID0gaW5wdXRFbGVtZW50LnZhbGlkYXRlKHRoaXMuX2lucHV0RWxlbWVudFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkID0gaW5wdXRFbGVtZW50LmNoZWNrVmFsaWRpdHkoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW52YWxpZCA9ICF2YWxpZDtcbiAgICB9XG5cbiAgICAvLyBDYWxsIHRoaXMgbGFzdCB0byBub3RpZnkgdGhlIGFkZC1vbnMuXG4gICAgdGhpcy5faGFuZGxlVmFsdWUoaW5wdXRFbGVtZW50KTtcbiAgfSxcblxuICBfb25Jcm9uSW5wdXRWYWxpZGF0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdGhpcy5pbnZhbGlkID0gdGhpcy5faW5wdXRFbGVtZW50LmludmFsaWQ7XG4gIH0sXG5cbiAgX2ludmFsaWRDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2FkZG9ucykge1xuICAgICAgdGhpcy51cGRhdGVBZGRvbnMoeyBpbnZhbGlkOiB0aGlzLmludmFsaWQgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgdG8gdXBkYXRlIHRoZSBzdGF0ZSBvZiBhZGQtb25zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgQWRkLW9uIHN0YXRlLlxuICAgKi9cbiAgdXBkYXRlQWRkb25zOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICBmb3IgKHZhciBhZGRvbiwgaW5kZXggPSAwOyBhZGRvbiA9IHRoaXMuX2FkZG9uc1tpbmRleF07IGluZGV4KyspIHtcbiAgICAgIGFkZG9uLnVwZGF0ZShzdGF0ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9jb21wdXRlSW5wdXRDb250ZW50Q2xhc3M6IGZ1bmN0aW9uIChub0xhYmVsRmxvYXQsIGFsd2F5c0Zsb2F0TGFiZWwsIGZvY3VzZWQsIGludmFsaWQsIF9pbnB1dEhhc0NvbnRlbnQpIHtcbiAgICB2YXIgY2xzID0gJ2lucHV0LWNvbnRlbnQnO1xuICAgIGlmICghbm9MYWJlbEZsb2F0KSB7XG4gICAgICB2YXIgbGFiZWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyk7XG5cbiAgICAgIGlmIChhbHdheXNGbG9hdExhYmVsIHx8IF9pbnB1dEhhc0NvbnRlbnQpIHtcbiAgICAgICAgY2xzICs9ICcgbGFiZWwtaXMtZmxvYXRpbmcnO1xuICAgICAgICAvLyBJZiB0aGUgbGFiZWwgaXMgZmxvYXRpbmcsIGlnbm9yZSBhbnkgb2Zmc2V0cyB0aGF0IG1heSBoYXZlIGJlZW5cbiAgICAgICAgLy8gYXBwbGllZCBmcm9tIGEgcHJlZml4IGVsZW1lbnQuXG4gICAgICAgIHRoaXMuJC5sYWJlbEFuZElucHV0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XG5cbiAgICAgICAgaWYgKGludmFsaWQpIHtcbiAgICAgICAgICBjbHMgKz0gJyBpcy1pbnZhbGlkJztcbiAgICAgICAgfSBlbHNlIGlmIChmb2N1c2VkKSB7XG4gICAgICAgICAgY2xzICs9IFwiIGxhYmVsLWlzLWhpZ2hsaWdodGVkXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGxhYmVsIGlzIG5vdCBmbG9hdGluZywgaXQgc2hvdWxkIG92ZXJsYXAgdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgIHRoaXMuJC5sYWJlbEFuZElucHV0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW52YWxpZCkge1xuICAgICAgICAgIGNscyArPSAnIGlzLWludmFsaWQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChfaW5wdXRIYXNDb250ZW50KSB7XG4gICAgICAgIGNscyArPSAnIGxhYmVsLWlzLWhpZGRlbic7XG4gICAgICB9XG4gICAgICBpZiAoaW52YWxpZCkge1xuICAgICAgICBjbHMgKz0gJyBpcy1pbnZhbGlkJztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgIGNscyArPSAnIGZvY3VzZWQnO1xuICAgIH1cbiAgICByZXR1cm4gY2xzO1xuICB9LFxuXG4gIF9jb21wdXRlVW5kZXJsaW5lQ2xhc3M6IGZ1bmN0aW9uIChmb2N1c2VkLCBpbnZhbGlkKSB7XG4gICAgdmFyIGNscyA9ICd1bmRlcmxpbmUnO1xuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICBjbHMgKz0gJyBpcy1pbnZhbGlkJztcbiAgICB9IGVsc2UgaWYgKGZvY3VzZWQpIHtcbiAgICAgIGNscyArPSAnIGlzLWhpZ2hsaWdodGVkJztcbiAgICB9XG4gICAgcmV0dXJuIGNscztcbiAgfSxcblxuICBfY29tcHV0ZUFkZE9uQ29udGVudENsYXNzOiBmdW5jdGlvbiAoZm9jdXNlZCwgaW52YWxpZCkge1xuICAgIHZhciBjbHMgPSAnYWRkLW9uLWNvbnRlbnQnO1xuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICBjbHMgKz0gJyBpcy1pbnZhbGlkJztcbiAgICB9IGVsc2UgaWYgKGZvY3VzZWQpIHtcbiAgICAgIGNscyArPSAnIGlzLWhpZ2hsaWdodGVkJztcbiAgICB9XG4gICAgcmV0dXJuIGNscztcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWlucHV0L3BhcGVyLWlucHV0LWNvbnRhaW5lci5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(7);\n\n__webpack_require__(5);\n\n__webpack_require__(40);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-input-error> <template> <style>:host{display:inline-block;visibility:hidden;color:var(--paper-input-container-invalid-color,var(--error-color));@apply --paper-font-caption;@apply --paper-input-error;position:absolute;left:0;right:0}:host([invalid]){visibility:visible}</style> <slot></slot> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-input-error',\n\n  behaviors: [Polymer.PaperInputAddonBehavior],\n\n  properties: {\n    /**\n     * True if the error is showing.\n     */\n    invalid: {\n      readOnly: true,\n      reflectToAttribute: true,\n      type: Boolean\n    }\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function (state) {\n    this._setInvalid(state.invalid);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1pbnB1dC9wYXBlci1pbnB1dC1lcnJvci5odG1sPzYwOWIiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1zdHlsZXMvZGVmYXVsdC10aGVtZS5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLXN0eWxlcy90eXBvZ3JhcGh5Lmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1pbnB1dC1hZGRvbi1iZWhhdmlvci5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItaW5wdXQtZXJyb3I+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Zpc2liaWxpdHk6aGlkZGVuO2NvbG9yOnZhcigtLXBhcGVyLWlucHV0LWNvbnRhaW5lci1pbnZhbGlkLWNvbG9yLHZhcigtLWVycm9yLWNvbG9yKSk7QGFwcGx5IC0tcGFwZXItZm9udC1jYXB0aW9uO0BhcHBseSAtLXBhcGVyLWlucHV0LWVycm9yO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowfTpob3N0KFtpbnZhbGlkXSl7dmlzaWJpbGl0eTp2aXNpYmxlfTwvc3R5bGU+IDxzbG90Pjwvc2xvdD4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItaW5wdXQtZXJyb3InLFxuXG4gIGJlaGF2aW9yczogW1BvbHltZXIuUGFwZXJJbnB1dEFkZG9uQmVoYXZpb3JdLFxuXG4gIHByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBlcnJvciBpcyBzaG93aW5nLlxuICAgICAqL1xuICAgIGludmFsaWQ6IHtcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlLFxuICAgICAgdHlwZTogQm9vbGVhblxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBvdmVycmlkZXMgdGhlIHVwZGF0ZSBmdW5jdGlvbiBpbiBQYXBlcklucHV0QWRkb25CZWhhdmlvci5cbiAgICogQHBhcmFtIHt7XG4gICAqICAgaW5wdXRFbGVtZW50OiAoRWxlbWVudHx1bmRlZmluZWQpLFxuICAgKiAgIHZhbHVlOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gICAqICAgaW52YWxpZDogYm9vbGVhblxuICAgKiB9fSBzdGF0ZSAtXG4gICAqICAgICBpbnB1dEVsZW1lbnQ6IFRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiAgICAgdmFsdWU6IFRoZSBpbnB1dCB2YWx1ZS5cbiAgICogICAgIGludmFsaWQ6IFRydWUgaWYgdGhlIGlucHV0IHZhbHVlIGlzIGludmFsaWQuXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHRoaXMuX3NldEludmFsaWQoc3RhdGUuaW52YWxpZCk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1pbnB1dC9wYXBlci1pbnB1dC1lcnJvci5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=iron-image> <template> <style>:host{display:inline-block;overflow:hidden;position:relative}#baseURIAnchor{display:none}#sizedImgDiv{position:absolute;top:0;right:0;bottom:0;left:0;display:none}#img{display:block;width:var(--iron-image-width,auto);height:var(--iron-image-height,auto)}:host([sizing]) #sizedImgDiv{display:block}:host([sizing]) #img{display:none}#placeholder{position:absolute;top:0;right:0;bottom:0;left:0;background-color:inherit;opacity:1;@apply --iron-image-placeholder;}#placeholder.faded-out{transition:opacity .5s linear;opacity:0}</style> <a id=baseURIAnchor href=#></a> <div id=sizedImgDiv role=img hidden$=[[_computeImgDivHidden(sizing)]] aria-hidden$=[[_computeImgDivARIAHidden(alt)]] aria-label$=\\\"[[_computeImgDivARIALabel(alt, src)]]\\\"></div> <img id=img alt$=[[alt]] hidden$=[[_computeImgHidden(sizing)]] crossorigin$=[[crossorigin]] on-load=_imgOnLoad on-error=_imgOnError> <div id=placeholder hidden$=\\\"[[_computePlaceholderHidden(preload, fade, loading, loaded)]]\\\" class$=\\\"[[_computePlaceholderClassName(preload, fade, loading, loaded)]]\\\"></div> </template> </dom-module>\");\n\nPolymer({\n  is: 'iron-image',\n\n  properties: {\n    /**\n     * The URL of an image.\n     */\n    src: {\n      type: String,\n      value: ''\n    },\n\n    /**\n     * A short text alternative for the image.\n     */\n    alt: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * CORS enabled images support: https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n     */\n    crossorigin: {\n      type: String,\n      value: null\n    },\n\n    /**\n     * When true, the image is prevented from loading and any placeholder is\n     * shown.  This may be useful when a binding to the src property is known to\n     * be invalid, to prevent 404 requests.\n     */\n    preventLoad: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Sets a sizing option for the image.  Valid values are `contain` (full\n     * aspect ratio of the image is contained within the element and\n     * letterboxed) or `cover` (image is cropped in order to fully cover the\n     * bounds of the element), or `null` (default: image takes natural size).\n     */\n    sizing: {\n      type: String,\n      value: null,\n      reflectToAttribute: true\n    },\n\n    /**\n     * When a sizing option is used (`cover` or `contain`), this determines\n     * how the image is aligned within the element bounds.\n     */\n    position: {\n      type: String,\n      value: 'center'\n    },\n\n    /**\n     * When `true`, any change to the `src` property will cause the `placeholder`\n     * image to be shown until the new image has loaded.\n     */\n    preload: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * This image will be used as a background/placeholder until the src image has\n     * loaded.  Use of a data-URI for placeholder is encouraged for instant rendering.\n     */\n    placeholder: {\n      type: String,\n      value: null,\n      observer: '_placeholderChanged'\n    },\n\n    /**\n     * When `preload` is true, setting `fade` to true will cause the image to\n     * fade into place.\n     */\n    fade: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Read-only value that is true when the image is loaded.\n     */\n    loaded: {\n      notify: true,\n      readOnly: true,\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Read-only value that tracks the loading state of the image when the `preload`\n     * option is used.\n     */\n    loading: {\n      notify: true,\n      readOnly: true,\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Read-only value that indicates that the last set `src` failed to load.\n     */\n    error: {\n      notify: true,\n      readOnly: true,\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Can be used to set the width of image (e.g. via binding); size may also be\n     * set via CSS.\n     */\n    width: {\n      observer: '_widthChanged',\n      type: Number,\n      value: null\n    },\n\n    /**\n     * Can be used to set the height of image (e.g. via binding); size may also be\n     * set via CSS.\n     *\n     * @attribute height\n     * @type number\n     * @default null\n     */\n    height: {\n      observer: '_heightChanged',\n      type: Number,\n      value: null\n    }\n  },\n\n  observers: ['_transformChanged(sizing, position)', '_loadStateObserver(src, preventLoad)'],\n\n  created: function () {\n    this._resolvedSrc = '';\n  },\n\n  _imgOnLoad: function () {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this._setLoading(false);\n    this._setLoaded(true);\n    this._setError(false);\n  },\n\n  _imgOnError: function () {\n    if (this.$.img.src !== this._resolveSrc(this.src)) {\n      return;\n    }\n\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    this._setLoading(false);\n    this._setLoaded(false);\n    this._setError(true);\n  },\n\n  _computePlaceholderHidden: function () {\n    return !this.preload || !this.fade && !this.loading && this.loaded;\n  },\n\n  _computePlaceholderClassName: function () {\n    return this.preload && this.fade && !this.loading && this.loaded ? 'faded-out' : '';\n  },\n\n  _computeImgDivHidden: function () {\n    return !this.sizing;\n  },\n\n  _computeImgDivARIAHidden: function () {\n    return this.alt === '' ? 'true' : undefined;\n  },\n\n  _computeImgDivARIALabel: function () {\n    if (this.alt !== null) {\n      return this.alt;\n    }\n\n    // Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to\n    // that URL x, but '' is the default for src.\n    if (this.src === '') {\n      return '';\n    }\n\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    var resolved = this._resolveSrc(this.src);\n    // Remove query parts, get file name.\n    return resolved.replace(/[?|#].*/g, '').split('/').pop();\n  },\n\n  _computeImgHidden: function () {\n    return !!this.sizing;\n  },\n\n  _widthChanged: function () {\n    this.style.width = isNaN(this.width) ? this.width : this.width + 'px';\n  },\n\n  _heightChanged: function () {\n    this.style.height = isNaN(this.height) ? this.height : this.height + 'px';\n  },\n\n  _loadStateObserver: function (src, preventLoad) {\n    var newResolvedSrc = this._resolveSrc(src);\n    if (newResolvedSrc === this._resolvedSrc) {\n      return;\n    }\n\n    this._resolvedSrc = '';\n    this.$.img.removeAttribute('src');\n    this.$.sizedImgDiv.style.backgroundImage = '';\n\n    if (src === '' || preventLoad) {\n      this._setLoading(false);\n      this._setLoaded(false);\n      this._setError(false);\n    } else {\n      this._resolvedSrc = newResolvedSrc;\n      this.$.img.src = this._resolvedSrc;\n      this.$.sizedImgDiv.style.backgroundImage = 'url(\"' + this._resolvedSrc + '\")';\n\n      this._setLoading(true);\n      this._setLoaded(false);\n      this._setError(false);\n    }\n  },\n\n  _placeholderChanged: function () {\n    this.$.placeholder.style.backgroundImage = this.placeholder ? 'url(\"' + this.placeholder + '\")' : '';\n  },\n\n  _transformChanged: function () {\n    var sizedImgDivStyle = this.$.sizedImgDiv.style;\n    var placeholderStyle = this.$.placeholder.style;\n\n    sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize = this.sizing;\n\n    sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition = this.sizing ? this.position : '';\n\n    sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat = this.sizing ? 'no-repeat' : '';\n  },\n\n  _resolveSrc: function (testSrc) {\n    var resolved = Polymer.ResolveUrl.resolveUrl(testSrc, this.$.baseURIAnchor.href);\n    // NOTE: Use of `URL` was removed here because IE11 doesn't support\n    // constructing it. If this ends up being problematic, we should\n    // consider reverting and adding the URL polyfill as a dev dependency.\n    if (resolved[0] === '/') {\n      // In IE location.origin might not work\n      // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\n      resolved = (location.origin || location.protocol + '//' + location.host) + resolved;\n    }\n    return resolved;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(13);\n\n__webpack_require__(25);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.toBody(\"<iron-iconset-svg name=image size=24> <svg><defs> <g id=add-a-photo><path d=\\\"M3 4V1h2v3h3v2H5v3H3V6H0V4h3zm3 6V7h3V4h7l1.83 2H21c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V10h3zm7 9c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-3.2-5c0 1.77 1.43 3.2 3.2 3.2s3.2-1.43 3.2-3.2-1.43-3.2-3.2-3.2-3.2 1.43-3.2 3.2z\\\"></path></g> <g id=add-to-photos><path d=\\\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9h-4v4h-2v-4H9V9h4V5h2v4h4v2z\\\"></path></g> <g id=adjust><path d=\\\"M12 2C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3-8c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3z\\\"></path></g> <g id=assistant><path d=\\\"M19 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-5.12 10.88L12 17l-1.88-4.12L6 11l4.12-1.88L12 5l1.88 4.12L18 11l-4.12 1.88z\\\"></path></g> <g id=assistant-photo><path d=\\\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\\\"></path></g> <g id=audiotrack><path d=\\\"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z\\\"></path></g> <g id=blur-circular><path d=\\\"M10 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM7 9.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm3 7c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm-3-3c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm3-6c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM14 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-1.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm3 6c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-4c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm2-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-3.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z\\\"></path></g> <g id=blur-linear><path d=\\\"M5 17.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 13c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zM3 21h18v-2H3v2zM5 9.5c.83 0 1.5-.67 1.5-1.5S5.83 6.5 5 6.5 3.5 7.17 3.5 8 4.17 9.5 5 9.5zm0 4c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 17c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm8-.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM3 3v2h18V3H3zm14 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm0 4c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM13 9c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1z\\\"></path></g> <g id=blur-off><path d=\\\"M14 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm-.2 4.48l.2.02c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5l.02.2c.09.67.61 1.19 1.28 1.28zM14 3.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm-4 0c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm11 7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM10 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm8 8c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm-4 13.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM2.5 5.27l3.78 3.78L6 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.03-.19-.06-.28l2.81 2.81c-.71.11-1.25.73-1.25 1.47 0 .83.67 1.5 1.5 1.5.74 0 1.36-.54 1.47-1.25l2.81 2.81c-.09-.03-.18-.06-.28-.06-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.03-.19-.06-.28l3.78 3.78L20 20.23 3.77 4 2.5 5.27zM10 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm11-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 13c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM3 9.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm7 11c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-3-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5z\\\"></path></g> <g id=blur-on><path d=\\\"M6 13c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-3 .5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm15 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM14 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-3.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm-11 10c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm7 7c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-17c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM10 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 5.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm8 .5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm3 8.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM14 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm-4-12c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0 8.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm4-4.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-4c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\\\"></path></g> <g id=brightness-1><circle cx=12 cy=12 r=10></circle></g> <g id=brightness-2><path d=\\\"M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z\\\"></path></g> <g id=brightness-3><path d=\\\"M9 2c-1.05 0-2.05.16-3 .46 4.06 1.27 7 5.06 7 9.54 0 4.48-2.94 8.27-7 9.54.95.3 1.95.46 3 .46 5.52 0 10-4.48 10-10S14.52 2 9 2z\\\"></path></g> <g id=brightness-4><path d=\\\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-.89 0-1.74-.2-2.5-.55C11.56 16.5 13 14.42 13 12s-1.44-4.5-3.5-5.45C10.26 6.2 11.11 6 12 6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\\\"></path></g> <g id=brightness-5><path d=\\\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\\\"></path></g> <g id=brightness-6><path d=\\\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18V6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\\\"></path></g> <g id=brightness-7><path d=\\\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\\\"></path></g> <g id=broken-image><path d=\\\"M21 5v6.59l-3-3.01-4 4.01-4-4-4 4-3-3.01V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2zm-3 6.42l3 3.01V19c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2v-6.58l3 2.99 4-4 4 4 4-3.99z\\\"></path></g> <g id=brush><path d=\\\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37l-1.34-1.34c-.39-.39-1.02-.39-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\\\"></path></g> <g id=burst-mode><path d=\\\"M1 5h2v14H1zm4 0h2v14H5zm17 0H10c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zM11 17l2.5-3.15L15.29 16l2.5-3.22L21 17H11z\\\"></path></g> <g id=camera><path d=\\\"M9.4 10.5l4.77-8.26C13.47 2.09 12.75 2 12 2c-2.4 0-4.6.85-6.32 2.25l3.66 6.35.06-.1zM21.54 9c-.92-2.92-3.15-5.26-6-6.34L11.88 9h9.66zm.26 1h-7.49l.29.5 4.76 8.25C21 16.97 22 14.61 22 12c0-.69-.07-1.35-.2-2zM8.54 12l-3.9-6.75C3.01 7.03 2 9.39 2 12c0 .69.07 1.35.2 2h7.49l-1.15-2zm-6.08 3c.92 2.92 3.15 5.26 6 6.34L12.12 15H2.46zm11.27 0l-3.9 6.76c.7.15 1.42.24 2.17.24 2.4 0 4.6-.85 6.32-2.25l-3.66-6.35-.93 1.6z\\\"></path></g> <g id=camera-alt><circle cx=12 cy=12 r=3.2></circle><path d=\\\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\\\"></path></g> <g id=camera-front><path d=\\\"M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zM12 8c1.1 0 2-.9 2-2s-.9-2-2-2-1.99.9-1.99 2S10.9 8 12 8zm5-8H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM7 2h10v10.5c0-1.67-3.33-2.5-5-2.5s-5 .83-5 2.5V2z\\\"></path></g> <g id=camera-rear><path d=\\\"M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zm3-20H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-5 6c-1.11 0-2-.9-2-2s.89-2 1.99-2 2 .9 2 2C14 5.1 13.1 6 12 6z\\\"></path></g> <g id=camera-roll><path d=\\\"M14 5c0-1.1-.9-2-2-2h-1V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v1H4c-1.1 0-2 .9-2 2v15c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2h8V5h-8zm-2 13h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2z\\\"></path></g> <g id=center-focus-strong><path d=\\\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-7 7H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4z\\\"></path></g> <g id=center-focus-weak><path d=\\\"M5 15H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zM12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\\"></path></g> <g id=collections><path d=\\\"M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z\\\"></path></g> <g id=collections-bookmark><path d=\\\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 10l-2.5-1.5L15 12V4h5v8z\\\"></path></g> <g id=color-lens><path d=\\\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\\\"></path></g> <g id=colorize><path d=\\\"M20.71 5.63l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-3.12 3.12-1.93-1.91-1.41 1.41 1.42 1.42L3 16.25V21h4.75l8.92-8.92 1.42 1.42 1.41-1.41-1.92-1.92 3.12-3.12c.4-.4.4-1.03.01-1.42zM6.92 19L5 17.08l8.06-8.06 1.92 1.92L6.92 19z\\\"></path></g> <g id=compare><path d=\\\"M10 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h5v2h2V1h-2v2zm0 15H5l5-6v6zm9-15h-5v2h5v13l-5-6v9h5c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=control-point><path d=\\\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=control-point-duplicate><path d=\\\"M16 8h-2v3h-3v2h3v3h2v-3h3v-2h-3zM2 12c0-2.79 1.64-5.2 4.01-6.32V3.52C2.52 4.76 0 8.09 0 12s2.52 7.24 6.01 8.48v-2.16C3.64 17.2 2 14.79 2 12zm13-9c-4.96 0-9 4.04-9 9s4.04 9 9 9 9-4.04 9-9-4.04-9-9-9zm0 16c-3.86 0-7-3.14-7-7s3.14-7 7-7 7 3.14 7 7-3.14 7-7 7z\\\"></path></g> <g id=crop><path d=\\\"M17 15h2V7c0-1.1-.9-2-2-2H9v2h8v8zM7 17V1H5v4H1v2h4v10c0 1.1.9 2 2 2h10v4h2v-4h4v-2H7z\\\"></path></g> <g id=crop-16-9><path d=\\\"M19 6H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H5V8h14v8z\\\"></path></g> <g id=crop-3-2><path d=\\\"M19 4H5c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H5V6h14v12z\\\"></path></g> <g id=crop-5-4><path d=\\\"M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 12H5V7h14v10z\\\"></path></g> <g id=crop-7-5><path d=\\\"M19 7H5c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 8H5V9h14v6z\\\"></path></g> <g id=crop-din><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\\\"></path></g> <g id=crop-free><path d=\\\"M3 5v4h2V5h4V3H5c-1.1 0-2 .9-2 2zm2 10H3v4c0 1.1.9 2 2 2h4v-2H5v-4zm14 4h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zm0-16h-4v2h4v4h2V5c0-1.1-.9-2-2-2z\\\"></path></g> <g id=crop-landscape><path d=\\\"M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 12H5V7h14v10z\\\"></path></g> <g id=crop-original><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zm-5.04-6.71l-2.75 3.54-1.96-2.36L6.5 17h11l-3.54-4.71z\\\"></path></g> <g id=crop-portrait><path d=\\\"M17 3H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7V5h10v14z\\\"></path></g> <g id=crop-rotate><path d=\\\"M7.47 21.49C4.2 19.93 1.86 16.76 1.5 13H0c.51 6.16 5.66 11 11.95 11 .23 0 .44-.02.66-.03L8.8 20.15l-1.33 1.34zM12.05 0c-.23 0-.44.02-.66.04l3.81 3.81 1.33-1.33C19.8 4.07 22.14 7.24 22.5 11H24c-.51-6.16-5.66-11-11.95-11zM16 14h2V8c0-1.11-.9-2-2-2h-6v2h6v6zm-8 2V4H6v2H4v2h2v8c0 1.1.89 2 2 2h8v2h2v-2h2v-2H8z\\\"></path></g> <g id=crop-square><path d=\\\"M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H6V6h12v12z\\\"></path></g> <g id=dehaze><path d=\\\"M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z\\\"></path></g> <g id=details><path d=\\\"M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z\\\"></path></g> <g id=edit><path d=\\\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\\\"></path></g> <g id=exposure><path d=\\\"M15 17v2h2v-2h2v-2h-2v-2h-2v2h-2v2h2zm5-15H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM5 5h6v2H5V5zm15 15H4L20 4v16z\\\"></path></g> <g id=exposure-neg-1><path d=\\\"M4 11v2h8v-2H4zm15 7h-2V7.38L14 8.4V6.7L18.7 5h.3v13z\\\"></path></g> <g id=exposure-neg-2><path d=\\\"M15.05 16.29l2.86-3.07c.38-.39.72-.79 1.04-1.18.32-.39.59-.78.82-1.17.23-.39.41-.78.54-1.17s.19-.79.19-1.18c0-.53-.09-1.02-.27-1.46-.18-.44-.44-.81-.78-1.11-.34-.31-.77-.54-1.26-.71-.51-.16-1.08-.24-1.72-.24-.69 0-1.31.11-1.85.32-.54.21-1 .51-1.36.88-.37.37-.65.8-.84 1.3-.18.47-.27.97-.28 1.5h2.14c.01-.31.05-.6.13-.87.09-.29.23-.54.4-.75.18-.21.41-.37.68-.49.27-.12.6-.18.96-.18.31 0 .58.05.81.15.23.1.43.25.59.43.16.18.28.4.37.65.08.25.13.52.13.81 0 .22-.03.43-.08.65-.06.22-.15.45-.29.7-.14.25-.32.53-.56.83-.23.3-.52.65-.88 1.03l-4.17 4.55V18H21v-1.71h-5.95zM2 11v2h8v-2H2z\\\"></path></g> <g id=exposure-plus-1><path d=\\\"M10 7H8v4H4v2h4v4h2v-4h4v-2h-4V7zm10 11h-2V7.38L15 8.4V6.7L19.7 5h.3v13z\\\"></path></g> <g id=exposure-plus-2><path d=\\\"M16.05 16.29l2.86-3.07c.38-.39.72-.79 1.04-1.18.32-.39.59-.78.82-1.17.23-.39.41-.78.54-1.17.13-.39.19-.79.19-1.18 0-.53-.09-1.02-.27-1.46-.18-.44-.44-.81-.78-1.11-.34-.31-.77-.54-1.26-.71-.51-.16-1.08-.24-1.72-.24-.69 0-1.31.11-1.85.32-.54.21-1 .51-1.36.88-.37.37-.65.8-.84 1.3-.18.47-.27.97-.28 1.5h2.14c.01-.31.05-.6.13-.87.09-.29.23-.54.4-.75.18-.21.41-.37.68-.49.27-.12.6-.18.96-.18.31 0 .58.05.81.15.23.1.43.25.59.43.16.18.28.4.37.65.08.25.13.52.13.81 0 .22-.03.43-.08.65-.06.22-.15.45-.29.7-.14.25-.32.53-.56.83-.23.3-.52.65-.88 1.03l-4.17 4.55V18H22v-1.71h-5.95zM8 7H6v4H2v2h4v4h2v-4h4v-2H8V7z\\\"></path></g> <g id=exposure-zero><path d=\\\"M16.14 12.5c0 1-.1 1.85-.3 2.55-.2.7-.48 1.27-.83 1.7-.36.44-.79.75-1.3.95-.51.2-1.07.3-1.7.3-.62 0-1.18-.1-1.69-.3-.51-.2-.95-.51-1.31-.95-.36-.44-.65-1.01-.85-1.7-.2-.7-.3-1.55-.3-2.55v-2.04c0-1 .1-1.85.3-2.55.2-.7.48-1.26.84-1.69.36-.43.8-.74 1.31-.93C10.81 5.1 11.38 5 12 5c.63 0 1.19.1 1.7.29.51.19.95.5 1.31.93.36.43.64.99.84 1.69.2.7.3 1.54.3 2.55v2.04zm-2.11-2.36c0-.64-.05-1.18-.13-1.62-.09-.44-.22-.79-.4-1.06-.17-.27-.39-.46-.64-.58-.25-.13-.54-.19-.86-.19-.32 0-.61.06-.86.18s-.47.31-.64.58c-.17.27-.31.62-.4 1.06s-.13.98-.13 1.62v2.67c0 .64.05 1.18.14 1.62.09.45.23.81.4 1.09s.39.48.64.61.54.19.87.19c.33 0 .62-.06.87-.19s.46-.33.63-.61c.17-.28.3-.64.39-1.09.09-.45.13-.99.13-1.62v-2.66z\\\"></path></g> <g id=filter><path d=\\\"M15.96 10.29l-2.75 3.54-1.96-2.36L8.5 15h11l-3.54-4.71zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\\\"></path></g> <g id=filter-1><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm11 10h2V5h-4v2h2v8zm7-14H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\\\"></path></g> <g id=filter-2><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-4-4h-4v-2h2c1.1 0 2-.89 2-2V7c0-1.11-.9-2-2-2h-4v2h4v2h-2c-1.1 0-2 .89-2 2v4h6v-2z\\\"></path></g> <g id=filter-3><path d=\\\"M21 1H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm14 8v-1.5c0-.83-.67-1.5-1.5-1.5.83 0 1.5-.67 1.5-1.5V7c0-1.11-.9-2-2-2h-4v2h4v2h-2v2h2v2h-4v2h4c1.1 0 2-.89 2-2z\\\"></path></g> <g id=filter-4><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm12 10h2V5h-2v4h-2V5h-2v6h4v4zm6-14H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\\\"></path></g> <g id=filter-5><path d=\\\"M21 1H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm14 8v-2c0-1.11-.9-2-2-2h-2V7h4V5h-6v6h4v2h-4v2h4c1.1 0 2-.89 2-2z\\\"></path></g> <g id=filter-6><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2h2c1.1 0 2-.89 2-2v-2c0-1.11-.9-2-2-2h-2V7h4V5h-4c-1.1 0-2 .89-2 2v6c0 1.11.9 2 2 2zm0-4h2v2h-2v-2z\\\"></path></g> <g id=filter-7><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2l4-8V5h-6v2h4l-4 8h2z\\\"></path></g> <g id=filter-8><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2h2c1.1 0 2-.89 2-2v-1.5c0-.83-.67-1.5-1.5-1.5.83 0 1.5-.67 1.5-1.5V7c0-1.11-.9-2-2-2h-2c-1.1 0-2 .89-2 2v1.5c0 .83.67 1.5 1.5 1.5-.83 0-1.5.67-1.5 1.5V13c0 1.11.9 2 2 2zm0-8h2v2h-2V7zm0 4h2v2h-2v-2z\\\"></path></g> <g id=filter-9><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM15 5h-2c-1.1 0-2 .89-2 2v2c0 1.11.9 2 2 2h2v2h-4v2h4c1.1 0 2-.89 2-2V7c0-1.11-.9-2-2-2zm0 4h-2V7h2v2z\\\"></path></g> <g id=filter-9-plus><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm11 7V8c0-1.11-.9-2-2-2h-1c-1.1 0-2 .89-2 2v1c0 1.11.9 2 2 2h1v1H9v2h3c1.1 0 2-.89 2-2zm-3-3V8h1v1h-1zm10-8H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 8h-2V7h-2v2h-2v2h2v2h2v-2h2v6H7V3h14v6z\\\"></path></g> <g id=filter-b-and-w><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16l-7-8v8H5l7-8V5h7v14z\\\"></path></g> <g id=filter-center-focus><path d=\\\"M5 15H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zM12 9c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\\\"></path></g> <g id=filter-drama><path d=\\\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.61 5.64 5.36 8.04 2.35 8.36 0 10.9 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4h2c0-2.76-1.86-5.08-4.4-5.78C8.61 6.88 10.2 6 12 6c3.03 0 5.5 2.47 5.5 5.5v.5H19c1.65 0 3 1.35 3 3s-1.35 3-3 3z\\\"></path></g> <g id=filter-frames><path d=\\\"M20 4h-4l-4-4-4 4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H4V6h4.52l3.52-3.5L15.52 6H20v14zM18 8H6v10h12\\\"></path></g> <g id=filter-hdr><path d=\\\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\\\"></path></g> <g id=filter-none><path d=\\\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\\\"></path></g> <g id=filter-tilt-shift><path d=\\\"M11 4.07V2.05c-2.01.2-3.84 1-5.32 2.21L7.1 5.69c1.11-.86 2.44-1.44 3.9-1.62zm7.32.19C16.84 3.05 15.01 2.25 13 2.05v2.02c1.46.18 2.79.76 3.9 1.62l1.42-1.43zM19.93 11h2.02c-.2-2.01-1-3.84-2.21-5.32L18.31 7.1c.86 1.11 1.44 2.44 1.62 3.9zM5.69 7.1L4.26 5.68C3.05 7.16 2.25 8.99 2.05 11h2.02c.18-1.46.76-2.79 1.62-3.9zM4.07 13H2.05c.2 2.01 1 3.84 2.21 5.32l1.43-1.43c-.86-1.1-1.44-2.43-1.62-3.89zM15 12c0-1.66-1.34-3-3-3s-3 1.34-3 3 1.34 3 3 3 3-1.34 3-3zm3.31 4.9l1.43 1.43c1.21-1.48 2.01-3.32 2.21-5.32h-2.02c-.18 1.45-.76 2.78-1.62 3.89zM13 19.93v2.02c2.01-.2 3.84-1 5.32-2.21l-1.43-1.43c-1.1.86-2.43 1.44-3.89 1.62zm-7.32-.19C7.16 20.95 9 21.75 11 21.95v-2.02c-1.46-.18-2.79-.76-3.9-1.62l-1.42 1.43z\\\"></path></g> <g id=filter-vintage><path d=\\\"M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\\\"></path></g> <g id=flare><path d=\\\"M7 11H1v2h6v-2zm2.17-3.24L7.05 5.64 5.64 7.05l2.12 2.12 1.41-1.41zM13 1h-2v6h2V1zm5.36 6.05l-1.41-1.41-2.12 2.12 1.41 1.41 2.12-2.12zM17 11v2h6v-2h-6zm-5-2c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zm2.83 7.24l2.12 2.12 1.41-1.41-2.12-2.12-1.41 1.41zm-9.19.71l1.41 1.41 2.12-2.12-1.41-1.41-2.12 2.12zM11 23h2v-6h-2v6z\\\"></path></g> <g id=flash-auto><path d=\\\"M3 2v12h3v9l7-12H9l4-9H3zm16 0h-2l-3.2 9h1.9l.7-2h3.2l.7 2h1.9L19 2zm-2.15 5.65L18 4l1.15 3.65h-2.3z\\\"></path></g> <g id=flash-off><path d=\\\"M3.27 3L2 4.27l5 5V13h3v9l3.58-6.14L17.73 20 19 18.73 3.27 3zM17 10h-4l4-8H7v2.18l8.46 8.46L17 10z\\\"></path></g> <g id=flash-on><path d=\\\"M7 2v11h3v9l7-12h-4l4-8z\\\"></path></g> <g id=flip><path d=\\\"M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z\\\"></path></g> <g id=gradient><path d=\\\"M11 9h2v2h-2zm-2 2h2v2H9zm4 0h2v2h-2zm2-2h2v2h-2zM7 9h2v2H7zm12-6H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 18H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm2-7h-2v2h2v2h-2v-2h-2v2h-2v-2h-2v2H9v-2H7v2H5v-2h2v-2H5V5h14v6z\\\"></path></g> <g id=grain><path d=\\\"M10 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12-8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\\\"></path></g> <g id=grid-off><path d=\\\"M8 4v1.45l2 2V4h4v4h-3.45l2 2H14v1.45l2 2V10h4v4h-3.45l2 2H20v1.45l2 2V4c0-1.1-.9-2-2-2H4.55l2 2H8zm8 0h4v4h-4V4zM1.27 1.27L0 2.55l2 2V20c0 1.1.9 2 2 2h15.46l2 2 1.27-1.27L1.27 1.27zM10 12.55L11.45 14H10v-1.45zm-6-6L5.45 8H4V6.55zM8 20H4v-4h4v4zm0-6H4v-4h3.45l.55.55V14zm6 6h-4v-4h3.45l.55.54V20zm2 0v-1.46L17.46 20H16z\\\"></path></g> <g id=grid-on><path d=\\\"M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 20H4v-4h4v4zm0-6H4v-4h4v4zm0-6H4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z\\\"></path></g> <g id=hdr-off><path d=\\\"M17.5 15v-2h1.1l.9 2H21l-.9-2.1c.5-.2.9-.8.9-1.4v-1c0-.8-.7-1.5-1.5-1.5H16v4.9l1.1 1.1h.4zm0-4.5h2v1h-2v-1zm-4.5 0v.4l1.5 1.5v-1.9c0-.8-.7-1.5-1.5-1.5h-1.9l1.5 1.5h.4zm-3.5-1l-7-7-1.1 1L6.9 9h-.4v2h-2V9H3v6h1.5v-2.5h2V15H8v-4.9l1.5 1.5V15h3.4l7.6 7.6 1.1-1.1-12.1-12z\\\"></path></g> <g id=hdr-on><path d=\\\"M21 11.5v-1c0-.8-.7-1.5-1.5-1.5H16v6h1.5v-2h1.1l.9 2H21l-.9-2.1c.5-.3.9-.8.9-1.4zm-1.5 0h-2v-1h2v1zm-13-.5h-2V9H3v6h1.5v-2.5h2V15H8V9H6.5v2zM13 9H9.5v6H13c.8 0 1.5-.7 1.5-1.5v-3c0-.8-.7-1.5-1.5-1.5zm0 4.5h-2v-3h2v3z\\\"></path></g> <g id=hdr-strong><path d=\\\"M17 6c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zM5 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\\"></path></g> <g id=hdr-weak><path d=\\\"M5 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm12-2c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\\\"></path></g> <g id=healing><path d=\\\"M17.73 12.02l3.98-3.98c.39-.39.39-1.02 0-1.41l-4.34-4.34c-.39-.39-1.02-.39-1.41 0l-3.98 3.98L8 2.29C7.8 2.1 7.55 2 7.29 2c-.25 0-.51.1-.7.29L2.25 6.63c-.39.39-.39 1.02 0 1.41l3.98 3.98L2.25 16c-.39.39-.39 1.02 0 1.41l4.34 4.34c.39.39 1.02.39 1.41 0l3.98-3.98 3.98 3.98c.2.2.45.29.71.29.26 0 .51-.1.71-.29l4.34-4.34c.39-.39.39-1.02 0-1.41l-3.99-3.98zM12 9c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-4.71 1.96L3.66 7.34l3.63-3.63 3.62 3.62-3.62 3.63zM10 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2 2c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2.66 9.34l-3.63-3.62 3.63-3.63 3.62 3.62-3.62 3.63z\\\"></path></g> <g id=image><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"></path></g> <g id=image-aspect-ratio><path d=\\\"M16 10h-2v2h2v-2zm0 4h-2v2h2v-2zm-8-4H6v2h2v-2zm4 0h-2v2h2v-2zm8-6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V6h16v12z\\\"></path></g> <g id=iso><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5.5 7.5h2v-2H9v2h2V9H9v2H7.5V9h-2V7.5zM19 19H5L19 5v14zm-2-2v-1.5h-5V17h5z\\\"></path></g> <g id=landscape><path d=\\\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\\\"></path></g> <g id=leak-add><path d=\\\"M6 3H3v3c1.66 0 3-1.34 3-3zm8 0h-2c0 4.97-4.03 9-9 9v2c6.08 0 11-4.93 11-11zm-4 0H8c0 2.76-2.24 5-5 5v2c3.87 0 7-3.13 7-7zm0 18h2c0-4.97 4.03-9 9-9v-2c-6.07 0-11 4.93-11 11zm8 0h3v-3c-1.66 0-3 1.34-3 3zm-4 0h2c0-2.76 2.24-5 5-5v-2c-3.87 0-7 3.13-7 7z\\\"></path></g> <g id=leak-remove><path d=\\\"M10 3H8c0 .37-.04.72-.12 1.06l1.59 1.59C9.81 4.84 10 3.94 10 3zM3 4.27l2.84 2.84C5.03 7.67 4.06 8 3 8v2c1.61 0 3.09-.55 4.27-1.46L8.7 9.97C7.14 11.24 5.16 12 3 12v2c2.71 0 5.19-.99 7.11-2.62l2.5 2.5C10.99 15.81 10 18.29 10 21h2c0-2.16.76-4.14 2.03-5.69l1.43 1.43C14.55 17.91 14 19.39 14 21h2c0-1.06.33-2.03.89-2.84L19.73 21 21 19.73 4.27 3 3 4.27zM14 3h-2c0 1.5-.37 2.91-1.02 4.16l1.46 1.46C13.42 6.98 14 5.06 14 3zm5.94 13.12c.34-.08.69-.12 1.06-.12v-2c-.94 0-1.84.19-2.66.52l1.6 1.6zm-4.56-4.56l1.46 1.46C18.09 12.37 19.5 12 21 12v-2c-2.06 0-3.98.58-5.62 1.56z\\\"></path></g> <g id=lens><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z\\\"></path></g> <g id=linked-camera><circle cx=12 cy=14 r=3.2></circle><path d=\\\"M16 3.33c2.58 0 4.67 2.09 4.67 4.67H22c0-3.31-2.69-6-6-6v1.33M16 6c1.11 0 2 .89 2 2h1.33c0-1.84-1.49-3.33-3.33-3.33V6\\\"></path><path d=\\\"M17 9c0-1.11-.89-2-2-2V4H9L7.17 6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9h-5zm-5 10c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\\\"></path></g> <g id=looks><path d=\\\"M12 10c-3.86 0-7 3.14-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.86-3.14-7-7-7zm0-4C5.93 6 1 10.93 1 17h2c0-4.96 4.04-9 9-9s9 4.04 9 9h2c0-6.07-4.93-11-11-11z\\\"></path></g> <g id=looks-3><path d=\\\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\\\"></path></g> <g id=looks-4><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 14h-2v-4H9V7h2v4h2V7h2v10z\\\"></path></g> <g id=looks-5><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h2c1.1 0 2 .89 2 2v2c0 1.11-.9 2-2 2H9v-2h4v-2H9V7h6v2z\\\"></path></g> <g id=looks-6><path d=\\\"M11 15h2v-2h-2v2zm8-12H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h2c1.1 0 2 .89 2 2v2c0 1.11-.9 2-2 2h-2c-1.1 0-2-.89-2-2V9c0-1.11.9-2 2-2h4v2z\\\"></path></g> <g id=looks-one><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\\\"></path></g> <g id=looks-two><path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\\\"></path></g> <g id=loupe><path d=\\\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10h8c1.1 0 2-.9 2-2v-8c0-5.51-4.49-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=monochrome-photos><path d=\\\"M20 5h-3.2L15 3H9L7.2 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 14h-8v-1c-2.8 0-5-2.2-5-5s2.2-5 5-5V7h8v12zm-3-6c0-2.8-2.2-5-5-5v1.8c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2V18c2.8 0 5-2.2 5-5zm-8.2 0c0 1.8 1.4 3.2 3.2 3.2V9.8c-1.8 0-3.2 1.4-3.2 3.2z\\\"></path></g> <g id=movie-creation><path d=\\\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\\\"></path></g> <g id=movie-filter><path d=\\\"M18 4l2 3h-3l-2-3h-2l2 3h-3l-2-3H8l2 3H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4zm-6.75 11.25L10 18l-1.25-2.75L6 14l2.75-1.25L10 10l1.25 2.75L14 14l-2.75 1.25zm5.69-3.31L16 14l-.94-2.06L13 11l2.06-.94L16 8l.94 2.06L19 11l-2.06.94z\\\"></path></g> <g id=music-note><path d=\\\"M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z\\\"></path></g> <g id=nature><path d=\\\"M13 16.12c3.47-.41 6.17-3.36 6.17-6.95 0-3.87-3.13-7-7-7s-7 3.13-7 7c0 3.47 2.52 6.34 5.83 6.89V20H5v2h14v-2h-6v-3.88z\\\"></path></g> <g id=nature-people><path d=\\\"M22.17 9.17c0-3.87-3.13-7-7-7s-7 3.13-7 7c0 3.47 2.52 6.34 5.83 6.89V20H6v-3h1v-4c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v4h1v5h16v-2h-3v-3.88c3.47-.41 6.17-3.36 6.17-6.95zM4.5 11c.83 0 1.5-.67 1.5-1.5S5.33 8 4.5 8 3 8.67 3 9.5 3.67 11 4.5 11z\\\"></path></g> <g id=navigate-before><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"></path></g> <g id=navigate-next><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"></path></g> <g id=palette><path d=\\\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\\\"></path></g> <g id=panorama><path d=\\\"M23 18V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zM8.5 12.5l2.5 3.01L14.5 11l4.5 6H5l3.5-4.5z\\\"></path></g> <g id=panorama-fish-eye><path d=\\\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"></path></g> <g id=panorama-horizontal><path d=\\\"M20 6.54v10.91c-2.6-.77-5.28-1.16-8-1.16-2.72 0-5.4.39-8 1.16V6.54c2.6.77 5.28 1.16 8 1.16 2.72.01 5.4-.38 8-1.16M21.43 4c-.1 0-.2.02-.31.06C18.18 5.16 15.09 5.7 12 5.7c-3.09 0-6.18-.55-9.12-1.64-.11-.04-.22-.06-.31-.06-.34 0-.57.23-.57.63v14.75c0 .39.23.62.57.62.1 0 .2-.02.31-.06 2.94-1.1 6.03-1.64 9.12-1.64 3.09 0 6.18.55 9.12 1.64.11.04.21.06.31.06.33 0 .57-.23.57-.63V4.63c0-.4-.24-.63-.57-.63z\\\"></path></g> <g id=panorama-vertical><path d=\\\"M19.94 21.12c-1.1-2.94-1.64-6.03-1.64-9.12 0-3.09.55-6.18 1.64-9.12.04-.11.06-.22.06-.31 0-.34-.23-.57-.63-.57H4.63c-.4 0-.63.23-.63.57 0 .1.02.2.06.31C5.16 5.82 5.71 8.91 5.71 12c0 3.09-.55 6.18-1.64 9.12-.05.11-.07.22-.07.31 0 .33.23.57.63.57h14.75c.39 0 .63-.24.63-.57-.01-.1-.03-.2-.07-.31zM6.54 20c.77-2.6 1.16-5.28 1.16-8 0-2.72-.39-5.4-1.16-8h10.91c-.77 2.6-1.16 5.28-1.16 8 0 2.72.39 5.4 1.16 8H6.54z\\\"></path></g> <g id=panorama-wide-angle><path d=\\\"M12 6c2.45 0 4.71.2 7.29.64.47 1.78.71 3.58.71 5.36 0 1.78-.24 3.58-.71 5.36-2.58.44-4.84.64-7.29.64s-4.71-.2-7.29-.64C4.24 15.58 4 13.78 4 12c0-1.78.24-3.58.71-5.36C7.29 6.2 9.55 6 12 6m0-2c-2.73 0-5.22.24-7.95.72l-.93.16-.25.9C2.29 7.85 2 9.93 2 12s.29 4.15.87 6.22l.25.89.93.16c2.73.49 5.22.73 7.95.73s5.22-.24 7.95-.72l.93-.16.25-.89c.58-2.08.87-4.16.87-6.23s-.29-4.15-.87-6.22l-.25-.89-.93-.16C17.22 4.24 14.73 4 12 4z\\\"></path></g> <g id=photo><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"></path></g> <g id=photo-album><path d=\\\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4zm0 15l3-3.86 2.14 2.58 3-3.86L18 19H6z\\\"></path></g> <g id=photo-camera><circle cx=12 cy=12 r=3.2></circle><path d=\\\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\\\"></path></g> <g id=photo-filter><path d=\\\"M19.02 10v9H5V5h9V3H5.02c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-9h-2zM17 10l.94-2.06L20 7l-2.06-.94L17 4l-.94 2.06L14 7l2.06.94zm-3.75.75L12 8l-1.25 2.75L8 12l2.75 1.25L12 16l1.25-2.75L16 12z\\\"></path></g> <g id=photo-library><path d=\\\"M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z\\\"></path></g> <g id=photo-size-select-actual><path d=\\\"M21 3H3C2 3 1 4 1 5v14c0 1.1.9 2 2 2h18c1 0 2-1 2-2V5c0-1-1-2-2-2zM5 17l3.5-4.5 2.5 3.01L14.5 11l4.5 6H5z\\\"></path></g> <g id=photo-size-select-large><path d=\\\"M21 15h2v2h-2v-2zm0-4h2v2h-2v-2zm2 8h-2v2c1 0 2-1 2-2zM13 3h2v2h-2V3zm8 4h2v2h-2V7zm0-4v2h2c0-1-1-2-2-2zM1 7h2v2H1V7zm16-4h2v2h-2V3zm0 16h2v2h-2v-2zM3 3C2 3 1 4 1 5h2V3zm6 0h2v2H9V3zM5 3h2v2H5V3zm-4 8v8c0 1.1.9 2 2 2h12V11H1zm2 8l2.5-3.21 1.79 2.15 2.5-3.22L13 19H3z\\\"></path></g> <g id=photo-size-select-small><path d=\\\"M23 15h-2v2h2v-2zm0-4h-2v2h2v-2zm0 8h-2v2c1 0 2-1 2-2zM15 3h-2v2h2V3zm8 4h-2v2h2V7zm-2-4v2h2c0-1-1-2-2-2zM3 21h8v-6H1v4c0 1.1.9 2 2 2zM3 7H1v2h2V7zm12 12h-2v2h2v-2zm4-16h-2v2h2V3zm0 16h-2v2h2v-2zM3 3C2 3 1 4 1 5h2V3zm0 8H1v2h2v-2zm8-8H9v2h2V3zM7 3H5v2h2V3z\\\"></path></g> <g id=picture-as-pdf><path d=\\\"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z\\\"></path></g> <g id=portrait><path d=\\\"M12 12.25c1.24 0 2.25-1.01 2.25-2.25S13.24 7.75 12 7.75 9.75 8.76 9.75 10s1.01 2.25 2.25 2.25zm4.5 4c0-1.5-3-2.25-4.5-2.25s-4.5.75-4.5 2.25V17h9v-.75zM19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\\\"></path></g> <g id=remove-red-eye><path d=\\\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\\\"></path></g> <g id=rotate-90-degrees-ccw><path d=\\\"M7.34 6.41L.86 12.9l6.49 6.48 6.49-6.48-6.5-6.49zM3.69 12.9l3.66-3.66L11 12.9l-3.66 3.66-3.65-3.66zm15.67-6.26C17.61 4.88 15.3 4 13 4V.76L8.76 5 13 9.24V6c1.79 0 3.58.68 4.95 2.05 2.73 2.73 2.73 7.17 0 9.9C16.58 19.32 14.79 20 13 20c-.97 0-1.94-.21-2.84-.61l-1.49 1.49C10.02 21.62 11.51 22 13 22c2.3 0 4.61-.88 6.36-2.64 3.52-3.51 3.52-9.21 0-12.72z\\\"></path></g> <g id=rotate-left><path d=\\\"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\\\"></path></g> <g id=rotate-right><path d=\\\"M15.55 5.55L11 1v3.07C7.06 4.56 4 7.92 4 12s3.05 7.44 7 7.93v-2.02c-2.84-.48-5-2.94-5-5.91s2.16-5.43 5-5.91V10l4.55-4.45zM19.93 11c-.17-1.39-.72-2.73-1.62-3.89l-1.42 1.42c.54.75.88 1.6 1.02 2.47h2.02zM13 17.9v2.02c1.39-.17 2.74-.71 3.9-1.61l-1.44-1.44c-.75.54-1.59.89-2.46 1.03zm3.89-2.42l1.42 1.41c.9-1.16 1.45-2.5 1.62-3.89h-2.02c-.14.87-.48 1.72-1.02 2.48z\\\"></path></g> <g id=slideshow><path d=\\\"M10 8v8l5-4-5-4zm9-5H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\\\"></path></g> <g id=straighten><path d=\\\"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H3V8h2v4h2V8h2v4h2V8h2v4h2V8h2v4h2V8h2v8z\\\"></path></g> <g id=style><path d=\\\"M2.53 19.65l1.34.56v-9.03l-2.43 5.86c-.41 1.02.08 2.19 1.09 2.61zm19.5-3.7L17.07 3.98c-.31-.75-1.04-1.21-1.81-1.23-.26 0-.53.04-.79.15L7.1 5.95c-.75.31-1.21 1.03-1.23 1.8-.01.27.04.54.15.8l4.96 11.97c.31.76 1.05 1.22 1.83 1.23.26 0 .52-.05.77-.15l7.36-3.05c1.02-.42 1.51-1.59 1.09-2.6zM7.88 8.75c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-2 11c0 1.1.9 2 2 2h1.45l-3.45-8.34v6.34z\\\"></path></g> <g id=switch-camera><path d=\\\"M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z\\\"></path></g> <g id=switch-video><path d=\\\"M18 9.5V6c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h14c.55 0 1-.45 1-1v-3.5l4 4v-13l-4 4zm-5 6V13H7v2.5L3.5 12 7 8.5V11h6V8.5l3.5 3.5-3.5 3.5z\\\"></path></g> <g id=tag-faces><path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\\\"></path></g> <g id=texture><path d=\\\"M19.51 3.08L3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3L3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z\\\"></path></g> <g id=timelapse><path d=\\\"M16.24 7.76C15.07 6.59 13.54 6 12 6v6l-4.24 4.24c2.34 2.34 6.14 2.34 8.49 0 2.34-2.34 2.34-6.14-.01-8.48zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\\\"></path></g> <g id=timer><path d=\\\"M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\\\"></path></g> <g id=timer-10><path d=\\\"M0 7.72V9.4l3-1V18h2V6h-.25L0 7.72zm23.78 6.65c-.14-.28-.35-.53-.63-.74-.28-.21-.61-.39-1.01-.53s-.85-.27-1.35-.38c-.35-.07-.64-.15-.87-.23-.23-.08-.41-.16-.55-.25-.14-.09-.23-.19-.28-.3-.05-.11-.08-.24-.08-.39 0-.14.03-.28.09-.41.06-.13.15-.25.27-.34.12-.1.27-.18.45-.24s.4-.09.64-.09c.25 0 .47.04.66.11.19.07.35.17.48.29.13.12.22.26.29.42.06.16.1.32.1.49h1.95c0-.39-.08-.75-.24-1.09-.16-.34-.39-.63-.69-.88-.3-.25-.66-.44-1.09-.59C21.49 9.07 21 9 20.46 9c-.51 0-.98.07-1.39.21-.41.14-.77.33-1.06.57-.29.24-.51.52-.67.84-.16.32-.23.65-.23 1.01s.08.69.23.96c.15.28.36.52.64.73.27.21.6.38.98.53.38.14.81.26 1.27.36.39.08.71.17.95.26s.43.19.57.29c.13.1.22.22.27.34.05.12.07.25.07.39 0 .32-.13.57-.4.77-.27.2-.66.29-1.17.29-.22 0-.43-.02-.64-.08-.21-.05-.4-.13-.56-.24-.17-.11-.3-.26-.41-.44-.11-.18-.17-.41-.18-.67h-1.89c0 .36.08.71.24 1.05.16.34.39.65.7.93.31.27.69.49 1.15.66.46.17.98.25 1.58.25.53 0 1.01-.06 1.44-.19.43-.13.8-.31 1.11-.54.31-.23.54-.51.71-.83.17-.32.25-.67.25-1.06-.02-.4-.09-.74-.24-1.02zm-9.96-7.32c-.34-.4-.75-.7-1.23-.88-.47-.18-1.01-.27-1.59-.27-.58 0-1.11.09-1.59.27-.48.18-.89.47-1.23.88-.34.41-.6.93-.79 1.59-.18.65-.28 1.45-.28 2.39v1.92c0 .94.09 1.74.28 2.39.19.66.45 1.19.8 1.6.34.41.75.71 1.23.89.48.18 1.01.28 1.59.28.59 0 1.12-.09 1.59-.28.48-.18.88-.48 1.22-.89.34-.41.6-.94.78-1.6.18-.65.28-1.45.28-2.39v-1.92c0-.94-.09-1.74-.28-2.39-.18-.66-.44-1.19-.78-1.59zm-.92 6.17c0 .6-.04 1.11-.12 1.53-.08.42-.2.76-.36 1.02-.16.26-.36.45-.59.57-.23.12-.51.18-.82.18-.3 0-.58-.06-.82-.18s-.44-.31-.6-.57c-.16-.26-.29-.6-.38-1.02-.09-.42-.13-.93-.13-1.53v-2.5c0-.6.04-1.11.13-1.52.09-.41.21-.74.38-1 .16-.25.36-.43.6-.55.24-.11.51-.17.81-.17.31 0 .58.06.81.17.24.11.44.29.6.55.16.25.29.58.37.99.08.41.13.92.13 1.52v2.51z\\\"></path></g> <g id=timer-3><path d=\\\"M11.61 12.97c-.16-.24-.36-.46-.62-.65-.25-.19-.56-.35-.93-.48.3-.14.57-.3.8-.5.23-.2.42-.41.57-.64.15-.23.27-.46.34-.71.08-.24.11-.49.11-.73 0-.55-.09-1.04-.28-1.46-.18-.42-.44-.77-.78-1.06-.33-.28-.73-.5-1.2-.64-.45-.13-.97-.2-1.53-.2-.55 0-1.06.08-1.52.24-.47.17-.87.4-1.2.69-.33.29-.6.63-.78 1.03-.2.39-.29.83-.29 1.29h1.98c0-.26.05-.49.14-.69.09-.2.22-.38.38-.52.17-.14.36-.25.58-.33.22-.08.46-.12.73-.12.61 0 1.06.16 1.36.47.3.31.44.75.44 1.32 0 .27-.04.52-.12.74-.08.22-.21.41-.38.57-.17.16-.38.28-.63.37-.25.09-.55.13-.89.13H6.72v1.57H7.9c.34 0 .64.04.91.11.27.08.5.19.69.35.19.16.34.36.44.61.1.24.16.54.16.87 0 .62-.18 1.09-.53 1.42-.35.33-.84.49-1.45.49-.29 0-.56-.04-.8-.13-.24-.08-.44-.2-.61-.36-.17-.16-.3-.34-.39-.56-.09-.22-.14-.46-.14-.72H4.19c0 .55.11 1.03.32 1.45.21.42.5.77.86 1.05s.77.49 1.24.63.96.21 1.48.21c.57 0 1.09-.08 1.58-.23.49-.15.91-.38 1.26-.68.36-.3.64-.66.84-1.1.2-.43.3-.93.3-1.48 0-.29-.04-.58-.11-.86-.08-.25-.19-.51-.35-.76zm9.26 1.4c-.14-.28-.35-.53-.63-.74-.28-.21-.61-.39-1.01-.53s-.85-.27-1.35-.38c-.35-.07-.64-.15-.87-.23-.23-.08-.41-.16-.55-.25-.14-.09-.23-.19-.28-.3-.05-.11-.08-.24-.08-.39s.03-.28.09-.41c.06-.13.15-.25.27-.34.12-.1.27-.18.45-.24s.4-.09.64-.09c.25 0 .47.04.66.11.19.07.35.17.48.29.13.12.22.26.29.42.06.16.1.32.1.49h1.95c0-.39-.08-.75-.24-1.09-.16-.34-.39-.63-.69-.88-.3-.25-.66-.44-1.09-.59-.43-.15-.92-.22-1.46-.22-.51 0-.98.07-1.39.21-.41.14-.77.33-1.06.57-.29.24-.51.52-.67.84-.16.32-.23.65-.23 1.01s.08.68.23.96c.15.28.37.52.64.73.27.21.6.38.98.53.38.14.81.26 1.27.36.39.08.71.17.95.26s.43.19.57.29c.13.1.22.22.27.34.05.12.07.25.07.39 0 .32-.13.57-.4.77-.27.2-.66.29-1.17.29-.22 0-.43-.02-.64-.08-.21-.05-.4-.13-.56-.24-.17-.11-.3-.26-.41-.44-.11-.18-.17-.41-.18-.67h-1.89c0 .36.08.71.24 1.05.16.34.39.65.7.93.31.27.69.49 1.15.66.46.17.98.25 1.58.25.53 0 1.01-.06 1.44-.19.43-.13.8-.31 1.11-.54.31-.23.54-.51.71-.83.17-.32.25-.67.25-1.06-.02-.4-.09-.74-.24-1.02z\\\"></path></g> <g id=timer-off><path d=\\\"M19.04 4.55l-1.42 1.42C16.07 4.74 14.12 4 12 4c-1.83 0-3.53.55-4.95 1.48l1.46 1.46C9.53 6.35 10.73 6 12 6c3.87 0 7 3.13 7 7 0 1.27-.35 2.47-.94 3.49l1.45 1.45C20.45 16.53 21 14.83 21 13c0-2.12-.74-4.07-1.97-5.61l1.42-1.42-1.41-1.42zM15 1H9v2h6V1zm-4 8.44l2 2V8h-2v1.44zM3.02 4L1.75 5.27 4.5 8.03C3.55 9.45 3 11.16 3 13c0 4.97 4.02 9 9 9 1.84 0 3.55-.55 4.98-1.5l2.5 2.5 1.27-1.27-7.71-7.71L3.02 4zM12 20c-3.87 0-7-3.13-7-7 0-1.28.35-2.48.95-3.52l9.56 9.56c-1.03.61-2.23.96-3.51.96z\\\"></path></g> <g id=tonality><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93s3.05-7.44 7-7.93v15.86zm2-15.86c1.03.13 2 .45 2.87.93H13v-.93zM13 7h5.24c.25.31.48.65.68 1H13V7zm0 3h6.74c.08.33.15.66.19 1H13v-1zm0 9.93V19h2.87c-.87.48-1.84.8-2.87.93zM18.24 17H13v-1h5.92c-.2.35-.43.69-.68 1zm1.5-3H13v-1h6.93c-.04.34-.11.67-.19 1z\\\"></path></g> <g id=transform><path d=\\\"M22 18v-2H8V4h2L7 1 4 4h2v2H2v2h4v8c0 1.1.9 2 2 2h8v2h-2l3 3 3-3h-2v-2h4zM10 8h6v6h2V8c0-1.1-.9-2-2-2h-6v2z\\\"></path></g> <g id=tune><path d=\\\"M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z\\\"></path></g> <g id=view-comfy><path d=\\\"M3 9h4V5H3v4zm0 5h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zM8 9h4V5H8v4zm5-4v4h4V5h-4zm5 9h4v-4h-4v4zM3 19h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zm5 0h4v-4h-4v4zm0-14v4h4V5h-4z\\\"></path></g> <g id=view-compact><path d=\\\"M3 19h6v-7H3v7zm7 0h12v-7H10v7zM3 5v6h19V5H3z\\\"></path></g> <g id=vignette><path d=\\\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 15c-4.42 0-8-2.69-8-6s3.58-6 8-6 8 2.69 8 6-3.58 6-8 6z\\\"></path></g> <g id=wb-auto><path d=\\\"M6.85 12.65h2.3L8 9l-1.15 3.65zM22 7l-1.2 6.29L19.3 7h-1.6l-1.49 6.29L15 7h-.76C12.77 5.17 10.53 4 8 4c-4.42 0-8 3.58-8 8s3.58 8 8 8c3.13 0 5.84-1.81 7.15-4.43l.1.43H17l1.5-6.1L20 16h1.75l2.05-9H22zm-11.7 9l-.7-2H6.4l-.7 2H3.8L7 7h2l3.2 9h-1.9z\\\"></path></g> <g id=wb-cloudy><path d=\\\"M19.36 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.64-4.96z\\\"></path></g> <g id=wb-incandescent><path d=\\\"M3.55 18.54l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8zM11 22.45h2V19.5h-2v2.95zM4 10.5H1v2h3v-2zm11-4.19V1.5H9v4.81C7.21 7.35 6 9.28 6 11.5c0 3.31 2.69 6 6 6s6-2.69 6-6c0-2.22-1.21-4.15-3-5.19zm5 4.19v2h3v-2h-3zm-2.76 7.66l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4z\\\"></path></g> <g id=wb-iridescent><path d=\\\"M5 14.5h14v-6H5v6zM11 .55V3.5h2V.55h-2zm8.04 2.5l-1.79 1.79 1.41 1.41 1.8-1.79-1.42-1.41zM13 22.45V19.5h-2v2.95h2zm7.45-3.91l-1.8-1.79-1.41 1.41 1.79 1.8 1.42-1.42zM3.55 4.46l1.79 1.79 1.41-1.41-1.79-1.79-1.41 1.41zm1.41 15.49l1.79-1.8-1.41-1.41-1.79 1.79 1.41 1.42z\\\"></path></g> <g id=wb-sunny><path d=\\\"M6.76 4.84l-1.8-1.79-1.41 1.41 1.79 1.79 1.42-1.41zM4 10.5H1v2h3v-2zm9-9.95h-2V3.5h2V.55zm7.45 3.91l-1.41-1.41-1.79 1.79 1.41 1.41 1.79-1.79zm-3.21 13.7l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4zM20 10.5v2h3v-2h-3zm-8-5c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm-1 16.95h2V19.5h-2v2.95zm-7.45-3.91l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8z\\\"></path></g> </defs></svg> </iron-iconset-svg>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(8);\n\n__webpack_require__(112);\n\n__webpack_require__(113);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-spinner> <template strip-whitespace=\\\"\\\"> <style include=paper-spinner-styles></style> <div id=spinnerContainer class-name=\\\"[[__computeContainerClasses(active, __coolingDown)]]\\\" on-animationend=__reset on-webkit-animation-end=__reset> <div class=\\\"spinner-layer layer-1\\\"> <div class=\\\"circle-clipper left\\\"></div> <div class=\\\"circle-clipper right\\\"></div> </div> <div class=\\\"spinner-layer layer-2\\\"> <div class=\\\"circle-clipper left\\\"></div> <div class=\\\"circle-clipper right\\\"></div> </div> <div class=\\\"spinner-layer layer-3\\\"> <div class=\\\"circle-clipper left\\\"></div> <div class=\\\"circle-clipper right\\\"></div> </div> <div class=\\\"spinner-layer layer-4\\\"> <div class=\\\"circle-clipper left\\\"></div> <div class=\\\"circle-clipper right\\\"></div> </div> </div> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-spinner',\n\n  behaviors: [Polymer.PaperSpinnerBehavior]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1zcGlubmVyL3BhcGVyLXNwaW5uZXIuaHRtbD8xYmNmIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxucmVxdWlyZSgnLi4vcGFwZXItc3R5bGVzL2NvbG9yLmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1zcGlubmVyLWJlaGF2aW9yLmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1zcGlubmVyLXN0eWxlcy5odG1sJyk7XG5cbmNvbnN0IFJlZ2lzdGVySHRtbFRlbXBsYXRlID0gcmVxdWlyZSgncG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlJyk7XG5cblJlZ2lzdGVySHRtbFRlbXBsYXRlLnJlZ2lzdGVyKFwiPGRvbS1tb2R1bGUgaWQ9cGFwZXItc3Bpbm5lcj4gPHRlbXBsYXRlIHN0cmlwLXdoaXRlc3BhY2U9XFxcIlxcXCI+IDxzdHlsZSBpbmNsdWRlPXBhcGVyLXNwaW5uZXItc3R5bGVzPjwvc3R5bGU+IDxkaXYgaWQ9c3Bpbm5lckNvbnRhaW5lciBjbGFzcy1uYW1lPVxcXCJbW19fY29tcHV0ZUNvbnRhaW5lckNsYXNzZXMoYWN0aXZlLCBfX2Nvb2xpbmdEb3duKV1dXFxcIiBvbi1hbmltYXRpb25lbmQ9X19yZXNldCBvbi13ZWJraXQtYW5pbWF0aW9uLWVuZD1fX3Jlc2V0PiA8ZGl2IGNsYXNzPVxcXCJzcGlubmVyLWxheWVyIGxheWVyLTFcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUtY2xpcHBlciBsZWZ0XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlLWNsaXBwZXIgcmlnaHRcXFwiPjwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3Bpbm5lci1sYXllciBsYXllci0yXFxcIj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlLWNsaXBwZXIgbGVmdFxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImNpcmNsZS1jbGlwcGVyIHJpZ2h0XFxcIj48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNwaW5uZXItbGF5ZXIgbGF5ZXItM1xcXCI+IDxkaXYgY2xhc3M9XFxcImNpcmNsZS1jbGlwcGVyIGxlZnRcXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUtY2xpcHBlciByaWdodFxcXCI+PC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzcGlubmVyLWxheWVyIGxheWVyLTRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUtY2xpcHBlciBsZWZ0XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlLWNsaXBwZXIgcmlnaHRcXFwiPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvdGVtcGxhdGU+IDwvZG9tLW1vZHVsZT5cIik7XG5cblBvbHltZXIoe1xuICBpczogJ3BhcGVyLXNwaW5uZXInLFxuXG4gIGJlaGF2aW9yczogW1BvbHltZXIuUGFwZXJTcGlubmVyQmVoYXZpb3JdXG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3Bpbm5lci9wYXBlci1zcGlubmVyLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n/** @polymerBehavior */\nPolymer.PaperSpinnerBehavior = {\n\n  properties: {\n    /**\n     * Displays the spinner.\n     */\n    active: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      observer: '__activeChanged'\n    },\n\n    /**\n     * Alternative text content for accessibility support.\n     * If alt is present, it will add an aria-label whose content matches alt when active.\n     * If alt is not present, it will default to 'loading' as the alt value.\n     */\n    alt: {\n      type: String,\n      value: 'loading',\n      observer: '__altChanged'\n    },\n\n    __coolingDown: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  __computeContainerClasses: function (active, coolingDown) {\n    return [active || coolingDown ? 'active' : '', coolingDown ? 'cooldown' : ''].join(' ');\n  },\n\n  __activeChanged: function (active, old) {\n    this.__setAriaHidden(!active);\n    this.__coolingDown = !active && old;\n  },\n\n  __altChanged: function (alt) {\n    // user-provided `aria-label` takes precedence over prototype default\n    if (alt === 'loading') {\n      this.alt = this.getAttribute('aria-label') || alt;\n    } else {\n      this.__setAriaHidden(alt === '');\n      this.setAttribute('aria-label', alt);\n    }\n  },\n\n  __setAriaHidden: function (hidden) {\n    var attr = 'aria-hidden';\n    if (hidden) {\n      this.setAttribute(attr, 'true');\n    } else {\n      this.removeAttribute(attr);\n    }\n  },\n\n  __reset: function () {\n    this.active = false;\n    this.__coolingDown = false;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1zcGlubmVyL3BhcGVyLXNwaW5uZXItYmVoYXZpb3IuaHRtbD9mNDE0Il0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnLi4vcG9seW1lci9wb2x5bWVyLmh0bWwnKTtcblxuLyoqIEBwb2x5bWVyQmVoYXZpb3IgKi9cblBvbHltZXIuUGFwZXJTcGlubmVyQmVoYXZpb3IgPSB7XG5cbiAgcHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIERpc3BsYXlzIHRoZSBzcGlubmVyLlxuICAgICAqL1xuICAgIGFjdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgIG9ic2VydmVyOiAnX19hY3RpdmVDaGFuZ2VkJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBbHRlcm5hdGl2ZSB0ZXh0IGNvbnRlbnQgZm9yIGFjY2Vzc2liaWxpdHkgc3VwcG9ydC5cbiAgICAgKiBJZiBhbHQgaXMgcHJlc2VudCwgaXQgd2lsbCBhZGQgYW4gYXJpYS1sYWJlbCB3aG9zZSBjb250ZW50IG1hdGNoZXMgYWx0IHdoZW4gYWN0aXZlLlxuICAgICAqIElmIGFsdCBpcyBub3QgcHJlc2VudCwgaXQgd2lsbCBkZWZhdWx0IHRvICdsb2FkaW5nJyBhcyB0aGUgYWx0IHZhbHVlLlxuICAgICAqL1xuICAgIGFsdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsdWU6ICdsb2FkaW5nJyxcbiAgICAgIG9ic2VydmVyOiAnX19hbHRDaGFuZ2VkJ1xuICAgIH0sXG5cbiAgICBfX2Nvb2xpbmdEb3duOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfVxuICB9LFxuXG4gIF9fY29tcHV0ZUNvbnRhaW5lckNsYXNzZXM6IGZ1bmN0aW9uIChhY3RpdmUsIGNvb2xpbmdEb3duKSB7XG4gICAgcmV0dXJuIFthY3RpdmUgfHwgY29vbGluZ0Rvd24gPyAnYWN0aXZlJyA6ICcnLCBjb29saW5nRG93biA/ICdjb29sZG93bicgOiAnJ10uam9pbignICcpO1xuICB9LFxuXG4gIF9fYWN0aXZlQ2hhbmdlZDogZnVuY3Rpb24gKGFjdGl2ZSwgb2xkKSB7XG4gICAgdGhpcy5fX3NldEFyaWFIaWRkZW4oIWFjdGl2ZSk7XG4gICAgdGhpcy5fX2Nvb2xpbmdEb3duID0gIWFjdGl2ZSAmJiBvbGQ7XG4gIH0sXG5cbiAgX19hbHRDaGFuZ2VkOiBmdW5jdGlvbiAoYWx0KSB7XG4gICAgLy8gdXNlci1wcm92aWRlZCBgYXJpYS1sYWJlbGAgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHByb3RvdHlwZSBkZWZhdWx0XG4gICAgaWYgKGFsdCA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICB0aGlzLmFsdCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJykgfHwgYWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fc2V0QXJpYUhpZGRlbihhbHQgPT09ICcnKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgYWx0KTtcbiAgICB9XG4gIH0sXG5cbiAgX19zZXRBcmlhSGlkZGVuOiBmdW5jdGlvbiAoaGlkZGVuKSB7XG4gICAgdmFyIGF0dHIgPSAnYXJpYS1oaWRkZW4nO1xuICAgIGlmIChoaWRkZW4pIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHIsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgIH1cbiAgfSxcblxuICBfX3Jlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLl9fY29vbGluZ0Rvd24gPSBmYWxzZTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3Bpbm5lci9wYXBlci1zcGlubmVyLWJlaGF2aW9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-spinner-styles> <template> <style>:host{display:inline-block;position:relative;width:28px;height:28px;--paper-spinner-container-rotation-duration:1568ms;--paper-spinner-expand-contract-duration:1333ms;--paper-spinner-full-cycle-duration:5332ms;--paper-spinner-cooldown-duration:400ms}#spinnerContainer{width:100%;height:100%;direction:ltr}#spinnerContainer.active{-webkit-animation:container-rotate var(--paper-spinner-container-rotation-duration) linear infinite;animation:container-rotate var(--paper-spinner-container-rotation-duration) linear infinite}@-webkit-keyframes container-rotate{to{-webkit-transform:rotate(360deg)}}@keyframes container-rotate{to{transform:rotate(360deg)}}.spinner-layer{position:absolute;width:100%;height:100%;opacity:0;white-space:nowrap;border-color:var(--paper-spinner-color,var(--google-blue-500))}.layer-1{border-color:var(--paper-spinner-layer-1-color,var(--google-blue-500))}.layer-2{border-color:var(--paper-spinner-layer-2-color,var(--google-red-500))}.layer-3{border-color:var(--paper-spinner-layer-3-color,var(--google-yellow-500))}.layer-4{border-color:var(--paper-spinner-layer-4-color,var(--google-green-500))}.active .spinner-layer{-webkit-animation-name:fill-unfill-rotate;-webkit-animation-duration:var(--paper-spinner-full-cycle-duration);-webkit-animation-timing-function:cubic-bezier(.4,0,.2,1);-webkit-animation-iteration-count:infinite;animation-name:fill-unfill-rotate;animation-duration:var(--paper-spinner-full-cycle-duration);animation-timing-function:cubic-bezier(.4,0,.2,1);animation-iteration-count:infinite;opacity:1}.active .spinner-layer.layer-1{-webkit-animation-name:fill-unfill-rotate,layer-1-fade-in-out;animation-name:fill-unfill-rotate,layer-1-fade-in-out}.active .spinner-layer.layer-2{-webkit-animation-name:fill-unfill-rotate,layer-2-fade-in-out;animation-name:fill-unfill-rotate,layer-2-fade-in-out}.active .spinner-layer.layer-3{-webkit-animation-name:fill-unfill-rotate,layer-3-fade-in-out;animation-name:fill-unfill-rotate,layer-3-fade-in-out}.active .spinner-layer.layer-4{-webkit-animation-name:fill-unfill-rotate,layer-4-fade-in-out;animation-name:fill-unfill-rotate,layer-4-fade-in-out}@-webkit-keyframes fill-unfill-rotate{12.5%{-webkit-transform:rotate(135deg)}25%{-webkit-transform:rotate(270deg)}37.5%{-webkit-transform:rotate(405deg)}50%{-webkit-transform:rotate(540deg)}62.5%{-webkit-transform:rotate(675deg)}75%{-webkit-transform:rotate(810deg)}87.5%{-webkit-transform:rotate(945deg)}to{-webkit-transform:rotate(1080deg)}}@keyframes fill-unfill-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}to{transform:rotate(1080deg)}}@-webkit-keyframes layer-1-fade-in-out{0%{opacity:1}25%{opacity:1}26%{opacity:0}89%{opacity:0}90%{opacity:1}to{opacity:1}}@keyframes layer-1-fade-in-out{0%{opacity:1}25%{opacity:1}26%{opacity:0}89%{opacity:0}90%{opacity:1}to{opacity:1}}@-webkit-keyframes layer-2-fade-in-out{0%{opacity:0}15%{opacity:0}25%{opacity:1}50%{opacity:1}51%{opacity:0}to{opacity:0}}@keyframes layer-2-fade-in-out{0%{opacity:0}15%{opacity:0}25%{opacity:1}50%{opacity:1}51%{opacity:0}to{opacity:0}}@-webkit-keyframes layer-3-fade-in-out{0%{opacity:0}40%{opacity:0}50%{opacity:1}75%{opacity:1}76%{opacity:0}to{opacity:0}}@keyframes layer-3-fade-in-out{0%{opacity:0}40%{opacity:0}50%{opacity:1}75%{opacity:1}76%{opacity:0}to{opacity:0}}@-webkit-keyframes layer-4-fade-in-out{0%{opacity:0}65%{opacity:0}75%{opacity:1}90%{opacity:1}to{opacity:0}}@keyframes layer-4-fade-in-out{0%{opacity:0}65%{opacity:0}75%{opacity:1}90%{opacity:1}to{opacity:0}}.circle-clipper{display:inline-block;position:relative;width:50%;height:100%;overflow:hidden;border-color:inherit}.spinner-layer::after{left:45%;width:10%;border-top-style:solid}.circle-clipper::after,.spinner-layer::after{content:'';box-sizing:border-box;position:absolute;top:0;border-width:var(--paper-spinner-stroke-width,3px);border-color:inherit;border-radius:50%}.circle-clipper::after{bottom:0;width:200%;border-style:solid;border-bottom-color:transparent!important}.circle-clipper.left::after{left:0;border-right-color:transparent!important;-webkit-transform:rotate(129deg);transform:rotate(129deg)}.circle-clipper.right::after{left:-100%;border-left-color:transparent!important;-webkit-transform:rotate(-129deg);transform:rotate(-129deg)}.active .circle-clipper::after,.active .gap-patch::after{-webkit-animation-duration:var(--paper-spinner-expand-contract-duration);-webkit-animation-timing-function:cubic-bezier(.4,0,.2,1);-webkit-animation-iteration-count:infinite;animation-duration:var(--paper-spinner-expand-contract-duration);animation-timing-function:cubic-bezier(.4,0,.2,1);animation-iteration-count:infinite}.active .circle-clipper.left::after{-webkit-animation-name:left-spin;animation-name:left-spin}.active .circle-clipper.right::after{-webkit-animation-name:right-spin;animation-name:right-spin}@-webkit-keyframes left-spin{0%{-webkit-transform:rotate(130deg)}50%{-webkit-transform:rotate(-5deg)}to{-webkit-transform:rotate(130deg)}}@keyframes left-spin{0%{transform:rotate(130deg)}50%{transform:rotate(-5deg)}to{transform:rotate(130deg)}}@-webkit-keyframes right-spin{0%{-webkit-transform:rotate(-130deg)}50%{-webkit-transform:rotate(5deg)}to{-webkit-transform:rotate(-130deg)}}@keyframes right-spin{0%{transform:rotate(-130deg)}50%{transform:rotate(5deg)}to{transform:rotate(-130deg)}}#spinnerContainer.cooldown{-webkit-animation:container-rotate var(--paper-spinner-container-rotation-duration) linear infinite,fade-out var(--paper-spinner-cooldown-duration) cubic-bezier(.4,0,.2,1);animation:container-rotate var(--paper-spinner-container-rotation-duration) linear infinite,fade-out var(--paper-spinner-cooldown-duration) cubic-bezier(.4,0,.2,1)}@-webkit-keyframes fade-out{0%{opacity:1}to{opacity:0}}@keyframes fade-out{0%{opacity:1}to{opacity:0}}</style> </template> </dom-module>\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/***/ (function(module, exports) {

eval("module.exports = {\"100\":{\"keywords\":[\"score\",\"perfect\",\"numbers\",\"century\",\"exam\",\"quiz\",\"test\",\"pass\",\"hundred\"],\"char\":\"💯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"1234\":{\"keywords\":[\"numbers\",\"blue-square\"],\"char\":\"🔢\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"grinning\":{\"keywords\":[\"face\",\"smile\",\"happy\",\"joy\",\":D\",\"grin\"],\"char\":\"😀\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"grimacing\":{\"keywords\":[\"face\",\"grimace\",\"teeth\"],\"char\":\"😬\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"grin\":{\"keywords\":[\"face\",\"happy\",\"smile\",\"joy\",\"kawaii\"],\"char\":\"😁\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"joy\":{\"keywords\":[\"face\",\"cry\",\"tears\",\"weep\",\"happy\",\"happytears\",\"haha\"],\"char\":\"😂\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"rofl\":{\"keywords\":[\"face\",\"rolling\",\"floor\",\"laughing\",\"lol\",\"haha\"],\"char\":\"🤣\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smiley\":{\"keywords\":[\"face\",\"happy\",\"joy\",\"haha\",\":D\",\":)\",\"smile\",\"funny\"],\"char\":\"😃\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smile\":{\"keywords\":[\"face\",\"happy\",\"joy\",\"funny\",\"haha\",\"laugh\",\"like\",\":D\",\":)\"],\"char\":\"😄\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sweat_smile\":{\"keywords\":[\"face\",\"hot\",\"happy\",\"laugh\",\"sweat\",\"smile\",\"relief\"],\"char\":\"😅\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"laughing\":{\"keywords\":[\"happy\",\"joy\",\"lol\",\"satisfied\",\"haha\",\"face\",\"glad\",\"XD\",\"laugh\"],\"char\":\"😆\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"innocent\":{\"keywords\":[\"face\",\"angel\",\"heaven\",\"halo\"],\"char\":\"😇\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"wink\":{\"keywords\":[\"face\",\"happy\",\"mischievous\",\"secret\",\";)\",\"smile\",\"eye\"],\"char\":\"😉\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"blush\":{\"keywords\":[\"face\",\"smile\",\"happy\",\"flushed\",\"crush\",\"embarrassed\",\"shy\",\"joy\"],\"char\":\"😊\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"slightly_smiling_face\":{\"keywords\":[\"face\",\"smile\"],\"char\":\"🙂\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"upside_down_face\":{\"keywords\":[\"face\",\"flipped\",\"silly\",\"smile\"],\"char\":\"🙃\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"relaxed\":{\"keywords\":[\"face\",\"blush\",\"massage\",\"happiness\"],\"char\":\"☺️\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"yum\":{\"keywords\":[\"happy\",\"joy\",\"tongue\",\"smile\",\"face\",\"silly\",\"yummy\",\"nom\",\"delicious\",\"savouring\"],\"char\":\"😋\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"relieved\":{\"keywords\":[\"face\",\"relaxed\",\"phew\",\"massage\",\"happiness\"],\"char\":\"😌\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"heart_eyes\":{\"keywords\":[\"face\",\"love\",\"like\",\"affection\",\"valentines\",\"infatuation\",\"crush\",\"heart\"],\"char\":\"😍\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kissing_heart\":{\"keywords\":[\"face\",\"love\",\"like\",\"affection\",\"valentines\",\"infatuation\",\"kiss\"],\"char\":\"😘\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kissing\":{\"keywords\":[\"love\",\"like\",\"face\",\"3\",\"valentines\",\"infatuation\",\"kiss\"],\"char\":\"😗\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kissing_smiling_eyes\":{\"keywords\":[\"face\",\"affection\",\"valentines\",\"infatuation\",\"kiss\"],\"char\":\"😙\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kissing_closed_eyes\":{\"keywords\":[\"face\",\"love\",\"like\",\"affection\",\"valentines\",\"infatuation\",\"kiss\"],\"char\":\"😚\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"stuck_out_tongue_winking_eye\":{\"keywords\":[\"face\",\"prank\",\"childish\",\"playful\",\"mischievous\",\"smile\",\"wink\",\"tongue\"],\"char\":\"😜\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"stuck_out_tongue_closed_eyes\":{\"keywords\":[\"face\",\"prank\",\"playful\",\"mischievous\",\"smile\",\"tongue\"],\"char\":\"😝\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"stuck_out_tongue\":{\"keywords\":[\"face\",\"prank\",\"childish\",\"playful\",\"mischievous\",\"smile\",\"tongue\"],\"char\":\"😛\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"money_mouth_face\":{\"keywords\":[\"face\",\"rich\",\"dollar\",\"money\"],\"char\":\"🤑\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"nerd_face\":{\"keywords\":[\"face\",\"nerdy\",\"geek\",\"dork\"],\"char\":\"🤓\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sunglasses\":{\"keywords\":[\"face\",\"cool\",\"smile\",\"summer\",\"beach\",\"sunglass\"],\"char\":\"😎\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"clown_face\":{\"keywords\":[\"face\"],\"char\":\"🤡\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"cowboy_hat_face\":{\"keywords\":[\"face\",\"cowgirl\",\"hat\"],\"char\":\"🤠\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"hugs\":{\"keywords\":[\"face\",\"smile\",\"hug\"],\"char\":\"🤗\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smirk\":{\"keywords\":[\"face\",\"smile\",\"mean\",\"prank\",\"smug\",\"sarcasm\"],\"char\":\"😏\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"no_mouth\":{\"keywords\":[\"face\",\"hellokitty\"],\"char\":\"😶\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"neutral_face\":{\"keywords\":[\"indifference\",\"meh\",\":|\",\"neutral\"],\"char\":\"😐\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"expressionless\":{\"keywords\":[\"face\",\"indifferent\",\"-_-\",\"meh\",\"deadpan\"],\"char\":\"😑\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"unamused\":{\"keywords\":[\"indifference\",\"bored\",\"straight face\",\"serious\",\"sarcasm\"],\"char\":\"😒\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"roll_eyes\":{\"keywords\":[\"face\",\"eyeroll\",\"frustrated\"],\"char\":\"🙄\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"thinking\":{\"keywords\":[\"face\",\"hmmm\",\"think\",\"consider\"],\"char\":\"🤔\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"lying_face\":{\"keywords\":[\"face\",\"lie\",\"pinocchio\"],\"char\":\"🤥\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"flushed\":{\"keywords\":[\"face\",\"blush\",\"shy\",\"flattered\"],\"char\":\"😳\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"disappointed\":{\"keywords\":[\"face\",\"sad\",\"upset\",\"depressed\",\":(\"],\"char\":\"😞\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"worried\":{\"keywords\":[\"face\",\"concern\",\"nervous\",\":(\"],\"char\":\"😟\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"angry\":{\"keywords\":[\"mad\",\"face\",\"annoyed\",\"frustrated\"],\"char\":\"😠\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"rage\":{\"keywords\":[\"angry\",\"mad\",\"hate\",\"despise\"],\"char\":\"😡\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"pensive\":{\"keywords\":[\"face\",\"sad\",\"depressed\",\"upset\"],\"char\":\"😔\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"confused\":{\"keywords\":[\"face\",\"indifference\",\"huh\",\"weird\",\"hmmm\",\":/\"],\"char\":\"😕\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"slightly_frowning_face\":{\"keywords\":[\"face\",\"frowning\",\"disappointed\",\"sad\",\"upset\"],\"char\":\"🙁\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"frowning_face\":{\"keywords\":[\"face\",\"sad\",\"upset\",\"frown\"],\"char\":\"☹\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"persevere\":{\"keywords\":[\"face\",\"sick\",\"no\",\"upset\",\"oops\"],\"char\":\"😣\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"confounded\":{\"keywords\":[\"face\",\"confused\",\"sick\",\"unwell\",\"oops\",\":S\"],\"char\":\"😖\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"tired_face\":{\"keywords\":[\"sick\",\"whine\",\"upset\",\"frustrated\"],\"char\":\"😫\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"weary\":{\"keywords\":[\"face\",\"tired\",\"sleepy\",\"sad\",\"frustrated\",\"upset\"],\"char\":\"😩\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"triumph\":{\"keywords\":[\"face\",\"gas\",\"phew\",\"proud\",\"pride\"],\"char\":\"😤\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"open_mouth\":{\"keywords\":[\"face\",\"surprise\",\"impressed\",\"wow\",\"whoa\",\":O\"],\"char\":\"😮\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"scream\":{\"keywords\":[\"face\",\"munch\",\"scared\",\"omg\"],\"char\":\"😱\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"fearful\":{\"keywords\":[\"face\",\"scared\",\"terrified\",\"nervous\",\"oops\",\"huh\"],\"char\":\"😨\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"cold_sweat\":{\"keywords\":[\"face\",\"nervous\",\"sweat\"],\"char\":\"😰\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"hushed\":{\"keywords\":[\"face\",\"woo\",\"shh\"],\"char\":\"😯\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"frowning\":{\"keywords\":[\"face\",\"aw\",\"what\"],\"char\":\"😦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"anguished\":{\"keywords\":[\"face\",\"stunned\",\"nervous\"],\"char\":\"😧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"cry\":{\"keywords\":[\"face\",\"tears\",\"sad\",\"depressed\",\"upset\",\":'(\"],\"char\":\"😢\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"disappointed_relieved\":{\"keywords\":[\"face\",\"phew\",\"sweat\",\"nervous\"],\"char\":\"😥\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"drooling_face\":{\"keywords\":[\"face\"],\"char\":\"🤤\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sleepy\":{\"keywords\":[\"face\",\"tired\",\"rest\",\"nap\"],\"char\":\"😪\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sweat\":{\"keywords\":[\"face\",\"hot\",\"sad\",\"tired\",\"exercise\"],\"char\":\"😓\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sob\":{\"keywords\":[\"face\",\"cry\",\"tears\",\"sad\",\"upset\",\"depressed\"],\"char\":\"😭\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"dizzy_face\":{\"keywords\":[\"spent\",\"unconscious\",\"xox\",\"dizzy\"],\"char\":\"😵\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"astonished\":{\"keywords\":[\"face\",\"xox\",\"surprised\",\"poisoned\"],\"char\":\"😲\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"zipper_mouth_face\":{\"keywords\":[\"face\",\"sealed\",\"zipper\",\"secret\"],\"char\":\"🤐\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"nauseated_face\":{\"keywords\":[\"face\",\"vomit\",\"gross\",\"green\",\"sick\",\"throw up\",\"ill\"],\"char\":\"🤢\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sneezing_face\":{\"keywords\":[\"face\",\"gesundheit\",\"sneeze\",\"sick\",\"allergy\"],\"char\":\"🤧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"mask\":{\"keywords\":[\"face\",\"sick\",\"ill\",\"disease\"],\"char\":\"😷\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"face_with_thermometer\":{\"keywords\":[\"sick\",\"temperature\",\"thermometer\",\"cold\",\"fever\"],\"char\":\"🤒\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"face_with_head_bandage\":{\"keywords\":[\"injured\",\"clumsy\",\"bandage\",\"hurt\"],\"char\":\"🤕\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sleeping\":{\"keywords\":[\"face\",\"tired\",\"sleepy\",\"night\",\"zzz\"],\"char\":\"😴\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"zzz\":{\"keywords\":[\"sleepy\",\"tired\",\"dream\"],\"char\":\"💤\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"poop\":{\"keywords\":[\"hankey\",\"shitface\",\"fail\",\"turd\",\"shit\"],\"char\":\"💩\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smiling_imp\":{\"keywords\":[\"devil\",\"horns\"],\"char\":\"😈\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"imp\":{\"keywords\":[\"devil\",\"angry\",\"horns\"],\"char\":\"👿\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"japanese_ogre\":{\"keywords\":[\"monster\",\"red\",\"mask\",\"halloween\",\"scary\",\"creepy\",\"devil\",\"demon\",\"japanese\",\"ogre\"],\"char\":\"👹\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"japanese_goblin\":{\"keywords\":[\"red\",\"evil\",\"mask\",\"monster\",\"scary\",\"creepy\",\"japanese\",\"goblin\"],\"char\":\"👺\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"skull\":{\"keywords\":[\"dead\",\"skeleton\",\"creepy\",\"death\"],\"char\":\"💀\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"ghost\":{\"keywords\":[\"halloween\",\"spooky\",\"scary\"],\"char\":\"👻\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"alien\":{\"keywords\":[\"UFO\",\"paul\",\"weird\",\"outer_space\"],\"char\":\"👽\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"robot\":{\"keywords\":[\"computer\",\"machine\",\"bot\"],\"char\":\"🤖\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smiley_cat\":{\"keywords\":[\"animal\",\"cats\",\"happy\",\"smile\"],\"char\":\"😺\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smile_cat\":{\"keywords\":[\"animal\",\"cats\",\"smile\"],\"char\":\"😸\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"joy_cat\":{\"keywords\":[\"animal\",\"cats\",\"haha\",\"happy\",\"tears\"],\"char\":\"😹\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"heart_eyes_cat\":{\"keywords\":[\"animal\",\"love\",\"like\",\"affection\",\"cats\",\"valentines\",\"heart\"],\"char\":\"😻\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"smirk_cat\":{\"keywords\":[\"animal\",\"cats\",\"smirk\"],\"char\":\"😼\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kissing_cat\":{\"keywords\":[\"animal\",\"cats\",\"kiss\"],\"char\":\"😽\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"scream_cat\":{\"keywords\":[\"animal\",\"cats\",\"munch\",\"scared\",\"scream\"],\"char\":\"🙀\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"crying_cat_face\":{\"keywords\":[\"animal\",\"tears\",\"weep\",\"sad\",\"cats\",\"upset\",\"cry\"],\"char\":\"😿\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"pouting_cat\":{\"keywords\":[\"animal\",\"cats\"],\"char\":\"😾\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"raised_hands\":{\"keywords\":[\"gesture\",\"hooray\",\"yea\",\"celebration\",\"hands\"],\"char\":\"🙌\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"clap\":{\"keywords\":[\"hands\",\"praise\",\"applause\",\"congrats\",\"yay\"],\"char\":\"👏\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"wave\":{\"keywords\":[\"hands\",\"gesture\",\"goodbye\",\"solong\",\"farewell\",\"hello\",\"hi\",\"palm\"],\"char\":\"👋\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"call_me_hand\":{\"keywords\":[\"hands\",\"gesture\"],\"char\":\"🤙\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"+1\":{\"keywords\":[\"thumbsup\",\"yes\",\"awesome\",\"good\",\"agree\",\"accept\",\"cool\",\"hand\",\"like\"],\"char\":\"👍\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"-1\":{\"keywords\":[\"thumbsdown\",\"no\",\"dislike\",\"hand\"],\"char\":\"👎\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"facepunch\":{\"keywords\":[\"angry\",\"violence\",\"fist\",\"hit\",\"attack\",\"hand\"],\"char\":\"👊\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"fist\":{\"keywords\":[\"fingers\",\"hand\",\"grasp\"],\"char\":\"✊\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"fist_left\":{\"keywords\":[\"hand\",\"fistbump\"],\"char\":\"🤛\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"fist_right\":{\"keywords\":[\"hand\",\"fistbump\"],\"char\":\"🤜\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"v\":{\"keywords\":[\"fingers\",\"ohyeah\",\"hand\",\"peace\",\"victory\",\"two\"],\"char\":\"✌\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"ok_hand\":{\"keywords\":[\"fingers\",\"limbs\",\"perfect\",\"ok\",\"okay\"],\"char\":\"👌\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"raised_hand\":{\"keywords\":[\"fingers\",\"stop\",\"highfive\",\"palm\",\"ban\"],\"char\":\"✋\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"raised_back_of_hand\":{\"keywords\":[\"fingers\",\"raised\",\"backhand\"],\"char\":\"🤚\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"open_hands\":{\"keywords\":[\"fingers\",\"butterfly\",\"hands\",\"open\"],\"char\":\"👐\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"muscle\":{\"keywords\":[\"arm\",\"flex\",\"hand\",\"summer\",\"strong\",\"biceps\"],\"char\":\"💪\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"pray\":{\"keywords\":[\"please\",\"hope\",\"wish\",\"namaste\",\"highfive\"],\"char\":\"🙏\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"handshake\":{\"keywords\":[\"agreement\",\"shake\"],\"char\":\"🤝\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"point_up\":{\"keywords\":[\"hand\",\"fingers\",\"direction\",\"up\"],\"char\":\"☝\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"point_up_2\":{\"keywords\":[\"fingers\",\"hand\",\"direction\",\"up\"],\"char\":\"👆\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"point_down\":{\"keywords\":[\"fingers\",\"hand\",\"direction\",\"down\"],\"char\":\"👇\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"point_left\":{\"keywords\":[\"direction\",\"fingers\",\"hand\",\"left\"],\"char\":\"👈\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"point_right\":{\"keywords\":[\"fingers\",\"hand\",\"direction\",\"right\"],\"char\":\"👉\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"fu\":{\"keywords\":[\"hand\",\"fingers\",\"rude\",\"middle\",\"flipping\"],\"char\":\"🖕\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"raised_hand_with_fingers_splayed\":{\"keywords\":[\"hand\",\"fingers\",\"palm\"],\"char\":\"🖐\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"metal\":{\"keywords\":[\"hand\",\"fingers\",\"evil_eye\",\"sign_of_horns\",\"rock_on\"],\"char\":\"🤘\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"crossed_fingers\":{\"keywords\":[\"good\",\"lucky\"],\"char\":\"🤞\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"vulcan_salute\":{\"keywords\":[\"hand\",\"fingers\",\"spock\",\"star trek\"],\"char\":\"🖖\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"writing_hand\":{\"keywords\":[\"lower_left_ballpoint_pen\",\"stationery\",\"write\",\"compose\"],\"char\":\"✍\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"selfie\":{\"keywords\":[\"camera\",\"phone\"],\"char\":\"🤳\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"nail_care\":{\"keywords\":[\"beauty\",\"manicure\",\"finger\",\"fashion\",\"nail\"],\"char\":\"💅\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"lips\":{\"keywords\":[\"mouth\",\"kiss\"],\"char\":\"👄\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"tongue\":{\"keywords\":[\"mouth\",\"playful\"],\"char\":\"👅\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"ear\":{\"keywords\":[\"face\",\"hear\",\"sound\",\"listen\"],\"char\":\"👂\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"nose\":{\"keywords\":[\"smell\",\"sniff\"],\"char\":\"👃\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"eye\":{\"keywords\":[\"face\",\"look\",\"see\",\"watch\",\"stare\"],\"char\":\"👁\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"eyes\":{\"keywords\":[\"look\",\"watch\",\"stalk\",\"peek\",\"see\"],\"char\":\"👀\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"bust_in_silhouette\":{\"keywords\":[\"user\",\"person\",\"human\"],\"char\":\"👤\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"busts_in_silhouette\":{\"keywords\":[\"user\",\"person\",\"human\",\"group\",\"team\"],\"char\":\"👥\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"speaking_head\":{\"keywords\":[\"user\",\"person\",\"human\",\"sing\",\"say\",\"talk\"],\"char\":\"🗣\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"baby\":{\"keywords\":[\"child\",\"boy\",\"girl\",\"toddler\"],\"char\":\"👶\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"boy\":{\"keywords\":[\"man\",\"male\",\"guy\",\"teenager\"],\"char\":\"👦\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"girl\":{\"keywords\":[\"female\",\"woman\",\"teenager\"],\"char\":\"👧\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man\":{\"keywords\":[\"mustache\",\"father\",\"dad\",\"guy\",\"classy\",\"sir\",\"moustache\"],\"char\":\"👨\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman\":{\"keywords\":[\"female\",\"girls\",\"lady\"],\"char\":\"👩\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"blonde_woman\":{\"keywords\":[\"woman\",\"female\",\"girl\",\"blonde\",\"person\"],\"char\":\"👱‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"blonde_man\":{\"keywords\":[\"man\",\"male\",\"boy\",\"blonde\",\"guy\",\"person\"],\"char\":\"👱\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"older_man\":{\"keywords\":[\"human\",\"male\",\"men\",\"old\",\"elder\",\"senior\"],\"char\":\"👴\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"older_woman\":{\"keywords\":[\"human\",\"female\",\"women\",\"lady\",\"old\",\"elder\",\"senior\"],\"char\":\"👵\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_with_gua_pi_mao\":{\"keywords\":[\"male\",\"boy\",\"chinese\"],\"char\":\"👲\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_with_turban\":{\"keywords\":[\"female\",\"indian\",\"hinduism\",\"arabs\",\"woman\"],\"char\":\"👳‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_with_turban\":{\"keywords\":[\"male\",\"indian\",\"hinduism\",\"arabs\"],\"char\":\"👳\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"policewoman\":{\"keywords\":[\"woman\",\"police\",\"law\",\"legal\",\"enforcement\",\"arrest\",\"911\",\"female\"],\"char\":\"👮‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"policeman\":{\"keywords\":[\"man\",\"police\",\"law\",\"legal\",\"enforcement\",\"arrest\",\"911\"],\"char\":\"👮\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"construction_worker_woman\":{\"keywords\":[\"female\",\"human\",\"wip\",\"build\",\"construction\",\"worker\",\"labor\",\"woman\"],\"char\":\"👷‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"construction_worker_man\":{\"keywords\":[\"male\",\"human\",\"wip\",\"guy\",\"build\",\"construction\",\"worker\",\"labor\"],\"char\":\"👷\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"guardswoman\":{\"keywords\":[\"uk\",\"gb\",\"british\",\"female\",\"royal\",\"woman\"],\"char\":\"💂‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"guardsman\":{\"keywords\":[\"uk\",\"gb\",\"british\",\"male\",\"guy\",\"royal\"],\"char\":\"💂\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"female_detective\":{\"keywords\":[\"human\",\"spy\",\"detective\",\"female\",\"woman\"],\"char\":\"🕵️‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"male_detective\":{\"keywords\":[\"human\",\"spy\",\"detective\"],\"char\":\"🕵\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_health_worker\":{\"keywords\":[\"doctor\",\"nurse\",\"therapist\",\"healthcare\",\"woman\",\"human\"],\"char\":\"👩‍⚕️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_health_worker\":{\"keywords\":[\"doctor\",\"nurse\",\"therapist\",\"healthcare\",\"man\",\"human\"],\"char\":\"👨‍⚕️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_farmer\":{\"keywords\":[\"rancher\",\"gardener\",\"woman\",\"human\"],\"char\":\"👩‍🌾\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_farmer\":{\"keywords\":[\"rancher\",\"gardener\",\"man\",\"human\"],\"char\":\"👨‍🌾\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_cook\":{\"keywords\":[\"chef\",\"woman\",\"human\"],\"char\":\"👩‍🍳\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_cook\":{\"keywords\":[\"chef\",\"man\",\"human\"],\"char\":\"👨‍🍳\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_student\":{\"keywords\":[\"graduate\",\"woman\",\"human\"],\"char\":\"👩‍🎓\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_student\":{\"keywords\":[\"graduate\",\"man\",\"human\"],\"char\":\"👨‍🎓\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_singer\":{\"keywords\":[\"rockstar\",\"entertainer\",\"woman\",\"human\"],\"char\":\"👩‍🎤\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_singer\":{\"keywords\":[\"rockstar\",\"entertainer\",\"man\",\"human\"],\"char\":\"👨‍🎤\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_teacher\":{\"keywords\":[\"instructor\",\"professor\",\"woman\",\"human\"],\"char\":\"👩‍🏫\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_teacher\":{\"keywords\":[\"instructor\",\"professor\",\"man\",\"human\"],\"char\":\"👨‍🏫\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_factory_worker\":{\"keywords\":[\"assembly\",\"industrial\",\"woman\",\"human\"],\"char\":\"👩‍🏭\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_factory_worker\":{\"keywords\":[\"assembly\",\"industrial\",\"man\",\"human\"],\"char\":\"👨‍🏭\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_technologist\":{\"keywords\":[\"coder\",\"developer\",\"engineer\",\"programmer\",\"software\",\"woman\",\"human\",\"laptop\",\"computer\"],\"char\":\"👩‍💻\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_technologist\":{\"keywords\":[\"coder\",\"developer\",\"engineer\",\"programmer\",\"software\",\"man\",\"human\",\"laptop\",\"computer\"],\"char\":\"👨‍💻\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_office_worker\":{\"keywords\":[\"business\",\"manager\",\"woman\",\"human\"],\"char\":\"👩‍💼\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_office_worker\":{\"keywords\":[\"business\",\"manager\",\"man\",\"human\"],\"char\":\"👨‍💼\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_mechanic\":{\"keywords\":[\"plumber\",\"woman\",\"human\",\"wrench\"],\"char\":\"👩‍🔧\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_mechanic\":{\"keywords\":[\"plumber\",\"man\",\"human\",\"wrench\"],\"char\":\"👨‍🔧\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_scientist\":{\"keywords\":[\"biologist\",\"chemist\",\"engineer\",\"physicist\",\"woman\",\"human\"],\"char\":\"👩‍🔬\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_scientist\":{\"keywords\":[\"biologist\",\"chemist\",\"engineer\",\"physicist\",\"man\",\"human\"],\"char\":\"👨‍🔬\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_artist\":{\"keywords\":[\"painter\",\"woman\",\"human\"],\"char\":\"👩‍🎨\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_artist\":{\"keywords\":[\"painter\",\"man\",\"human\"],\"char\":\"👨‍🎨\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_firefighter\":{\"keywords\":[\"fireman\",\"woman\",\"human\"],\"char\":\"👩‍🚒\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_firefighter\":{\"keywords\":[\"fireman\",\"man\",\"human\"],\"char\":\"👨‍🚒\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_pilot\":{\"keywords\":[\"aviator\",\"plane\",\"woman\",\"human\"],\"char\":\"👩‍✈️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_pilot\":{\"keywords\":[\"aviator\",\"plane\",\"man\",\"human\"],\"char\":\"👨‍✈️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_astronaut\":{\"keywords\":[\"space\",\"rocket\",\"woman\",\"human\"],\"char\":\"👩‍🚀\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_astronaut\":{\"keywords\":[\"space\",\"rocket\",\"man\",\"human\"],\"char\":\"👨‍🚀\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_judge\":{\"keywords\":[\"justice\",\"court\",\"woman\",\"human\"],\"char\":\"👩‍⚖️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_judge\":{\"keywords\":[\"justice\",\"court\",\"man\",\"human\"],\"char\":\"👨‍⚖️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"mrs_claus\":{\"keywords\":[\"woman\",\"female\",\"xmas\",\"mother christmas\"],\"char\":\"🤶\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"santa\":{\"keywords\":[\"festival\",\"man\",\"male\",\"xmas\",\"father christmas\"],\"char\":\"🎅\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"angel\":{\"keywords\":[\"heaven\",\"wings\",\"halo\"],\"char\":\"👼\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"pregnant_woman\":{\"keywords\":[\"baby\"],\"char\":\"🤰\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"princess\":{\"keywords\":[\"girl\",\"woman\",\"female\",\"blond\",\"crown\",\"royal\",\"queen\"],\"char\":\"👸\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"prince\":{\"keywords\":[\"boy\",\"man\",\"male\",\"crown\",\"royal\",\"king\"],\"char\":\"🤴\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"bride_with_veil\":{\"keywords\":[\"couple\",\"marriage\",\"wedding\",\"woman\",\"bride\"],\"char\":\"👰\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_in_tuxedo\":{\"keywords\":[\"couple\",\"marriage\",\"wedding\",\"groom\"],\"char\":\"🤵\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"running_woman\":{\"keywords\":[\"woman\",\"walking\",\"exercise\",\"race\",\"running\",\"female\"],\"char\":\"🏃‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"running_man\":{\"keywords\":[\"man\",\"walking\",\"exercise\",\"race\",\"running\"],\"char\":\"🏃\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"walking_woman\":{\"keywords\":[\"human\",\"feet\",\"steps\",\"woman\",\"female\"],\"char\":\"🚶‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"walking_man\":{\"keywords\":[\"human\",\"feet\",\"steps\"],\"char\":\"🚶\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"dancer\":{\"keywords\":[\"female\",\"girl\",\"woman\",\"fun\"],\"char\":\"💃\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_dancing\":{\"keywords\":[\"male\",\"boy\",\"fun\",\"dancer\"],\"char\":\"🕺\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"dancing_women\":{\"keywords\":[\"female\",\"bunny\",\"women\",\"girls\"],\"char\":\"👯\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"dancing_men\":{\"keywords\":[\"male\",\"bunny\",\"men\",\"boys\"],\"char\":\"👯‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"couple\":{\"keywords\":[\"pair\",\"people\",\"human\",\"love\",\"date\",\"dating\",\"like\",\"affection\",\"valentines\",\"marriage\"],\"char\":\"👫\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"two_men_holding_hands\":{\"keywords\":[\"pair\",\"couple\",\"love\",\"like\",\"bromance\",\"friendship\",\"people\",\"human\"],\"char\":\"👬\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"two_women_holding_hands\":{\"keywords\":[\"pair\",\"friendship\",\"couple\",\"love\",\"like\",\"female\",\"people\",\"human\"],\"char\":\"👭\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"bowing_woman\":{\"keywords\":[\"woman\",\"female\",\"girl\"],\"char\":\"🙇‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"bowing_man\":{\"keywords\":[\"man\",\"male\",\"boy\"],\"char\":\"🙇\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_facepalming\":{\"keywords\":[\"man\",\"male\",\"boy\",\"disbelief\"],\"char\":\"🤦\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_facepalming\":{\"keywords\":[\"woman\",\"female\",\"girl\",\"disbelief\"],\"char\":\"🤦‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"woman_shrugging\":{\"keywords\":[\"woman\",\"female\",\"girl\",\"confused\",\"indifferent\",\"doubt\"],\"char\":\"🤷\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"man_shrugging\":{\"keywords\":[\"man\",\"male\",\"boy\",\"confused\",\"indifferent\",\"doubt\"],\"char\":\"🤷‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"tipping_hand_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\",\"human\",\"information\"],\"char\":\"💁\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"tipping_hand_man\":{\"keywords\":[\"male\",\"boy\",\"man\",\"human\",\"information\"],\"char\":\"💁‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"no_good_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\",\"nope\"],\"char\":\"🙅\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"no_good_man\":{\"keywords\":[\"male\",\"boy\",\"man\",\"nope\"],\"char\":\"🙅‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"ok_woman\":{\"keywords\":[\"women\",\"girl\",\"female\",\"pink\",\"human\",\"woman\"],\"char\":\"🙆\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"ok_man\":{\"keywords\":[\"men\",\"boy\",\"male\",\"blue\",\"human\",\"man\"],\"char\":\"🙆‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"raising_hand_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\"],\"char\":\"🙋\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"raising_hand_man\":{\"keywords\":[\"male\",\"boy\",\"man\"],\"char\":\"🙋‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"pouting_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\"],\"char\":\"🙎\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"pouting_man\":{\"keywords\":[\"male\",\"boy\",\"man\"],\"char\":\"🙎‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"frowning_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\",\"sad\",\"depressed\",\"discouraged\",\"unhappy\"],\"char\":\"🙍\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"frowning_man\":{\"keywords\":[\"male\",\"boy\",\"man\",\"sad\",\"depressed\",\"discouraged\",\"unhappy\"],\"char\":\"🙍‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"haircut_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\"],\"char\":\"💇\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"haircut_man\":{\"keywords\":[\"male\",\"boy\",\"man\"],\"char\":\"💇‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"massage_woman\":{\"keywords\":[\"female\",\"girl\",\"woman\",\"head\"],\"char\":\"💆\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"massage_man\":{\"keywords\":[\"male\",\"boy\",\"man\",\"head\"],\"char\":\"💆‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"couple_with_heart_woman_man\":{\"keywords\":[\"pair\",\"love\",\"like\",\"affection\",\"human\",\"dating\",\"valentines\",\"marriage\"],\"char\":\"💑\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"couple_with_heart_woman_woman\":{\"keywords\":[\"pair\",\"love\",\"like\",\"affection\",\"human\",\"dating\",\"valentines\",\"marriage\"],\"char\":\"👩‍❤️‍👩\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"couple_with_heart_man_man\":{\"keywords\":[\"pair\",\"love\",\"like\",\"affection\",\"human\",\"dating\",\"valentines\",\"marriage\"],\"char\":\"👨‍❤️‍👨\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"couplekiss_man_woman\":{\"keywords\":[\"pair\",\"valentines\",\"love\",\"like\",\"dating\",\"marriage\"],\"char\":\"💏\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"couplekiss_woman_woman\":{\"keywords\":[\"pair\",\"valentines\",\"love\",\"like\",\"dating\",\"marriage\"],\"char\":\"👩‍❤️‍💋‍👩\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"couplekiss_man_man\":{\"keywords\":[\"pair\",\"valentines\",\"love\",\"like\",\"dating\",\"marriage\"],\"char\":\"👨‍❤️‍💋‍👨\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_woman_boy\":{\"keywords\":[\"home\",\"parents\",\"child\",\"mom\",\"dad\",\"father\",\"mother\",\"people\",\"human\"],\"char\":\"👪\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"family_man_woman_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"child\"],\"char\":\"👨‍👩‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_woman_girl_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👩‍👧‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_woman_boy_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👩‍👦‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_woman_girl_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👩‍👧‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_woman_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👩‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_woman_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👩‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_woman_girl_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👩‍👧‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_woman_boy_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👩‍👦‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_woman_girl_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👩‍👧‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_man_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👨‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_man_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👨‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_man_girl_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👨‍👧‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_man_boy_boy\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👨‍👦‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_man_girl_girl\":{\"keywords\":[\"home\",\"parents\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👨‍👧‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"child\"],\"char\":\"👩‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_girl\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"child\"],\"char\":\"👩‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_girl_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👧‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_boy_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👦‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_woman_girl_girl\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👩‍👧‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"child\"],\"char\":\"👨‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_girl\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"child\"],\"char\":\"👨‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_girl_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👧‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_boy_boy\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👦‍👦\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"family_man_girl_girl\":{\"keywords\":[\"home\",\"parent\",\"people\",\"human\",\"children\"],\"char\":\"👨‍👧‍👧\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"womans_clothes\":{\"keywords\":[\"fashion\",\"shopping_bags\",\"female\"],\"char\":\"👚\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"tshirt\":{\"keywords\":[\"fashion\",\"cloth\",\"casual\",\"shirt\",\"tee\"],\"char\":\"👕\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"jeans\":{\"keywords\":[\"fashion\",\"shopping\"],\"char\":\"👖\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"necktie\":{\"keywords\":[\"shirt\",\"suitup\",\"formal\",\"fashion\",\"cloth\",\"business\"],\"char\":\"👔\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"dress\":{\"keywords\":[\"clothes\",\"fashion\",\"shopping\"],\"char\":\"👗\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"bikini\":{\"keywords\":[\"swimming\",\"female\",\"woman\",\"girl\",\"fashion\",\"beach\",\"summer\"],\"char\":\"👙\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kimono\":{\"keywords\":[\"dress\",\"fashion\",\"women\",\"female\",\"japanese\"],\"char\":\"👘\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"lipstick\":{\"keywords\":[\"female\",\"girl\",\"fashion\",\"woman\"],\"char\":\"💄\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"kiss\":{\"keywords\":[\"face\",\"lips\",\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💋\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"footprints\":{\"keywords\":[\"feet\",\"tracking\",\"walking\",\"beach\"],\"char\":\"👣\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"high_heel\":{\"keywords\":[\"fashion\",\"shoes\",\"female\",\"pumps\",\"stiletto\"],\"char\":\"👠\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"sandal\":{\"keywords\":[\"shoes\",\"fashion\",\"flip flops\"],\"char\":\"👡\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"boot\":{\"keywords\":[\"shoes\",\"fashion\"],\"char\":\"👢\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"mans_shoe\":{\"keywords\":[\"fashion\",\"male\"],\"char\":\"👞\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"athletic_shoe\":{\"keywords\":[\"shoes\",\"sports\",\"sneakers\"],\"char\":\"👟\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"womans_hat\":{\"keywords\":[\"fashion\",\"accessories\",\"female\",\"lady\",\"spring\"],\"char\":\"👒\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"tophat\":{\"keywords\":[\"magic\",\"gentleman\",\"classy\",\"circus\"],\"char\":\"🎩\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"rescue_worker_helmet\":{\"keywords\":[\"construction\",\"build\"],\"char\":\"⛑\",\"fitzpatrick_scale\":true,\"category\":\"people\"},\"mortar_board\":{\"keywords\":[\"school\",\"college\",\"degree\",\"university\",\"graduation\",\"cap\",\"hat\",\"legal\",\"learn\",\"education\"],\"char\":\"🎓\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"crown\":{\"keywords\":[\"king\",\"kod\",\"leader\",\"royalty\",\"lord\"],\"char\":\"👑\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"school_satchel\":{\"keywords\":[\"student\",\"education\",\"bag\",\"backpack\"],\"char\":\"🎒\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"pouch\":{\"keywords\":[\"bag\",\"accessories\",\"shopping\"],\"char\":\"👝\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"purse\":{\"keywords\":[\"fashion\",\"accessories\",\"money\",\"sales\",\"shopping\"],\"char\":\"👛\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"handbag\":{\"keywords\":[\"fashion\",\"accessory\",\"accessories\",\"shopping\"],\"char\":\"👜\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"briefcase\":{\"keywords\":[\"business\",\"documents\",\"work\",\"law\",\"legal\",\"job\",\"career\"],\"char\":\"💼\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"eyeglasses\":{\"keywords\":[\"fashion\",\"accessories\",\"eyesight\",\"nerdy\",\"dork\",\"geek\"],\"char\":\"👓\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"dark_sunglasses\":{\"keywords\":[\"face\",\"cool\",\"accessories\"],\"char\":\"🕶\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"ring\":{\"keywords\":[\"wedding\",\"propose\",\"marriage\",\"valentines\",\"diamond\",\"fashion\",\"jewelry\",\"gem\",\"engagement\"],\"char\":\"💍\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"closed_umbrella\":{\"keywords\":[\"weather\",\"rain\",\"drizzle\"],\"char\":\"🌂\",\"fitzpatrick_scale\":false,\"category\":\"people\"},\"dog\":{\"keywords\":[\"animal\",\"friend\",\"nature\",\"woof\",\"puppy\",\"pet\",\"faithful\"],\"char\":\"🐶\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cat\":{\"keywords\":[\"animal\",\"meow\",\"nature\",\"pet\",\"kitten\"],\"char\":\"🐱\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"mouse\":{\"keywords\":[\"animal\",\"nature\",\"cheese_wedge\",\"rodent\"],\"char\":\"🐭\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"hamster\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐹\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rabbit\":{\"keywords\":[\"animal\",\"nature\",\"pet\",\"spring\",\"magic\",\"bunny\"],\"char\":\"🐰\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"fox_face\":{\"keywords\":[\"animal\",\"nature\",\"face\"],\"char\":\"🦊\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bear\":{\"keywords\":[\"animal\",\"nature\",\"wild\"],\"char\":\"🐻\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"panda_face\":{\"keywords\":[\"animal\",\"nature\",\"panda\"],\"char\":\"🐼\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"koala\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐨\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tiger\":{\"keywords\":[\"animal\",\"cat\",\"danger\",\"wild\",\"nature\",\"roar\"],\"char\":\"🐯\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"lion\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🦁\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cow\":{\"keywords\":[\"beef\",\"ox\",\"animal\",\"nature\",\"moo\",\"milk\"],\"char\":\"🐮\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"pig\":{\"keywords\":[\"animal\",\"oink\",\"nature\"],\"char\":\"🐷\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"pig_nose\":{\"keywords\":[\"animal\",\"oink\"],\"char\":\"🐽\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"frog\":{\"keywords\":[\"animal\",\"nature\",\"croak\",\"toad\"],\"char\":\"🐸\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"squid\":{\"keywords\":[\"animal\",\"nature\",\"ocean\",\"sea\"],\"char\":\"🦑\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"octopus\":{\"keywords\":[\"animal\",\"creature\",\"ocean\",\"sea\",\"nature\",\"beach\"],\"char\":\"🐙\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"shrimp\":{\"keywords\":[\"animal\",\"ocean\",\"nature\",\"seafood\"],\"char\":\"🦐\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"monkey_face\":{\"keywords\":[\"animal\",\"nature\",\"circus\"],\"char\":\"🐵\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"gorilla\":{\"keywords\":[\"animal\",\"nature\",\"circus\"],\"char\":\"🦍\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"see_no_evil\":{\"keywords\":[\"monkey\",\"animal\",\"nature\",\"haha\"],\"char\":\"🙈\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"hear_no_evil\":{\"keywords\":[\"animal\",\"monkey\",\"nature\"],\"char\":\"🙉\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"speak_no_evil\":{\"keywords\":[\"monkey\",\"animal\",\"nature\",\"omg\"],\"char\":\"🙊\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"monkey\":{\"keywords\":[\"animal\",\"nature\",\"banana\",\"circus\"],\"char\":\"🐒\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"chicken\":{\"keywords\":[\"animal\",\"cluck\",\"nature\",\"bird\"],\"char\":\"🐔\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"penguin\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐧\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bird\":{\"keywords\":[\"animal\",\"nature\",\"fly\",\"tweet\",\"spring\"],\"char\":\"🐦\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"baby_chick\":{\"keywords\":[\"animal\",\"chicken\",\"bird\"],\"char\":\"🐤\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"hatching_chick\":{\"keywords\":[\"animal\",\"chicken\",\"egg\",\"born\",\"baby\",\"bird\"],\"char\":\"🐣\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"hatched_chick\":{\"keywords\":[\"animal\",\"chicken\",\"baby\",\"bird\"],\"char\":\"🐥\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"duck\":{\"keywords\":[\"animal\",\"nature\",\"bird\",\"mallard\"],\"char\":\"🦆\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"eagle\":{\"keywords\":[\"animal\",\"nature\",\"bird\"],\"char\":\"🦅\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"owl\":{\"keywords\":[\"animal\",\"nature\",\"bird\",\"hoot\"],\"char\":\"🦉\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bat\":{\"keywords\":[\"animal\",\"nature\",\"blind\",\"vampire\"],\"char\":\"🦇\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"wolf\":{\"keywords\":[\"animal\",\"nature\",\"wild\"],\"char\":\"🐺\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"boar\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐗\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"horse\":{\"keywords\":[\"animal\",\"brown\",\"nature\"],\"char\":\"🐴\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"unicorn\":{\"keywords\":[\"animal\",\"nature\",\"mystical\"],\"char\":\"🦄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"honeybee\":{\"keywords\":[\"animal\",\"insect\",\"nature\",\"bug\",\"spring\",\"honey\"],\"char\":\"🐝\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bug\":{\"keywords\":[\"animal\",\"insect\",\"nature\",\"worm\"],\"char\":\"🐛\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"butterfly\":{\"keywords\":[\"animal\",\"insect\",\"nature\",\"caterpillar\"],\"char\":\"🦋\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"snail\":{\"keywords\":[\"slow\",\"animal\",\"shell\"],\"char\":\"🐌\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"beetle\":{\"keywords\":[\"animal\",\"insect\",\"nature\",\"ladybug\"],\"char\":\"🐞\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"ant\":{\"keywords\":[\"animal\",\"insect\",\"nature\",\"bug\"],\"char\":\"🐜\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"spider\":{\"keywords\":[\"animal\",\"arachnid\"],\"char\":\"🕷\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"scorpion\":{\"keywords\":[\"animal\",\"arachnid\"],\"char\":\"🦂\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"crab\":{\"keywords\":[\"animal\",\"crustacean\"],\"char\":\"🦀\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"snake\":{\"keywords\":[\"animal\",\"evil\",\"nature\",\"hiss\",\"python\"],\"char\":\"🐍\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"lizard\":{\"keywords\":[\"animal\",\"nature\",\"reptile\"],\"char\":\"🦎\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"turtle\":{\"keywords\":[\"animal\",\"slow\",\"nature\",\"tortoise\"],\"char\":\"🐢\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tropical_fish\":{\"keywords\":[\"animal\",\"swim\",\"ocean\",\"beach\",\"nemo\"],\"char\":\"🐠\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"fish\":{\"keywords\":[\"animal\",\"food\",\"nature\"],\"char\":\"🐟\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"blowfish\":{\"keywords\":[\"animal\",\"nature\",\"food\",\"sea\",\"ocean\"],\"char\":\"🐡\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dolphin\":{\"keywords\":[\"animal\",\"nature\",\"fish\",\"sea\",\"ocean\",\"flipper\",\"fins\",\"beach\"],\"char\":\"🐬\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"shark\":{\"keywords\":[\"animal\",\"nature\",\"fish\",\"sea\",\"ocean\",\"jaws\",\"fins\",\"beach\"],\"char\":\"🦈\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"whale\":{\"keywords\":[\"animal\",\"nature\",\"sea\",\"ocean\"],\"char\":\"🐳\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"whale2\":{\"keywords\":[\"animal\",\"nature\",\"sea\",\"ocean\"],\"char\":\"🐋\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"crocodile\":{\"keywords\":[\"animal\",\"nature\",\"reptile\",\"lizard\",\"alligator\"],\"char\":\"🐊\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"leopard\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐆\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tiger2\":{\"keywords\":[\"animal\",\"nature\",\"roar\"],\"char\":\"🐅\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"water_buffalo\":{\"keywords\":[\"animal\",\"nature\",\"ox\",\"cow\"],\"char\":\"🐃\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"ox\":{\"keywords\":[\"animal\",\"cow\",\"beef\"],\"char\":\"🐂\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cow2\":{\"keywords\":[\"beef\",\"ox\",\"animal\",\"nature\",\"moo\",\"milk\"],\"char\":\"🐄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"deer\":{\"keywords\":[\"animal\",\"nature\",\"horns\",\"venison\"],\"char\":\"🦌\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dromedary_camel\":{\"keywords\":[\"animal\",\"hot\",\"desert\",\"hump\"],\"char\":\"🐪\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"camel\":{\"keywords\":[\"animal\",\"nature\",\"hot\",\"desert\",\"hump\"],\"char\":\"🐫\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"elephant\":{\"keywords\":[\"animal\",\"nature\",\"nose\",\"th\",\"circus\"],\"char\":\"🐘\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rhinoceros\":{\"keywords\":[\"animal\",\"nature\",\"horn\"],\"char\":\"🦏\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"goat\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐐\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"ram\":{\"keywords\":[\"animal\",\"sheep\",\"nature\"],\"char\":\"🐏\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sheep\":{\"keywords\":[\"animal\",\"nature\",\"wool\",\"shipit\"],\"char\":\"🐑\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"racehorse\":{\"keywords\":[\"animal\",\"gamble\",\"luck\"],\"char\":\"🐎\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"pig2\":{\"keywords\":[\"animal\",\"nature\"],\"char\":\"🐖\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rat\":{\"keywords\":[\"animal\",\"mouse\",\"rodent\"],\"char\":\"🐀\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"mouse2\":{\"keywords\":[\"animal\",\"nature\",\"rodent\"],\"char\":\"🐁\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rooster\":{\"keywords\":[\"animal\",\"nature\",\"chicken\"],\"char\":\"🐓\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"turkey\":{\"keywords\":[\"animal\",\"bird\"],\"char\":\"🦃\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dove\":{\"keywords\":[\"animal\",\"bird\"],\"char\":\"🕊\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dog2\":{\"keywords\":[\"animal\",\"nature\",\"friend\",\"doge\",\"pet\",\"faithful\"],\"char\":\"🐕\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"poodle\":{\"keywords\":[\"dog\",\"animal\",\"101\",\"nature\",\"pet\"],\"char\":\"🐩\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cat2\":{\"keywords\":[\"animal\",\"meow\",\"pet\",\"cats\"],\"char\":\"🐈\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rabbit2\":{\"keywords\":[\"animal\",\"nature\",\"pet\",\"magic\",\"spring\"],\"char\":\"🐇\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"chipmunk\":{\"keywords\":[\"animal\",\"nature\",\"rodent\",\"squirrel\"],\"char\":\"🐿\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"paw_prints\":{\"keywords\":[\"animal\",\"tracking\",\"footprints\",\"dog\",\"cat\",\"pet\",\"feet\"],\"char\":\"🐾\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dragon\":{\"keywords\":[\"animal\",\"myth\",\"nature\",\"chinese\",\"green\"],\"char\":\"🐉\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dragon_face\":{\"keywords\":[\"animal\",\"myth\",\"nature\",\"chinese\",\"green\"],\"char\":\"🐲\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cactus\":{\"keywords\":[\"vegetable\",\"plant\",\"nature\"],\"char\":\"🌵\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"christmas_tree\":{\"keywords\":[\"festival\",\"vacation\",\"december\",\"xmas\",\"celebration\"],\"char\":\"🎄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"evergreen_tree\":{\"keywords\":[\"plant\",\"nature\"],\"char\":\"🌲\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"deciduous_tree\":{\"keywords\":[\"plant\",\"nature\"],\"char\":\"🌳\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"palm_tree\":{\"keywords\":[\"plant\",\"vegetable\",\"nature\",\"summer\",\"beach\",\"mojito\",\"tropical\"],\"char\":\"🌴\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"seedling\":{\"keywords\":[\"plant\",\"nature\",\"grass\",\"lawn\",\"spring\"],\"char\":\"🌱\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"herb\":{\"keywords\":[\"vegetable\",\"plant\",\"medicine\",\"weed\",\"grass\",\"lawn\"],\"char\":\"🌿\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"shamrock\":{\"keywords\":[\"vegetable\",\"plant\",\"nature\",\"irish\",\"clover\"],\"char\":\"☘\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"four_leaf_clover\":{\"keywords\":[\"vegetable\",\"plant\",\"nature\",\"lucky\",\"irish\"],\"char\":\"🍀\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bamboo\":{\"keywords\":[\"plant\",\"nature\",\"vegetable\",\"panda\",\"pine_decoration\"],\"char\":\"🎍\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tanabata_tree\":{\"keywords\":[\"plant\",\"nature\",\"branch\",\"summer\"],\"char\":\"🎋\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"leaves\":{\"keywords\":[\"nature\",\"plant\",\"tree\",\"vegetable\",\"grass\",\"lawn\",\"spring\"],\"char\":\"🍃\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"fallen_leaf\":{\"keywords\":[\"nature\",\"plant\",\"vegetable\",\"leaves\"],\"char\":\"🍂\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"maple_leaf\":{\"keywords\":[\"nature\",\"plant\",\"vegetable\",\"ca\",\"fall\"],\"char\":\"🍁\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"ear_of_rice\":{\"keywords\":[\"nature\",\"plant\"],\"char\":\"🌾\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"hibiscus\":{\"keywords\":[\"plant\",\"vegetable\",\"flowers\",\"beach\"],\"char\":\"🌺\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sunflower\":{\"keywords\":[\"nature\",\"plant\",\"fall\"],\"char\":\"🌻\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"rose\":{\"keywords\":[\"flowers\",\"valentines\",\"love\",\"spring\"],\"char\":\"🌹\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"wilted_flower\":{\"keywords\":[\"plant\",\"nature\",\"flower\"],\"char\":\"🥀\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tulip\":{\"keywords\":[\"flowers\",\"plant\",\"nature\",\"summer\",\"spring\"],\"char\":\"🌷\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"blossom\":{\"keywords\":[\"nature\",\"flowers\",\"yellow\"],\"char\":\"🌼\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cherry_blossom\":{\"keywords\":[\"nature\",\"plant\",\"spring\",\"flower\"],\"char\":\"🌸\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"bouquet\":{\"keywords\":[\"flowers\",\"nature\",\"spring\"],\"char\":\"💐\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"mushroom\":{\"keywords\":[\"plant\",\"vegetable\"],\"char\":\"🍄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"chestnut\":{\"keywords\":[\"food\",\"squirrel\"],\"char\":\"🌰\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"jack_o_lantern\":{\"keywords\":[\"halloween\",\"light\",\"pumpkin\",\"creepy\",\"fall\"],\"char\":\"🎃\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"shell\":{\"keywords\":[\"nature\",\"sea\",\"beach\"],\"char\":\"🐚\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"spider_web\":{\"keywords\":[\"animal\",\"insect\",\"arachnid\",\"silk\"],\"char\":\"🕸\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"earth_americas\":{\"keywords\":[\"globe\",\"world\",\"USA\",\"international\"],\"char\":\"🌎\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"earth_africa\":{\"keywords\":[\"globe\",\"world\",\"international\"],\"char\":\"🌍\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"earth_asia\":{\"keywords\":[\"globe\",\"world\",\"east\",\"international\"],\"char\":\"🌏\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"full_moon\":{\"keywords\":[\"nature\",\"yellow\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌕\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"waning_gibbous_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\",\"waxing_gibbous_moon\"],\"char\":\"🌖\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"last_quarter_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌗\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"waning_crescent_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌘\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"new_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌑\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"waxing_crescent_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌒\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"first_quarter_moon\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌓\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"waxing_gibbous_moon\":{\"keywords\":[\"nature\",\"night\",\"sky\",\"gray\",\"twilight\",\"planet\",\"space\",\"evening\",\"sleep\"],\"char\":\"🌔\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"new_moon_with_face\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌚\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"full_moon_with_face\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌝\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"first_quarter_moon_with_face\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌛\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"last_quarter_moon_with_face\":{\"keywords\":[\"nature\",\"twilight\",\"planet\",\"space\",\"night\",\"evening\",\"sleep\"],\"char\":\"🌜\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sun_with_face\":{\"keywords\":[\"nature\",\"morning\",\"sky\"],\"char\":\"🌞\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"crescent_moon\":{\"keywords\":[\"night\",\"sleep\",\"sky\",\"evening\",\"magic\"],\"char\":\"🌙\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"star\":{\"keywords\":[\"night\",\"yellow\"],\"char\":\"⭐\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"star2\":{\"keywords\":[\"night\",\"sparkle\",\"awesome\",\"good\",\"magic\"],\"char\":\"🌟\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dizzy\":{\"keywords\":[\"star\",\"sparkle\",\"shoot\",\"magic\"],\"char\":\"💫\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sparkles\":{\"keywords\":[\"stars\",\"shine\",\"shiny\",\"cool\",\"awesome\",\"good\",\"magic\"],\"char\":\"✨\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"comet\":{\"keywords\":[\"space\"],\"char\":\"☄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sunny\":{\"keywords\":[\"weather\",\"nature\",\"brightness\",\"summer\",\"beach\",\"spring\"],\"char\":\"☀️\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sun_behind_small_cloud\":{\"keywords\":[\"weather\"],\"char\":\"🌤\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"partly_sunny\":{\"keywords\":[\"weather\",\"nature\",\"cloudy\",\"morning\",\"fall\",\"spring\"],\"char\":\"⛅\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sun_behind_large_cloud\":{\"keywords\":[\"weather\"],\"char\":\"🌥\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sun_behind_rain_cloud\":{\"keywords\":[\"weather\"],\"char\":\"🌦\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cloud\":{\"keywords\":[\"weather\",\"sky\"],\"char\":\"☁️\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cloud_with_rain\":{\"keywords\":[\"weather\"],\"char\":\"🌧\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cloud_with_lightning_and_rain\":{\"keywords\":[\"weather\",\"lightning\"],\"char\":\"⛈\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cloud_with_lightning\":{\"keywords\":[\"weather\",\"thunder\"],\"char\":\"🌩\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"zap\":{\"keywords\":[\"thunder\",\"weather\",\"lightning bolt\",\"fast\"],\"char\":\"⚡\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"fire\":{\"keywords\":[\"hot\",\"cook\",\"flame\"],\"char\":\"🔥\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"boom\":{\"keywords\":[\"bomb\",\"explode\",\"explosion\",\"collision\",\"blown\"],\"char\":\"💥\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"snowflake\":{\"keywords\":[\"winter\",\"season\",\"cold\",\"weather\",\"christmas\",\"xmas\"],\"char\":\"❄️\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"cloud_with_snow\":{\"keywords\":[\"weather\"],\"char\":\"🌨\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"snowman\":{\"keywords\":[\"winter\",\"season\",\"cold\",\"weather\",\"christmas\",\"xmas\",\"frozen\",\"without_snow\"],\"char\":\"⛄\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"snowman_with_snow\":{\"keywords\":[\"winter\",\"season\",\"cold\",\"weather\",\"christmas\",\"xmas\",\"frozen\"],\"char\":\"☃\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"wind_face\":{\"keywords\":[\"gust\",\"air\"],\"char\":\"🌬\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"dash\":{\"keywords\":[\"wind\",\"air\",\"fast\",\"shoo\",\"fart\",\"smoke\",\"puff\"],\"char\":\"💨\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"tornado\":{\"keywords\":[\"weather\",\"cyclone\",\"twister\"],\"char\":\"🌪\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"fog\":{\"keywords\":[\"weather\"],\"char\":\"🌫\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"open_umbrella\":{\"keywords\":[\"weather\",\"spring\"],\"char\":\"☂\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"umbrella\":{\"keywords\":[\"rainy\",\"weather\",\"spring\"],\"char\":\"☔\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"droplet\":{\"keywords\":[\"water\",\"drip\",\"faucet\",\"spring\"],\"char\":\"💧\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"sweat_drops\":{\"keywords\":[\"water\",\"drip\",\"oops\"],\"char\":\"💦\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"ocean\":{\"keywords\":[\"sea\",\"water\",\"wave\",\"nature\",\"tsunami\",\"disaster\"],\"char\":\"🌊\",\"fitzpatrick_scale\":false,\"category\":\"animals_and_nature\"},\"green_apple\":{\"keywords\":[\"fruit\",\"nature\"],\"char\":\"🍏\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"apple\":{\"keywords\":[\"fruit\",\"mac\",\"school\"],\"char\":\"🍎\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"pear\":{\"keywords\":[\"fruit\",\"nature\",\"food\"],\"char\":\"🍐\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"tangerine\":{\"keywords\":[\"food\",\"fruit\",\"nature\",\"orange\"],\"char\":\"🍊\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"lemon\":{\"keywords\":[\"fruit\",\"nature\"],\"char\":\"🍋\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"banana\":{\"keywords\":[\"fruit\",\"food\",\"monkey\"],\"char\":\"🍌\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"watermelon\":{\"keywords\":[\"fruit\",\"food\",\"picnic\",\"summer\"],\"char\":\"🍉\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"grapes\":{\"keywords\":[\"fruit\",\"food\",\"wine\"],\"char\":\"🍇\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"strawberry\":{\"keywords\":[\"fruit\",\"food\",\"nature\"],\"char\":\"🍓\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"melon\":{\"keywords\":[\"fruit\",\"nature\",\"food\"],\"char\":\"🍈\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cherries\":{\"keywords\":[\"food\",\"fruit\"],\"char\":\"🍒\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"peach\":{\"keywords\":[\"fruit\",\"nature\",\"food\"],\"char\":\"🍑\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"pineapple\":{\"keywords\":[\"fruit\",\"nature\",\"food\"],\"char\":\"🍍\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"kiwi_fruit\":{\"keywords\":[\"fruit\",\"food\"],\"char\":\"🥝\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"avocado\":{\"keywords\":[\"fruit\",\"food\"],\"char\":\"🥑\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"tomato\":{\"keywords\":[\"fruit\",\"vegetable\",\"nature\",\"food\"],\"char\":\"🍅\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"eggplant\":{\"keywords\":[\"vegetable\",\"nature\",\"food\",\"aubergine\"],\"char\":\"🍆\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cucumber\":{\"keywords\":[\"fruit\",\"food\",\"pickle\"],\"char\":\"🥒\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"carrot\":{\"keywords\":[\"vegetable\",\"food\",\"orange\"],\"char\":\"🥕\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"hot_pepper\":{\"keywords\":[\"food\",\"spicy\",\"chilli\",\"chili\"],\"char\":\"🌶\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"potato\":{\"keywords\":[\"food\",\"tuber\",\"vegatable\",\"starch\"],\"char\":\"🥔\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"corn\":{\"keywords\":[\"food\",\"vegetable\",\"plant\"],\"char\":\"🌽\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"sweet_potato\":{\"keywords\":[\"food\",\"nature\"],\"char\":\"🍠\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"peanuts\":{\"keywords\":[\"food\",\"nut\"],\"char\":\"🥜\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"honey_pot\":{\"keywords\":[\"bees\",\"sweet\",\"kitchen\"],\"char\":\"🍯\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"croissant\":{\"keywords\":[\"food\",\"bread\",\"french\"],\"char\":\"🥐\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"bread\":{\"keywords\":[\"food\",\"wheat\",\"breakfast\",\"toast\"],\"char\":\"🍞\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"baguette_bread\":{\"keywords\":[\"food\",\"bread\",\"french\"],\"char\":\"🥖\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cheese\":{\"keywords\":[\"food\",\"chadder\"],\"char\":\"🧀\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"egg\":{\"keywords\":[\"food\",\"chicken\",\"breakfast\"],\"char\":\"🥚\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"bacon\":{\"keywords\":[\"food\",\"breakfast\",\"pork\",\"pig\",\"meat\"],\"char\":\"🥓\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"pancakes\":{\"keywords\":[\"food\",\"breakfast\",\"flapjacks\",\"hotcakes\"],\"char\":\"🥞\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"poultry_leg\":{\"keywords\":[\"food\",\"meat\",\"drumstick\",\"bird\",\"chicken\",\"turkey\"],\"char\":\"🍗\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"meat_on_bone\":{\"keywords\":[\"good\",\"food\",\"drumstick\"],\"char\":\"🍖\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"fried_shrimp\":{\"keywords\":[\"food\",\"animal\",\"appetizer\",\"summer\"],\"char\":\"🍤\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"fried_egg\":{\"keywords\":[\"food\",\"breakfast\",\"kitchen\",\"egg\"],\"char\":\"🍳\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"hamburger\":{\"keywords\":[\"meat\",\"fast food\",\"beef\",\"cheeseburger\",\"mcdonalds\",\"burger king\"],\"char\":\"🍔\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"fries\":{\"keywords\":[\"chips\",\"snack\",\"fast food\"],\"char\":\"🍟\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"stuffed_flatbread\":{\"keywords\":[\"food\",\"flatbread\",\"stuffed\",\"gyro\"],\"char\":\"🥙\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"hotdog\":{\"keywords\":[\"food\",\"frankfurter\"],\"char\":\"🌭\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"pizza\":{\"keywords\":[\"food\",\"party\"],\"char\":\"🍕\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"spaghetti\":{\"keywords\":[\"food\",\"italian\",\"noodle\"],\"char\":\"🍝\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"taco\":{\"keywords\":[\"food\",\"mexican\"],\"char\":\"🌮\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"burrito\":{\"keywords\":[\"food\",\"mexican\"],\"char\":\"🌯\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"green_salad\":{\"keywords\":[\"food\",\"healthy\",\"lettuce\"],\"char\":\"🥗\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"shallow_pan_of_food\":{\"keywords\":[\"food\",\"cooking\",\"casserole\",\"paella\"],\"char\":\"🥘\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"ramen\":{\"keywords\":[\"food\",\"japanese\",\"noodle\",\"chopsticks\"],\"char\":\"🍜\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"stew\":{\"keywords\":[\"food\",\"meat\",\"soup\"],\"char\":\"🍲\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"fish_cake\":{\"keywords\":[\"food\",\"japan\",\"sea\",\"beach\",\"narutomaki\",\"pink\",\"swirl\",\"kamaboko\",\"surimi\",\"ramen\"],\"char\":\"🍥\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"sushi\":{\"keywords\":[\"food\",\"fish\",\"japanese\",\"rice\"],\"char\":\"🍣\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"bento\":{\"keywords\":[\"food\",\"japanese\",\"box\"],\"char\":\"🍱\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"curry\":{\"keywords\":[\"food\",\"spicy\",\"hot\",\"indian\"],\"char\":\"🍛\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"rice_ball\":{\"keywords\":[\"food\",\"japanese\"],\"char\":\"🍙\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"rice\":{\"keywords\":[\"food\",\"china\",\"asian\"],\"char\":\"🍚\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"rice_cracker\":{\"keywords\":[\"food\",\"japanese\"],\"char\":\"🍘\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"oden\":{\"keywords\":[\"food\",\"japanese\"],\"char\":\"🍢\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"dango\":{\"keywords\":[\"food\",\"dessert\",\"sweet\",\"japanese\",\"barbecue\",\"meat\"],\"char\":\"🍡\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"shaved_ice\":{\"keywords\":[\"hot\",\"dessert\",\"summer\"],\"char\":\"🍧\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"ice_cream\":{\"keywords\":[\"food\",\"hot\",\"dessert\"],\"char\":\"🍨\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"icecream\":{\"keywords\":[\"food\",\"hot\",\"dessert\",\"summer\"],\"char\":\"🍦\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cake\":{\"keywords\":[\"food\",\"dessert\"],\"char\":\"🍰\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"birthday\":{\"keywords\":[\"food\",\"dessert\",\"cake\"],\"char\":\"🎂\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"custard\":{\"keywords\":[\"dessert\",\"food\"],\"char\":\"🍮\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"candy\":{\"keywords\":[\"snack\",\"dessert\",\"sweet\",\"lolly\"],\"char\":\"🍬\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"lollipop\":{\"keywords\":[\"food\",\"snack\",\"candy\",\"sweet\"],\"char\":\"🍭\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"chocolate_bar\":{\"keywords\":[\"food\",\"snack\",\"dessert\",\"sweet\"],\"char\":\"🍫\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"popcorn\":{\"keywords\":[\"food\",\"movie theater\",\"films\",\"snack\"],\"char\":\"🍿\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"doughnut\":{\"keywords\":[\"food\",\"dessert\",\"snack\",\"sweet\",\"donut\"],\"char\":\"🍩\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cookie\":{\"keywords\":[\"food\",\"snack\",\"oreo\",\"chocolate\",\"sweet\",\"dessert\"],\"char\":\"🍪\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"milk_glass\":{\"keywords\":[\"beverage\",\"drink\",\"cow\"],\"char\":\"🥛\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"beer\":{\"keywords\":[\"relax\",\"beverage\",\"drink\",\"drunk\",\"party\",\"pub\",\"summer\",\"alcohol\",\"booze\"],\"char\":\"🍺\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"beers\":{\"keywords\":[\"relax\",\"beverage\",\"drink\",\"drunk\",\"party\",\"pub\",\"summer\",\"alcohol\",\"booze\"],\"char\":\"🍻\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"clinking_glasses\":{\"keywords\":[\"beverage\",\"drink\",\"party\",\"alcohol\",\"celebrate\",\"cheers\"],\"char\":\"🥂\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"wine_glass\":{\"keywords\":[\"drink\",\"beverage\",\"drunk\",\"alcohol\",\"booze\"],\"char\":\"🍷\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"tumbler_glass\":{\"keywords\":[\"drink\",\"beverage\",\"drunk\",\"alcohol\",\"liquor\",\"booze\",\"bourbon\",\"scotch\",\"whisky\",\"glass\",\"shot\"],\"char\":\"🥃\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"cocktail\":{\"keywords\":[\"drink\",\"drunk\",\"alcohol\",\"beverage\",\"booze\",\"mojito\"],\"char\":\"🍸\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"tropical_drink\":{\"keywords\":[\"beverage\",\"cocktail\",\"summer\",\"beach\",\"alcohol\",\"booze\",\"mojito\"],\"char\":\"🍹\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"champagne\":{\"keywords\":[\"drink\",\"wine\",\"bottle\",\"celebration\"],\"char\":\"🍾\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"sake\":{\"keywords\":[\"wine\",\"drink\",\"drunk\",\"beverage\",\"japanese\",\"alcohol\",\"booze\"],\"char\":\"🍶\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"tea\":{\"keywords\":[\"drink\",\"bowl\",\"breakfast\",\"green\",\"british\"],\"char\":\"🍵\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"coffee\":{\"keywords\":[\"beverage\",\"caffeine\",\"latte\",\"espresso\"],\"char\":\"☕\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"baby_bottle\":{\"keywords\":[\"food\",\"container\",\"milk\"],\"char\":\"🍼\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"spoon\":{\"keywords\":[\"cutlery\",\"kitchen\",\"tableware\"],\"char\":\"🥄\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"fork_and_knife\":{\"keywords\":[\"cutlery\",\"kitchen\"],\"char\":\"🍴\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"plate_with_cutlery\":{\"keywords\":[\"food\",\"eat\",\"meal\",\"lunch\",\"dinner\",\"restaurant\"],\"char\":\"🍽\",\"fitzpatrick_scale\":false,\"category\":\"food_and_drink\"},\"soccer\":{\"keywords\":[\"sports\",\"football\"],\"char\":\"⚽\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"basketball\":{\"keywords\":[\"sports\",\"balls\",\"NBA\"],\"char\":\"🏀\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"football\":{\"keywords\":[\"sports\",\"balls\",\"NFL\"],\"char\":\"🏈\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"baseball\":{\"keywords\":[\"sports\",\"balls\"],\"char\":\"⚾\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"tennis\":{\"keywords\":[\"sports\",\"balls\",\"green\"],\"char\":\"🎾\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"volleyball\":{\"keywords\":[\"sports\",\"balls\"],\"char\":\"🏐\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"rugby_football\":{\"keywords\":[\"sports\",\"team\"],\"char\":\"🏉\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"8ball\":{\"keywords\":[\"pool\",\"hobby\",\"game\",\"luck\",\"magic\"],\"char\":\"🎱\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"golf\":{\"keywords\":[\"sports\",\"business\",\"flag\",\"hole\",\"summer\"],\"char\":\"⛳\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"golfing_woman\":{\"keywords\":[\"sports\",\"business\",\"woman\",\"female\"],\"char\":\"🏌️‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"golfing_man\":{\"keywords\":[\"sports\",\"business\"],\"char\":\"🏌\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"ping_pong\":{\"keywords\":[\"sports\",\"pingpong\"],\"char\":\"🏓\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"badminton\":{\"keywords\":[\"sports\"],\"char\":\"🏸\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"goal_net\":{\"keywords\":[\"sports\"],\"char\":\"🥅\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"ice_hockey\":{\"keywords\":[\"sports\"],\"char\":\"🏒\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"field_hockey\":{\"keywords\":[\"sports\"],\"char\":\"🏑\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"cricket\":{\"keywords\":[\"sports\"],\"char\":\"🏏\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"ski\":{\"keywords\":[\"sports\",\"winter\",\"cold\",\"snow\"],\"char\":\"🎿\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"skier\":{\"keywords\":[\"sports\",\"winter\",\"snow\"],\"char\":\"⛷\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"snowboarder\":{\"keywords\":[\"sports\",\"winter\"],\"char\":\"🏂\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"person_fencing\":{\"keywords\":[\"sports\",\"fencing\",\"sword\"],\"char\":\"🤺\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"women_wrestling\":{\"keywords\":[\"sports\",\"wrestlers\"],\"char\":\"🤼‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"men_wrestling\":{\"keywords\":[\"sports\",\"wrestlers\"],\"char\":\"🤼‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"woman_cartwheeling\":{\"keywords\":[\"gymnastics\"],\"char\":\"🤸‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"man_cartwheeling\":{\"keywords\":[\"gymnastics\"],\"char\":\"🤸‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"woman_playing_handball\":{\"keywords\":[\"sports\"],\"char\":\"🤾‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"man_playing_handball\":{\"keywords\":[\"sports\"],\"char\":\"🤾‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"ice_skate\":{\"keywords\":[\"sports\"],\"char\":\"⛸\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"bow_and_arrow\":{\"keywords\":[\"sports\"],\"char\":\"🏹\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"fishing_pole_and_fish\":{\"keywords\":[\"food\",\"hobby\",\"summer\"],\"char\":\"🎣\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"boxing_glove\":{\"keywords\":[\"sports\",\"fighting\"],\"char\":\"🥊\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"martial_arts_uniform\":{\"keywords\":[\"judo\",\"karate\",\"taekwondo\"],\"char\":\"🥋\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"rowing_woman\":{\"keywords\":[\"sports\",\"hobby\",\"water\",\"ship\",\"woman\",\"female\"],\"char\":\"🚣‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"rowing_man\":{\"keywords\":[\"sports\",\"hobby\",\"water\",\"ship\"],\"char\":\"🚣\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"swimming_woman\":{\"keywords\":[\"sports\",\"exercise\",\"human\",\"athlete\",\"water\",\"summer\",\"woman\",\"female\"],\"char\":\"🏊‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"swimming_man\":{\"keywords\":[\"sports\",\"exercise\",\"human\",\"athlete\",\"water\",\"summer\"],\"char\":\"🏊\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"woman_playing_water_polo\":{\"keywords\":[\"sports\",\"pool\"],\"char\":\"🤽‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"man_playing_water_polo\":{\"keywords\":[\"sports\",\"pool\"],\"char\":\"🤽‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"surfing_woman\":{\"keywords\":[\"sports\",\"ocean\",\"sea\",\"summer\",\"beach\",\"woman\",\"female\"],\"char\":\"🏄‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"surfing_man\":{\"keywords\":[\"sports\",\"ocean\",\"sea\",\"summer\",\"beach\"],\"char\":\"🏄\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"bath\":{\"keywords\":[\"clean\",\"shower\",\"bathroom\"],\"char\":\"🛀\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"basketball_woman\":{\"keywords\":[\"sports\",\"human\",\"woman\",\"female\"],\"char\":\"⛹️‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"basketball_man\":{\"keywords\":[\"sports\",\"human\"],\"char\":\"⛹\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"weight_lifting_woman\":{\"keywords\":[\"sports\",\"training\",\"exercise\",\"woman\",\"female\"],\"char\":\"🏋️‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"weight_lifting_man\":{\"keywords\":[\"sports\",\"training\",\"exercise\"],\"char\":\"🏋\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"biking_woman\":{\"keywords\":[\"sports\",\"bike\",\"exercise\",\"hipster\",\"woman\",\"female\"],\"char\":\"🚴‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"biking_man\":{\"keywords\":[\"sports\",\"bike\",\"exercise\",\"hipster\"],\"char\":\"🚴\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"mountain_biking_woman\":{\"keywords\":[\"transportation\",\"sports\",\"human\",\"race\",\"bike\",\"woman\",\"female\"],\"char\":\"🚵‍♀️\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"mountain_biking_man\":{\"keywords\":[\"transportation\",\"sports\",\"human\",\"race\",\"bike\"],\"char\":\"🚵\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"horse_racing\":{\"keywords\":[\"animal\",\"betting\",\"competition\",\"gambling\",\"luck\"],\"char\":\"🏇\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"business_suit_levitating\":{\"keywords\":[\"suit\",\"business\",\"levitate\",\"hover\",\"jump\"],\"char\":\"🕴\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"trophy\":{\"keywords\":[\"win\",\"award\",\"contest\",\"place\",\"ftw\",\"ceremony\"],\"char\":\"🏆\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"running_shirt_with_sash\":{\"keywords\":[\"play\",\"pageant\"],\"char\":\"🎽\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"medal_sports\":{\"keywords\":[\"award\",\"winning\"],\"char\":\"🏅\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"medal_military\":{\"keywords\":[\"award\",\"winning\",\"army\"],\"char\":\"🎖\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"1st_place_medal\":{\"keywords\":[\"award\",\"winning\",\"first\"],\"char\":\"🥇\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"2nd_place_medal\":{\"keywords\":[\"award\",\"second\"],\"char\":\"🥈\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"3rd_place_medal\":{\"keywords\":[\"award\",\"third\"],\"char\":\"🥉\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"reminder_ribbon\":{\"keywords\":[\"sports\",\"cause\",\"support\",\"awareness\"],\"char\":\"🎗\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"rosette\":{\"keywords\":[\"flower\",\"decoration\",\"military\"],\"char\":\"🏵\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"ticket\":{\"keywords\":[\"event\",\"concert\",\"pass\"],\"char\":\"🎫\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"tickets\":{\"keywords\":[\"sports\",\"concert\",\"entrance\"],\"char\":\"🎟\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"performing_arts\":{\"keywords\":[\"acting\",\"theater\",\"drama\"],\"char\":\"🎭\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"art\":{\"keywords\":[\"design\",\"paint\",\"draw\",\"colors\"],\"char\":\"🎨\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"circus_tent\":{\"keywords\":[\"festival\",\"carnival\",\"party\"],\"char\":\"🎪\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"woman_juggling\":{\"keywords\":[\"juggle\",\"balance\",\"skill\",\"multitask\"],\"char\":\"🤹‍♀️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"man_juggling\":{\"keywords\":[\"juggle\",\"balance\",\"skill\",\"multitask\"],\"char\":\"🤹‍♂️\",\"fitzpatrick_scale\":true,\"category\":\"activity\"},\"microphone\":{\"keywords\":[\"sound\",\"music\",\"PA\",\"sing\",\"talkshow\"],\"char\":\"🎤\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"headphones\":{\"keywords\":[\"music\",\"score\",\"gadgets\"],\"char\":\"🎧\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"musical_score\":{\"keywords\":[\"treble\",\"clef\",\"compose\"],\"char\":\"🎼\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"musical_keyboard\":{\"keywords\":[\"piano\",\"instrument\",\"compose\"],\"char\":\"🎹\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"drum\":{\"keywords\":[\"music\",\"instrument\",\"drumsticks\"],\"char\":\"🥁\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"saxophone\":{\"keywords\":[\"music\",\"instrument\",\"jazz\",\"blues\"],\"char\":\"🎷\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"trumpet\":{\"keywords\":[\"music\",\"brass\"],\"char\":\"🎺\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"guitar\":{\"keywords\":[\"music\",\"instrument\"],\"char\":\"🎸\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"violin\":{\"keywords\":[\"music\",\"instrument\",\"orchestra\",\"symphony\"],\"char\":\"🎻\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"clapper\":{\"keywords\":[\"movie\",\"film\",\"record\"],\"char\":\"🎬\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"video_game\":{\"keywords\":[\"play\",\"console\",\"PS4\",\"controller\"],\"char\":\"🎮\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"space_invader\":{\"keywords\":[\"game\",\"arcade\",\"play\"],\"char\":\"👾\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"dart\":{\"keywords\":[\"game\",\"play\",\"bar\"],\"char\":\"🎯\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"game_die\":{\"keywords\":[\"dice\",\"random\",\"tabletop\",\"play\",\"luck\"],\"char\":\"🎲\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"slot_machine\":{\"keywords\":[\"bet\",\"gamble\",\"vegas\",\"fruit machine\",\"luck\",\"casino\"],\"char\":\"🎰\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"bowling\":{\"keywords\":[\"sports\",\"fun\",\"play\"],\"char\":\"🎳\",\"fitzpatrick_scale\":false,\"category\":\"activity\"},\"red_car\":{\"keywords\":[\"red\",\"transportation\",\"vehicle\"],\"char\":\"🚗\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"taxi\":{\"keywords\":[\"uber\",\"vehicle\",\"cars\",\"transportation\"],\"char\":\"🚕\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"blue_car\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚙\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bus\":{\"keywords\":[\"car\",\"vehicle\",\"transportation\"],\"char\":\"🚌\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"trolleybus\":{\"keywords\":[\"bart\",\"transportation\",\"vehicle\"],\"char\":\"🚎\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"racing_car\":{\"keywords\":[\"sports\",\"race\",\"fast\",\"formula\",\"f1\"],\"char\":\"🏎\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"police_car\":{\"keywords\":[\"vehicle\",\"cars\",\"transportation\",\"law\",\"legal\",\"enforcement\"],\"char\":\"🚓\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"ambulance\":{\"keywords\":[\"health\",\"911\",\"hospital\"],\"char\":\"🚑\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"fire_engine\":{\"keywords\":[\"transportation\",\"cars\",\"vehicle\"],\"char\":\"🚒\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"minibus\":{\"keywords\":[\"vehicle\",\"car\",\"transportation\"],\"char\":\"🚐\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"truck\":{\"keywords\":[\"cars\",\"transportation\"],\"char\":\"🚚\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"articulated_lorry\":{\"keywords\":[\"vehicle\",\"cars\",\"transportation\",\"express\"],\"char\":\"🚛\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"tractor\":{\"keywords\":[\"vehicle\",\"car\",\"farming\",\"agriculture\"],\"char\":\"🚜\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"kick_scooter\":{\"keywords\":[\"vehicle\",\"kick\",\"razor\"],\"char\":\"🛴\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"motorcycle\":{\"keywords\":[\"race\",\"sports\",\"fast\"],\"char\":\"🏍\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bike\":{\"keywords\":[\"sports\",\"bicycle\",\"exercise\",\"hipster\"],\"char\":\"🚲\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"motor_scooter\":{\"keywords\":[\"vehicle\",\"vespa\",\"sasha\"],\"char\":\"🛵\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"rotating_light\":{\"keywords\":[\"police\",\"ambulance\",\"911\",\"emergency\",\"alert\",\"error\",\"pinged\",\"law\",\"legal\"],\"char\":\"🚨\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"oncoming_police_car\":{\"keywords\":[\"vehicle\",\"law\",\"legal\",\"enforcement\",\"911\"],\"char\":\"🚔\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"oncoming_bus\":{\"keywords\":[\"vehicle\",\"transportation\"],\"char\":\"🚍\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"oncoming_automobile\":{\"keywords\":[\"car\",\"vehicle\",\"transportation\"],\"char\":\"🚘\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"oncoming_taxi\":{\"keywords\":[\"vehicle\",\"cars\",\"uber\"],\"char\":\"🚖\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"aerial_tramway\":{\"keywords\":[\"transportation\",\"vehicle\",\"ski\"],\"char\":\"🚡\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mountain_cableway\":{\"keywords\":[\"transportation\",\"vehicle\",\"ski\"],\"char\":\"🚠\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"suspension_railway\":{\"keywords\":[\"vehicle\",\"transportation\"],\"char\":\"🚟\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"railway_car\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚃\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"train\":{\"keywords\":[\"transportation\",\"vehicle\",\"carriage\",\"public\",\"travel\"],\"char\":\"🚋\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"monorail\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚝\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bullettrain_side\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚄\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bullettrain_front\":{\"keywords\":[\"transportation\",\"vehicle\",\"speed\",\"fast\",\"public\",\"travel\"],\"char\":\"🚅\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"light_rail\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚈\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mountain_railway\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚞\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"steam_locomotive\":{\"keywords\":[\"transportation\",\"vehicle\",\"train\"],\"char\":\"🚂\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"train2\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚆\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"metro\":{\"keywords\":[\"transportation\",\"blue-square\",\"mrt\",\"underground\",\"tube\"],\"char\":\"🚇\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"tram\":{\"keywords\":[\"transportation\",\"vehicle\"],\"char\":\"🚊\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"station\":{\"keywords\":[\"transportation\",\"vehicle\",\"public\"],\"char\":\"🚉\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"helicopter\":{\"keywords\":[\"transportation\",\"vehicle\",\"fly\"],\"char\":\"🚁\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"small_airplane\":{\"keywords\":[\"flight\",\"transportation\",\"fly\",\"vehicle\"],\"char\":\"🛩\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"airplane\":{\"keywords\":[\"vehicle\",\"transportation\",\"flight\",\"fly\"],\"char\":\"✈️\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"flight_departure\":{\"keywords\":[\"airport\",\"flight\",\"landing\"],\"char\":\"🛫\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"flight_arrival\":{\"keywords\":[\"airport\",\"flight\",\"boarding\"],\"char\":\"🛬\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"sailboat\":{\"keywords\":[\"ship\",\"summer\",\"transportation\",\"water\",\"sailing\"],\"char\":\"⛵\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"motor_boat\":{\"keywords\":[\"ship\"],\"char\":\"🛥\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"speedboat\":{\"keywords\":[\"ship\",\"transportation\",\"vehicle\",\"summer\"],\"char\":\"🚤\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"ferry\":{\"keywords\":[\"boat\",\"ship\",\"yacht\"],\"char\":\"⛴\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"passenger_ship\":{\"keywords\":[\"yacht\",\"cruise\",\"ferry\"],\"char\":\"🛳\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"rocket\":{\"keywords\":[\"launch\",\"ship\",\"staffmode\",\"NASA\",\"outer space\",\"outer_space\",\"fly\"],\"char\":\"🚀\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"artificial_satellite\":{\"keywords\":[\"communication\",\"gps\",\"orbit\",\"spaceflight\",\"NASA\",\"ISS\"],\"char\":\"🛰\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"seat\":{\"keywords\":[\"sit\",\"airplane\",\"transport\",\"bus\",\"flight\",\"fly\"],\"char\":\"💺\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"canoe\":{\"keywords\":[\"boat\",\"paddle\",\"water\",\"ship\"],\"char\":\"🛶\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"anchor\":{\"keywords\":[\"ship\",\"ferry\",\"sea\",\"boat\"],\"char\":\"⚓\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"construction\":{\"keywords\":[\"wip\",\"progress\",\"caution\",\"warning\"],\"char\":\"🚧\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"fuelpump\":{\"keywords\":[\"gas station\",\"petroleum\"],\"char\":\"⛽\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"busstop\":{\"keywords\":[\"transportation\",\"wait\"],\"char\":\"🚏\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"vertical_traffic_light\":{\"keywords\":[\"transportation\",\"driving\"],\"char\":\"🚦\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"traffic_light\":{\"keywords\":[\"transportation\",\"signal\"],\"char\":\"🚥\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"checkered_flag\":{\"keywords\":[\"contest\",\"finishline\",\"race\",\"gokart\"],\"char\":\"🏁\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"ship\":{\"keywords\":[\"transportation\",\"titanic\",\"deploy\"],\"char\":\"🚢\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"ferris_wheel\":{\"keywords\":[\"photo\",\"carnival\",\"londoneye\"],\"char\":\"🎡\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"roller_coaster\":{\"keywords\":[\"carnival\",\"playground\",\"photo\",\"fun\"],\"char\":\"🎢\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"carousel_horse\":{\"keywords\":[\"photo\",\"carnival\"],\"char\":\"🎠\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"building_construction\":{\"keywords\":[\"wip\",\"working\",\"progress\"],\"char\":\"🏗\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"foggy\":{\"keywords\":[\"photo\",\"mountain\"],\"char\":\"🌁\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"tokyo_tower\":{\"keywords\":[\"photo\",\"japanese\"],\"char\":\"🗼\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"factory\":{\"keywords\":[\"building\",\"industry\",\"pollution\",\"smoke\"],\"char\":\"🏭\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"fountain\":{\"keywords\":[\"photo\",\"summer\",\"water\",\"fresh\"],\"char\":\"⛲\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"rice_scene\":{\"keywords\":[\"photo\",\"japan\",\"asia\",\"tsukimi\"],\"char\":\"🎑\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mountain\":{\"keywords\":[\"photo\",\"nature\",\"environment\"],\"char\":\"⛰\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mountain_snow\":{\"keywords\":[\"photo\",\"nature\",\"environment\",\"winter\",\"cold\"],\"char\":\"🏔\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mount_fuji\":{\"keywords\":[\"photo\",\"mountain\",\"nature\",\"japanese\"],\"char\":\"🗻\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"volcano\":{\"keywords\":[\"photo\",\"nature\",\"disaster\"],\"char\":\"🌋\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"japan\":{\"keywords\":[\"nation\",\"country\",\"japanese\",\"asia\"],\"char\":\"🗾\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"camping\":{\"keywords\":[\"photo\",\"outdoors\",\"tent\"],\"char\":\"🏕\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"tent\":{\"keywords\":[\"photo\",\"camping\",\"outdoors\"],\"char\":\"⛺\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"national_park\":{\"keywords\":[\"photo\",\"environment\",\"nature\"],\"char\":\"🏞\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"motorway\":{\"keywords\":[\"road\",\"cupertino\",\"interstate\",\"highway\"],\"char\":\"🛣\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"railway_track\":{\"keywords\":[\"train\",\"transportation\"],\"char\":\"🛤\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"sunrise\":{\"keywords\":[\"morning\",\"view\",\"vacation\",\"photo\"],\"char\":\"🌅\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"sunrise_over_mountains\":{\"keywords\":[\"view\",\"vacation\",\"photo\"],\"char\":\"🌄\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"desert\":{\"keywords\":[\"photo\",\"warm\",\"saharah\"],\"char\":\"🏜\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"beach_umbrella\":{\"keywords\":[\"weather\",\"summer\",\"sunny\",\"sand\",\"mojito\"],\"char\":\"🏖\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"desert_island\":{\"keywords\":[\"photo\",\"tropical\",\"mojito\"],\"char\":\"🏝\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"city_sunrise\":{\"keywords\":[\"photo\",\"good morning\",\"dawn\"],\"char\":\"🌇\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"city_sunset\":{\"keywords\":[\"photo\",\"evening\",\"sky\",\"buildings\"],\"char\":\"🌆\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"cityscape\":{\"keywords\":[\"photo\",\"night life\",\"urban\"],\"char\":\"🏙\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"night_with_stars\":{\"keywords\":[\"evening\",\"city\",\"downtown\"],\"char\":\"🌃\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bridge_at_night\":{\"keywords\":[\"photo\",\"sanfrancisco\"],\"char\":\"🌉\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"milky_way\":{\"keywords\":[\"photo\",\"space\",\"stars\"],\"char\":\"🌌\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"stars\":{\"keywords\":[\"night\",\"photo\"],\"char\":\"🌠\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"sparkler\":{\"keywords\":[\"stars\",\"night\",\"shine\"],\"char\":\"🎇\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"fireworks\":{\"keywords\":[\"photo\",\"festival\",\"carnival\",\"congratulations\"],\"char\":\"🎆\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"rainbow\":{\"keywords\":[\"nature\",\"happy\",\"unicorn_face\",\"photo\",\"sky\",\"spring\"],\"char\":\"🌈\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"houses\":{\"keywords\":[\"buildings\",\"photo\"],\"char\":\"🏘\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"european_castle\":{\"keywords\":[\"building\",\"royalty\",\"history\"],\"char\":\"🏰\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"japanese_castle\":{\"keywords\":[\"photo\",\"building\"],\"char\":\"🏯\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"stadium\":{\"keywords\":[\"photo\",\"place\",\"sports\",\"concert\",\"venue\"],\"char\":\"🏟\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"statue_of_liberty\":{\"keywords\":[\"american\",\"newyork\"],\"char\":\"🗽\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"house\":{\"keywords\":[\"building\",\"home\"],\"char\":\"🏠\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"house_with_garden\":{\"keywords\":[\"home\",\"plant\",\"nature\"],\"char\":\"🏡\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"derelict_house\":{\"keywords\":[\"abandon\",\"evict\",\"broken\",\"building\"],\"char\":\"🏚\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"office\":{\"keywords\":[\"building\",\"bureau\",\"work\"],\"char\":\"🏢\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"department_store\":{\"keywords\":[\"building\",\"shopping\",\"mall\"],\"char\":\"🏬\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"post_office\":{\"keywords\":[\"building\",\"envelope\",\"communication\"],\"char\":\"🏣\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"european_post_office\":{\"keywords\":[\"building\",\"email\"],\"char\":\"🏤\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"hospital\":{\"keywords\":[\"building\",\"health\",\"surgery\",\"doctor\"],\"char\":\"🏥\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"bank\":{\"keywords\":[\"building\",\"money\",\"sales\",\"cash\",\"business\",\"enterprise\"],\"char\":\"🏦\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"hotel\":{\"keywords\":[\"building\",\"accomodation\",\"checkin\"],\"char\":\"🏨\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"convenience_store\":{\"keywords\":[\"building\",\"shopping\",\"groceries\"],\"char\":\"🏪\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"school\":{\"keywords\":[\"building\",\"student\",\"education\",\"learn\",\"teach\"],\"char\":\"🏫\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"love_hotel\":{\"keywords\":[\"like\",\"affection\",\"dating\"],\"char\":\"🏩\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"wedding\":{\"keywords\":[\"love\",\"like\",\"affection\",\"couple\",\"marriage\",\"bride\",\"groom\"],\"char\":\"💒\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"classical_building\":{\"keywords\":[\"art\",\"culture\",\"history\"],\"char\":\"🏛\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"church\":{\"keywords\":[\"building\",\"religion\",\"christ\"],\"char\":\"⛪\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"mosque\":{\"keywords\":[\"islam\",\"worship\",\"minaret\"],\"char\":\"🕌\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"synagogue\":{\"keywords\":[\"judaism\",\"worship\",\"temple\",\"jewish\"],\"char\":\"🕍\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"kaaba\":{\"keywords\":[\"mecca\",\"mosque\",\"islam\"],\"char\":\"🕋\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"shinto_shrine\":{\"keywords\":[\"temple\",\"japan\",\"kyoto\"],\"char\":\"⛩\",\"fitzpatrick_scale\":false,\"category\":\"travel_and_places\"},\"watch\":{\"keywords\":[\"time\",\"accessories\"],\"char\":\"⌚\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"iphone\":{\"keywords\":[\"technology\",\"apple\",\"gadgets\",\"dial\"],\"char\":\"📱\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"calling\":{\"keywords\":[\"iphone\",\"incoming\"],\"char\":\"📲\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"computer\":{\"keywords\":[\"technology\",\"laptop\",\"screen\",\"display\",\"monitor\"],\"char\":\"💻\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"keyboard\":{\"keywords\":[\"technology\",\"computer\",\"type\",\"input\",\"text\"],\"char\":\"⌨\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"desktop_computer\":{\"keywords\":[\"technology\",\"computing\",\"screen\"],\"char\":\"🖥\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"printer\":{\"keywords\":[\"paper\",\"ink\"],\"char\":\"🖨\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"computer_mouse\":{\"keywords\":[\"click\"],\"char\":\"🖱\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"trackball\":{\"keywords\":[\"technology\",\"trackpad\"],\"char\":\"🖲\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"joystick\":{\"keywords\":[\"game\",\"play\"],\"char\":\"🕹\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"clamp\":{\"keywords\":[\"tool\"],\"char\":\"🗜\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"minidisc\":{\"keywords\":[\"technology\",\"record\",\"data\",\"disk\",\"90s\"],\"char\":\"💽\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"floppy_disk\":{\"keywords\":[\"oldschool\",\"technology\",\"save\",\"90s\",\"80s\"],\"char\":\"💾\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"cd\":{\"keywords\":[\"technology\",\"dvd\",\"disk\",\"disc\",\"90s\"],\"char\":\"💿\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"dvd\":{\"keywords\":[\"cd\",\"disk\",\"disc\"],\"char\":\"📀\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"vhs\":{\"keywords\":[\"record\",\"video\",\"oldschool\",\"90s\",\"80s\"],\"char\":\"📼\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"camera\":{\"keywords\":[\"gadgets\",\"photography\"],\"char\":\"📷\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"camera_flash\":{\"keywords\":[\"photography\",\"gadgets\"],\"char\":\"📸\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"video_camera\":{\"keywords\":[\"film\",\"record\"],\"char\":\"📹\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"movie_camera\":{\"keywords\":[\"film\",\"record\"],\"char\":\"🎥\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"film_projector\":{\"keywords\":[\"video\",\"tape\",\"record\",\"movie\"],\"char\":\"📽\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"film_strip\":{\"keywords\":[\"movie\"],\"char\":\"🎞\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"telephone_receiver\":{\"keywords\":[\"technology\",\"communication\",\"dial\"],\"char\":\"📞\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"phone\":{\"keywords\":[\"technology\",\"communication\",\"dial\",\"telephone\"],\"char\":\"☎️\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pager\":{\"keywords\":[\"bbcall\",\"oldschool\",\"90s\"],\"char\":\"📟\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"fax\":{\"keywords\":[\"communication\",\"technology\"],\"char\":\"📠\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"tv\":{\"keywords\":[\"technology\",\"program\",\"oldschool\",\"show\",\"television\"],\"char\":\"📺\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"radio\":{\"keywords\":[\"communication\",\"music\",\"podcast\",\"program\"],\"char\":\"📻\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"studio_microphone\":{\"keywords\":[\"sing\",\"recording\",\"artist\",\"talkshow\"],\"char\":\"🎙\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"level_slider\":{\"keywords\":[\"scale\"],\"char\":\"🎚\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"control_knobs\":{\"keywords\":[\"dial\"],\"char\":\"🎛\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"stopwatch\":{\"keywords\":[\"time\",\"deadline\"],\"char\":\"⏱\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"timer_clock\":{\"keywords\":[\"alarm\"],\"char\":\"⏲\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"alarm_clock\":{\"keywords\":[\"time\",\"wake\"],\"char\":\"⏰\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mantelpiece_clock\":{\"keywords\":[\"time\"],\"char\":\"🕰\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hourglass_flowing_sand\":{\"keywords\":[\"oldschool\",\"time\",\"countdown\"],\"char\":\"⏳\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hourglass\":{\"keywords\":[\"time\",\"clock\",\"oldschool\",\"limit\",\"exam\",\"quiz\",\"test\"],\"char\":\"⌛\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"satellite\":{\"keywords\":[\"communication\",\"future\",\"radio\",\"space\"],\"char\":\"📡\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"battery\":{\"keywords\":[\"power\",\"energy\",\"sustain\"],\"char\":\"🔋\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"electric_plug\":{\"keywords\":[\"charger\",\"power\"],\"char\":\"🔌\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bulb\":{\"keywords\":[\"light\",\"electricity\",\"idea\"],\"char\":\"💡\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"flashlight\":{\"keywords\":[\"dark\",\"camping\",\"sight\",\"night\"],\"char\":\"🔦\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"candle\":{\"keywords\":[\"fire\",\"wax\"],\"char\":\"🕯\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"wastebasket\":{\"keywords\":[\"bin\",\"trash\",\"rubbish\",\"garbage\",\"toss\"],\"char\":\"🗑\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"oil_drum\":{\"keywords\":[\"barrell\"],\"char\":\"🛢\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"money_with_wings\":{\"keywords\":[\"dollar\",\"bills\",\"payment\",\"sale\"],\"char\":\"💸\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"dollar\":{\"keywords\":[\"money\",\"sales\",\"bill\",\"currency\"],\"char\":\"💵\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"yen\":{\"keywords\":[\"money\",\"sales\",\"japanese\",\"dollar\",\"currency\"],\"char\":\"💴\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"euro\":{\"keywords\":[\"money\",\"sales\",\"dollar\",\"currency\"],\"char\":\"💶\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pound\":{\"keywords\":[\"british\",\"sterling\",\"money\",\"sales\",\"bills\",\"uk\",\"england\",\"currency\"],\"char\":\"💷\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"moneybag\":{\"keywords\":[\"dollar\",\"payment\",\"coins\",\"sale\"],\"char\":\"💰\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"credit_card\":{\"keywords\":[\"money\",\"sales\",\"dollar\",\"bill\",\"payment\",\"shopping\"],\"char\":\"💳\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"gem\":{\"keywords\":[\"blue\",\"ruby\",\"diamond\",\"jewelry\"],\"char\":\"💎\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"balance_scale\":{\"keywords\":[\"law\",\"fairness\",\"weight\"],\"char\":\"⚖\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"wrench\":{\"keywords\":[\"tools\",\"diy\",\"ikea\",\"fix\",\"maintainer\"],\"char\":\"🔧\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hammer\":{\"keywords\":[\"tools\",\"build\",\"create\"],\"char\":\"🔨\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hammer_and_pick\":{\"keywords\":[\"tools\",\"build\",\"create\"],\"char\":\"⚒\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hammer_and_wrench\":{\"keywords\":[\"tools\",\"build\",\"create\"],\"char\":\"🛠\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pick\":{\"keywords\":[\"tools\",\"dig\"],\"char\":\"⛏\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"nut_and_bolt\":{\"keywords\":[\"handy\",\"tools\",\"fix\"],\"char\":\"🔩\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"gear\":{\"keywords\":[\"cog\"],\"char\":\"⚙\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"chains\":{\"keywords\":[\"lock\",\"arrest\"],\"char\":\"⛓\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"gun\":{\"keywords\":[\"violence\",\"weapon\",\"pistol\",\"revolver\"],\"char\":\"🔫\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bomb\":{\"keywords\":[\"boom\",\"explode\",\"explosion\",\"terrorism\"],\"char\":\"💣\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hocho\":{\"keywords\":[\"knife\",\"blade\",\"cutlery\",\"kitchen\",\"weapon\"],\"char\":\"🔪\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"dagger\":{\"keywords\":[\"weapon\"],\"char\":\"🗡\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"crossed_swords\":{\"keywords\":[\"weapon\"],\"char\":\"⚔\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"shield\":{\"keywords\":[\"protection\",\"security\"],\"char\":\"🛡\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"smoking\":{\"keywords\":[\"kills\",\"tobacco\",\"cigarette\",\"joint\",\"smoke\"],\"char\":\"🚬\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"skull_and_crossbones\":{\"keywords\":[\"poison\",\"danger\",\"deadly\",\"scary\",\"death\",\"pirate\",\"evil\"],\"char\":\"☠\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"coffin\":{\"keywords\":[\"vampire\",\"dead\",\"die\",\"death\",\"rip\",\"graveyard\",\"cemetery\",\"casket\",\"funeral\",\"box\"],\"char\":\"⚰\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"funeral_urn\":{\"keywords\":[\"dead\",\"die\",\"death\",\"rip\",\"ashes\"],\"char\":\"⚱\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"amphora\":{\"keywords\":[\"vase\",\"jar\"],\"char\":\"🏺\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"crystal_ball\":{\"keywords\":[\"disco\",\"party\",\"magic\",\"circus\",\"fortune_teller\"],\"char\":\"🔮\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"prayer_beads\":{\"keywords\":[\"dhikr\",\"religious\"],\"char\":\"📿\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"barber\":{\"keywords\":[\"hair\",\"salon\",\"style\"],\"char\":\"💈\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"alembic\":{\"keywords\":[\"distilling\",\"science\",\"experiment\",\"chemistry\"],\"char\":\"⚗\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"telescope\":{\"keywords\":[\"stars\",\"space\",\"zoom\",\"science\",\"astronomy\"],\"char\":\"🔭\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"microscope\":{\"keywords\":[\"laboratory\",\"experiment\",\"zoomin\",\"science\",\"study\"],\"char\":\"🔬\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"hole\":{\"keywords\":[\"embarrassing\"],\"char\":\"🕳\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pill\":{\"keywords\":[\"health\",\"medicine\",\"doctor\",\"pharmacy\",\"drug\"],\"char\":\"💊\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"syringe\":{\"keywords\":[\"health\",\"hospital\",\"drugs\",\"blood\",\"medicine\",\"needle\",\"doctor\",\"nurse\"],\"char\":\"💉\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"thermometer\":{\"keywords\":[\"weather\",\"temperature\",\"hot\",\"cold\"],\"char\":\"🌡\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"label\":{\"keywords\":[\"sale\",\"tag\"],\"char\":\"🏷\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bookmark\":{\"keywords\":[\"favorite\",\"label\",\"save\"],\"char\":\"🔖\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"toilet\":{\"keywords\":[\"restroom\",\"wc\",\"washroom\",\"bathroom\",\"potty\"],\"char\":\"🚽\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"shower\":{\"keywords\":[\"clean\",\"water\",\"bathroom\"],\"char\":\"🚿\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bathtub\":{\"keywords\":[\"clean\",\"shower\",\"bathroom\"],\"char\":\"🛁\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"key\":{\"keywords\":[\"lock\",\"door\",\"password\"],\"char\":\"🔑\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"old_key\":{\"keywords\":[\"lock\",\"door\",\"password\"],\"char\":\"🗝\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"couch_and_lamp\":{\"keywords\":[\"read\",\"chill\"],\"char\":\"🛋\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"sleeping_bed\":{\"keywords\":[\"bed\",\"rest\"],\"char\":\"🛌\",\"fitzpatrick_scale\":true,\"category\":\"objects\"},\"bed\":{\"keywords\":[\"sleep\",\"rest\"],\"char\":\"🛏\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"door\":{\"keywords\":[\"house\",\"entry\",\"exit\"],\"char\":\"🚪\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bellhop_bell\":{\"keywords\":[\"service\"],\"char\":\"🛎\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"framed_picture\":{\"keywords\":[\"photography\"],\"char\":\"🖼\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"world_map\":{\"keywords\":[\"location\",\"direction\"],\"char\":\"🗺\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"parasol_on_ground\":{\"keywords\":[\"weather\",\"summer\"],\"char\":\"⛱\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"moyai\":{\"keywords\":[\"rock\",\"easter island\",\"moai\"],\"char\":\"🗿\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"shopping\":{\"keywords\":[\"mall\",\"buy\",\"purchase\"],\"char\":\"🛍\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"shopping_cart\":{\"keywords\":[\"trolley\"],\"char\":\"🛒\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"balloon\":{\"keywords\":[\"party\",\"celebration\",\"birthday\",\"circus\"],\"char\":\"🎈\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"flags\":{\"keywords\":[\"fish\",\"japanese\",\"koinobori\",\"carp\",\"banner\"],\"char\":\"🎏\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"ribbon\":{\"keywords\":[\"decoration\",\"pink\",\"girl\",\"bowtie\"],\"char\":\"🎀\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"gift\":{\"keywords\":[\"present\",\"birthday\",\"christmas\",\"xmas\"],\"char\":\"🎁\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"confetti_ball\":{\"keywords\":[\"festival\",\"party\",\"birthday\",\"circus\"],\"char\":\"🎊\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"tada\":{\"keywords\":[\"party\",\"congratulations\",\"birthday\",\"magic\",\"circus\",\"celebration\"],\"char\":\"🎉\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"dolls\":{\"keywords\":[\"japanese\",\"toy\",\"kimono\"],\"char\":\"🎎\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"wind_chime\":{\"keywords\":[\"nature\",\"ding\",\"spring\",\"bell\"],\"char\":\"🎐\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"crossed_flags\":{\"keywords\":[\"japanese\",\"nation\",\"country\",\"border\"],\"char\":\"🎌\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"izakaya_lantern\":{\"keywords\":[\"light\",\"paper\",\"halloween\",\"spooky\"],\"char\":\"🏮\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"email\":{\"keywords\":[\"letter\",\"postal\",\"inbox\",\"communication\"],\"char\":\"✉️\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"envelope_with_arrow\":{\"keywords\":[\"email\",\"communication\"],\"char\":\"📩\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"incoming_envelope\":{\"keywords\":[\"email\",\"inbox\"],\"char\":\"📨\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"e-mail\":{\"keywords\":[\"communication\",\"inbox\"],\"char\":\"📧\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"love_letter\":{\"keywords\":[\"email\",\"like\",\"affection\",\"envelope\",\"valentines\"],\"char\":\"💌\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"postbox\":{\"keywords\":[\"email\",\"letter\",\"envelope\"],\"char\":\"📮\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mailbox_closed\":{\"keywords\":[\"email\",\"communication\",\"inbox\"],\"char\":\"📪\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mailbox\":{\"keywords\":[\"email\",\"inbox\",\"communication\"],\"char\":\"📫\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mailbox_with_mail\":{\"keywords\":[\"email\",\"inbox\",\"communication\"],\"char\":\"📬\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mailbox_with_no_mail\":{\"keywords\":[\"email\",\"inbox\"],\"char\":\"📭\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"package\":{\"keywords\":[\"mail\",\"gift\",\"cardboard\",\"box\",\"moving\"],\"char\":\"📦\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"postal_horn\":{\"keywords\":[\"instrument\",\"music\"],\"char\":\"📯\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"inbox_tray\":{\"keywords\":[\"email\",\"documents\"],\"char\":\"📥\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"outbox_tray\":{\"keywords\":[\"inbox\",\"email\"],\"char\":\"📤\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"scroll\":{\"keywords\":[\"documents\",\"ancient\",\"history\",\"paper\"],\"char\":\"📜\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"page_with_curl\":{\"keywords\":[\"documents\",\"office\",\"paper\"],\"char\":\"📃\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bookmark_tabs\":{\"keywords\":[\"favorite\",\"save\",\"order\",\"tidy\"],\"char\":\"📑\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"bar_chart\":{\"keywords\":[\"graph\",\"presentation\",\"stats\"],\"char\":\"📊\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"chart_with_upwards_trend\":{\"keywords\":[\"graph\",\"presentation\",\"stats\",\"recovery\",\"business\",\"economics\",\"money\",\"sales\",\"good\",\"success\"],\"char\":\"📈\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"chart_with_downwards_trend\":{\"keywords\":[\"graph\",\"presentation\",\"stats\",\"recession\",\"business\",\"economics\",\"money\",\"sales\",\"bad\",\"failure\"],\"char\":\"📉\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"page_facing_up\":{\"keywords\":[\"documents\",\"office\",\"paper\",\"information\"],\"char\":\"📄\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"date\":{\"keywords\":[\"calendar\",\"schedule\"],\"char\":\"📅\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"calendar\":{\"keywords\":[\"schedule\",\"date\",\"planning\"],\"char\":\"📆\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"spiral_calendar\":{\"keywords\":[\"date\",\"schedule\",\"planning\"],\"char\":\"🗓\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"card_index\":{\"keywords\":[\"business\",\"stationery\"],\"char\":\"📇\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"card_file_box\":{\"keywords\":[\"business\",\"stationery\"],\"char\":\"🗃\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"ballot_box\":{\"keywords\":[\"election\",\"vote\"],\"char\":\"🗳\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"file_cabinet\":{\"keywords\":[\"filing\",\"organizing\"],\"char\":\"🗄\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"clipboard\":{\"keywords\":[\"stationery\",\"documents\"],\"char\":\"📋\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"spiral_notepad\":{\"keywords\":[\"memo\",\"stationery\"],\"char\":\"🗒\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"file_folder\":{\"keywords\":[\"documents\",\"business\",\"office\"],\"char\":\"📁\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"open_file_folder\":{\"keywords\":[\"documents\",\"load\"],\"char\":\"📂\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"card_index_dividers\":{\"keywords\":[\"organizing\",\"business\",\"stationery\"],\"char\":\"🗂\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"newspaper_roll\":{\"keywords\":[\"press\",\"headline\"],\"char\":\"🗞\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"newspaper\":{\"keywords\":[\"press\",\"headline\"],\"char\":\"📰\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"notebook\":{\"keywords\":[\"stationery\",\"record\",\"notes\",\"paper\",\"study\"],\"char\":\"📓\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"closed_book\":{\"keywords\":[\"read\",\"library\",\"knowledge\",\"textbook\",\"learn\"],\"char\":\"📕\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"green_book\":{\"keywords\":[\"read\",\"library\",\"knowledge\",\"study\"],\"char\":\"📗\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"blue_book\":{\"keywords\":[\"read\",\"library\",\"knowledge\",\"learn\",\"study\"],\"char\":\"📘\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"orange_book\":{\"keywords\":[\"read\",\"library\",\"knowledge\",\"textbook\",\"study\"],\"char\":\"📙\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"notebook_with_decorative_cover\":{\"keywords\":[\"classroom\",\"notes\",\"record\",\"paper\",\"study\"],\"char\":\"📔\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"ledger\":{\"keywords\":[\"notes\",\"paper\"],\"char\":\"📒\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"books\":{\"keywords\":[\"literature\",\"library\",\"study\"],\"char\":\"📚\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"open_book\":{\"keywords\":[\"book\",\"read\",\"library\",\"knowledge\",\"literature\",\"learn\",\"study\"],\"char\":\"📖\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"link\":{\"keywords\":[\"rings\",\"url\"],\"char\":\"🔗\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"paperclip\":{\"keywords\":[\"documents\",\"stationery\"],\"char\":\"📎\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"paperclips\":{\"keywords\":[\"documents\",\"stationery\"],\"char\":\"🖇\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"scissors\":{\"keywords\":[\"stationery\",\"cut\"],\"char\":\"✂️\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"triangular_ruler\":{\"keywords\":[\"stationery\",\"math\",\"architect\",\"sketch\"],\"char\":\"📐\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"straight_ruler\":{\"keywords\":[\"stationery\",\"calculate\",\"length\",\"math\",\"school\",\"drawing\",\"architect\",\"sketch\"],\"char\":\"📏\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pushpin\":{\"keywords\":[\"stationery\",\"mark\",\"here\"],\"char\":\"📌\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"round_pushpin\":{\"keywords\":[\"stationery\",\"location\",\"map\",\"here\"],\"char\":\"📍\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"triangular_flag_on_post\":{\"keywords\":[\"mark\",\"milestone\",\"place\"],\"char\":\"🚩\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"white_flag\":{\"keywords\":[\"losing\",\"loser\",\"lost\",\"surrender\",\"give up\",\"fail\"],\"char\":\"🏳\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"black_flag\":{\"keywords\":[\"pirate\"],\"char\":\"🏴\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"rainbow_flag\":{\"keywords\":[\"flag\",\"rainbow\",\"pride\",\"gay\",\"lgbt\",\"glbt\",\"queer\",\"homosexual\",\"lesbian\",\"bisexual\",\"transgender\"],\"char\":\"🏳️‍🌈\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"closed_lock_with_key\":{\"keywords\":[\"security\",\"privacy\"],\"char\":\"🔐\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"lock\":{\"keywords\":[\"security\",\"password\",\"padlock\"],\"char\":\"🔒\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"unlock\":{\"keywords\":[\"privacy\",\"security\"],\"char\":\"🔓\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"lock_with_ink_pen\":{\"keywords\":[\"security\",\"secret\"],\"char\":\"🔏\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pen\":{\"keywords\":[\"stationery\",\"writing\",\"write\"],\"char\":\"🖊\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"fountain_pen\":{\"keywords\":[\"stationery\",\"writing\",\"write\"],\"char\":\"🖋\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"black_nib\":{\"keywords\":[\"pen\",\"stationery\",\"writing\",\"write\"],\"char\":\"✒️\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"memo\":{\"keywords\":[\"write\",\"documents\",\"stationery\",\"pencil\",\"paper\",\"writing\",\"legal\",\"exam\",\"quiz\",\"test\",\"study\",\"compose\"],\"char\":\"📝\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"pencil2\":{\"keywords\":[\"stationery\",\"write\",\"paper\",\"writing\",\"school\",\"study\"],\"char\":\"✏️\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"crayon\":{\"keywords\":[\"drawing\",\"creativity\"],\"char\":\"🖍\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"paintbrush\":{\"keywords\":[\"drawing\",\"creativity\",\"art\"],\"char\":\"🖌\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mag\":{\"keywords\":[\"search\",\"zoom\",\"find\",\"detective\"],\"char\":\"🔍\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"mag_right\":{\"keywords\":[\"search\",\"zoom\",\"find\",\"detective\"],\"char\":\"🔎\",\"fitzpatrick_scale\":false,\"category\":\"objects\"},\"heart\":{\"keywords\":[\"love\",\"like\",\"valentines\"],\"char\":\"❤️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"yellow_heart\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"green_heart\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💚\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"blue_heart\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💙\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"purple_heart\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💜\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_heart\":{\"keywords\":[\"evil\"],\"char\":\"🖤\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"broken_heart\":{\"keywords\":[\"sad\",\"sorry\",\"break\",\"heart\",\"heartbreak\"],\"char\":\"💔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_heart_exclamation\":{\"keywords\":[\"decoration\",\"love\"],\"char\":\"❣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"two_hearts\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\",\"heart\"],\"char\":\"💕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"revolving_hearts\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💞\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heartbeat\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\",\"pink\",\"heart\"],\"char\":\"💓\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heartpulse\":{\"keywords\":[\"like\",\"love\",\"affection\",\"valentines\",\"pink\"],\"char\":\"💗\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sparkling_heart\":{\"keywords\":[\"love\",\"like\",\"affection\",\"valentines\"],\"char\":\"💖\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cupid\":{\"keywords\":[\"love\",\"like\",\"heart\",\"affection\",\"valentines\"],\"char\":\"💘\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"gift_heart\":{\"keywords\":[\"love\",\"valentines\"],\"char\":\"💝\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heart_decoration\":{\"keywords\":[\"purple-square\",\"love\",\"like\"],\"char\":\"💟\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"peace_symbol\":{\"keywords\":[\"hippie\"],\"char\":\"☮\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"latin_cross\":{\"keywords\":[\"christianity\"],\"char\":\"✝\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"star_and_crescent\":{\"keywords\":[\"islam\"],\"char\":\"☪\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"om\":{\"keywords\":[\"hinduism\",\"buddhism\",\"sikhism\",\"jainism\"],\"char\":\"🕉\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"wheel_of_dharma\":{\"keywords\":[\"hinduism\",\"buddhism\",\"sikhism\",\"jainism\"],\"char\":\"☸\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"star_of_david\":{\"keywords\":[\"judaism\"],\"char\":\"✡\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"six_pointed_star\":{\"keywords\":[\"purple-square\",\"religion\",\"jewish\",\"hexagram\"],\"char\":\"🔯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"menorah\":{\"keywords\":[\"hanukkah\",\"candles\",\"jewish\"],\"char\":\"🕎\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"yin_yang\":{\"keywords\":[\"balance\"],\"char\":\"☯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"orthodox_cross\":{\"keywords\":[\"suppedaneum\",\"religion\"],\"char\":\"☦\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"place_of_worship\":{\"keywords\":[\"religion\",\"church\",\"temple\",\"prayer\"],\"char\":\"🛐\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ophiuchus\":{\"keywords\":[\"sign\",\"purple-square\",\"constellation\",\"astrology\"],\"char\":\"⛎\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"aries\":{\"keywords\":[\"sign\",\"purple-square\",\"zodiac\",\"astrology\"],\"char\":\"♈\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"taurus\":{\"keywords\":[\"purple-square\",\"sign\",\"zodiac\",\"astrology\"],\"char\":\"♉\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"gemini\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\"],\"char\":\"♊\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cancer\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\"],\"char\":\"♋\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"leo\":{\"keywords\":[\"sign\",\"purple-square\",\"zodiac\",\"astrology\"],\"char\":\"♌\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"virgo\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\"],\"char\":\"♍\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"libra\":{\"keywords\":[\"sign\",\"purple-square\",\"zodiac\",\"astrology\"],\"char\":\"♎\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"scorpius\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\",\"scorpio\"],\"char\":\"♏\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sagittarius\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\"],\"char\":\"♐\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"capricorn\":{\"keywords\":[\"sign\",\"zodiac\",\"purple-square\",\"astrology\"],\"char\":\"♑\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"aquarius\":{\"keywords\":[\"sign\",\"purple-square\",\"zodiac\",\"astrology\"],\"char\":\"♒\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"pisces\":{\"keywords\":[\"purple-square\",\"sign\",\"zodiac\",\"astrology\"],\"char\":\"♓\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"id\":{\"keywords\":[\"purple-square\",\"words\"],\"char\":\"🆔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"atom_symbol\":{\"keywords\":[\"science\",\"physics\",\"chemistry\"],\"char\":\"⚛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u7a7a\":{\"keywords\":[\"kanji\",\"japanese\",\"chinese\",\"empty\",\"sky\",\"blue-square\"],\"char\":\"🈳\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u5272\":{\"keywords\":[\"cut\",\"divide\",\"chinese\",\"kanji\",\"pink-square\"],\"char\":\"🈹\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"radioactive\":{\"keywords\":[\"nuclear\",\"danger\"],\"char\":\"☢\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"biohazard\":{\"keywords\":[\"danger\"],\"char\":\"☣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"mobile_phone_off\":{\"keywords\":[\"mute\",\"orange-square\",\"silence\",\"quiet\"],\"char\":\"📴\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"vibration_mode\":{\"keywords\":[\"orange-square\",\"phone\"],\"char\":\"📳\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u6709\":{\"keywords\":[\"orange-square\",\"chinese\",\"have\",\"kanji\"],\"char\":\"🈶\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u7121\":{\"keywords\":[\"nothing\",\"chinese\",\"kanji\",\"japanese\",\"orange-square\"],\"char\":\"🈚\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u7533\":{\"keywords\":[\"chinese\",\"japanese\",\"kanji\",\"orange-square\"],\"char\":\"🈸\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u55b6\":{\"keywords\":[\"japanese\",\"opening hours\",\"orange-square\"],\"char\":\"🈺\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u6708\":{\"keywords\":[\"chinese\",\"month\",\"moon\",\"japanese\",\"orange-square\",\"kanji\"],\"char\":\"🈷️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"eight_pointed_black_star\":{\"keywords\":[\"orange-square\",\"shape\",\"polygon\"],\"char\":\"✴️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"vs\":{\"keywords\":[\"words\",\"orange-square\"],\"char\":\"🆚\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"accept\":{\"keywords\":[\"ok\",\"good\",\"chinese\",\"kanji\",\"agree\",\"yes\",\"orange-circle\"],\"char\":\"🉑\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_flower\":{\"keywords\":[\"japanese\",\"spring\"],\"char\":\"💮\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ideograph_advantage\":{\"keywords\":[\"chinese\",\"kanji\",\"obtain\",\"get\",\"circle\"],\"char\":\"🉐\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"secret\":{\"keywords\":[\"privacy\",\"chinese\",\"sshh\",\"kanji\",\"red-circle\"],\"char\":\"㊙️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"congratulations\":{\"keywords\":[\"chinese\",\"kanji\",\"japanese\",\"red-circle\"],\"char\":\"㊗️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u5408\":{\"keywords\":[\"japanese\",\"chinese\",\"join\",\"kanji\",\"red-square\"],\"char\":\"🈴\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u6e80\":{\"keywords\":[\"full\",\"chinese\",\"japanese\",\"red-square\",\"kanji\"],\"char\":\"🈵\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u7981\":{\"keywords\":[\"kanji\",\"japanese\",\"chinese\",\"forbidden\",\"limit\",\"restricted\",\"red-square\"],\"char\":\"🈲\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"a\":{\"keywords\":[\"red-square\",\"alphabet\",\"letter\"],\"char\":\"🅰️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"b\":{\"keywords\":[\"red-square\",\"alphabet\",\"letter\"],\"char\":\"🅱️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ab\":{\"keywords\":[\"red-square\",\"alphabet\"],\"char\":\"🆎\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cl\":{\"keywords\":[\"alphabet\",\"words\",\"red-square\"],\"char\":\"🆑\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"o2\":{\"keywords\":[\"alphabet\",\"red-square\",\"letter\"],\"char\":\"🅾️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sos\":{\"keywords\":[\"help\",\"red-square\",\"words\",\"emergency\",\"911\"],\"char\":\"🆘\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_entry\":{\"keywords\":[\"limit\",\"security\",\"privacy\",\"bad\",\"denied\",\"stop\",\"circle\"],\"char\":\"⛔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"name_badge\":{\"keywords\":[\"fire\",\"forbid\"],\"char\":\"📛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_entry_sign\":{\"keywords\":[\"forbid\",\"stop\",\"limit\",\"denied\",\"disallow\",\"circle\"],\"char\":\"🚫\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"x\":{\"keywords\":[\"no\",\"delete\",\"remove\",\"cancel\"],\"char\":\"❌\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"o\":{\"keywords\":[\"circle\",\"round\"],\"char\":\"⭕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"stop_sign\":{\"keywords\":[\"stop\"],\"char\":\"🛑\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"anger\":{\"keywords\":[\"angry\",\"mad\"],\"char\":\"💢\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"hotsprings\":{\"keywords\":[\"bath\",\"warm\",\"relax\"],\"char\":\"♨️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_pedestrians\":{\"keywords\":[\"rules\",\"crossing\",\"walking\",\"circle\"],\"char\":\"🚷\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"do_not_litter\":{\"keywords\":[\"trash\",\"bin\",\"garbage\",\"circle\"],\"char\":\"🚯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_bicycles\":{\"keywords\":[\"cyclist\",\"prohibited\",\"circle\"],\"char\":\"🚳\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"non-potable_water\":{\"keywords\":[\"drink\",\"faucet\",\"tap\",\"circle\"],\"char\":\"🚱\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"underage\":{\"keywords\":[\"18\",\"drink\",\"pub\",\"night\",\"minor\",\"circle\"],\"char\":\"🔞\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_mobile_phones\":{\"keywords\":[\"iphone\",\"mute\",\"circle\"],\"char\":\"📵\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"exclamation\":{\"keywords\":[\"heavy_exclamation_mark\",\"danger\",\"surprise\",\"punctuation\",\"wow\",\"warning\"],\"char\":\"❗\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"grey_exclamation\":{\"keywords\":[\"surprise\",\"punctuation\",\"gray\",\"wow\",\"warning\"],\"char\":\"❕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"question\":{\"keywords\":[\"doubt\",\"confused\"],\"char\":\"❓\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"grey_question\":{\"keywords\":[\"doubts\",\"gray\",\"huh\",\"confused\"],\"char\":\"❔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"bangbang\":{\"keywords\":[\"exclamation\",\"surprise\"],\"char\":\"‼️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"interrobang\":{\"keywords\":[\"wat\",\"punctuation\",\"surprise\"],\"char\":\"⁉️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"low_brightness\":{\"keywords\":[\"sun\",\"afternoon\",\"warm\",\"summer\"],\"char\":\"🔅\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"high_brightness\":{\"keywords\":[\"sun\",\"light\"],\"char\":\"🔆\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"trident\":{\"keywords\":[\"weapon\",\"spear\"],\"char\":\"🔱\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"fleur_de_lis\":{\"keywords\":[\"decorative\",\"scout\"],\"char\":\"⚜\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"part_alternation_mark\":{\"keywords\":[\"graph\",\"presentation\",\"stats\",\"business\",\"economics\",\"bad\"],\"char\":\"〽️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"warning\":{\"keywords\":[\"exclamation\",\"wip\",\"alert\",\"error\",\"problem\",\"issue\"],\"char\":\"⚠️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"children_crossing\":{\"keywords\":[\"school\",\"warning\",\"danger\",\"sign\",\"driving\",\"yellow-diamond\"],\"char\":\"🚸\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"beginner\":{\"keywords\":[\"badge\",\"shield\"],\"char\":\"🔰\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"recycle\":{\"keywords\":[\"arrow\",\"environment\",\"garbage\",\"trash\"],\"char\":\"♻️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"u6307\":{\"keywords\":[\"chinese\",\"point\",\"green-square\",\"kanji\"],\"char\":\"🈯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"chart\":{\"keywords\":[\"green-square\",\"graph\",\"presentation\",\"stats\"],\"char\":\"💹\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sparkle\":{\"keywords\":[\"stars\",\"green-square\",\"awesome\",\"good\",\"fireworks\"],\"char\":\"❇️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"eight_spoked_asterisk\":{\"keywords\":[\"star\",\"sparkle\",\"green-square\"],\"char\":\"✳️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"negative_squared_cross_mark\":{\"keywords\":[\"x\",\"green-square\",\"no\",\"deny\"],\"char\":\"❎\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_check_mark\":{\"keywords\":[\"green-square\",\"ok\",\"agree\",\"vote\",\"election\",\"answer\",\"tick\"],\"char\":\"✅\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"diamond_shape_with_a_dot_inside\":{\"keywords\":[\"jewel\",\"blue\",\"gem\",\"crystal\",\"fancy\"],\"char\":\"💠\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cyclone\":{\"keywords\":[\"weather\",\"swirl\",\"blue\",\"cloud\",\"vortex\",\"spiral\",\"whirlpool\",\"spin\",\"tornado\",\"hurricane\",\"typhoon\"],\"char\":\"🌀\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"loop\":{\"keywords\":[\"tape\",\"cassette\"],\"char\":\"➿\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"globe_with_meridians\":{\"keywords\":[\"earth\",\"international\",\"world\",\"internet\",\"interweb\",\"i18n\"],\"char\":\"🌐\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"m\":{\"keywords\":[\"alphabet\",\"blue-circle\",\"letter\"],\"char\":\"Ⓜ️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"atm\":{\"keywords\":[\"money\",\"sales\",\"cash\",\"blue-square\",\"payment\",\"bank\"],\"char\":\"🏧\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sa\":{\"keywords\":[\"japanese\",\"blue-square\",\"katakana\"],\"char\":\"🈂️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"passport_control\":{\"keywords\":[\"custom\",\"blue-square\"],\"char\":\"🛂\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"customs\":{\"keywords\":[\"passport\",\"border\",\"blue-square\"],\"char\":\"🛃\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"baggage_claim\":{\"keywords\":[\"blue-square\",\"airport\",\"transport\"],\"char\":\"🛄\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"left_luggage\":{\"keywords\":[\"blue-square\",\"travel\"],\"char\":\"🛅\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"wheelchair\":{\"keywords\":[\"blue-square\",\"disabled\",\"a11y\",\"accessibility\"],\"char\":\"♿\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_smoking\":{\"keywords\":[\"cigarette\",\"blue-square\",\"smell\",\"smoke\"],\"char\":\"🚭\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"wc\":{\"keywords\":[\"toilet\",\"restroom\",\"blue-square\"],\"char\":\"🚾\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"parking\":{\"keywords\":[\"cars\",\"blue-square\",\"alphabet\",\"letter\"],\"char\":\"🅿️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"potable_water\":{\"keywords\":[\"blue-square\",\"liquid\",\"restroom\",\"cleaning\",\"faucet\"],\"char\":\"🚰\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"mens\":{\"keywords\":[\"toilet\",\"restroom\",\"wc\",\"blue-square\",\"gender\",\"male\"],\"char\":\"🚹\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"womens\":{\"keywords\":[\"purple-square\",\"woman\",\"female\",\"toilet\",\"loo\",\"restroom\",\"gender\"],\"char\":\"🚺\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"baby_symbol\":{\"keywords\":[\"orange-square\",\"child\"],\"char\":\"🚼\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"restroom\":{\"keywords\":[\"blue-square\",\"toilet\",\"refresh\",\"wc\",\"gender\"],\"char\":\"🚻\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"put_litter_in_its_place\":{\"keywords\":[\"blue-square\",\"sign\",\"human\",\"info\"],\"char\":\"🚮\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cinema\":{\"keywords\":[\"blue-square\",\"record\",\"film\",\"movie\",\"curtain\",\"stage\",\"theater\"],\"char\":\"🎦\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"signal_strength\":{\"keywords\":[\"blue-square\",\"reception\",\"phone\",\"internet\",\"connection\",\"wifi\",\"bluetooth\",\"bars\"],\"char\":\"📶\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"koko\":{\"keywords\":[\"blue-square\",\"here\",\"katakana\",\"japanese\",\"destination\"],\"char\":\"🈁\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ng\":{\"keywords\":[\"blue-square\",\"words\",\"shape\",\"icon\"],\"char\":\"🆖\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ok\":{\"keywords\":[\"good\",\"agree\",\"yes\",\"blue-square\"],\"char\":\"🆗\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"up\":{\"keywords\":[\"blue-square\",\"above\",\"high\"],\"char\":\"🆙\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"cool\":{\"keywords\":[\"words\",\"blue-square\"],\"char\":\"🆒\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"new\":{\"keywords\":[\"blue-square\",\"words\",\"start\"],\"char\":\"🆕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"free\":{\"keywords\":[\"blue-square\",\"words\"],\"char\":\"🆓\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"zero\":{\"keywords\":[\"0\",\"numbers\",\"blue-square\",\"null\"],\"char\":\"0️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"one\":{\"keywords\":[\"blue-square\",\"numbers\",\"1\"],\"char\":\"1️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"two\":{\"keywords\":[\"numbers\",\"2\",\"prime\",\"blue-square\"],\"char\":\"2️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"three\":{\"keywords\":[\"3\",\"numbers\",\"prime\",\"blue-square\"],\"char\":\"3️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"four\":{\"keywords\":[\"4\",\"numbers\",\"blue-square\"],\"char\":\"4️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"five\":{\"keywords\":[\"5\",\"numbers\",\"blue-square\",\"prime\"],\"char\":\"5️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"six\":{\"keywords\":[\"6\",\"numbers\",\"blue-square\"],\"char\":\"6️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"seven\":{\"keywords\":[\"7\",\"numbers\",\"blue-square\",\"prime\"],\"char\":\"7️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"eight\":{\"keywords\":[\"8\",\"blue-square\",\"numbers\"],\"char\":\"8️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"nine\":{\"keywords\":[\"blue-square\",\"numbers\",\"9\"],\"char\":\"9️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"keycap_ten\":{\"keywords\":[\"numbers\",\"10\",\"blue-square\"],\"char\":\"🔟\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"asterisk\":{\"keywords\":[\"star\",\"keycap\"],\"char\":\"*⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_forward\":{\"keywords\":[\"blue-square\",\"right\",\"direction\",\"play\"],\"char\":\"▶️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"pause_button\":{\"keywords\":[\"pause\",\"blue-square\"],\"char\":\"⏸\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"next_track_button\":{\"keywords\":[\"forward\",\"next\",\"blue-square\"],\"char\":\"⏭\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"stop_button\":{\"keywords\":[\"blue-square\"],\"char\":\"⏹\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"record_button\":{\"keywords\":[\"blue-square\"],\"char\":\"⏺\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"play_or_pause_button\":{\"keywords\":[\"blue-square\",\"play\",\"pause\"],\"char\":\"⏯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"previous_track_button\":{\"keywords\":[\"backward\"],\"char\":\"⏮\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"fast_forward\":{\"keywords\":[\"blue-square\",\"play\",\"speed\",\"continue\"],\"char\":\"⏩\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"rewind\":{\"keywords\":[\"play\",\"blue-square\"],\"char\":\"⏪\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"twisted_rightwards_arrows\":{\"keywords\":[\"blue-square\",\"shuffle\",\"music\",\"random\"],\"char\":\"🔀\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"repeat\":{\"keywords\":[\"loop\",\"record\"],\"char\":\"🔁\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"repeat_one\":{\"keywords\":[\"blue-square\",\"loop\"],\"char\":\"🔂\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_backward\":{\"keywords\":[\"blue-square\",\"left\",\"direction\"],\"char\":\"◀️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_up_small\":{\"keywords\":[\"blue-square\",\"triangle\",\"direction\",\"point\",\"forward\",\"top\"],\"char\":\"🔼\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_down_small\":{\"keywords\":[\"blue-square\",\"direction\",\"bottom\"],\"char\":\"🔽\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_double_up\":{\"keywords\":[\"blue-square\",\"direction\",\"top\"],\"char\":\"⏫\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_double_down\":{\"keywords\":[\"blue-square\",\"direction\",\"bottom\"],\"char\":\"⏬\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_right\":{\"keywords\":[\"blue-square\",\"next\"],\"char\":\"➡️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_left\":{\"keywords\":[\"blue-square\",\"previous\",\"back\"],\"char\":\"⬅️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_up\":{\"keywords\":[\"blue-square\",\"continue\",\"top\",\"direction\"],\"char\":\"⬆️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_down\":{\"keywords\":[\"blue-square\",\"direction\",\"bottom\"],\"char\":\"⬇️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_upper_right\":{\"keywords\":[\"blue-square\",\"point\",\"direction\",\"diagonal\",\"northeast\"],\"char\":\"↗️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_lower_right\":{\"keywords\":[\"blue-square\",\"direction\",\"diagonal\",\"southeast\"],\"char\":\"↘️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_lower_left\":{\"keywords\":[\"blue-square\",\"direction\",\"diagonal\",\"southwest\"],\"char\":\"↙️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_upper_left\":{\"keywords\":[\"blue-square\",\"point\",\"direction\",\"diagonal\",\"northwest\"],\"char\":\"↖️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_up_down\":{\"keywords\":[\"blue-square\",\"direction\",\"way\",\"vertical\"],\"char\":\"↕️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"left_right_arrow\":{\"keywords\":[\"shape\",\"direction\",\"horizontal\",\"sideways\"],\"char\":\"↔️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrows_counterclockwise\":{\"keywords\":[\"blue-square\",\"sync\",\"cycle\"],\"char\":\"🔄\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_right_hook\":{\"keywords\":[\"blue-square\",\"return\",\"rotate\",\"direction\"],\"char\":\"↪️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"leftwards_arrow_with_hook\":{\"keywords\":[\"back\",\"return\",\"blue-square\",\"undo\",\"enter\"],\"char\":\"↩️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_heading_up\":{\"keywords\":[\"blue-square\",\"direction\",\"top\"],\"char\":\"⤴️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrow_heading_down\":{\"keywords\":[\"blue-square\",\"direction\",\"bottom\"],\"char\":\"⤵️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"hash\":{\"keywords\":[\"symbol\",\"blue-square\",\"twitter\"],\"char\":\"#️⃣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"information_source\":{\"keywords\":[\"blue-square\",\"alphabet\",\"letter\"],\"char\":\"ℹ️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"abc\":{\"keywords\":[\"blue-square\",\"alphabet\"],\"char\":\"🔤\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"abcd\":{\"keywords\":[\"blue-square\",\"alphabet\"],\"char\":\"🔡\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"capital_abcd\":{\"keywords\":[\"alphabet\",\"words\",\"blue-square\"],\"char\":\"🔠\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"symbols\":{\"keywords\":[\"blue-square\",\"music\",\"note\",\"ampersand\",\"percent\",\"glyphs\",\"characters\"],\"char\":\"🔣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"musical_note\":{\"keywords\":[\"score\",\"tone\",\"sound\"],\"char\":\"🎵\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"notes\":{\"keywords\":[\"music\",\"score\"],\"char\":\"🎶\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"wavy_dash\":{\"keywords\":[\"draw\",\"line\",\"moustache\",\"mustache\",\"squiggle\",\"scribble\"],\"char\":\"〰️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"curly_loop\":{\"keywords\":[\"scribble\",\"draw\",\"shape\",\"squiggle\"],\"char\":\"➰\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_check_mark\":{\"keywords\":[\"ok\",\"nike\",\"answer\",\"yes\",\"tick\"],\"char\":\"✔️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"arrows_clockwise\":{\"keywords\":[\"sync\",\"cycle\",\"round\",\"repeat\"],\"char\":\"🔃\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_plus_sign\":{\"keywords\":[\"math\",\"calculation\",\"addition\",\"more\",\"increase\"],\"char\":\"➕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_minus_sign\":{\"keywords\":[\"math\",\"calculation\",\"subtract\",\"less\"],\"char\":\"➖\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_division_sign\":{\"keywords\":[\"divide\",\"math\",\"calculation\"],\"char\":\"➗\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_multiplication_x\":{\"keywords\":[\"math\",\"calculation\"],\"char\":\"✖️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"heavy_dollar_sign\":{\"keywords\":[\"money\",\"sales\",\"payment\",\"currency\",\"buck\"],\"char\":\"💲\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"currency_exchange\":{\"keywords\":[\"money\",\"sales\",\"dollar\",\"travel\"],\"char\":\"💱\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"copyright\":{\"keywords\":[\"ip\",\"license\",\"circle\",\"law\",\"legal\"],\"char\":\"©️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"registered\":{\"keywords\":[\"alphabet\",\"circle\"],\"char\":\"®️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"tm\":{\"keywords\":[\"trademark\",\"brand\",\"law\",\"legal\"],\"char\":\"™️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"end\":{\"keywords\":[\"words\",\"arrow\"],\"char\":\"🔚\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"back\":{\"keywords\":[\"arrow\",\"words\",\"return\"],\"char\":\"🔙\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"on\":{\"keywords\":[\"arrow\",\"words\"],\"char\":\"🔛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"top\":{\"keywords\":[\"words\",\"blue-square\"],\"char\":\"🔝\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"soon\":{\"keywords\":[\"arrow\",\"words\"],\"char\":\"🔜\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"ballot_box_with_check\":{\"keywords\":[\"ok\",\"agree\",\"confirm\",\"black-square\",\"vote\",\"election\",\"yes\",\"tick\"],\"char\":\"☑️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"radio_button\":{\"keywords\":[\"input\",\"old\",\"music\",\"circle\"],\"char\":\"🔘\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_circle\":{\"keywords\":[\"shape\",\"round\"],\"char\":\"⚪\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_circle\":{\"keywords\":[\"shape\",\"button\",\"round\"],\"char\":\"⚫\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"red_circle\":{\"keywords\":[\"shape\",\"error\",\"danger\"],\"char\":\"🔴\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"large_blue_circle\":{\"keywords\":[\"shape\",\"icon\",\"button\"],\"char\":\"🔵\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"small_orange_diamond\":{\"keywords\":[\"shape\",\"jewel\",\"gem\"],\"char\":\"🔸\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"small_blue_diamond\":{\"keywords\":[\"shape\",\"jewel\",\"gem\"],\"char\":\"🔹\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"large_orange_diamond\":{\"keywords\":[\"shape\",\"jewel\",\"gem\"],\"char\":\"🔶\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"large_blue_diamond\":{\"keywords\":[\"shape\",\"jewel\",\"gem\"],\"char\":\"🔷\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"small_red_triangle\":{\"keywords\":[\"shape\",\"direction\",\"up\",\"top\"],\"char\":\"🔺\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_small_square\":{\"keywords\":[\"shape\",\"icon\"],\"char\":\"▪️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_small_square\":{\"keywords\":[\"shape\",\"icon\"],\"char\":\"▫️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_large_square\":{\"keywords\":[\"shape\",\"icon\",\"button\"],\"char\":\"⬛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_large_square\":{\"keywords\":[\"shape\",\"icon\",\"stone\",\"button\"],\"char\":\"⬜\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"small_red_triangle_down\":{\"keywords\":[\"shape\",\"direction\",\"bottom\"],\"char\":\"🔻\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_medium_square\":{\"keywords\":[\"shape\",\"button\",\"icon\"],\"char\":\"◼️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_medium_square\":{\"keywords\":[\"shape\",\"stone\",\"icon\"],\"char\":\"◻️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_medium_small_square\":{\"keywords\":[\"icon\",\"shape\",\"button\"],\"char\":\"◾\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_medium_small_square\":{\"keywords\":[\"shape\",\"stone\",\"icon\",\"button\"],\"char\":\"◽\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_square_button\":{\"keywords\":[\"shape\",\"input\",\"frame\"],\"char\":\"🔲\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"white_square_button\":{\"keywords\":[\"shape\",\"input\"],\"char\":\"🔳\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"speaker\":{\"keywords\":[\"sound\",\"volume\",\"silence\",\"broadcast\"],\"char\":\"🔈\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"sound\":{\"keywords\":[\"volume\",\"speaker\",\"broadcast\"],\"char\":\"🔉\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"loud_sound\":{\"keywords\":[\"volume\",\"noise\",\"noisy\",\"speaker\",\"broadcast\"],\"char\":\"🔊\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"mute\":{\"keywords\":[\"sound\",\"volume\",\"silence\",\"quiet\"],\"char\":\"🔇\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"mega\":{\"keywords\":[\"sound\",\"speaker\",\"volume\"],\"char\":\"📣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"loudspeaker\":{\"keywords\":[\"volume\",\"sound\"],\"char\":\"📢\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"bell\":{\"keywords\":[\"sound\",\"notification\",\"christmas\",\"xmas\",\"chime\"],\"char\":\"🔔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"no_bell\":{\"keywords\":[\"sound\",\"volume\",\"mute\",\"quiet\",\"silent\"],\"char\":\"🔕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"black_joker\":{\"keywords\":[\"poker\",\"cards\",\"game\",\"play\",\"magic\"],\"char\":\"🃏\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"mahjong\":{\"keywords\":[\"game\",\"play\",\"chinese\",\"kanji\"],\"char\":\"🀄\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"spades\":{\"keywords\":[\"poker\",\"cards\",\"suits\",\"magic\"],\"char\":\"♠️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clubs\":{\"keywords\":[\"poker\",\"cards\",\"magic\",\"suits\"],\"char\":\"♣️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"hearts\":{\"keywords\":[\"poker\",\"cards\",\"magic\",\"suits\"],\"char\":\"♥️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"diamonds\":{\"keywords\":[\"poker\",\"cards\",\"magic\",\"suits\"],\"char\":\"♦️\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"flower_playing_cards\":{\"keywords\":[\"game\",\"sunset\",\"red\"],\"char\":\"🎴\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"thought_balloon\":{\"keywords\":[\"bubble\",\"cloud\",\"speech\",\"thinking\",\"dream\"],\"char\":\"💭\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"right_anger_bubble\":{\"keywords\":[\"caption\",\"speech\",\"thinking\",\"mad\"],\"char\":\"🗯\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"speech_balloon\":{\"keywords\":[\"bubble\",\"words\",\"message\",\"talk\",\"chatting\"],\"char\":\"💬\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"left_speech_bubble\":{\"keywords\":[\"words\",\"message\",\"talk\",\"chatting\"],\"char\":\"🗨\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock1\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕐\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock2\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕑\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock3\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕒\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock4\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕓\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock5\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕔\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock6\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\",\"dawn\",\"dusk\"],\"char\":\"🕕\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock7\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕖\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock8\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕗\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock9\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕘\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock10\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕙\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock11\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕚\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock12\":{\"keywords\":[\"time\",\"noon\",\"midnight\",\"midday\",\"late\",\"early\",\"schedule\"],\"char\":\"🕛\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock130\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕜\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock230\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕝\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock330\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕞\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock430\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕟\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock530\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕠\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock630\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕡\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock730\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕢\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock830\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕣\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock930\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕤\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock1030\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕥\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock1130\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕦\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"clock1230\":{\"keywords\":[\"time\",\"late\",\"early\",\"schedule\"],\"char\":\"🕧\",\"fitzpatrick_scale\":false,\"category\":\"symbols\"},\"afghanistan\":{\"keywords\":[\"af\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"aland_islands\":{\"keywords\":[\"Åland\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇽\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"albania\":{\"keywords\":[\"al\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"algeria\":{\"keywords\":[\"dz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇩🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"american_samoa\":{\"keywords\":[\"american\",\"ws\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"andorra\":{\"keywords\":[\"ad\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"angola\":{\"keywords\":[\"ao\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"anguilla\":{\"keywords\":[\"ai\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"antarctica\":{\"keywords\":[\"aq\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇶\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"antigua_barbuda\":{\"keywords\":[\"antigua\",\"barbuda\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"argentina\":{\"keywords\":[\"ar\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"armenia\":{\"keywords\":[\"am\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"aruba\":{\"keywords\":[\"aw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"australia\":{\"keywords\":[\"au\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"austria\":{\"keywords\":[\"at\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"azerbaijan\":{\"keywords\":[\"az\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bahamas\":{\"keywords\":[\"bs\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bahrain\":{\"keywords\":[\"bh\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bangladesh\":{\"keywords\":[\"bd\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"barbados\":{\"keywords\":[\"bb\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇧\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"belarus\":{\"keywords\":[\"by\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"belgium\":{\"keywords\":[\"be\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"belize\":{\"keywords\":[\"bz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"benin\":{\"keywords\":[\"bj\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇯\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bermuda\":{\"keywords\":[\"bm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bhutan\":{\"keywords\":[\"bt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bolivia\":{\"keywords\":[\"bo\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"caribbean_netherlands\":{\"keywords\":[\"bonaire\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇶\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bosnia_herzegovina\":{\"keywords\":[\"bosnia\",\"herzegovina\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"botswana\":{\"keywords\":[\"bw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"brazil\":{\"keywords\":[\"br\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"british_indian_ocean_territory\":{\"keywords\":[\"british\",\"indian\",\"ocean\",\"territory\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"british_virgin_islands\":{\"keywords\":[\"british\",\"virgin\",\"islands\",\"bvi\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"brunei\":{\"keywords\":[\"bn\",\"darussalam\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"bulgaria\":{\"keywords\":[\"bg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"burkina_faso\":{\"keywords\":[\"burkina\",\"faso\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"burundi\":{\"keywords\":[\"bi\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cape_verde\":{\"keywords\":[\"cabo\",\"verde\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇻\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cambodia\":{\"keywords\":[\"kh\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cameroon\":{\"keywords\":[\"cm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"canada\":{\"keywords\":[\"ca\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"canary_islands\":{\"keywords\":[\"canary\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cayman_islands\":{\"keywords\":[\"cayman\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"central_african_republic\":{\"keywords\":[\"central\",\"african\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"chad\":{\"keywords\":[\"td\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"chile\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cn\":{\"keywords\":[\"china\",\"chinese\",\"prc\",\"flag\",\"country\",\"nation\",\"banner\"],\"char\":\"🇨🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"christmas_island\":{\"keywords\":[\"christmas\",\"island\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇽\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cocos_islands\":{\"keywords\":[\"cocos\",\"keeling\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"colombia\":{\"keywords\":[\"co\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"comoros\":{\"keywords\":[\"km\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"congo_brazzaville\":{\"keywords\":[\"congo\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"congo_kinshasa\":{\"keywords\":[\"congo\",\"democratic\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cook_islands\":{\"keywords\":[\"cook\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"costa_rica\":{\"keywords\":[\"costa\",\"rica\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"croatia\":{\"keywords\":[\"hr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇭🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cuba\":{\"keywords\":[\"cu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"curacao\":{\"keywords\":[\"curaçao\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cyprus\":{\"keywords\":[\"cy\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"czech_republic\":{\"keywords\":[\"cz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"denmark\":{\"keywords\":[\"dk\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇩🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"djibouti\":{\"keywords\":[\"dj\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇩🇯\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"dominica\":{\"keywords\":[\"dm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇩🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"dominican_republic\":{\"keywords\":[\"dominican\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇩🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ecuador\":{\"keywords\":[\"ec\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"egypt\":{\"keywords\":[\"eg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"el_salvador\":{\"keywords\":[\"el\",\"salvador\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇻\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"equatorial_guinea\":{\"keywords\":[\"equatorial\",\"gn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇶\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"eritrea\":{\"keywords\":[\"er\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"estonia\":{\"keywords\":[\"ee\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ethiopia\":{\"keywords\":[\"et\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"eu\":{\"keywords\":[\"european\",\"union\",\"flag\",\"banner\"],\"char\":\"🇪🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"falkland_islands\":{\"keywords\":[\"falkland\",\"islands\",\"malvinas\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇫🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"faroe_islands\":{\"keywords\":[\"faroe\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇫🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"fiji\":{\"keywords\":[\"fj\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇫🇯\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"finland\":{\"keywords\":[\"fi\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇫🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"fr\":{\"keywords\":[\"banner\",\"flag\",\"nation\",\"france\",\"french\",\"country\"],\"char\":\"🇫🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"french_guiana\":{\"keywords\":[\"french\",\"guiana\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"french_polynesia\":{\"keywords\":[\"french\",\"polynesia\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"french_southern_territories\":{\"keywords\":[\"french\",\"southern\",\"territories\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"gabon\":{\"keywords\":[\"ga\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"gambia\":{\"keywords\":[\"gm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"georgia\":{\"keywords\":[\"ge\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"de\":{\"keywords\":[\"german\",\"nation\",\"flag\",\"country\",\"banner\"],\"char\":\"🇩🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ghana\":{\"keywords\":[\"gh\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"gibraltar\":{\"keywords\":[\"gi\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"greece\":{\"keywords\":[\"gr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"greenland\":{\"keywords\":[\"gl\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"grenada\":{\"keywords\":[\"gd\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guadeloupe\":{\"keywords\":[\"gp\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇵\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guam\":{\"keywords\":[\"gu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guatemala\":{\"keywords\":[\"gt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guernsey\":{\"keywords\":[\"gg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guinea\":{\"keywords\":[\"gn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guinea_bissau\":{\"keywords\":[\"gw\",\"bissau\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"guyana\":{\"keywords\":[\"gy\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"haiti\":{\"keywords\":[\"ht\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇭🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"honduras\":{\"keywords\":[\"hn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇭🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"hong_kong\":{\"keywords\":[\"hong\",\"kong\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇭🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"hungary\":{\"keywords\":[\"hu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇭🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"iceland\":{\"keywords\":[\"is\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"india\":{\"keywords\":[\"in\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"indonesia\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"iran\":{\"keywords\":[\"iran,\",\"islamic\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"iraq\":{\"keywords\":[\"iq\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇶\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ireland\":{\"keywords\":[\"ie\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"isle_of_man\":{\"keywords\":[\"isle\",\"man\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"israel\":{\"keywords\":[\"il\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"it\":{\"keywords\":[\"italy\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇮🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"cote_divoire\":{\"keywords\":[\"ivory\",\"coast\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"jamaica\":{\"keywords\":[\"jm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇯🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"jp\":{\"keywords\":[\"japanese\",\"nation\",\"flag\",\"country\",\"banner\"],\"char\":\"🇯🇵\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"jersey\":{\"keywords\":[\"je\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇯🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"jordan\":{\"keywords\":[\"jo\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇯🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kazakhstan\":{\"keywords\":[\"kz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kenya\":{\"keywords\":[\"ke\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kiribati\":{\"keywords\":[\"ki\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kosovo\":{\"keywords\":[\"xk\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇽🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kuwait\":{\"keywords\":[\"kw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kyrgyzstan\":{\"keywords\":[\"kg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"laos\":{\"keywords\":[\"lao\",\"democratic\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"latvia\":{\"keywords\":[\"lv\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇻\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"lebanon\":{\"keywords\":[\"lb\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇧\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"lesotho\":{\"keywords\":[\"ls\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"liberia\":{\"keywords\":[\"lr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"libya\":{\"keywords\":[\"ly\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"liechtenstein\":{\"keywords\":[\"li\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"lithuania\":{\"keywords\":[\"lt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"luxembourg\":{\"keywords\":[\"lu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"macau\":{\"keywords\":[\"macao\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"macedonia\":{\"keywords\":[\"macedonia,\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"madagascar\":{\"keywords\":[\"mg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"malawi\":{\"keywords\":[\"mw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"malaysia\":{\"keywords\":[\"my\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"maldives\":{\"keywords\":[\"mv\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇻\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mali\":{\"keywords\":[\"ml\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"malta\":{\"keywords\":[\"mt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"marshall_islands\":{\"keywords\":[\"marshall\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"martinique\":{\"keywords\":[\"mq\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇶\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mauritania\":{\"keywords\":[\"mr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mauritius\":{\"keywords\":[\"mu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mayotte\":{\"keywords\":[\"yt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇾🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mexico\":{\"keywords\":[\"mx\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇽\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"micronesia\":{\"keywords\":[\"micronesia,\",\"federated\",\"states\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇫🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"moldova\":{\"keywords\":[\"moldova,\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"monaco\":{\"keywords\":[\"mc\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mongolia\":{\"keywords\":[\"mn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"montenegro\":{\"keywords\":[\"me\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"montserrat\":{\"keywords\":[\"ms\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"morocco\":{\"keywords\":[\"ma\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"mozambique\":{\"keywords\":[\"mz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"myanmar\":{\"keywords\":[\"mm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"namibia\":{\"keywords\":[\"na\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"nauru\":{\"keywords\":[\"nr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"nepal\":{\"keywords\":[\"np\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇵\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"netherlands\":{\"keywords\":[\"nl\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"new_caledonia\":{\"keywords\":[\"new\",\"caledonia\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"new_zealand\":{\"keywords\":[\"new\",\"zealand\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"nicaragua\":{\"keywords\":[\"ni\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"niger\":{\"keywords\":[\"ne\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"nigeria\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"niue\":{\"keywords\":[\"nu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"norfolk_island\":{\"keywords\":[\"norfolk\",\"island\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"northern_mariana_islands\":{\"keywords\":[\"northern\",\"mariana\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇲🇵\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"north_korea\":{\"keywords\":[\"north\",\"korea\",\"nation\",\"flag\",\"country\",\"banner\"],\"char\":\"🇰🇵\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"norway\":{\"keywords\":[\"no\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇳🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"oman\":{\"keywords\":[\"om_symbol\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇴🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"pakistan\":{\"keywords\":[\"pk\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"palau\":{\"keywords\":[\"pw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"palestinian_territories\":{\"keywords\":[\"palestine\",\"palestinian\",\"territories\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"panama\":{\"keywords\":[\"pa\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"papua_new_guinea\":{\"keywords\":[\"papua\",\"new\",\"guinea\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"paraguay\":{\"keywords\":[\"py\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"peru\":{\"keywords\":[\"pe\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"philippines\":{\"keywords\":[\"ph\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"pitcairn_islands\":{\"keywords\":[\"pitcairn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"poland\":{\"keywords\":[\"pl\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"portugal\":{\"keywords\":[\"pt\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"puerto_rico\":{\"keywords\":[\"puerto\",\"rico\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"qatar\":{\"keywords\":[\"qa\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇶🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"reunion\":{\"keywords\":[\"réunion\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇷🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"romania\":{\"keywords\":[\"ro\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇷🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ru\":{\"keywords\":[\"russian\",\"federation\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇷🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"rwanda\":{\"keywords\":[\"rw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇷🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_barthelemy\":{\"keywords\":[\"saint\",\"barthélemy\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇧🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_helena\":{\"keywords\":[\"saint\",\"helena\",\"ascension\",\"tristan\",\"cunha\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_kitts_nevis\":{\"keywords\":[\"saint\",\"kitts\",\"nevis\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇰🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_lucia\":{\"keywords\":[\"saint\",\"lucia\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_pierre_miquelon\":{\"keywords\":[\"saint\",\"pierre\",\"miquelon\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇵🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"st_vincent_grenadines\":{\"keywords\":[\"saint\",\"vincent\",\"grenadines\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"samoa\":{\"keywords\":[\"ws\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇼🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"san_marino\":{\"keywords\":[\"san\",\"marino\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sao_tome_principe\":{\"keywords\":[\"sao\",\"tome\",\"principe\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"saudi_arabia\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"senegal\":{\"keywords\":[\"sn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"serbia\":{\"keywords\":[\"rs\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇷🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"seychelles\":{\"keywords\":[\"sc\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sierra_leone\":{\"keywords\":[\"sierra\",\"leone\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"singapore\":{\"keywords\":[\"sg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sint_maarten\":{\"keywords\":[\"sint\",\"maarten\",\"dutch\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇽\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"slovakia\":{\"keywords\":[\"sk\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"slovenia\":{\"keywords\":[\"si\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"solomon_islands\":{\"keywords\":[\"solomon\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇧\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"somalia\":{\"keywords\":[\"so\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"south_africa\":{\"keywords\":[\"south\",\"africa\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇿🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"south_georgia_south_sandwich_islands\":{\"keywords\":[\"south\",\"georgia\",\"sandwich\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇬🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"kr\":{\"keywords\":[\"south\",\"korea\",\"nation\",\"flag\",\"country\",\"banner\"],\"char\":\"🇰🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"south_sudan\":{\"keywords\":[\"south\",\"sd\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"es\":{\"keywords\":[\"spain\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sri_lanka\":{\"keywords\":[\"sri\",\"lanka\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇱🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sudan\":{\"keywords\":[\"sd\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇩\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"suriname\":{\"keywords\":[\"sr\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"swaziland\":{\"keywords\":[\"sz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"sweden\":{\"keywords\":[\"se\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"switzerland\":{\"keywords\":[\"ch\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇨🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"syria\":{\"keywords\":[\"syrian\",\"arab\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇸🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"taiwan\":{\"keywords\":[\"tw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tajikistan\":{\"keywords\":[\"tj\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇯\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tanzania\":{\"keywords\":[\"tanzania,\",\"united\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"thailand\":{\"keywords\":[\"th\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"timor_leste\":{\"keywords\":[\"timor\",\"leste\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇱\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"togo\":{\"keywords\":[\"tg\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tokelau\":{\"keywords\":[\"tk\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇰\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tonga\":{\"keywords\":[\"to\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇴\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"trinidad_tobago\":{\"keywords\":[\"trinidad\",\"tobago\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇹\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tunisia\":{\"keywords\":[\"tn\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tr\":{\"keywords\":[\"turkey\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇷\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"turkmenistan\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"turks_caicos_islands\":{\"keywords\":[\"turks\",\"caicos\",\"islands\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇨\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"tuvalu\":{\"keywords\":[\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇹🇻\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"uganda\":{\"keywords\":[\"ug\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇺🇬\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"ukraine\":{\"keywords\":[\"ua\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇺🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"united_arab_emirates\":{\"keywords\":[\"united\",\"arab\",\"emirates\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇦🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"uk\":{\"keywords\":[\"united\",\"kingdom\",\"great\",\"britain\",\"northern\",\"ireland\",\"flag\",\"nation\",\"country\",\"banner\",\"british\",\"UK\",\"english\",\"england\",\"union jack\"],\"char\":\"🇬🇧\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"us\":{\"keywords\":[\"united\",\"states\",\"america\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇺🇸\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"us_virgin_islands\":{\"keywords\":[\"virgin\",\"islands\",\"us\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇮\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"uruguay\":{\"keywords\":[\"uy\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇺🇾\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"uzbekistan\":{\"keywords\":[\"uz\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇺🇿\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"vanuatu\":{\"keywords\":[\"vu\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇺\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"vatican_city\":{\"keywords\":[\"vatican\",\"city\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇦\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"venezuela\":{\"keywords\":[\"ve\",\"bolivarian\",\"republic\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"vietnam\":{\"keywords\":[\"viet\",\"nam\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇻🇳\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"wallis_futuna\":{\"keywords\":[\"wallis\",\"futuna\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇼🇫\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"western_sahara\":{\"keywords\":[\"western\",\"sahara\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇪🇭\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"yemen\":{\"keywords\":[\"ye\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇾🇪\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"zambia\":{\"keywords\":[\"zm\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇿🇲\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"zimbabwe\":{\"keywords\":[\"zw\",\"flag\",\"nation\",\"country\",\"banner\"],\"char\":\"🇿🇼\",\"fitzpatrick_scale\":false,\"category\":\"flags\"},\"octocat\":{\"keywords\":[\"animal\",\"octopus\",\"github\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"shipit\":{\"keywords\":[\"squirrel\",\"detective\",\"animal\",\"sherlock\",\"inspector\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"bowtie\":{\"keywords\":[\"face\",\"formal\",\"fashion\",\"suit\",\"classy\",\"magic\",\"circus\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"neckbeard\":{\"keywords\":[\"nerdy\",\"face\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"trollface\":{\"keywords\":[\"internet\",\"meme\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"godmode\":{\"keywords\":[\"doom\",\"oldschool\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"goberserk\":{\"keywords\":[\"doom\",\"rage\",\"bloody\",\"hurt\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"finnadie\":{\"keywords\":[\"doom\",\"oldschool\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"feelsgood\":{\"keywords\":[\"doom\",\"oldschool\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"rage1\":{\"keywords\":[\"angry\",\"mad\",\"hate\",\"despise\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"rage2\":{\"keywords\":[\"angry\",\"mad\",\"hate\",\"despise\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"rage3\":{\"keywords\":[\"angry\",\"mad\",\"hate\",\"despise\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"rage4\":{\"keywords\":[\"angry\",\"mad\",\"hate\",\"despise\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"suspect\":{\"keywords\":[\"mad\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"},\"hurtrealbad\":{\"keywords\":[\"mad\",\"injured\",\"doom\",\"oldschool\",\"custom_\"],\"char\":null,\"fitzpatrick_scale\":false,\"category\":\"_custom\"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///114\n");

/***/ }),
/* 115 */
/***/ (function(module, exports) {

eval("module.exports = [\"grinning\",\"grimacing\",\"grin\",\"joy\",\"rofl\",\"smiley\",\"smile\",\"sweat_smile\",\"laughing\",\"innocent\",\"wink\",\"blush\",\"slightly_smiling_face\",\"upside_down_face\",\"relaxed\",\"yum\",\"relieved\",\"heart_eyes\",\"kissing_heart\",\"kissing\",\"kissing_smiling_eyes\",\"kissing_closed_eyes\",\"stuck_out_tongue_winking_eye\",\"stuck_out_tongue_closed_eyes\",\"stuck_out_tongue\",\"money_mouth_face\",\"nerd_face\",\"sunglasses\",\"clown_face\",\"cowboy_hat_face\",\"hugs\",\"smirk\",\"no_mouth\",\"neutral_face\",\"expressionless\",\"unamused\",\"roll_eyes\",\"thinking\",\"lying_face\",\"flushed\",\"disappointed\",\"worried\",\"angry\",\"rage\",\"pensive\",\"confused\",\"slightly_frowning_face\",\"frowning_face\",\"persevere\",\"confounded\",\"tired_face\",\"weary\",\"triumph\",\"open_mouth\",\"scream\",\"fearful\",\"cold_sweat\",\"hushed\",\"frowning\",\"anguished\",\"cry\",\"disappointed_relieved\",\"drooling_face\",\"sleepy\",\"sweat\",\"sob\",\"dizzy_face\",\"astonished\",\"zipper_mouth_face\",\"nauseated_face\",\"sneezing_face\",\"mask\",\"face_with_thermometer\",\"face_with_head_bandage\",\"sleeping\",\"zzz\",\"poop\",\"smiling_imp\",\"imp\",\"japanese_ogre\",\"japanese_goblin\",\"skull\",\"ghost\",\"alien\",\"robot\",\"smiley_cat\",\"smile_cat\",\"joy_cat\",\"heart_eyes_cat\",\"smirk_cat\",\"kissing_cat\",\"scream_cat\",\"crying_cat_face\",\"pouting_cat\",\"raised_hands\",\"clap\",\"wave\",\"call_me_hand\",\"+1\",\"-1\",\"facepunch\",\"fist\",\"fist_left\",\"fist_right\",\"v\",\"ok_hand\",\"raised_hand\",\"raised_back_of_hand\",\"open_hands\",\"muscle\",\"pray\",\"handshake\",\"point_up\",\"point_up_2\",\"point_down\",\"point_left\",\"point_right\",\"fu\",\"raised_hand_with_fingers_splayed\",\"metal\",\"crossed_fingers\",\"vulcan_salute\",\"writing_hand\",\"selfie\",\"nail_care\",\"lips\",\"tongue\",\"ear\",\"nose\",\"eye\",\"eyes\",\"bust_in_silhouette\",\"busts_in_silhouette\",\"speaking_head\",\"baby\",\"boy\",\"girl\",\"man\",\"woman\",\"blonde_woman\",\"blonde_man\",\"older_man\",\"older_woman\",\"man_with_gua_pi_mao\",\"woman_with_turban\",\"man_with_turban\",\"policewoman\",\"policeman\",\"construction_worker_woman\",\"construction_worker_man\",\"guardswoman\",\"guardsman\",\"female_detective\",\"male_detective\",\"woman_health_worker\",\"man_health_worker\",\"woman_farmer\",\"man_farmer\",\"woman_cook\",\"man_cook\",\"woman_student\",\"man_student\",\"woman_singer\",\"man_singer\",\"woman_teacher\",\"man_teacher\",\"woman_factory_worker\",\"man_factory_worker\",\"woman_technologist\",\"man_technologist\",\"woman_office_worker\",\"man_office_worker\",\"woman_mechanic\",\"man_mechanic\",\"woman_scientist\",\"man_scientist\",\"woman_artist\",\"man_artist\",\"woman_firefighter\",\"man_firefighter\",\"woman_pilot\",\"man_pilot\",\"woman_astronaut\",\"man_astronaut\",\"woman_judge\",\"man_judge\",\"mrs_claus\",\"santa\",\"angel\",\"pregnant_woman\",\"princess\",\"prince\",\"bride_with_veil\",\"man_in_tuxedo\",\"running_woman\",\"running_man\",\"walking_woman\",\"walking_man\",\"dancer\",\"man_dancing\",\"dancing_women\",\"dancing_men\",\"couple\",\"two_men_holding_hands\",\"two_women_holding_hands\",\"bowing_woman\",\"bowing_man\",\"man_facepalming\",\"woman_facepalming\",\"woman_shrugging\",\"man_shrugging\",\"tipping_hand_woman\",\"tipping_hand_man\",\"no_good_woman\",\"no_good_man\",\"ok_woman\",\"ok_man\",\"raising_hand_woman\",\"raising_hand_man\",\"pouting_woman\",\"pouting_man\",\"frowning_woman\",\"frowning_man\",\"haircut_woman\",\"haircut_man\",\"massage_woman\",\"massage_man\",\"couple_with_heart_woman_man\",\"couple_with_heart_woman_woman\",\"couple_with_heart_man_man\",\"couplekiss_man_woman\",\"couplekiss_woman_woman\",\"couplekiss_man_man\",\"family_man_woman_boy\",\"family_man_woman_girl\",\"family_man_woman_girl_boy\",\"family_man_woman_boy_boy\",\"family_man_woman_girl_girl\",\"family_woman_woman_boy\",\"family_woman_woman_girl\",\"family_woman_woman_girl_boy\",\"family_woman_woman_boy_boy\",\"family_woman_woman_girl_girl\",\"family_man_man_boy\",\"family_man_man_girl\",\"family_man_man_girl_boy\",\"family_man_man_boy_boy\",\"family_man_man_girl_girl\",\"family_woman_boy\",\"family_woman_girl\",\"family_woman_girl_boy\",\"family_woman_boy_boy\",\"family_woman_girl_girl\",\"family_man_boy\",\"family_man_girl\",\"family_man_girl_boy\",\"family_man_boy_boy\",\"family_man_girl_girl\",\"womans_clothes\",\"tshirt\",\"jeans\",\"necktie\",\"dress\",\"bikini\",\"kimono\",\"lipstick\",\"kiss\",\"footprints\",\"high_heel\",\"sandal\",\"boot\",\"mans_shoe\",\"athletic_shoe\",\"womans_hat\",\"tophat\",\"rescue_worker_helmet\",\"mortar_board\",\"crown\",\"school_satchel\",\"pouch\",\"purse\",\"handbag\",\"briefcase\",\"eyeglasses\",\"dark_sunglasses\",\"ring\",\"closed_umbrella\",\"dog\",\"cat\",\"mouse\",\"hamster\",\"rabbit\",\"fox_face\",\"bear\",\"panda_face\",\"koala\",\"tiger\",\"lion\",\"cow\",\"pig\",\"pig_nose\",\"frog\",\"squid\",\"octopus\",\"shrimp\",\"monkey_face\",\"gorilla\",\"see_no_evil\",\"hear_no_evil\",\"speak_no_evil\",\"monkey\",\"chicken\",\"penguin\",\"bird\",\"baby_chick\",\"hatching_chick\",\"hatched_chick\",\"duck\",\"eagle\",\"owl\",\"bat\",\"wolf\",\"boar\",\"horse\",\"unicorn\",\"honeybee\",\"bug\",\"butterfly\",\"snail\",\"beetle\",\"ant\",\"spider\",\"scorpion\",\"crab\",\"snake\",\"lizard\",\"turtle\",\"tropical_fish\",\"fish\",\"blowfish\",\"dolphin\",\"shark\",\"whale\",\"whale2\",\"crocodile\",\"leopard\",\"tiger2\",\"water_buffalo\",\"ox\",\"cow2\",\"deer\",\"dromedary_camel\",\"camel\",\"elephant\",\"rhinoceros\",\"goat\",\"ram\",\"sheep\",\"racehorse\",\"pig2\",\"rat\",\"mouse2\",\"rooster\",\"turkey\",\"dove\",\"dog2\",\"poodle\",\"cat2\",\"rabbit2\",\"chipmunk\",\"paw_prints\",\"dragon\",\"dragon_face\",\"cactus\",\"christmas_tree\",\"evergreen_tree\",\"deciduous_tree\",\"palm_tree\",\"seedling\",\"herb\",\"shamrock\",\"four_leaf_clover\",\"bamboo\",\"tanabata_tree\",\"leaves\",\"fallen_leaf\",\"maple_leaf\",\"ear_of_rice\",\"hibiscus\",\"sunflower\",\"rose\",\"wilted_flower\",\"tulip\",\"blossom\",\"cherry_blossom\",\"bouquet\",\"mushroom\",\"chestnut\",\"jack_o_lantern\",\"shell\",\"spider_web\",\"earth_americas\",\"earth_africa\",\"earth_asia\",\"full_moon\",\"waning_gibbous_moon\",\"last_quarter_moon\",\"waning_crescent_moon\",\"new_moon\",\"waxing_crescent_moon\",\"first_quarter_moon\",\"waxing_gibbous_moon\",\"new_moon_with_face\",\"full_moon_with_face\",\"first_quarter_moon_with_face\",\"last_quarter_moon_with_face\",\"sun_with_face\",\"crescent_moon\",\"star\",\"star2\",\"dizzy\",\"sparkles\",\"comet\",\"sunny\",\"sun_behind_small_cloud\",\"partly_sunny\",\"sun_behind_large_cloud\",\"sun_behind_rain_cloud\",\"cloud\",\"cloud_with_rain\",\"cloud_with_lightning_and_rain\",\"cloud_with_lightning\",\"zap\",\"fire\",\"boom\",\"snowflake\",\"cloud_with_snow\",\"snowman\",\"snowman_with_snow\",\"wind_face\",\"dash\",\"tornado\",\"fog\",\"open_umbrella\",\"umbrella\",\"droplet\",\"sweat_drops\",\"ocean\",\"green_apple\",\"apple\",\"pear\",\"tangerine\",\"lemon\",\"banana\",\"watermelon\",\"grapes\",\"strawberry\",\"melon\",\"cherries\",\"peach\",\"pineapple\",\"kiwi_fruit\",\"avocado\",\"tomato\",\"eggplant\",\"cucumber\",\"carrot\",\"hot_pepper\",\"potato\",\"corn\",\"sweet_potato\",\"peanuts\",\"honey_pot\",\"croissant\",\"bread\",\"baguette_bread\",\"cheese\",\"egg\",\"bacon\",\"pancakes\",\"poultry_leg\",\"meat_on_bone\",\"fried_shrimp\",\"fried_egg\",\"hamburger\",\"fries\",\"stuffed_flatbread\",\"hotdog\",\"pizza\",\"spaghetti\",\"taco\",\"burrito\",\"green_salad\",\"shallow_pan_of_food\",\"ramen\",\"stew\",\"fish_cake\",\"sushi\",\"bento\",\"curry\",\"rice_ball\",\"rice\",\"rice_cracker\",\"oden\",\"dango\",\"shaved_ice\",\"ice_cream\",\"icecream\",\"cake\",\"birthday\",\"custard\",\"candy\",\"lollipop\",\"chocolate_bar\",\"popcorn\",\"doughnut\",\"cookie\",\"milk_glass\",\"beer\",\"beers\",\"clinking_glasses\",\"wine_glass\",\"tumbler_glass\",\"cocktail\",\"tropical_drink\",\"champagne\",\"sake\",\"tea\",\"coffee\",\"baby_bottle\",\"spoon\",\"fork_and_knife\",\"plate_with_cutlery\",\"soccer\",\"basketball\",\"football\",\"baseball\",\"tennis\",\"volleyball\",\"rugby_football\",\"8ball\",\"golf\",\"golfing_woman\",\"golfing_man\",\"ping_pong\",\"badminton\",\"goal_net\",\"ice_hockey\",\"field_hockey\",\"cricket\",\"ski\",\"skier\",\"snowboarder\",\"person_fencing\",\"women_wrestling\",\"men_wrestling\",\"woman_cartwheeling\",\"man_cartwheeling\",\"woman_playing_handball\",\"man_playing_handball\",\"ice_skate\",\"bow_and_arrow\",\"fishing_pole_and_fish\",\"boxing_glove\",\"martial_arts_uniform\",\"rowing_woman\",\"rowing_man\",\"swimming_woman\",\"swimming_man\",\"woman_playing_water_polo\",\"man_playing_water_polo\",\"surfing_woman\",\"surfing_man\",\"bath\",\"basketball_woman\",\"basketball_man\",\"weight_lifting_woman\",\"weight_lifting_man\",\"biking_woman\",\"biking_man\",\"mountain_biking_woman\",\"mountain_biking_man\",\"horse_racing\",\"business_suit_levitating\",\"trophy\",\"running_shirt_with_sash\",\"medal_sports\",\"medal_military\",\"1st_place_medal\",\"2nd_place_medal\",\"3rd_place_medal\",\"reminder_ribbon\",\"rosette\",\"ticket\",\"tickets\",\"performing_arts\",\"art\",\"circus_tent\",\"woman_juggling\",\"man_juggling\",\"microphone\",\"headphones\",\"musical_score\",\"musical_keyboard\",\"drum\",\"saxophone\",\"trumpet\",\"guitar\",\"violin\",\"clapper\",\"video_game\",\"space_invader\",\"dart\",\"game_die\",\"slot_machine\",\"bowling\",\"red_car\",\"taxi\",\"blue_car\",\"bus\",\"trolleybus\",\"racing_car\",\"police_car\",\"ambulance\",\"fire_engine\",\"minibus\",\"truck\",\"articulated_lorry\",\"tractor\",\"kick_scooter\",\"motorcycle\",\"bike\",\"motor_scooter\",\"rotating_light\",\"oncoming_police_car\",\"oncoming_bus\",\"oncoming_automobile\",\"oncoming_taxi\",\"aerial_tramway\",\"mountain_cableway\",\"suspension_railway\",\"railway_car\",\"train\",\"monorail\",\"bullettrain_side\",\"bullettrain_front\",\"light_rail\",\"mountain_railway\",\"steam_locomotive\",\"train2\",\"metro\",\"tram\",\"station\",\"helicopter\",\"small_airplane\",\"airplane\",\"flight_departure\",\"flight_arrival\",\"sailboat\",\"motor_boat\",\"speedboat\",\"ferry\",\"passenger_ship\",\"rocket\",\"artificial_satellite\",\"seat\",\"canoe\",\"anchor\",\"construction\",\"fuelpump\",\"busstop\",\"vertical_traffic_light\",\"traffic_light\",\"checkered_flag\",\"ship\",\"ferris_wheel\",\"roller_coaster\",\"carousel_horse\",\"building_construction\",\"foggy\",\"tokyo_tower\",\"factory\",\"fountain\",\"rice_scene\",\"mountain\",\"mountain_snow\",\"mount_fuji\",\"volcano\",\"japan\",\"camping\",\"tent\",\"national_park\",\"motorway\",\"railway_track\",\"sunrise\",\"sunrise_over_mountains\",\"desert\",\"beach_umbrella\",\"desert_island\",\"city_sunrise\",\"city_sunset\",\"cityscape\",\"night_with_stars\",\"bridge_at_night\",\"milky_way\",\"stars\",\"sparkler\",\"fireworks\",\"rainbow\",\"houses\",\"european_castle\",\"japanese_castle\",\"stadium\",\"statue_of_liberty\",\"house\",\"house_with_garden\",\"derelict_house\",\"office\",\"department_store\",\"post_office\",\"european_post_office\",\"hospital\",\"bank\",\"hotel\",\"convenience_store\",\"school\",\"love_hotel\",\"wedding\",\"classical_building\",\"church\",\"mosque\",\"synagogue\",\"kaaba\",\"shinto_shrine\",\"watch\",\"iphone\",\"calling\",\"computer\",\"keyboard\",\"desktop_computer\",\"printer\",\"computer_mouse\",\"trackball\",\"joystick\",\"clamp\",\"minidisc\",\"floppy_disk\",\"cd\",\"dvd\",\"vhs\",\"camera\",\"camera_flash\",\"video_camera\",\"movie_camera\",\"film_projector\",\"film_strip\",\"telephone_receiver\",\"phone\",\"pager\",\"fax\",\"tv\",\"radio\",\"studio_microphone\",\"level_slider\",\"control_knobs\",\"stopwatch\",\"timer_clock\",\"alarm_clock\",\"mantelpiece_clock\",\"hourglass_flowing_sand\",\"hourglass\",\"satellite\",\"battery\",\"electric_plug\",\"bulb\",\"flashlight\",\"candle\",\"wastebasket\",\"oil_drum\",\"money_with_wings\",\"dollar\",\"yen\",\"euro\",\"pound\",\"moneybag\",\"credit_card\",\"gem\",\"balance_scale\",\"wrench\",\"hammer\",\"hammer_and_pick\",\"hammer_and_wrench\",\"pick\",\"nut_and_bolt\",\"gear\",\"chains\",\"gun\",\"bomb\",\"hocho\",\"dagger\",\"crossed_swords\",\"shield\",\"smoking\",\"skull_and_crossbones\",\"coffin\",\"funeral_urn\",\"amphora\",\"crystal_ball\",\"prayer_beads\",\"barber\",\"alembic\",\"telescope\",\"microscope\",\"hole\",\"pill\",\"syringe\",\"thermometer\",\"label\",\"bookmark\",\"toilet\",\"shower\",\"bathtub\",\"key\",\"old_key\",\"couch_and_lamp\",\"sleeping_bed\",\"bed\",\"door\",\"bellhop_bell\",\"framed_picture\",\"world_map\",\"parasol_on_ground\",\"moyai\",\"shopping\",\"shopping_cart\",\"balloon\",\"flags\",\"ribbon\",\"gift\",\"confetti_ball\",\"tada\",\"dolls\",\"wind_chime\",\"crossed_flags\",\"izakaya_lantern\",\"email\",\"envelope_with_arrow\",\"incoming_envelope\",\"e-mail\",\"love_letter\",\"postbox\",\"mailbox_closed\",\"mailbox\",\"mailbox_with_mail\",\"mailbox_with_no_mail\",\"package\",\"postal_horn\",\"inbox_tray\",\"outbox_tray\",\"scroll\",\"page_with_curl\",\"bookmark_tabs\",\"bar_chart\",\"chart_with_upwards_trend\",\"chart_with_downwards_trend\",\"page_facing_up\",\"date\",\"calendar\",\"spiral_calendar\",\"card_index\",\"card_file_box\",\"ballot_box\",\"file_cabinet\",\"clipboard\",\"spiral_notepad\",\"file_folder\",\"open_file_folder\",\"card_index_dividers\",\"newspaper_roll\",\"newspaper\",\"notebook\",\"closed_book\",\"green_book\",\"blue_book\",\"orange_book\",\"notebook_with_decorative_cover\",\"ledger\",\"books\",\"open_book\",\"link\",\"paperclip\",\"paperclips\",\"scissors\",\"triangular_ruler\",\"straight_ruler\",\"pushpin\",\"round_pushpin\",\"triangular_flag_on_post\",\"white_flag\",\"black_flag\",\"rainbow_flag\",\"closed_lock_with_key\",\"lock\",\"unlock\",\"lock_with_ink_pen\",\"pen\",\"fountain_pen\",\"black_nib\",\"memo\",\"pencil2\",\"crayon\",\"paintbrush\",\"mag\",\"mag_right\",\"heart\",\"yellow_heart\",\"green_heart\",\"blue_heart\",\"purple_heart\",\"black_heart\",\"broken_heart\",\"heavy_heart_exclamation\",\"two_hearts\",\"revolving_hearts\",\"heartbeat\",\"heartpulse\",\"sparkling_heart\",\"cupid\",\"gift_heart\",\"heart_decoration\",\"peace_symbol\",\"latin_cross\",\"star_and_crescent\",\"om\",\"wheel_of_dharma\",\"star_of_david\",\"six_pointed_star\",\"menorah\",\"yin_yang\",\"orthodox_cross\",\"place_of_worship\",\"ophiuchus\",\"aries\",\"taurus\",\"gemini\",\"cancer\",\"leo\",\"virgo\",\"libra\",\"scorpius\",\"sagittarius\",\"capricorn\",\"aquarius\",\"pisces\",\"id\",\"atom_symbol\",\"u7a7a\",\"u5272\",\"radioactive\",\"biohazard\",\"mobile_phone_off\",\"vibration_mode\",\"u6709\",\"u7121\",\"u7533\",\"u55b6\",\"u6708\",\"eight_pointed_black_star\",\"vs\",\"accept\",\"white_flower\",\"ideograph_advantage\",\"secret\",\"congratulations\",\"u5408\",\"u6e80\",\"u7981\",\"a\",\"b\",\"ab\",\"cl\",\"o2\",\"sos\",\"no_entry\",\"name_badge\",\"no_entry_sign\",\"x\",\"o\",\"stop_sign\",\"anger\",\"hotsprings\",\"no_pedestrians\",\"do_not_litter\",\"no_bicycles\",\"non-potable_water\",\"underage\",\"no_mobile_phones\",\"exclamation\",\"grey_exclamation\",\"question\",\"grey_question\",\"bangbang\",\"interrobang\",\"100\",\"low_brightness\",\"high_brightness\",\"trident\",\"fleur_de_lis\",\"part_alternation_mark\",\"warning\",\"children_crossing\",\"beginner\",\"recycle\",\"u6307\",\"chart\",\"sparkle\",\"eight_spoked_asterisk\",\"negative_squared_cross_mark\",\"white_check_mark\",\"diamond_shape_with_a_dot_inside\",\"cyclone\",\"loop\",\"globe_with_meridians\",\"m\",\"atm\",\"sa\",\"passport_control\",\"customs\",\"baggage_claim\",\"left_luggage\",\"wheelchair\",\"no_smoking\",\"wc\",\"parking\",\"potable_water\",\"mens\",\"womens\",\"baby_symbol\",\"restroom\",\"put_litter_in_its_place\",\"cinema\",\"signal_strength\",\"koko\",\"ng\",\"ok\",\"up\",\"cool\",\"new\",\"free\",\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"keycap_ten\",\"asterisk\",\"1234\",\"arrow_forward\",\"pause_button\",\"next_track_button\",\"stop_button\",\"record_button\",\"play_or_pause_button\",\"previous_track_button\",\"fast_forward\",\"rewind\",\"twisted_rightwards_arrows\",\"repeat\",\"repeat_one\",\"arrow_backward\",\"arrow_up_small\",\"arrow_down_small\",\"arrow_double_up\",\"arrow_double_down\",\"arrow_right\",\"arrow_left\",\"arrow_up\",\"arrow_down\",\"arrow_upper_right\",\"arrow_lower_right\",\"arrow_lower_left\",\"arrow_upper_left\",\"arrow_up_down\",\"left_right_arrow\",\"arrows_counterclockwise\",\"arrow_right_hook\",\"leftwards_arrow_with_hook\",\"arrow_heading_up\",\"arrow_heading_down\",\"hash\",\"information_source\",\"abc\",\"abcd\",\"capital_abcd\",\"symbols\",\"musical_note\",\"notes\",\"wavy_dash\",\"curly_loop\",\"heavy_check_mark\",\"arrows_clockwise\",\"heavy_plus_sign\",\"heavy_minus_sign\",\"heavy_division_sign\",\"heavy_multiplication_x\",\"heavy_dollar_sign\",\"currency_exchange\",\"copyright\",\"registered\",\"tm\",\"end\",\"back\",\"on\",\"top\",\"soon\",\"ballot_box_with_check\",\"radio_button\",\"white_circle\",\"black_circle\",\"red_circle\",\"large_blue_circle\",\"small_orange_diamond\",\"small_blue_diamond\",\"large_orange_diamond\",\"large_blue_diamond\",\"small_red_triangle\",\"black_small_square\",\"white_small_square\",\"black_large_square\",\"white_large_square\",\"small_red_triangle_down\",\"black_medium_square\",\"white_medium_square\",\"black_medium_small_square\",\"white_medium_small_square\",\"black_square_button\",\"white_square_button\",\"speaker\",\"sound\",\"loud_sound\",\"mute\",\"mega\",\"loudspeaker\",\"bell\",\"no_bell\",\"black_joker\",\"mahjong\",\"spades\",\"clubs\",\"hearts\",\"diamonds\",\"flower_playing_cards\",\"thought_balloon\",\"right_anger_bubble\",\"speech_balloon\",\"left_speech_bubble\",\"clock1\",\"clock2\",\"clock3\",\"clock4\",\"clock5\",\"clock6\",\"clock7\",\"clock8\",\"clock9\",\"clock10\",\"clock11\",\"clock12\",\"clock130\",\"clock230\",\"clock330\",\"clock430\",\"clock530\",\"clock630\",\"clock730\",\"clock830\",\"clock930\",\"clock1030\",\"clock1130\",\"clock1230\",\"afghanistan\",\"aland_islands\",\"albania\",\"algeria\",\"american_samoa\",\"andorra\",\"angola\",\"anguilla\",\"antarctica\",\"antigua_barbuda\",\"argentina\",\"armenia\",\"aruba\",\"australia\",\"austria\",\"azerbaijan\",\"bahamas\",\"bahrain\",\"bangladesh\",\"barbados\",\"belarus\",\"belgium\",\"belize\",\"benin\",\"bermuda\",\"bhutan\",\"bolivia\",\"caribbean_netherlands\",\"bosnia_herzegovina\",\"botswana\",\"brazil\",\"british_indian_ocean_territory\",\"british_virgin_islands\",\"brunei\",\"bulgaria\",\"burkina_faso\",\"burundi\",\"cape_verde\",\"cambodia\",\"cameroon\",\"canada\",\"canary_islands\",\"cayman_islands\",\"central_african_republic\",\"chad\",\"chile\",\"cn\",\"christmas_island\",\"cocos_islands\",\"colombia\",\"comoros\",\"congo_brazzaville\",\"congo_kinshasa\",\"cook_islands\",\"costa_rica\",\"croatia\",\"cuba\",\"curacao\",\"cyprus\",\"czech_republic\",\"denmark\",\"djibouti\",\"dominica\",\"dominican_republic\",\"ecuador\",\"egypt\",\"el_salvador\",\"equatorial_guinea\",\"eritrea\",\"estonia\",\"ethiopia\",\"eu\",\"falkland_islands\",\"faroe_islands\",\"fiji\",\"finland\",\"fr\",\"french_guiana\",\"french_polynesia\",\"french_southern_territories\",\"gabon\",\"gambia\",\"georgia\",\"de\",\"ghana\",\"gibraltar\",\"greece\",\"greenland\",\"grenada\",\"guadeloupe\",\"guam\",\"guatemala\",\"guernsey\",\"guinea\",\"guinea_bissau\",\"guyana\",\"haiti\",\"honduras\",\"hong_kong\",\"hungary\",\"iceland\",\"india\",\"indonesia\",\"iran\",\"iraq\",\"ireland\",\"isle_of_man\",\"israel\",\"it\",\"cote_divoire\",\"jamaica\",\"jp\",\"jersey\",\"jordan\",\"kazakhstan\",\"kenya\",\"kiribati\",\"kosovo\",\"kuwait\",\"kyrgyzstan\",\"laos\",\"latvia\",\"lebanon\",\"lesotho\",\"liberia\",\"libya\",\"liechtenstein\",\"lithuania\",\"luxembourg\",\"macau\",\"macedonia\",\"madagascar\",\"malawi\",\"malaysia\",\"maldives\",\"mali\",\"malta\",\"marshall_islands\",\"martinique\",\"mauritania\",\"mauritius\",\"mayotte\",\"mexico\",\"micronesia\",\"moldova\",\"monaco\",\"mongolia\",\"montenegro\",\"montserrat\",\"morocco\",\"mozambique\",\"myanmar\",\"namibia\",\"nauru\",\"nepal\",\"netherlands\",\"new_caledonia\",\"new_zealand\",\"nicaragua\",\"niger\",\"nigeria\",\"niue\",\"norfolk_island\",\"northern_mariana_islands\",\"north_korea\",\"norway\",\"oman\",\"pakistan\",\"palau\",\"palestinian_territories\",\"panama\",\"papua_new_guinea\",\"paraguay\",\"peru\",\"philippines\",\"pitcairn_islands\",\"poland\",\"portugal\",\"puerto_rico\",\"qatar\",\"reunion\",\"romania\",\"ru\",\"rwanda\",\"st_barthelemy\",\"st_helena\",\"st_kitts_nevis\",\"st_lucia\",\"st_pierre_miquelon\",\"st_vincent_grenadines\",\"samoa\",\"san_marino\",\"sao_tome_principe\",\"saudi_arabia\",\"senegal\",\"serbia\",\"seychelles\",\"sierra_leone\",\"singapore\",\"sint_maarten\",\"slovakia\",\"slovenia\",\"solomon_islands\",\"somalia\",\"south_africa\",\"south_georgia_south_sandwich_islands\",\"kr\",\"south_sudan\",\"es\",\"sri_lanka\",\"sudan\",\"suriname\",\"swaziland\",\"sweden\",\"switzerland\",\"syria\",\"taiwan\",\"tajikistan\",\"tanzania\",\"thailand\",\"timor_leste\",\"togo\",\"tokelau\",\"tonga\",\"trinidad_tobago\",\"tunisia\",\"tr\",\"turkmenistan\",\"turks_caicos_islands\",\"tuvalu\",\"uganda\",\"ukraine\",\"united_arab_emirates\",\"uk\",\"us\",\"us_virgin_islands\",\"uruguay\",\"uzbekistan\",\"vanuatu\",\"vatican_city\",\"venezuela\",\"vietnam\",\"wallis_futuna\",\"western_sahara\",\"yemen\",\"zambia\",\"zimbabwe\",\"octocat\",\"shipit\",\"bowtie\",\"neckbeard\",\"trollface\",\"godmode\",\"goberserk\",\"finnadie\",\"feelsgood\",\"rage1\",\"rage2\",\"rage3\",\"rage4\",\"suspect\",\"hurtrealbad\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///115\n");

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(5);\n\n__webpack_require__(8);\n\n__webpack_require__(41);\n\n__webpack_require__(117);\n\n__webpack_require__(22);\n\n__webpack_require__(26);\n\n__webpack_require__(119);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=image-caption-view> <template> <style>:host{width:100%;display:flex;justify-content:center;align-items:center}paper-card{width:100%}.image-wrapper{width:100%}.image-wrapper>img{position:absolute;top:0;left:0;bottom:0;width:100%}.caption-container{padding:0 16px}.caption-title{@apply --paper-font-headline;text-align:center}.caption-subtitle{@apply --paper-font-subhead;color:#000;text-align:center;text-transform:capitalize;font-style:italic}.space-between{display:flex;justify-content:space-between;align-items:center}.card-actions>*{@apply --paper-font-body2;}.light{color:var(--paper-grey-600)}.dark{color:var(--paper-grey-800)}.positive{color:var(--paper-grey-500)}.negative{color:var(--paper-grey-500)}</style> <emoji-caption-generator id=captionGenerater image-url={{imageUrl}}></emoji-caption-generator> <paper-card> <div class=image-wrapper id=img-wrapper> </div> <div class=caption-container> <p class=caption-title id=emojis> <template is=dom-repeat items={{keywords}}> <emoji-generator keyword={{item}}></emoji-generator> </template> </p> <p class=caption-subtitle> \\\"{{caption}}\\\" </p> </div> <div class=card-actions> <div class=\\\"horizontal space-between\\\"> <div class=align-center> <paper-icon-button icon=thumb-up class=positive></paper-icon-button> <paper-icon-button icon=thumb-down class=negative></paper-icon-button> </div> <paper-button class=dark on-click=_regenerateCaption><iron-icon icon=refresh></iron-icon>Generate Again</paper-button> </div> </div> </paper-card> </template> </dom-module>\");\n\n/**\n * @customElement\n * @polymer\n */\nclass ImageCaptionView extends Polymer.Element {\n  constructor(...args) {\n    var _temp;\n\n    return _temp = super(...args), this._scaleAndPlaceImage = image => {\n      const imgWidth = image.naturalWidth;\n      const imgHeight = image.naturalHeight;\n\n      const aspectRatio = imgHeight / (imgWidth / 100);\n      this.$['img-wrapper'].style.paddingTop = `${aspectRatio}%`;\n\n      this.$['img-wrapper'].innerHTML = \"\";\n      this.$['img-wrapper'].append(image);\n    }, _temp;\n  }\n\n  static get is() {\n    return 'image-caption-view';\n  }\n  static get properties() {\n    return {\n      imageUrl: {\n        type: String\n      }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  _regenerateCaption() {\n    if (this.keywords === null) {\n      return;\n    }\n\n    const emojiGenerators = this.shadowRoot.querySelectorAll('emoji-generator');\n\n    for (let emojiGenerator of emojiGenerators) {\n      emojiGenerator.generateEmoji();\n      console.log(emojiGenerator.emoji);\n    }\n  }\n\n  _loadImage() {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        this._scaleAndPlaceImage(img);\n        resolve();\n      };\n      img.onerror = err => {\n        reject(err);\n      };\n      img.src = this.imageUrl;\n    });\n  }\n\n  _loadCaption() {\n    return new Promise((resolve, reject) => {\n      const captionGenerator = this.$['captionGenerater'];\n      captionGenerator.addEventListener('captionGenerated', e => {\n        this.caption = e.detail.caption;\n        this.keywords = e.detail.keywords;\n        resolve();\n      });\n      captionGenerator.addEventListener('captionError', err => {\n        reject(err);\n      });\n      captionGenerator.generateCaption();\n    });\n  }\n\n  loadImageAndCaption() {\n    Promise.all([this._loadImage(), this._loadCaption()]).then(values => {\n      this.dispatchEvent(new CustomEvent('imageLoaded', {}));\n    }).catch(err => {\n      this.dispatchEvent(new CustomEvent('imageError', {}));\n    });\n  }\n}\n\nwindow.customElements.define(ImageCaptionView.is, ImageCaptionView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ltYWdlLWNhcHRpb24tdmlldy5odG1sPzg1YmMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5yZXF1aXJlKCd+L3BvbHltZXIvcG9seW1lci1lbGVtZW50Lmh0bWwnKTtcblxucmVxdWlyZSgnfi9wYXBlci1zdHlsZXMvdHlwb2dyYXBoeS5odG1sJyk7XG5cbnJlcXVpcmUoJ34vcGFwZXItc3R5bGVzL2NvbG9yLmh0bWwnKTtcblxucmVxdWlyZSgnfi9wYXBlci1jYXJkL3BhcGVyLWNhcmQuaHRtbCcpO1xuXG5yZXF1aXJlKCd+L3BhcGVyLWJ1dHRvbi9wYXBlci1idXR0b24uaHRtbCcpO1xuXG5yZXF1aXJlKCd+L3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWwnKTtcblxucmVxdWlyZSgnfi9pcm9uLWljb25zL2lyb24taWNvbnMuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9jb21wb25lbnRzL2Vtb2ppLWNhcHRpb24tZ2VuZXJhdG9yLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1pbWFnZS1jYXB0aW9uLXZpZXc+IDx0ZW1wbGF0ZT4gPHN0eWxlPjpob3N0e3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfXBhcGVyLWNhcmR7d2lkdGg6MTAwJX0uaW1hZ2Utd3JhcHBlcnt3aWR0aDoxMDAlfS5pbWFnZS13cmFwcGVyPmltZ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7d2lkdGg6MTAwJX0uY2FwdGlvbi1jb250YWluZXJ7cGFkZGluZzowIDE2cHh9LmNhcHRpb24tdGl0bGV7QGFwcGx5IC0tcGFwZXItZm9udC1oZWFkbGluZTt0ZXh0LWFsaWduOmNlbnRlcn0uY2FwdGlvbi1zdWJ0aXRsZXtAYXBwbHkgLS1wYXBlci1mb250LXN1YmhlYWQ7Y29sb3I6IzAwMDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LXRyYW5zZm9ybTpjYXBpdGFsaXplO2ZvbnQtc3R5bGU6aXRhbGljfS5zcGFjZS1iZXR3ZWVue2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXJ9LmNhcmQtYWN0aW9ucz4qe0BhcHBseSAtLXBhcGVyLWZvbnQtYm9keTI7fS5saWdodHtjb2xvcjp2YXIoLS1wYXBlci1ncmV5LTYwMCl9LmRhcmt7Y29sb3I6dmFyKC0tcGFwZXItZ3JleS04MDApfS5wb3NpdGl2ZXtjb2xvcjp2YXIoLS1wYXBlci1ncmV5LTUwMCl9Lm5lZ2F0aXZle2NvbG9yOnZhcigtLXBhcGVyLWdyZXktNTAwKX08L3N0eWxlPiA8ZW1vamktY2FwdGlvbi1nZW5lcmF0b3IgaWQ9Y2FwdGlvbkdlbmVyYXRlciBpbWFnZS11cmw9e3tpbWFnZVVybH19PjwvZW1vamktY2FwdGlvbi1nZW5lcmF0b3I+IDxwYXBlci1jYXJkPiA8ZGl2IGNsYXNzPWltYWdlLXdyYXBwZXIgaWQ9aW1nLXdyYXBwZXI+IDwvZGl2PiA8ZGl2IGNsYXNzPWNhcHRpb24tY29udGFpbmVyPiA8cCBjbGFzcz1jYXB0aW9uLXRpdGxlIGlkPWVtb2ppcz4gPHRlbXBsYXRlIGlzPWRvbS1yZXBlYXQgaXRlbXM9e3trZXl3b3Jkc319PiA8ZW1vamktZ2VuZXJhdG9yIGtleXdvcmQ9e3tpdGVtfX0+PC9lbW9qaS1nZW5lcmF0b3I+IDwvdGVtcGxhdGU+IDwvcD4gPHAgY2xhc3M9Y2FwdGlvbi1zdWJ0aXRsZT4gXFxcInt7Y2FwdGlvbn19XFxcIiA8L3A+IDwvZGl2PiA8ZGl2IGNsYXNzPWNhcmQtYWN0aW9ucz4gPGRpdiBjbGFzcz1cXFwiaG9yaXpvbnRhbCBzcGFjZS1iZXR3ZWVuXFxcIj4gPGRpdiBjbGFzcz1hbGlnbi1jZW50ZXI+IDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPXRodW1iLXVwIGNsYXNzPXBvc2l0aXZlPjwvcGFwZXItaWNvbi1idXR0b24+IDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPXRodW1iLWRvd24gY2xhc3M9bmVnYXRpdmU+PC9wYXBlci1pY29uLWJ1dHRvbj4gPC9kaXY+IDxwYXBlci1idXR0b24gY2xhc3M9ZGFyayBvbi1jbGljaz1fcmVnZW5lcmF0ZUNhcHRpb24+PGlyb24taWNvbiBpY29uPXJlZnJlc2g+PC9pcm9uLWljb24+R2VuZXJhdGUgQWdhaW48L3BhcGVyLWJ1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L3BhcGVyLWNhcmQ+IDwvdGVtcGxhdGU+IDwvZG9tLW1vZHVsZT5cIik7XG5cbi8qKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBwb2x5bWVyXG4gKi9cbmNsYXNzIEltYWdlQ2FwdGlvblZpZXcgZXh0ZW5kcyBQb2x5bWVyLkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdmFyIF90ZW1wO1xuXG4gICAgcmV0dXJuIF90ZW1wID0gc3VwZXIoLi4uYXJncyksIHRoaXMuX3NjYWxlQW5kUGxhY2VJbWFnZSA9IGltYWdlID0+IHtcbiAgICAgIGNvbnN0IGltZ1dpZHRoID0gaW1hZ2UubmF0dXJhbFdpZHRoO1xuICAgICAgY29uc3QgaW1nSGVpZ2h0ID0gaW1hZ2UubmF0dXJhbEhlaWdodDtcblxuICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBpbWdIZWlnaHQgLyAoaW1nV2lkdGggLyAxMDApO1xuICAgICAgdGhpcy4kWydpbWctd3JhcHBlciddLnN0eWxlLnBhZGRpbmdUb3AgPSBgJHthc3BlY3RSYXRpb30lYDtcblxuICAgICAgdGhpcy4kWydpbWctd3JhcHBlciddLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICB0aGlzLiRbJ2ltZy13cmFwcGVyJ10uYXBwZW5kKGltYWdlKTtcbiAgICB9LCBfdGVtcDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaXMoKSB7XG4gICAgcmV0dXJuICdpbWFnZS1jYXB0aW9uLXZpZXcnO1xuICB9XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW1hZ2VVcmw6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gIH1cblxuICBfcmVnZW5lcmF0ZUNhcHRpb24oKSB7XG4gICAgaWYgKHRoaXMua2V5d29yZHMgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbW9qaUdlbmVyYXRvcnMgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvckFsbCgnZW1vamktZ2VuZXJhdG9yJyk7XG5cbiAgICBmb3IgKGxldCBlbW9qaUdlbmVyYXRvciBvZiBlbW9qaUdlbmVyYXRvcnMpIHtcbiAgICAgIGVtb2ppR2VuZXJhdG9yLmdlbmVyYXRlRW1vamkoKTtcbiAgICAgIGNvbnNvbGUubG9nKGVtb2ppR2VuZXJhdG9yLmVtb2ppKTtcbiAgICB9XG4gIH1cblxuICBfbG9hZEltYWdlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX3NjYWxlQW5kUGxhY2VJbWFnZShpbWcpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgaW1nLm9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH07XG4gICAgICBpbWcuc3JjID0gdGhpcy5pbWFnZVVybDtcbiAgICB9KTtcbiAgfVxuXG4gIF9sb2FkQ2FwdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY2FwdGlvbkdlbmVyYXRvciA9IHRoaXMuJFsnY2FwdGlvbkdlbmVyYXRlciddO1xuICAgICAgY2FwdGlvbkdlbmVyYXRvci5hZGRFdmVudExpc3RlbmVyKCdjYXB0aW9uR2VuZXJhdGVkJywgZSA9PiB7XG4gICAgICAgIHRoaXMuY2FwdGlvbiA9IGUuZGV0YWlsLmNhcHRpb247XG4gICAgICAgIHRoaXMua2V5d29yZHMgPSBlLmRldGFpbC5rZXl3b3JkcztcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICBjYXB0aW9uR2VuZXJhdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NhcHRpb25FcnJvcicsIGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgICBjYXB0aW9uR2VuZXJhdG9yLmdlbmVyYXRlQ2FwdGlvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZEltYWdlQW5kQ2FwdGlvbigpIHtcbiAgICBQcm9taXNlLmFsbChbdGhpcy5fbG9hZEltYWdlKCksIHRoaXMuX2xvYWRDYXB0aW9uKCldKS50aGVuKHZhbHVlcyA9PiB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdpbWFnZUxvYWRlZCcsIHt9KSk7XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ltYWdlRXJyb3InLCB7fSkpO1xuICAgIH0pO1xuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoSW1hZ2VDYXB0aW9uVmlldy5pcywgSW1hZ2VDYXB0aW9uVmlldyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdmlld3MvaW1hZ2UtY2FwdGlvbi12aWV3Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDExNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///116\n");

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(6);\n\n__webpack_require__(118);\n\n__webpack_require__(42);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=paper-button> <template strip-whitespace=\\\"\\\"> <style include=paper-material-styles>:host{@apply --layout-inline;@apply --layout-center-center;position:relative;box-sizing:border-box;min-width:5.14em;margin:0 .29em;background:0 0;-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:transparent;font:inherit;text-transform:uppercase;outline-width:0;border-radius:3px;-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none;cursor:pointer;z-index:0;padding:.7em .57em;@apply --paper-font-common-base;@apply --paper-button;}:host([elevation=\\\"1\\\"]){@apply --paper-material-elevation-1;}:host([elevation=\\\"2\\\"]){@apply --paper-material-elevation-2;}:host([elevation=\\\"3\\\"]){@apply --paper-material-elevation-3;}:host([elevation=\\\"4\\\"]){@apply --paper-material-elevation-4;}:host([elevation=\\\"5\\\"]){@apply --paper-material-elevation-5;}:host([hidden]){display:none!important}:host([raised].keyboard-focus){font-weight:700;@apply --paper-button-raised-keyboard-focus;}:host(:not([raised]).keyboard-focus){font-weight:700;@apply --paper-button-flat-keyboard-focus;}:host([disabled]){background:#eaeaea;color:#a8a8a8;cursor:auto;pointer-events:none;@apply --paper-button-disabled;}:host([animated]){@apply --shadow-transition;}paper-ripple{color:var(--paper-button-ink-color)}</style> <slot></slot> </template> </dom-module>\");\n\nPolymer({\n  is: 'paper-button',\n\n  behaviors: [Polymer.PaperButtonBehavior],\n\n  properties: {\n    /**\n     * If true, the button should be styled with a shadow.\n     */\n    raised: {\n      type: Boolean,\n      reflectToAttribute: true,\n      value: false,\n      observer: '_calculateElevation'\n    }\n  },\n\n  _calculateElevation: function () {\n    if (!this.raised) {\n      this._setElevation(0);\n    } else {\n      Polymer.PaperButtonBehaviorImpl._calculateElevation.apply(this);\n    }\n  }\n\n  /**\n  Fired when the animation finishes.\n  This is useful if you want to wait until\n  the ripple animation finishes to perform some action.\n   @event transitionend\n  Event param: {{node: Object}} detail Contains the animated node.\n  */\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1idXR0b24vcGFwZXItYnV0dG9uLmh0bWw/YWM4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tZmxleC1sYXlvdXQvaXJvbi1mbGV4LWxheW91dC5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1idXR0b24tYmVoYXZpb3IuaHRtbCcpO1xuXG5yZXF1aXJlKCcuLi9wYXBlci1zdHlsZXMvZWxlbWVudC1zdHlsZXMvcGFwZXItbWF0ZXJpYWwtc3R5bGVzLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1wYXBlci1idXR0b24+IDx0ZW1wbGF0ZSBzdHJpcC13aGl0ZXNwYWNlPVxcXCJcXFwiPiA8c3R5bGUgaW5jbHVkZT1wYXBlci1tYXRlcmlhbC1zdHlsZXM+Omhvc3R7QGFwcGx5IC0tbGF5b3V0LWlubGluZTtAYXBwbHkgLS1sYXlvdXQtY2VudGVyLWNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWluLXdpZHRoOjUuMTRlbTttYXJnaW46MCAuMjllbTtiYWNrZ3JvdW5kOjAgMDstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50O2ZvbnQ6aW5oZXJpdDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7b3V0bGluZS13aWR0aDowO2JvcmRlci1yYWRpdXM6M3B4Oy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtjdXJzb3I6cG9pbnRlcjt6LWluZGV4OjA7cGFkZGluZzouN2VtIC41N2VtO0BhcHBseSAtLXBhcGVyLWZvbnQtY29tbW9uLWJhc2U7QGFwcGx5IC0tcGFwZXItYnV0dG9uO306aG9zdChbZWxldmF0aW9uPVxcXCIxXFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0xO306aG9zdChbZWxldmF0aW9uPVxcXCIyXFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0yO306aG9zdChbZWxldmF0aW9uPVxcXCIzXFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0zO306aG9zdChbZWxldmF0aW9uPVxcXCI0XFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi00O306aG9zdChbZWxldmF0aW9uPVxcXCI1XFxcIl0pe0BhcHBseSAtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi01O306aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lIWltcG9ydGFudH06aG9zdChbcmFpc2VkXS5rZXlib2FyZC1mb2N1cyl7Zm9udC13ZWlnaHQ6NzAwO0BhcHBseSAtLXBhcGVyLWJ1dHRvbi1yYWlzZWQta2V5Ym9hcmQtZm9jdXM7fTpob3N0KDpub3QoW3JhaXNlZF0pLmtleWJvYXJkLWZvY3VzKXtmb250LXdlaWdodDo3MDA7QGFwcGx5IC0tcGFwZXItYnV0dG9uLWZsYXQta2V5Ym9hcmQtZm9jdXM7fTpob3N0KFtkaXNhYmxlZF0pe2JhY2tncm91bmQ6I2VhZWFlYTtjb2xvcjojYThhOGE4O2N1cnNvcjphdXRvO3BvaW50ZXItZXZlbnRzOm5vbmU7QGFwcGx5IC0tcGFwZXItYnV0dG9uLWRpc2FibGVkO306aG9zdChbYW5pbWF0ZWRdKXtAYXBwbHkgLS1zaGFkb3ctdHJhbnNpdGlvbjt9cGFwZXItcmlwcGxle2NvbG9yOnZhcigtLXBhcGVyLWJ1dHRvbi1pbmstY29sb3IpfTwvc3R5bGU+IDxzbG90Pjwvc2xvdD4gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuUG9seW1lcih7XG4gIGlzOiAncGFwZXItYnV0dG9uJyxcblxuICBiZWhhdmlvcnM6IFtQb2x5bWVyLlBhcGVyQnV0dG9uQmVoYXZpb3JdLFxuXG4gIHByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGUgYnV0dG9uIHNob3VsZCBiZSBzdHlsZWQgd2l0aCBhIHNoYWRvdy5cbiAgICAgKi9cbiAgICByYWlzZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvYnNlcnZlcjogJ19jYWxjdWxhdGVFbGV2YXRpb24nXG4gICAgfVxuICB9LFxuXG4gIF9jYWxjdWxhdGVFbGV2YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucmFpc2VkKSB7XG4gICAgICB0aGlzLl9zZXRFbGV2YXRpb24oMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFBvbHltZXIuUGFwZXJCdXR0b25CZWhhdmlvckltcGwuX2NhbGN1bGF0ZUVsZXZhdGlvbi5hcHBseSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgRmlyZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzLlxuICBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byB3YWl0IHVudGlsXG4gIHRoZSByaXBwbGUgYW5pbWF0aW9uIGZpbmlzaGVzIHRvIHBlcmZvcm0gc29tZSBhY3Rpb24uXG4gICBAZXZlbnQgdHJhbnNpdGlvbmVuZFxuICBFdmVudCBwYXJhbToge3tub2RlOiBPYmplY3R9fSBkZXRhaWwgQ29udGFpbnMgdGhlIGFuaW1hdGVkIG5vZGUuXG4gICovXG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItYnV0dG9uL3BhcGVyLWJ1dHRvbi5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///117\n");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(0);\n\n__webpack_require__(14);\n\n__webpack_require__(24);\n\n/** @polymerBehavior Polymer.PaperButtonBehavior */\nPolymer.PaperButtonBehaviorImpl = {\n  properties: {\n    /**\n     * The z-depth of this element, from 0-5. Setting to 0 will remove the\n     * shadow, and each increasing number greater than 0 will be \"deeper\"\n     * than the last.\n     *\n     * @attribute elevation\n     * @type number\n     * @default 1\n     */\n    elevation: {\n      type: Number,\n      reflectToAttribute: true,\n      readOnly: true\n    }\n  },\n\n  observers: ['_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)', '_computeKeyboardClass(receivedFocusFromKeyboard)'],\n\n  hostAttributes: {\n    role: 'button',\n    tabindex: '0',\n    animated: true\n  },\n\n  _calculateElevation: function () {\n    var e = 1;\n    if (this.disabled) {\n      e = 0;\n    } else if (this.active || this.pressed) {\n      e = 4;\n    } else if (this.receivedFocusFromKeyboard) {\n      e = 3;\n    }\n    this._setElevation(e);\n  },\n\n  _computeKeyboardClass: function (receivedFocusFromKeyboard) {\n    this.toggleClass('keyboard-focus', receivedFocusFromKeyboard);\n  },\n\n  /**\n   * In addition to `IronButtonState` behavior, when space key goes down,\n   * create a ripple down effect.\n   *\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function (event) {\n    Polymer.IronButtonStateImpl._spaceKeyDownHandler.call(this, event);\n    // Ensure that there is at most one ripple when the space key is held down.\n    if (this.hasRipple() && this.getRipple().ripples.length < 1) {\n      this._ripple.uiDownAction();\n    }\n  },\n\n  /**\n   * In addition to `IronButtonState` behavior, when space key goes up,\n   * create a ripple up effect.\n   *\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function (event) {\n    Polymer.IronButtonStateImpl._spaceKeyUpHandler.call(this, event);\n    if (this.hasRipple()) {\n      this._ripple.uiUpAction();\n    }\n  }\n};\n\n/** @polymerBehavior */\nPolymer.PaperButtonBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperButtonBehaviorImpl];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wYXBlci1iZWhhdmlvcnMvcGFwZXItYnV0dG9uLWJlaGF2aW9yLmh0bWw/MTE1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4uL2lyb24tYmVoYXZpb3JzL2lyb24tYnV0dG9uLXN0YXRlLmh0bWwnKTtcblxucmVxdWlyZSgnLi9wYXBlci1yaXBwbGUtYmVoYXZpb3IuaHRtbCcpO1xuXG4vKiogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLlBhcGVyQnV0dG9uQmVoYXZpb3IgKi9cblBvbHltZXIuUGFwZXJCdXR0b25CZWhhdmlvckltcGwgPSB7XG4gIHByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgei1kZXB0aCBvZiB0aGlzIGVsZW1lbnQsIGZyb20gMC01LiBTZXR0aW5nIHRvIDAgd2lsbCByZW1vdmUgdGhlXG4gICAgICogc2hhZG93LCBhbmQgZWFjaCBpbmNyZWFzaW5nIG51bWJlciBncmVhdGVyIHRoYW4gMCB3aWxsIGJlIFwiZGVlcGVyXCJcbiAgICAgKiB0aGFuIHRoZSBsYXN0LlxuICAgICAqXG4gICAgICogQGF0dHJpYnV0ZSBlbGV2YXRpb25cbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgZWxldmF0aW9uOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICByZWFkT25seTogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBvYnNlcnZlcnM6IFsnX2NhbGN1bGF0ZUVsZXZhdGlvbihmb2N1c2VkLCBkaXNhYmxlZCwgYWN0aXZlLCBwcmVzc2VkLCByZWNlaXZlZEZvY3VzRnJvbUtleWJvYXJkKScsICdfY29tcHV0ZUtleWJvYXJkQ2xhc3MocmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCknXSxcblxuICBob3N0QXR0cmlidXRlczoge1xuICAgIHJvbGU6ICdidXR0b24nLFxuICAgIHRhYmluZGV4OiAnMCcsXG4gICAgYW5pbWF0ZWQ6IHRydWVcbiAgfSxcblxuICBfY2FsY3VsYXRlRWxldmF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGUgPSAxO1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICBlID0gMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMucHJlc3NlZCkge1xuICAgICAgZSA9IDQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQpIHtcbiAgICAgIGUgPSAzO1xuICAgIH1cbiAgICB0aGlzLl9zZXRFbGV2YXRpb24oZSk7XG4gIH0sXG5cbiAgX2NvbXB1dGVLZXlib2FyZENsYXNzOiBmdW5jdGlvbiAocmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCkge1xuICAgIHRoaXMudG9nZ2xlQ2xhc3MoJ2tleWJvYXJkLWZvY3VzJywgcmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluIGFkZGl0aW9uIHRvIGBJcm9uQnV0dG9uU3RhdGVgIGJlaGF2aW9yLCB3aGVuIHNwYWNlIGtleSBnb2VzIGRvd24sXG4gICAqIGNyZWF0ZSBhIHJpcHBsZSBkb3duIGVmZmVjdC5cbiAgICpcbiAgICogQHBhcmFtIHshS2V5Ym9hcmRFdmVudH0gZXZlbnQgLlxuICAgKi9cbiAgX3NwYWNlS2V5RG93bkhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIFBvbHltZXIuSXJvbkJ1dHRvblN0YXRlSW1wbC5fc3BhY2VLZXlEb3duSGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGVyZSBpcyBhdCBtb3N0IG9uZSByaXBwbGUgd2hlbiB0aGUgc3BhY2Uga2V5IGlzIGhlbGQgZG93bi5cbiAgICBpZiAodGhpcy5oYXNSaXBwbGUoKSAmJiB0aGlzLmdldFJpcHBsZSgpLnJpcHBsZXMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhpcy5fcmlwcGxlLnVpRG93bkFjdGlvbigpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW4gYWRkaXRpb24gdG8gYElyb25CdXR0b25TdGF0ZWAgYmVoYXZpb3IsIHdoZW4gc3BhY2Uga2V5IGdvZXMgdXAsXG4gICAqIGNyZWF0ZSBhIHJpcHBsZSB1cCBlZmZlY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7IUtleWJvYXJkRXZlbnR9IGV2ZW50IC5cbiAgICovXG4gIF9zcGFjZUtleVVwSGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgUG9seW1lci5Jcm9uQnV0dG9uU3RhdGVJbXBsLl9zcGFjZUtleVVwSGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICBpZiAodGhpcy5oYXNSaXBwbGUoKSkge1xuICAgICAgdGhpcy5fcmlwcGxlLnVpVXBBY3Rpb24oKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKiBAcG9seW1lckJlaGF2aW9yICovXG5Qb2x5bWVyLlBhcGVyQnV0dG9uQmVoYXZpb3IgPSBbUG9seW1lci5Jcm9uQnV0dG9uU3RhdGUsIFBvbHltZXIuSXJvbkNvbnRyb2xTdGF0ZSwgUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yLCBQb2x5bWVyLlBhcGVyQnV0dG9uQmVoYXZpb3JJbXBsXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItYmVoYXZpb3JzL3BhcGVyLWJ1dHRvbi1iZWhhdmlvci5odG1sXG4vLyBtb2R1bGUgaWQgPSAxMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///118\n");

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n__webpack_require__(4);\n\n__webpack_require__(44);\n\nconst RegisterHtmlTemplate = __webpack_require__(1);\n\nRegisterHtmlTemplate.register(\"<dom-module id=emoji-caption-generator> <template> <style></style> {{caption}} </template> </dom-module>\");\n\nconst queryString = __webpack_require__(120);\nconst credentials = __webpack_require__(124);\n\n/**\n * @customElement\n * @polymer\n */\nclass EmojiCaptionGenerator extends Polymer.Element {\n  static get is() {\n    return 'emoji-caption-generator';\n  }\n  static get properties() {\n    return {\n      imageUrl: {\n        type: String\n      }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  generateCaption() {\n    this._processImage();\n  }\n\n  _processImage(imageURL) {\n    const subscriptionKey = credentials.azure.subscriptionKey;\n    const uriBase = `https://${credentials.azure.region}.api.cognitive.microsoft.com/vision/v1.0/analyze`;\n\n    const params = {\n      \"visualFeatures\": \"Categories,Description,Color\",\n      \"details\": \"\",\n      \"language\": \"en\"\n    };\n\n    const headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"Ocp-Apim-Subscription-Key\": subscriptionKey\n    });\n\n    const url = `${uriBase}?${queryString.stringify(params)}`;\n\n    fetch(url, {\n      headers: headers,\n      method: 'POST',\n      body: `{\"url\": \"${this.imageUrl}\"}`\n      // mode: 'no-cors'\n    }).then(data => {\n      return data.json();\n    }).then(response => {\n      this._captionGenerated(response);\n    }).catch(err => {\n      this.dispatchEvent(new CustomEvent('captionError', {}));\n    });\n  }\n\n  _captionGenerated(data) {\n    const caption = data.description.captions[0].text;\n    const keywords = caption.split(\" \");\n\n    console.log(keywords);\n\n    this.dispatchEvent(new CustomEvent('captionGenerated', {\n      detail: {\n        caption,\n        keywords\n      }\n    }));\n  }\n}\n\nwindow.customElements.define(EmojiCaptionGenerator.is, EmojiCaptionGenerator);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZW1vamktY2FwdGlvbi1nZW5lcmF0b3IuaHRtbD80YTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlxucmVxdWlyZSgnfi9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5odG1sJyk7XG5cbnJlcXVpcmUoJy4vZW1vamktZ2VuZXJhdG9yLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUucmVnaXN0ZXIoXCI8ZG9tLW1vZHVsZSBpZD1lbW9qaS1jYXB0aW9uLWdlbmVyYXRvcj4gPHRlbXBsYXRlPiA8c3R5bGU+PC9zdHlsZT4ge3tjYXB0aW9ufX0gPC90ZW1wbGF0ZT4gPC9kb20tbW9kdWxlPlwiKTtcblxuY29uc3QgcXVlcnlTdHJpbmcgPSByZXF1aXJlKCdxdWVyeS1zdHJpbmcnKTtcbmNvbnN0IGNyZWRlbnRpYWxzID0gcmVxdWlyZSgnLi4vLi4vY3JlZGVudGlhbHMuanMnKTtcblxuLyoqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqL1xuY2xhc3MgRW1vamlDYXB0aW9uR2VuZXJhdG9yIGV4dGVuZHMgUG9seW1lci5FbGVtZW50IHtcbiAgc3RhdGljIGdldCBpcygpIHtcbiAgICByZXR1cm4gJ2Vtb2ppLWNhcHRpb24tZ2VuZXJhdG9yJztcbiAgfVxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltYWdlVXJsOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICB9XG5cbiAgZ2VuZXJhdGVDYXB0aW9uKCkge1xuICAgIHRoaXMuX3Byb2Nlc3NJbWFnZSgpO1xuICB9XG5cbiAgX3Byb2Nlc3NJbWFnZShpbWFnZVVSTCkge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbktleSA9IGNyZWRlbnRpYWxzLmF6dXJlLnN1YnNjcmlwdGlvbktleTtcbiAgICBjb25zdCB1cmlCYXNlID0gYGh0dHBzOi8vJHtjcmVkZW50aWFscy5henVyZS5yZWdpb259LmFwaS5jb2duaXRpdmUubWljcm9zb2Z0LmNvbS92aXNpb24vdjEuMC9hbmFseXplYDtcblxuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIFwidmlzdWFsRmVhdHVyZXNcIjogXCJDYXRlZ29yaWVzLERlc2NyaXB0aW9uLENvbG9yXCIsXG4gICAgICBcImRldGFpbHNcIjogXCJcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJlblwiXG4gICAgfTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiT2NwLUFwaW0tU3Vic2NyaXB0aW9uLUtleVwiOiBzdWJzY3JpcHRpb25LZXlcbiAgICB9KTtcblxuICAgIGNvbnN0IHVybCA9IGAke3VyaUJhc2V9PyR7cXVlcnlTdHJpbmcuc3RyaW5naWZ5KHBhcmFtcyl9YDtcblxuICAgIGZldGNoKHVybCwge1xuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogYHtcInVybFwiOiBcIiR7dGhpcy5pbWFnZVVybH1cIn1gXG4gICAgICAvLyBtb2RlOiAnbm8tY29ycydcbiAgICB9KS50aGVuKGRhdGEgPT4ge1xuICAgICAgcmV0dXJuIGRhdGEuanNvbigpO1xuICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgdGhpcy5fY2FwdGlvbkdlbmVyYXRlZChyZXNwb25zZSk7XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2NhcHRpb25FcnJvcicsIHt9KSk7XG4gICAgfSk7XG4gIH1cblxuICBfY2FwdGlvbkdlbmVyYXRlZChkYXRhKSB7XG4gICAgY29uc3QgY2FwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb24uY2FwdGlvbnNbMF0udGV4dDtcbiAgICBjb25zdCBrZXl3b3JkcyA9IGNhcHRpb24uc3BsaXQoXCIgXCIpO1xuXG4gICAgY29uc29sZS5sb2coa2V5d29yZHMpO1xuXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY2FwdGlvbkdlbmVyYXRlZCcsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBjYXB0aW9uLFxuICAgICAgICBrZXl3b3Jkc1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxufVxuXG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKEVtb2ppQ2FwdGlvbkdlbmVyYXRvci5pcywgRW1vamlDYXB0aW9uR2VuZXJhdG9yKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2Vtb2ppLWNhcHRpb24tZ2VuZXJhdG9yLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///119\n");

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar strictUriEncode = __webpack_require__(121);\nvar objectAssign = __webpack_require__(122);\nvar decodeComponent = __webpack_require__(123);\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [encode(key, opts), '[', index, ']'].join('') : [encode(key, opts), '[', encode(index, opts), ']=', encode(value, opts)].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [encode(key, opts), '[]=', encode(value, opts)].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [encode(key, opts), '=', encode(value, opts)].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({ arrayFormat: 'none' }, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///120\n");

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzPzJiNTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHR9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3RyaWN0LXVyaS1lbmNvZGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///121\n");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanM/MDMyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///122\n");

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzPzQzMGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///123\n");

/***/ }),
/* 124 */
/***/ (function(module, exports) {

eval("module.exports = {\n  azure: {\n    region: \"westeurope\",\n    subscriptionKey: \"549fc771e42945c88038c6404ff10040\"\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY3JlZGVudGlhbHMuanM/MWNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXp1cmU6IHtcbiAgICByZWdpb246IFwid2VzdGV1cm9wZVwiLFxuICAgIHN1YnNjcmlwdGlvbktleTogXCI1NDlmYzc3MWU0Mjk0NWM4ODAzOGM2NDA0ZmYxMDA0MFwiXG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jcmVkZW50aWFscy5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///124\n");

/***/ })
/******/ ]);